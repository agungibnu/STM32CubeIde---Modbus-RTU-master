
Modbus_RTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a304  0800a304  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a304  0800a304  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a304  0800a304  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a304  0800a304  0001a304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a308  0800a308  0001a308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a30c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a4  200001e0  0800a4ec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001484  0800a4ec  00021484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012132  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d0  00000000  00000000  0003233b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00035610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00036450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab23  00000000  00000000  00037128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128fb  00000000  00000000  00051c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b20  00000000  00000000  00064546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f0  00000000  00000000  000ed0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009f7c 	.word	0x08009f7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08009f7c 	.word	0x08009f7c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Serial Wire Debug SWO Pri
int _write(int file, char *ptr, int len){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
     int DataIdx;
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001b4:	2300      	movs	r3, #0
 80001b6:	617b      	str	r3, [r7, #20]
 80001b8:	e009      	b.n	80001ce <_write+0x26>
         ITM_SendChar((*ptr++));
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	1c5a      	adds	r2, r3, #1
 80001be:	60ba      	str	r2, [r7, #8]
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f7ff ffca 	bl	800015c <ITM_SendChar>
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001c8:	697b      	ldr	r3, [r7, #20]
 80001ca:	3301      	adds	r3, #1
 80001cc:	617b      	str	r3, [r7, #20]
 80001ce:	697a      	ldr	r2, [r7, #20]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	dbf1      	blt.n	80001ba <_write+0x12>
     }
     return len;
 80001d6:	687b      	ldr	r3, [r7, #4]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3718      	adds	r7, #24
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}

080001e0 <send_debug_CDC>:

void send_debug_CDC(char *data){
 80001e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001e4:	b087      	sub	sp, #28
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
 80001ea:	466b      	mov	r3, sp
 80001ec:	461e      	mov	r6, r3

	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f4:	482e      	ldr	r0, [pc, #184]	; (80002b0 <send_debug_CDC+0xd0>)
 80001f6:	f001 f865 	bl	80012c4 <HAL_GPIO_WritePin>
	int dataLen = strlen(data);
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f7ff ffa6 	bl	800014c <strlen>
 8000200:	4603      	mov	r3, r0
 8000202:	617b      	str	r3, [r7, #20]
	char dataCDC[dataLen + 1];
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	1c59      	adds	r1, r3, #1
 8000208:	1e4b      	subs	r3, r1, #1
 800020a:	613b      	str	r3, [r7, #16]
 800020c:	460a      	mov	r2, r1
 800020e:	2300      	movs	r3, #0
 8000210:	4690      	mov	r8, r2
 8000212:	4699      	mov	r9, r3
 8000214:	f04f 0200 	mov.w	r2, #0
 8000218:	f04f 0300 	mov.w	r3, #0
 800021c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000220:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000224:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000228:	460a      	mov	r2, r1
 800022a:	2300      	movs	r3, #0
 800022c:	4614      	mov	r4, r2
 800022e:	461d      	mov	r5, r3
 8000230:	f04f 0200 	mov.w	r2, #0
 8000234:	f04f 0300 	mov.w	r3, #0
 8000238:	00eb      	lsls	r3, r5, #3
 800023a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800023e:	00e2      	lsls	r2, r4, #3
 8000240:	460b      	mov	r3, r1
 8000242:	3307      	adds	r3, #7
 8000244:	08db      	lsrs	r3, r3, #3
 8000246:	00db      	lsls	r3, r3, #3
 8000248:	ebad 0d03 	sub.w	sp, sp, r3
 800024c:	466b      	mov	r3, sp
 800024e:	3300      	adds	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
	strcpy(dataCDC, data);
 8000252:	6879      	ldr	r1, [r7, #4]
 8000254:	68f8      	ldr	r0, [r7, #12]
 8000256:	f008 fe3d 	bl	8008ed4 <strcpy>
	dataCDC[dataLen] = '\n';
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	4413      	add	r3, r2
 8000260:	220a      	movs	r2, #10
 8000262:	701a      	strb	r2, [r3, #0]
	dataCDC[dataLen + 1] = '\0';
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	3301      	adds	r3, #1
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	2100      	movs	r1, #0
 800026c:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS((uint8_t*)dataCDC, strlen(dataCDC));
 800026e:	68f8      	ldr	r0, [r7, #12]
 8000270:	f7ff ff6c 	bl	800014c <strlen>
 8000274:	4603      	mov	r3, r0
 8000276:	b29b      	uxth	r3, r3
 8000278:	4619      	mov	r1, r3
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f008 f8e6 	bl	800844c <CDC_Transmit_FS>
	printf(dataCDC);
 8000280:	68f8      	ldr	r0, [r7, #12]
 8000282:	f008 fddf 	bl	8008e44 <iprintf>
	HAL_Delay(5);
 8000286:	2005      	movs	r0, #5
 8000288:	f000 fcb4 	bl	8000bf4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 1);
 800028c:	2201      	movs	r2, #1
 800028e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000292:	4807      	ldr	r0, [pc, #28]	; (80002b0 <send_debug_CDC+0xd0>)
 8000294:	f001 f816 	bl	80012c4 <HAL_GPIO_WritePin>
	free(text);
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <send_debug_CDC+0xd4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4618      	mov	r0, r3
 800029e:	f008 fce5 	bl	8008c6c <free>
 80002a2:	46b5      	mov	sp, r6
}
 80002a4:	bf00      	nop
 80002a6:	371c      	adds	r7, #28
 80002a8:	46bd      	mov	sp, r7
 80002aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80002ae:	bf00      	nop
 80002b0:	40011000 	.word	0x40011000
 80002b4:	200002c0 	.word	0x200002c0

080002b8 <modbus>:

void modbus(uint8_t slaveAdd, uint8_t funcCode, uint8_t startAddr1, uint8_t startAddr2, uint8_t qty1, uint8_t qty2){
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b08b      	sub	sp, #44	; 0x2c
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4604      	mov	r4, r0
 80002c0:	4608      	mov	r0, r1
 80002c2:	4611      	mov	r1, r2
 80002c4:	461a      	mov	r2, r3
 80002c6:	4623      	mov	r3, r4
 80002c8:	71fb      	strb	r3, [r7, #7]
 80002ca:	4603      	mov	r3, r0
 80002cc:	71bb      	strb	r3, [r7, #6]
 80002ce:	460b      	mov	r3, r1
 80002d0:	717b      	strb	r3, [r7, #5]
 80002d2:	4613      	mov	r3, r2
 80002d4:	713b      	strb	r3, [r7, #4]
	uint8_t* dataFrame[] = {&slaveAdd, &funcCode, &startAddr1, &startAddr2, &qty1, &qty2};
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	1dbb      	adds	r3, r7, #6
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	1d7b      	adds	r3, r7, #5
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002ea:	61bb      	str	r3, [r7, #24]
 80002ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f0:	61fb      	str	r3, [r7, #28]
	memset(Rxdata, 0, sizeof(Rxdata));
 80002f2:	2226      	movs	r2, #38	; 0x26
 80002f4:	2100      	movs	r1, #0
 80002f6:	481a      	ldr	r0, [pc, #104]	; (8000360 <modbus+0xa8>)
 80002f8:	f008 fcc0 	bl	8008c7c <memset>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, Rxdata, sizeof(Rxdata));
 80002fc:	2226      	movs	r2, #38	; 0x26
 80002fe:	4918      	ldr	r1, [pc, #96]	; (8000360 <modbus+0xa8>)
 8000300:	4818      	ldr	r0, [pc, #96]	; (8000364 <modbus+0xac>)
 8000302:	f003 fafe 	bl	8003902 <HAL_UARTEx_ReceiveToIdle_IT>

	for (int x = 0; x < 6; x++){
 8000306:	2300      	movs	r3, #0
 8000308:	627b      	str	r3, [r7, #36]	; 0x24
 800030a:	e00e      	b.n	800032a <modbus+0x72>
		Txdata[x] = *dataFrame[x];
 800030c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	3328      	adds	r3, #40	; 0x28
 8000312:	443b      	add	r3, r7
 8000314:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000318:	7819      	ldrb	r1, [r3, #0]
 800031a:	4a13      	ldr	r2, [pc, #76]	; (8000368 <modbus+0xb0>)
 800031c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800031e:	4413      	add	r3, r2
 8000320:	460a      	mov	r2, r1
 8000322:	701a      	strb	r2, [r3, #0]
	for (int x = 0; x < 6; x++){
 8000324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000326:	3301      	adds	r3, #1
 8000328:	627b      	str	r3, [r7, #36]	; 0x24
 800032a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800032c:	2b05      	cmp	r3, #5
 800032e:	dded      	ble.n	800030c <modbus+0x54>
	}

	uint16_t crc = crc16(Txdata, 6);
 8000330:	2106      	movs	r1, #6
 8000332:	480d      	ldr	r0, [pc, #52]	; (8000368 <modbus+0xb0>)
 8000334:	f000 fa0a 	bl	800074c <crc16>
 8000338:	4603      	mov	r3, r0
 800033a:	847b      	strh	r3, [r7, #34]	; 0x22
    Txdata[6] = crc & 0xFF;         // CRC Low
 800033c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800033e:	b2da      	uxtb	r2, r3
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <modbus+0xb0>)
 8000342:	719a      	strb	r2, [r3, #6]
    Txdata[7] = (crc >> 8) & 0xFF;  // CRC High
 8000344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000346:	0a1b      	lsrs	r3, r3, #8
 8000348:	b29b      	uxth	r3, r3
 800034a:	b2da      	uxtb	r2, r3
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <modbus+0xb0>)
 800034e:	71da      	strb	r2, [r3, #7]
    request_modbus(Txdata);
 8000350:	4805      	ldr	r0, [pc, #20]	; (8000368 <modbus+0xb0>)
 8000352:	f000 f80b 	bl	800036c <request_modbus>
}
 8000356:	bf00      	nop
 8000358:	372c      	adds	r7, #44	; 0x2c
 800035a:	46bd      	mov	sp, r7
 800035c:	bd90      	pop	{r4, r7, pc}
 800035e:	bf00      	nop
 8000360:	2000028c 	.word	0x2000028c
 8000364:	20000244 	.word	0x20000244
 8000368:	200002b4 	.word	0x200002b4

0800036c <request_modbus>:

void request_modbus(uint8_t *data){
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]

	send_debug_CDC("[Modbus Request : ");
 8000374:	483c      	ldr	r0, [pc, #240]	; (8000468 <request_modbus+0xfc>)
 8000376:	f7ff ff33 	bl	80001e0 <send_debug_CDC>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000380:	483a      	ldr	r0, [pc, #232]	; (800046c <request_modbus+0x100>)
 8000382:	f000 ff9f 	bl	80012c4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, data, 8, 1000);
 8000386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800038a:	2208      	movs	r2, #8
 800038c:	6879      	ldr	r1, [r7, #4]
 800038e:	4838      	ldr	r0, [pc, #224]	; (8000470 <request_modbus+0x104>)
 8000390:	f003 fa34 	bl	80037fc <HAL_UART_Transmit>

	int offset = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < sizeof(Txdata)/sizeof(Txdata[0]); i++){
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
 800039c:	e012      	b.n	80003c4 <request_modbus+0x58>
		offset+= sprintf(text+offset, "%02X", Txdata[i]);
 800039e:	4b35      	ldr	r3, [pc, #212]	; (8000474 <request_modbus+0x108>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	18d0      	adds	r0, r2, r3
 80003a6:	4a34      	ldr	r2, [pc, #208]	; (8000478 <request_modbus+0x10c>)
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	4413      	add	r3, r2
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	461a      	mov	r2, r3
 80003b0:	4932      	ldr	r1, [pc, #200]	; (800047c <request_modbus+0x110>)
 80003b2:	f008 fd6f 	bl	8008e94 <siprintf>
 80003b6:	4602      	mov	r2, r0
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	4413      	add	r3, r2
 80003bc:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < sizeof(Txdata)/sizeof(Txdata[0]); i++){
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	3301      	adds	r3, #1
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	2b07      	cmp	r3, #7
 80003c8:	d9e9      	bls.n	800039e <request_modbus+0x32>
	}

	send_debug_CDC(text);
 80003ca:	4b2a      	ldr	r3, [pc, #168]	; (8000474 <request_modbus+0x108>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff06 	bl	80001e0 <send_debug_CDC>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003da:	4824      	ldr	r0, [pc, #144]	; (800046c <request_modbus+0x100>)
 80003dc:	f000 ff72 	bl	80012c4 <HAL_GPIO_WritePin>

	if (Rxdata[0] != 0){
 80003e0:	4b27      	ldr	r3, [pc, #156]	; (8000480 <request_modbus+0x114>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d029      	beq.n	800043c <request_modbus+0xd0>
		modbus_stat = 1;
 80003e8:	4b26      	ldr	r3, [pc, #152]	; (8000484 <request_modbus+0x118>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
		int offset1 = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	e012      	b.n	800041e <request_modbus+0xb2>
			offset1+= sprintf(text+offset1, "%02X", Rxdata[x]);
 80003f8:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <request_modbus+0x108>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	18d0      	adds	r0, r2, r3
 8000400:	4a1f      	ldr	r2, [pc, #124]	; (8000480 <request_modbus+0x114>)
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	4413      	add	r3, r2
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	461a      	mov	r2, r3
 800040a:	491c      	ldr	r1, [pc, #112]	; (800047c <request_modbus+0x110>)
 800040c:	f008 fd42 	bl	8008e94 <siprintf>
 8000410:	4602      	mov	r2, r0
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	4413      	add	r3, r2
 8000416:	60fb      	str	r3, [r7, #12]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	3301      	adds	r3, #1
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	2b25      	cmp	r3, #37	; 0x25
 8000422:	d9e9      	bls.n	80003f8 <request_modbus+0x8c>
		}
		send_debug_CDC("Modbus Response :");
 8000424:	4818      	ldr	r0, [pc, #96]	; (8000488 <request_modbus+0x11c>)
 8000426:	f7ff fedb 	bl	80001e0 <send_debug_CDC>
		send_debug_CDC(text);
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <request_modbus+0x108>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fed6 	bl	80001e0 <send_debug_CDC>
		HAL_Delay(5);
 8000434:	2005      	movs	r0, #5
 8000436:	f000 fbdd 	bl	8000bf4 <HAL_Delay>
		sprintf(text,"No Response from slave!!!");
		send_debug_CDC(text);
		HAL_Delay(5);
	}

}
 800043a:	e010      	b.n	800045e <request_modbus+0xf2>
		modbus_stat = 0;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <request_modbus+0x118>)
 800043e:	2200      	movs	r2, #0
 8000440:	701a      	strb	r2, [r3, #0]
		sprintf(text,"No Response from slave!!!");
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <request_modbus+0x108>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4911      	ldr	r1, [pc, #68]	; (800048c <request_modbus+0x120>)
 8000448:	4618      	mov	r0, r3
 800044a:	f008 fd23 	bl	8008e94 <siprintf>
		send_debug_CDC(text);
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <request_modbus+0x108>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff fec4 	bl	80001e0 <send_debug_CDC>
		HAL_Delay(5);
 8000458:	2005      	movs	r0, #5
 800045a:	f000 fbcb 	bl	8000bf4 <HAL_Delay>
}
 800045e:	bf00      	nop
 8000460:	3718      	adds	r7, #24
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	08009f94 	.word	0x08009f94
 800046c:	40010800 	.word	0x40010800
 8000470:	20000244 	.word	0x20000244
 8000474:	200002c0 	.word	0x200002c0
 8000478:	200002b4 	.word	0x200002b4
 800047c:	08009fa8 	.word	0x08009fa8
 8000480:	2000028c 	.word	0x2000028c
 8000484:	200002bc 	.word	0x200002bc
 8000488:	08009fb0 	.word	0x08009fb0
 800048c:	08009fc4 	.word	0x08009fc4

08000490 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	460b      	mov	r3, r1
 800049a:	807b      	strh	r3, [r7, #2]

}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fb3f 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f827 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 f8d5 	bl	8000664 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ba:	f007 ff09 	bl	80082d0 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80004be:	f000 f87b 	bl	80005b8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004c2:	f000 f8a3 	bl	800060c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_CDC("[MODBUS RTU PROGRAM]");
 80004c6:	480d      	ldr	r0, [pc, #52]	; (80004fc <main+0x54>)
 80004c8:	f7ff fe8a 	bl	80001e0 <send_debug_CDC>
  text = malloc(512);
 80004cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004d0:	f008 fbc4 	bl	8008c5c <malloc>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461a      	mov	r2, r3
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <main+0x58>)
 80004da:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  modbus(0x01, 0x03, 0x00, 0x07, 0x00, 0x02);
 80004dc:	2302      	movs	r3, #2
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2300      	movs	r3, #0
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2307      	movs	r3, #7
 80004e6:	2200      	movs	r2, #0
 80004e8:	2103      	movs	r1, #3
 80004ea:	2001      	movs	r0, #1
 80004ec:	f7ff fee4 	bl	80002b8 <modbus>
	  HAL_Delay(1000);
 80004f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f4:	f000 fb7e 	bl	8000bf4 <HAL_Delay>
	  modbus(0x01, 0x03, 0x00, 0x07, 0x00, 0x02);
 80004f8:	e7f0      	b.n	80004dc <main+0x34>
 80004fa:	bf00      	nop
 80004fc:	08009fe0 	.word	0x08009fe0
 8000500:	200002c0 	.word	0x200002c0

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f008 fbb2 	bl	8008c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	2301      	movs	r3, #1
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000550:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000554:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fc38 	bl	8002dd0 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000566:	f000 f8eb 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2302      	movs	r3, #2
 8000570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2102      	movs	r1, #2
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fea4 	bl	80032d4 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000592:	f000 f8d5 	bl	8000740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000596:	2310      	movs	r3, #16
 8000598:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 f825 	bl	80035f0 <HAL_RCCEx_PeriphCLKConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005ac:	f000 f8c8 	bl	8000740 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	; 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <MX_USART1_UART_Init+0x50>)
 80005c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005de:	220c      	movs	r2, #12
 80005e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005f0:	f003 f8b4 	bl	800375c <HAL_UART_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005fa:	f000 f8a1 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200001fc 	.word	0x200001fc
 8000608:	40013800 	.word	0x40013800

0800060c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_USART2_UART_Init+0x50>)
 8000612:	4a13      	ldr	r2, [pc, #76]	; (8000660 <MX_USART2_UART_Init+0x54>)
 8000614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2400;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_USART2_UART_Init+0x50>)
 8000618:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800061c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_USART2_UART_Init+0x50>)
 8000620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000624:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_USART2_UART_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_USART2_UART_Init+0x50>)
 800062e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_USART2_UART_Init+0x50>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_USART2_UART_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_USART2_UART_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_USART2_UART_Init+0x50>)
 8000648:	f003 f888 	bl	800375c <HAL_UART_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000652:	f000 f875 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000244 	.word	0x20000244
 8000660:	40004400 	.word	0x40004400

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <MX_GPIO_Init+0xd0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a2d      	ldr	r2, [pc, #180]	; (8000734 <MX_GPIO_Init+0xd0>)
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <MX_GPIO_Init+0xd0>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0310 	and.w	r3, r3, #16
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <MX_GPIO_Init+0xd0>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <MX_GPIO_Init+0xd0>)
 8000696:	f043 0320 	orr.w	r3, r3, #32
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <MX_GPIO_Init+0xd0>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0320 	and.w	r3, r3, #32
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_GPIO_Init+0xd0>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <MX_GPIO_Init+0xd0>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_GPIO_Init+0xd0>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_GPIO_Init+0xd0>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <MX_GPIO_Init+0xd0>)
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_GPIO_Init+0xd0>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006de:	4816      	ldr	r0, [pc, #88]	; (8000738 <MX_GPIO_Init+0xd4>)
 80006e0:	f000 fdf0 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ea:	4814      	ldr	r0, [pc, #80]	; (800073c <MX_GPIO_Init+0xd8>)
 80006ec:	f000 fdea 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80006f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2302      	movs	r3, #2
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4619      	mov	r1, r3
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <MX_GPIO_Init+0xd4>)
 800070a:	f000 fc57 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 800070e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4619      	mov	r1, r3
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_GPIO_Init+0xd8>)
 8000728:	f000 fc48 	bl	8000fbc <HAL_GPIO_Init>

}
 800072c:	bf00      	nop
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40021000 	.word	0x40021000
 8000738:	40011000 	.word	0x40011000
 800073c:	40010800 	.word	0x40010800

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000758:	23ff      	movs	r3, #255	; 0xff
 800075a:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 800075c:	23ff      	movs	r3, #255	; 0xff
 800075e:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000760:	e013      	b.n	800078a <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	4053      	eors	r3, r2
 800076e:	b2db      	uxtb	r3, r3
 8000770:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <crc16+0x64>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	4413      	add	r3, r2
 8000778:	781a      	ldrb	r2, [r3, #0]
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	4053      	eors	r3, r2
 800077e:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000780:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <crc16+0x68>)
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 800078a:	887b      	ldrh	r3, [r7, #2]
 800078c:	1e5a      	subs	r2, r3, #1
 800078e:	807a      	strh	r2, [r7, #2]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1e6      	bne.n	8000762 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21a      	sxth	r2, r3
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29b      	uxth	r3, r3
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	0800a040 	.word	0x0800a040
 80007b4:	0800a140 	.word	0x0800a140

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_MspInit+0x5c>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a14      	ldr	r2, [pc, #80]	; (8000814 <HAL_MspInit+0x5c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_MspInit+0x5c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <HAL_MspInit+0x5c>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <HAL_MspInit+0x5c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_MspInit+0x5c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_MspInit+0x60>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_MspInit+0x60>)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40021000 	.word	0x40021000
 8000818:	40010000 	.word	0x40010000

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a3f      	ldr	r2, [pc, #252]	; (8000934 <HAL_UART_MspInit+0x118>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d13a      	bne.n	80008b2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800083c:	4b3e      	ldr	r3, [pc, #248]	; (8000938 <HAL_UART_MspInit+0x11c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a3d      	ldr	r2, [pc, #244]	; (8000938 <HAL_UART_MspInit+0x11c>)
 8000842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b3b      	ldr	r3, [pc, #236]	; (8000938 <HAL_UART_MspInit+0x11c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b38      	ldr	r3, [pc, #224]	; (8000938 <HAL_UART_MspInit+0x11c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a37      	ldr	r2, [pc, #220]	; (8000938 <HAL_UART_MspInit+0x11c>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b35      	ldr	r3, [pc, #212]	; (8000938 <HAL_UART_MspInit+0x11c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800086c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0318 	add.w	r3, r7, #24
 800087e:	4619      	mov	r1, r3
 8000880:	482e      	ldr	r0, [pc, #184]	; (800093c <HAL_UART_MspInit+0x120>)
 8000882:	f000 fb9b 	bl	8000fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	4619      	mov	r1, r3
 800089a:	4828      	ldr	r0, [pc, #160]	; (800093c <HAL_UART_MspInit+0x120>)
 800089c:	f000 fb8e 	bl	8000fbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2025      	movs	r0, #37	; 0x25
 80008a6:	f000 faa0 	bl	8000dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008aa:	2025      	movs	r0, #37	; 0x25
 80008ac:	f000 fab9 	bl	8000e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b0:	e03c      	b.n	800092c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a22      	ldr	r2, [pc, #136]	; (8000940 <HAL_UART_MspInit+0x124>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d137      	bne.n	800092c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008bc:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <HAL_UART_MspInit+0x11c>)
 80008be:	69db      	ldr	r3, [r3, #28]
 80008c0:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <HAL_UART_MspInit+0x11c>)
 80008c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c6:	61d3      	str	r3, [r2, #28]
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <HAL_UART_MspInit+0x11c>)
 80008ca:	69db      	ldr	r3, [r3, #28]
 80008cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <HAL_UART_MspInit+0x11c>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a17      	ldr	r2, [pc, #92]	; (8000938 <HAL_UART_MspInit+0x11c>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_UART_MspInit+0x11c>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ec:	2304      	movs	r3, #4
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	4619      	mov	r1, r3
 80008fe:	480f      	ldr	r0, [pc, #60]	; (800093c <HAL_UART_MspInit+0x120>)
 8000900:	f000 fb5c 	bl	8000fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000904:	2308      	movs	r3, #8
 8000906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0318 	add.w	r3, r7, #24
 8000914:	4619      	mov	r1, r3
 8000916:	4809      	ldr	r0, [pc, #36]	; (800093c <HAL_UART_MspInit+0x120>)
 8000918:	f000 fb50 	bl	8000fbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	2026      	movs	r0, #38	; 0x26
 8000922:	f000 fa62 	bl	8000dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000926:	2026      	movs	r0, #38	; 0x26
 8000928:	f000 fa7b 	bl	8000e22 <HAL_NVIC_EnableIRQ>
}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40013800 	.word	0x40013800
 8000938:	40021000 	.word	0x40021000
 800093c:	40010800 	.word	0x40010800
 8000940:	40004400 	.word	0x40004400

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr

0800096e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr

08000986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098a:	f000 f917 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800099a:	f000 fdd0 	bl	800153e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000f64 	.word	0x20000f64

080009a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <USART1_IRQHandler+0x10>)
 80009ae:	f003 f805 	bl	80039bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001fc 	.word	0x200001fc

080009bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <USART2_IRQHandler+0x10>)
 80009c2:	f002 fffb 	bl	80039bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000244 	.word	0x20000244

080009d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	e00a      	b.n	80009f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009e2:	f3af 8000 	nop.w
 80009e6:	4601      	mov	r1, r0
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	60ba      	str	r2, [r7, #8]
 80009ee:	b2ca      	uxtb	r2, r1
 80009f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3301      	adds	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	dbf0      	blt.n	80009e2 <_read+0x12>
	}

return len;
 8000a00:	687b      	ldr	r3, [r7, #4]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
	return -1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a30:	605a      	str	r2, [r3, #4]
	return 0;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <_isatty>:

int _isatty(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	return 1;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b085      	sub	sp, #20
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
	return 0;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
	...

08000a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a74:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <_sbrk+0x5c>)
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <_sbrk+0x60>)
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <_sbrk+0x64>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_sbrk+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d207      	bcs.n	8000aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a9c:	f008 f8b4 	bl	8008c08 <__errno>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	e009      	b.n	8000ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <_sbrk+0x64>)
 8000abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20005000 	.word	0x20005000
 8000acc:	00000400 	.word	0x00000400
 8000ad0:	200002c4 	.word	0x200002c4
 8000ad4:	20001488 	.word	0x20001488

08000ad8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae4:	f7ff fff8 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae8:	480b      	ldr	r0, [pc, #44]	; (8000b18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aea:	490c      	ldr	r1, [pc, #48]	; (8000b1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000aec:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b00:	4c09      	ldr	r4, [pc, #36]	; (8000b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f008 f881 	bl	8008c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b12:	f7ff fcc9 	bl	80004a8 <main>
  bx lr
 8000b16:	4770      	bx	lr
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000b20:	0800a30c 	.word	0x0800a30c
  ldr r2, =_sbss
 8000b24:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000b28:	20001484 	.word	0x20001484

08000b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_2_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_Init+0x28>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_Init+0x28>)
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 f947 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b46:	200f      	movs	r0, #15
 8000b48:	f000 f808 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4c:	f7ff fe34 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40022000 	.word	0x40022000

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x54>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_InitTick+0x58>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f95f 	bl	8000e3e <HAL_SYSTICK_Config>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00e      	b.n	8000ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d80a      	bhi.n	8000ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f000 f927 	bl	8000dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_InitTick+0x5c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000004 	.word	0x20000004

08000bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_IncTick+0x1c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a03      	ldr	r2, [pc, #12]	; (8000bdc <HAL_IncTick+0x20>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	200002c8 	.word	0x200002c8

08000be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <HAL_GetTick+0x10>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	200002c8 	.word	0x200002c8

08000bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	f7ff fff0 	bl	8000be0 <HAL_GetTick>
 8000c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0c:	d005      	beq.n	8000c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_Delay+0x44>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4413      	add	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c1a:	bf00      	nop
 8000c1c:	f7ff ffe0 	bl	8000be0 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d8f7      	bhi.n	8000c1c <HAL_Delay+0x28>
  {
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008

08000c3c <__NVIC_SetPriorityGrouping>:
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_GetPriorityGrouping>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_EnableIRQ>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	db0b      	blt.n	8000cca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f003 021f 	and.w	r2, r3, #31
 8000cb8:	4906      	ldr	r1, [pc, #24]	; (8000cd4 <__NVIC_EnableIRQ+0x34>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	095b      	lsrs	r3, r3, #5
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Config>:
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f7ff ff90 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff2d 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff42 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff90 	bl	8000d2c <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5f 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff35 	bl	8000ca0 <__NVIC_EnableIRQ>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffa2 	bl	8000d90 <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d008      	beq.n	8000e80 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2204      	movs	r2, #4
 8000e72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e020      	b.n	8000ec2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 020e 	bic.w	r2, r2, #14
 8000e8e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0201 	bic.w	r2, r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d005      	beq.n	8000ef0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	e051      	b.n	8000f94 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 020e 	bic.w	r2, r2, #14
 8000efe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0201 	bic.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <HAL_DMA_Abort_IT+0xd4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d029      	beq.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <HAL_DMA_Abort_IT+0xd8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d022      	beq.n	8000f6a <HAL_DMA_Abort_IT+0x9e>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <HAL_DMA_Abort_IT+0xdc>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d01a      	beq.n	8000f64 <HAL_DMA_Abort_IT+0x98>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a1e      	ldr	r2, [pc, #120]	; (8000fac <HAL_DMA_Abort_IT+0xe0>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d012      	beq.n	8000f5e <HAL_DMA_Abort_IT+0x92>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <HAL_DMA_Abort_IT+0xe4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d00a      	beq.n	8000f58 <HAL_DMA_Abort_IT+0x8c>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <HAL_DMA_Abort_IT+0xe8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d102      	bne.n	8000f52 <HAL_DMA_Abort_IT+0x86>
 8000f4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f50:	e00e      	b.n	8000f70 <HAL_DMA_Abort_IT+0xa4>
 8000f52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f56:	e00b      	b.n	8000f70 <HAL_DMA_Abort_IT+0xa4>
 8000f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5c:	e008      	b.n	8000f70 <HAL_DMA_Abort_IT+0xa4>
 8000f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f62:	e005      	b.n	8000f70 <HAL_DMA_Abort_IT+0xa4>
 8000f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f68:	e002      	b.n	8000f70 <HAL_DMA_Abort_IT+0xa4>
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	e000      	b.n	8000f70 <HAL_DMA_Abort_IT+0xa4>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_DMA_Abort_IT+0xec>)
 8000f72:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	4798      	blx	r3
    } 
  }
  return status;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40020008 	.word	0x40020008
 8000fa4:	4002001c 	.word	0x4002001c
 8000fa8:	40020030 	.word	0x40020030
 8000fac:	40020044 	.word	0x40020044
 8000fb0:	40020058 	.word	0x40020058
 8000fb4:	4002006c 	.word	0x4002006c
 8000fb8:	40020000 	.word	0x40020000

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b08b      	sub	sp, #44	; 0x2c
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e169      	b.n	80012a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	69fa      	ldr	r2, [r7, #28]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 8158 	bne.w	800129e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4a9a      	ldr	r2, [pc, #616]	; (800125c <HAL_GPIO_Init+0x2a0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d05e      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 8000ff8:	4a98      	ldr	r2, [pc, #608]	; (800125c <HAL_GPIO_Init+0x2a0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d875      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 8000ffe:	4a98      	ldr	r2, [pc, #608]	; (8001260 <HAL_GPIO_Init+0x2a4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d058      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 8001004:	4a96      	ldr	r2, [pc, #600]	; (8001260 <HAL_GPIO_Init+0x2a4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d86f      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 800100a:	4a96      	ldr	r2, [pc, #600]	; (8001264 <HAL_GPIO_Init+0x2a8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d052      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 8001010:	4a94      	ldr	r2, [pc, #592]	; (8001264 <HAL_GPIO_Init+0x2a8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d869      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 8001016:	4a94      	ldr	r2, [pc, #592]	; (8001268 <HAL_GPIO_Init+0x2ac>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d04c      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 800101c:	4a92      	ldr	r2, [pc, #584]	; (8001268 <HAL_GPIO_Init+0x2ac>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d863      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 8001022:	4a92      	ldr	r2, [pc, #584]	; (800126c <HAL_GPIO_Init+0x2b0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d046      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 8001028:	4a90      	ldr	r2, [pc, #576]	; (800126c <HAL_GPIO_Init+0x2b0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d85d      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 800102e:	2b12      	cmp	r3, #18
 8001030:	d82a      	bhi.n	8001088 <HAL_GPIO_Init+0xcc>
 8001032:	2b12      	cmp	r3, #18
 8001034:	d859      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 8001036:	a201      	add	r2, pc, #4	; (adr r2, 800103c <HAL_GPIO_Init+0x80>)
 8001038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103c:	080010b7 	.word	0x080010b7
 8001040:	08001091 	.word	0x08001091
 8001044:	080010a3 	.word	0x080010a3
 8001048:	080010e5 	.word	0x080010e5
 800104c:	080010eb 	.word	0x080010eb
 8001050:	080010eb 	.word	0x080010eb
 8001054:	080010eb 	.word	0x080010eb
 8001058:	080010eb 	.word	0x080010eb
 800105c:	080010eb 	.word	0x080010eb
 8001060:	080010eb 	.word	0x080010eb
 8001064:	080010eb 	.word	0x080010eb
 8001068:	080010eb 	.word	0x080010eb
 800106c:	080010eb 	.word	0x080010eb
 8001070:	080010eb 	.word	0x080010eb
 8001074:	080010eb 	.word	0x080010eb
 8001078:	080010eb 	.word	0x080010eb
 800107c:	080010eb 	.word	0x080010eb
 8001080:	08001099 	.word	0x08001099
 8001084:	080010ad 	.word	0x080010ad
 8001088:	4a79      	ldr	r2, [pc, #484]	; (8001270 <HAL_GPIO_Init+0x2b4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d013      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800108e:	e02c      	b.n	80010ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e029      	b.n	80010ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	3304      	adds	r3, #4
 800109e:	623b      	str	r3, [r7, #32]
          break;
 80010a0:	e024      	b.n	80010ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	3308      	adds	r3, #8
 80010a8:	623b      	str	r3, [r7, #32]
          break;
 80010aa:	e01f      	b.n	80010ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	330c      	adds	r3, #12
 80010b2:	623b      	str	r3, [r7, #32]
          break;
 80010b4:	e01a      	b.n	80010ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010be:	2304      	movs	r3, #4
 80010c0:	623b      	str	r3, [r7, #32]
          break;
 80010c2:	e013      	b.n	80010ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d105      	bne.n	80010d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010cc:	2308      	movs	r3, #8
 80010ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	611a      	str	r2, [r3, #16]
          break;
 80010d6:	e009      	b.n	80010ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d8:	2308      	movs	r3, #8
 80010da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	615a      	str	r2, [r3, #20]
          break;
 80010e2:	e003      	b.n	80010ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
          break;
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x130>
          break;
 80010ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2bff      	cmp	r3, #255	; 0xff
 80010f0:	d801      	bhi.n	80010f6 <HAL_GPIO_Init+0x13a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	e001      	b.n	80010fa <HAL_GPIO_Init+0x13e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3304      	adds	r3, #4
 80010fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	2bff      	cmp	r3, #255	; 0xff
 8001100:	d802      	bhi.n	8001108 <HAL_GPIO_Init+0x14c>
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	e002      	b.n	800110e <HAL_GPIO_Init+0x152>
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	3b08      	subs	r3, #8
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	210f      	movs	r1, #15
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	401a      	ands	r2, r3
 8001120:	6a39      	ldr	r1, [r7, #32]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	431a      	orrs	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 80b1 	beq.w	800129e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800113c:	4b4d      	ldr	r3, [pc, #308]	; (8001274 <HAL_GPIO_Init+0x2b8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <HAL_GPIO_Init+0x2b8>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <HAL_GPIO_Init+0x2b8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001154:	4a48      	ldr	r2, [pc, #288]	; (8001278 <HAL_GPIO_Init+0x2bc>)
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001160:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a40      	ldr	r2, [pc, #256]	; (800127c <HAL_GPIO_Init+0x2c0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d013      	beq.n	80011a8 <HAL_GPIO_Init+0x1ec>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a3f      	ldr	r2, [pc, #252]	; (8001280 <HAL_GPIO_Init+0x2c4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d00d      	beq.n	80011a4 <HAL_GPIO_Init+0x1e8>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a3e      	ldr	r2, [pc, #248]	; (8001284 <HAL_GPIO_Init+0x2c8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d007      	beq.n	80011a0 <HAL_GPIO_Init+0x1e4>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a3d      	ldr	r2, [pc, #244]	; (8001288 <HAL_GPIO_Init+0x2cc>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d101      	bne.n	800119c <HAL_GPIO_Init+0x1e0>
 8001198:	2303      	movs	r3, #3
 800119a:	e006      	b.n	80011aa <HAL_GPIO_Init+0x1ee>
 800119c:	2304      	movs	r3, #4
 800119e:	e004      	b.n	80011aa <HAL_GPIO_Init+0x1ee>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e002      	b.n	80011aa <HAL_GPIO_Init+0x1ee>
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <HAL_GPIO_Init+0x1ee>
 80011a8:	2300      	movs	r3, #0
 80011aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ac:	f002 0203 	and.w	r2, r2, #3
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	4093      	lsls	r3, r2
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011ba:	492f      	ldr	r1, [pc, #188]	; (8001278 <HAL_GPIO_Init+0x2bc>)
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3302      	adds	r3, #2
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	492c      	ldr	r1, [pc, #176]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	608b      	str	r3, [r1, #8]
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	4928      	ldr	r1, [pc, #160]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	4922      	ldr	r1, [pc, #136]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	60cb      	str	r3, [r1, #12]
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_GPIO_Init+0x2d0>)
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	43db      	mvns	r3, r3
 8001212:	491e      	ldr	r1, [pc, #120]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001214:	4013      	ands	r3, r2
 8001216:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	4918      	ldr	r1, [pc, #96]	; (800128c <HAL_GPIO_Init+0x2d0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	604b      	str	r3, [r1, #4]
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	43db      	mvns	r3, r3
 800123a:	4914      	ldr	r1, [pc, #80]	; (800128c <HAL_GPIO_Init+0x2d0>)
 800123c:	4013      	ands	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d021      	beq.n	8001290 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <HAL_GPIO_Init+0x2d0>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	490e      	ldr	r1, [pc, #56]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
 8001258:	e021      	b.n	800129e <HAL_GPIO_Init+0x2e2>
 800125a:	bf00      	nop
 800125c:	10320000 	.word	0x10320000
 8001260:	10310000 	.word	0x10310000
 8001264:	10220000 	.word	0x10220000
 8001268:	10210000 	.word	0x10210000
 800126c:	10120000 	.word	0x10120000
 8001270:	10110000 	.word	0x10110000
 8001274:	40021000 	.word	0x40021000
 8001278:	40010000 	.word	0x40010000
 800127c:	40010800 	.word	0x40010800
 8001280:	40010c00 	.word	0x40010c00
 8001284:	40011000 	.word	0x40011000
 8001288:	40011400 	.word	0x40011400
 800128c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	43db      	mvns	r3, r3
 8001298:	4909      	ldr	r1, [pc, #36]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800129a:	4013      	ands	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	3301      	adds	r3, #1
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	fa22 f303 	lsr.w	r3, r2, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f47f ae8e 	bne.w	8000fd0 <HAL_GPIO_Init+0x14>
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	372c      	adds	r7, #44	; 0x2c
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40010400 	.word	0x40010400

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	611a      	str	r2, [r3, #16]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	b08b      	sub	sp, #44	; 0x2c
 80012f8:	af06      	add	r7, sp, #24
 80012fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e0f1      	b.n	80014ea <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d106      	bne.n	8001320 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f007 f9ca 	bl	80086b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f003 f8e9 	bl	8004504 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	687e      	ldr	r6, [r7, #4]
 800133a:	466d      	mov	r5, sp
 800133c:	f106 0410 	add.w	r4, r6, #16
 8001340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	602b      	str	r3, [r5, #0]
 8001348:	1d33      	adds	r3, r6, #4
 800134a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800134c:	6838      	ldr	r0, [r7, #0]
 800134e:	f003 f8b3 	bl	80044b8 <USB_CoreInit>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2202      	movs	r2, #2
 800135c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e0c2      	b.n	80014ea <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f003 f8e4 	bl	8004538 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	e040      	b.n	80013f8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	3301      	adds	r3, #1
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	440b      	add	r3, r1
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	3303      	adds	r3, #3
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	3338      	adds	r3, #56	; 0x38
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	440b      	add	r3, r1
 80013d8:	333c      	adds	r3, #60	; 0x3c
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	3340      	adds	r3, #64	; 0x40
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	3301      	adds	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d3b9      	bcc.n	8001376 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e044      	b.n	8001492 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	f203 1369 	addw	r3, r3, #361	; 0x169
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	440b      	add	r3, r1
 800142c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	3301      	adds	r3, #1
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	d3b5      	bcc.n	8001408 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	687e      	ldr	r6, [r7, #4]
 80014a4:	466d      	mov	r5, sp
 80014a6:	f106 0410 	add.w	r4, r6, #16
 80014aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	602b      	str	r3, [r5, #0]
 80014b2:	1d33      	adds	r3, r6, #4
 80014b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b6:	6838      	ldr	r0, [r7, #0]
 80014b8:	f003 f84a 	bl	8004550 <USB_DevInit>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2202      	movs	r2, #2
 80014c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00d      	b.n	80014ea <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 facb 	bl	8006a7e <USB_DevDisconnect>

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_PCD_Start+0x16>
 8001504:	2302      	movs	r3, #2
 8001506:	e016      	b.n	8001536 <HAL_PCD_Start+0x44>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f002 ffdf 	bl	80044d8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800151a:	2101      	movs	r1, #1
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f007 fb3c 	bl	8008b9a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f005 fa9f 	bl	8006a6a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b088      	sub	sp, #32
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f005 faa1 	bl	8006a92 <USB_ReadInterrupts>
 8001550:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 fb1b 	bl	8001b98 <PCD_EP_ISR_Handler>

    return;
 8001562:	e119      	b.n	8001798 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156a:	2b00      	cmp	r3, #0
 800156c:	d013      	beq.n	8001596 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001576:	b29a      	uxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001580:	b292      	uxth	r2, r2
 8001582:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f007 f90f 	bl	80087aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800158c:	2100      	movs	r1, #0
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f905 	bl	800179e <HAL_PCD_SetAddress>

    return;
 8001594:	e100      	b.n	8001798 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015b2:	b292      	uxth	r2, r2
 80015b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015b8:	e0ee      	b.n	8001798 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00c      	beq.n	80015de <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015d6:	b292      	uxth	r2, r2
 80015d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015dc:	e0dc      	b.n	8001798 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d027      	beq.n	8001638 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0204 	bic.w	r2, r2, #4
 80015fa:	b292      	uxth	r2, r2
 80015fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001608:	b29a      	uxth	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0208 	bic.w	r2, r2, #8
 8001612:	b292      	uxth	r2, r2
 8001614:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f007 f8ff 	bl	800881c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001630:	b292      	uxth	r2, r2
 8001632:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001636:	e0af      	b.n	8001798 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8083 	beq.w	800174a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001644:	2300      	movs	r3, #0
 8001646:	77fb      	strb	r3, [r7, #31]
 8001648:	e010      	b.n	800166c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	7ffb      	ldrb	r3, [r7, #31]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	441a      	add	r2, r3
 8001656:	7ffb      	ldrb	r3, [r7, #31]
 8001658:	8812      	ldrh	r2, [r2, #0]
 800165a:	b292      	uxth	r2, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	3320      	adds	r3, #32
 8001660:	443b      	add	r3, r7
 8001662:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001666:	7ffb      	ldrb	r3, [r7, #31]
 8001668:	3301      	adds	r3, #1
 800166a:	77fb      	strb	r3, [r7, #31]
 800166c:	7ffb      	ldrb	r3, [r7, #31]
 800166e:	2b07      	cmp	r3, #7
 8001670:	d9eb      	bls.n	800164a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	b292      	uxth	r2, r2
 8001686:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0201 	bic.w	r2, r2, #1
 800169c:	b292      	uxth	r2, r2
 800169e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80016a2:	bf00      	nop
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f6      	beq.n	80016a4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016be:	b29a      	uxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016c8:	b292      	uxth	r2, r2
 80016ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	77fb      	strb	r3, [r7, #31]
 80016d2:	e00f      	b.n	80016f4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80016d4:	7ffb      	ldrb	r3, [r7, #31]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	4611      	mov	r1, r2
 80016dc:	7ffa      	ldrb	r2, [r7, #31]
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	440a      	add	r2, r1
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	3320      	adds	r3, #32
 80016e6:	443b      	add	r3, r7
 80016e8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80016ec:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80016ee:	7ffb      	ldrb	r3, [r7, #31]
 80016f0:	3301      	adds	r3, #1
 80016f2:	77fb      	strb	r3, [r7, #31]
 80016f4:	7ffb      	ldrb	r3, [r7, #31]
 80016f6:	2b07      	cmp	r3, #7
 80016f8:	d9ec      	bls.n	80016d4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0208 	orr.w	r2, r2, #8
 800170c:	b292      	uxth	r2, r2
 800170e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800171a:	b29a      	uxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001724:	b292      	uxth	r2, r2
 8001726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001732:	b29a      	uxth	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0204 	orr.w	r2, r2, #4
 800173c:	b292      	uxth	r2, r2
 800173e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f007 f850 	bl	80087e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001748:	e026      	b.n	8001798 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00f      	beq.n	8001774 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001766:	b292      	uxth	r2, r2
 8001768:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f007 f80e 	bl	800878e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001772:	e011      	b.n	8001798 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00c      	beq.n	8001798 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001786:	b29a      	uxth	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001790:	b292      	uxth	r2, r2
 8001792:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001796:	bf00      	nop
  }
}
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_PCD_SetAddress+0x1a>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e013      	b.n	80017e0 <HAL_PCD_SetAddress+0x42>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f005 f937 	bl	8006a44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	4608      	mov	r0, r1
 80017f2:	4611      	mov	r1, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	4603      	mov	r3, r0
 80017f8:	70fb      	strb	r3, [r7, #3]
 80017fa:	460b      	mov	r3, r1
 80017fc:	803b      	strh	r3, [r7, #0]
 80017fe:	4613      	mov	r3, r2
 8001800:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800180a:	2b00      	cmp	r3, #0
 800180c:	da0e      	bge.n	800182c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	705a      	strb	r2, [r3, #1]
 800182a:	e00e      	b.n	800184a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	f003 0207 	and.w	r2, r3, #7
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	b2da      	uxtb	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001856:	883a      	ldrh	r2, [r7, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	78ba      	ldrb	r2, [r7, #2]
 8001860:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001862:	78bb      	ldrb	r3, [r7, #2]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d102      	bne.n	800186e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001874:	2b01      	cmp	r3, #1
 8001876:	d101      	bne.n	800187c <HAL_PCD_EP_Open+0x94>
 8001878:	2302      	movs	r3, #2
 800187a:	e00e      	b.n	800189a <HAL_PCD_EP_Open+0xb2>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68f9      	ldr	r1, [r7, #12]
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fe80 	bl	8004590 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001898:	7afb      	ldrb	r3, [r7, #11]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da0e      	bge.n	80018d4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2201      	movs	r2, #1
 80018d0:	705a      	strb	r2, [r3, #1]
 80018d2:	e00e      	b.n	80018f2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	f003 0207 	and.w	r2, r3, #7
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_PCD_EP_Close+0x6a>
 8001908:	2302      	movs	r3, #2
 800190a:	e00e      	b.n	800192a <HAL_PCD_EP_Close+0x88>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68f9      	ldr	r1, [r7, #12]
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f9f8 	bl	8004d10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	460b      	mov	r3, r1
 8001940:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001942:	7afb      	ldrb	r3, [r7, #11]
 8001944:	f003 0207 	and.w	r2, r3, #7
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2200      	movs	r2, #0
 800196a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2200      	movs	r2, #0
 8001970:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001972:	7afb      	ldrb	r3, [r7, #11]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	b2da      	uxtb	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6979      	ldr	r1, [r7, #20]
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fbaf 	bl	80050e8 <USB_EPStartXfer>

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	f003 0207 	and.w	r2, r3, #7
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	460b      	mov	r3, r1
 80019d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2200      	movs	r2, #0
 8001a06:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a0e:	7afb      	ldrb	r3, [r7, #11]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6979      	ldr	r1, [r7, #20]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 fb61 	bl	80050e8 <USB_EPStartXfer>

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	f003 0207 	and.w	r2, r3, #7
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d901      	bls.n	8001a4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e04c      	b.n	8001ae8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da0e      	bge.n	8001a74 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	705a      	strb	r2, [r3, #1]
 8001a72:	e00c      	b.n	8001a8e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_PCD_EP_SetStall+0x7e>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e01c      	b.n	8001ae8 <HAL_PCD_EP_SetStall+0xb8>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68f9      	ldr	r1, [r7, #12]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 fec4 	bl	800684a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d108      	bne.n	8001ade <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4610      	mov	r0, r2
 8001ada:	f004 ffe9 	bl	8006ab0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f003 020f 	and.w	r2, r3, #15
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d901      	bls.n	8001b0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e040      	b.n	8001b90 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	da0e      	bge.n	8001b34 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	705a      	strb	r2, [r3, #1]
 8001b32:	e00e      	b.n	8001b52 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	f003 0207 	and.w	r2, r3, #7
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_PCD_EP_ClrStall+0x82>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e00e      	b.n	8001b90 <HAL_PCD_EP_ClrStall+0xa0>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f004 feb2 	bl	80068ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b096      	sub	sp, #88	; 0x58
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ba0:	e3bf      	b.n	8002322 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001baa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001bae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001bbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f040 8179 	bne.w	8001eb8 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d152      	bne.n	8001c78 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	81fb      	strh	r3, [r7, #14]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	89fb      	ldrh	r3, [r7, #14]
 8001bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3328      	adds	r3, #40	; 0x28
 8001bfa:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3302      	adds	r3, #2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	441a      	add	r2, r3
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c36:	2100      	movs	r1, #0
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f006 fd8e 	bl	800875a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 836b 	beq.w	8002322 <PCD_EP_ISR_Handler+0x78a>
 8001c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 8366 	bne.w	8002322 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b292      	uxth	r2, r2
 8001c6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c76:	e354      	b.n	8002322 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c7e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d034      	beq.n	8001d00 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	3306      	adds	r3, #6
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cce:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f004 ff3b 	bl	8006b50 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	823b      	strh	r3, [r7, #16]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	8a3a      	ldrh	r2, [r7, #16]
 8001cf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cf4:	b292      	uxth	r2, r2
 8001cf6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f006 fd01 	bl	8008700 <HAL_PCD_SetupStageCallback>
 8001cfe:	e310      	b.n	8002322 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d00:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f280 830c 	bge.w	8002322 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d16:	4013      	ands	r3, r2
 8001d18:	83fb      	strh	r3, [r7, #30]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	8bfa      	ldrh	r2, [r7, #30]
 8001d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d24:	b292      	uxth	r2, r2
 8001d26:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3306      	adds	r3, #6
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d52:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d019      	beq.n	8001d90 <PCD_EP_ISR_Handler+0x1f8>
 8001d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d015      	beq.n	8001d90 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6a:	6959      	ldr	r1, [r3, #20]
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d72:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	f004 feeb 	bl	8006b50 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	441a      	add	r2, r3
 8001d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d86:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d88:	2100      	movs	r1, #0
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f006 fcca 	bl	8008724 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001d9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 82bd 	bne.w	8002322 <PCD_EP_ISR_Handler+0x78a>
 8001da8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001db0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001db4:	f000 82b5 	beq.w	8002322 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4413      	add	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	801a      	strh	r2, [r3, #0]
 8001de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	2b3e      	cmp	r3, #62	; 0x3e
 8001dee:	d91d      	bls.n	8001e2c <PCD_EP_ISR_Handler+0x294>
 8001df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	647b      	str	r3, [r7, #68]	; 0x44
 8001df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <PCD_EP_ISR_Handler+0x272>
 8001e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e06:	3b01      	subs	r3, #1
 8001e08:	647b      	str	r3, [r7, #68]	; 0x44
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	029b      	lsls	r3, r3, #10
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	801a      	strh	r2, [r3, #0]
 8001e2a:	e026      	b.n	8001e7a <PCD_EP_ISR_Handler+0x2e2>
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10a      	bne.n	8001e4a <PCD_EP_ISR_Handler+0x2b2>
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	801a      	strh	r2, [r3, #0]
 8001e48:	e017      	b.n	8001e7a <PCD_EP_ISR_Handler+0x2e2>
 8001e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	085b      	lsrs	r3, r3, #1
 8001e50:	647b      	str	r3, [r7, #68]	; 0x44
 8001e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <PCD_EP_ISR_Handler+0x2cc>
 8001e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e60:	3301      	adds	r3, #1
 8001e62:	647b      	str	r3, [r7, #68]	; 0x44
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4313      	orrs	r3, r2
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e8a:	827b      	strh	r3, [r7, #18]
 8001e8c:	8a7b      	ldrh	r3, [r7, #18]
 8001e8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e92:	827b      	strh	r3, [r7, #18]
 8001e94:	8a7b      	ldrh	r3, [r7, #18]
 8001e96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e9a:	827b      	strh	r3, [r7, #18]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	8a7b      	ldrh	r3, [r7, #18]
 8001ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	8013      	strh	r3, [r2, #0]
 8001eb6:	e234      	b.n	8002322 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ecc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f280 80fc 	bge.w	80020ce <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001eec:	4013      	ands	r3, r2
 8001eee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001f04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f08:	b292      	uxth	r2, r2
 8001f0a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f0c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f24:	7b1b      	ldrb	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d125      	bne.n	8001f76 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3306      	adds	r3, #6
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f52:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001f56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8092 	beq.w	8002084 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f66:	6959      	ldr	r1, [r3, #20]
 8001f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6a:	88da      	ldrh	r2, [r3, #6]
 8001f6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f70:	f004 fdee 	bl	8006b50 <USB_ReadPMA>
 8001f74:	e086      	b.n	8002084 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f78:	78db      	ldrb	r3, [r3, #3]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d10a      	bne.n	8001f94 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f82:	461a      	mov	r2, r3
 8001f84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f9d9 	bl	800233e <HAL_PCD_EP_DB_Receive>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001f92:	e077      	b.n	8002084 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fae:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	441a      	add	r2, r3
 8001fc0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d024      	beq.n	800203c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	3302      	adds	r3, #2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	4413      	add	r3, r2
 8002010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800201a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800201e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002022:	2b00      	cmp	r3, #0
 8002024:	d02e      	beq.n	8002084 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202c:	6959      	ldr	r1, [r3, #20]
 800202e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002030:	891a      	ldrh	r2, [r3, #8]
 8002032:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002036:	f004 fd8b 	bl	8006b50 <USB_ReadPMA>
 800203a:	e023      	b.n	8002084 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002044:	b29b      	uxth	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	3306      	adds	r3, #6
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4413      	add	r3, r2
 800205a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002064:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002068:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800206c:	2b00      	cmp	r3, #0
 800206e:	d009      	beq.n	8002084 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002076:	6959      	ldr	r1, [r3, #20]
 8002078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207a:	895a      	ldrh	r2, [r3, #10]
 800207c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002080:	f004 fd66 	bl	8006b50 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800208c:	441a      	add	r2, r3
 800208e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002090:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800209a:	441a      	add	r2, r3
 800209c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <PCD_EP_ISR_Handler+0x51c>
 80020a8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80020ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d206      	bcs.n	80020c2 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f006 fb32 	bl	8008724 <HAL_PCD_DataOutStageCallback>
 80020c0:	e005      	b.n	80020ce <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 f80d 	bl	80050e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8123 	beq.w	8002322 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80020dc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	441a      	add	r2, r3
 800211c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002128:	b29b      	uxth	r3, r3
 800212a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800212c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212e:	78db      	ldrb	r3, [r3, #3]
 8002130:	2b01      	cmp	r3, #1
 8002132:	f040 80a2 	bne.w	800227a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800213c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213e:	7b1b      	ldrb	r3, [r3, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8093 	beq.w	800226c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002146:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d046      	beq.n	80021e0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002154:	785b      	ldrb	r3, [r3, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d126      	bne.n	80021a8 <PCD_EP_ISR_Handler+0x610>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002168:	b29b      	uxth	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	4413      	add	r3, r2
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
 8002172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	011a      	lsls	r2, r3, #4
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	4413      	add	r3, r2
 800217c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002180:	623b      	str	r3, [r7, #32]
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218c:	b29a      	uxth	r2, r3
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	801a      	strh	r2, [r3, #0]
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800219c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	801a      	strh	r2, [r3, #0]
 80021a6:	e061      	b.n	800226c <PCD_EP_ISR_Handler+0x6d4>
 80021a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021aa:	785b      	ldrb	r3, [r3, #1]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d15d      	bne.n	800226c <PCD_EP_ISR_Handler+0x6d4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021be:	b29b      	uxth	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	4413      	add	r3, r2
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	011a      	lsls	r2, r3, #4
 80021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d0:	4413      	add	r3, r2
 80021d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021da:	2200      	movs	r2, #0
 80021dc:	801a      	strh	r2, [r3, #0]
 80021de:	e045      	b.n	800226c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e8:	785b      	ldrb	r3, [r3, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d126      	bne.n	800223c <PCD_EP_ISR_Handler+0x6a4>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002202:	4413      	add	r3, r2
 8002204:	637b      	str	r3, [r7, #52]	; 0x34
 8002206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	011a      	lsls	r2, r3, #4
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	4413      	add	r3, r2
 8002210:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002220:	b29a      	uxth	r2, r3
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	801a      	strh	r2, [r3, #0]
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002234:	b29a      	uxth	r2, r3
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	801a      	strh	r2, [r3, #0]
 800223a:	e017      	b.n	800226c <PCD_EP_ISR_Handler+0x6d4>
 800223c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d113      	bne.n	800226c <PCD_EP_ISR_Handler+0x6d4>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002252:	4413      	add	r3, r2
 8002254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	011a      	lsls	r2, r3, #4
 800225c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225e:	4413      	add	r3, r2
 8002260:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002264:	63bb      	str	r3, [r7, #56]	; 0x38
 8002266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002268:	2200      	movs	r2, #0
 800226a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800226c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f006 fa71 	bl	800875a <HAL_PCD_DataInStageCallback>
 8002278:	e053      	b.n	8002322 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800227a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d146      	bne.n	8002314 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	3302      	adds	r3, #2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80022b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d907      	bls.n	80022ce <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80022be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022c6:	1ad2      	subs	r2, r2, r3
 80022c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ca:	619a      	str	r2, [r3, #24]
 80022cc:	e002      	b.n	80022d4 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80022ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80022d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d106      	bne.n	80022ea <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f006 fa39 	bl	800875a <HAL_PCD_DataInStageCallback>
 80022e8:	e01b      	b.n	8002322 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80022ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022f2:	441a      	add	r2, r3
 80022f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80022f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fa:	69da      	ldr	r2, [r3, #28]
 80022fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002300:	441a      	add	r2, r3
 8002302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002304:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800230c:	4618      	mov	r0, r3
 800230e:	f002 feeb 	bl	80050e8 <USB_EPStartXfer>
 8002312:	e006      	b.n	8002322 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002314:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002318:	461a      	mov	r2, r3
 800231a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f91b 	bl	8002558 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800232a:	b29b      	uxth	r3, r3
 800232c:	b21b      	sxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	f6ff ac37 	blt.w	8001ba2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3758      	adds	r7, #88	; 0x58
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b088      	sub	sp, #32
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	4613      	mov	r3, r2
 800234a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d07e      	beq.n	8002454 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235e:	b29b      	uxth	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	3302      	adds	r3, #2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	4413      	add	r3, r2
 8002374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	699a      	ldr	r2, [r3, #24]
 8002384:	8b7b      	ldrh	r3, [r7, #26]
 8002386:	429a      	cmp	r2, r3
 8002388:	d306      	bcc.n	8002398 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	8b7b      	ldrh	r3, [r7, #26]
 8002390:	1ad2      	subs	r2, r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	619a      	str	r2, [r3, #24]
 8002396:	e002      	b.n	800239e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d123      	bne.n	80023ee <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c0:	833b      	strh	r3, [r7, #24]
 80023c2:	8b3b      	ldrh	r3, [r7, #24]
 80023c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023c8:	833b      	strh	r3, [r7, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	441a      	add	r2, r3
 80023d8:	8b3b      	ldrh	r3, [r7, #24]
 80023da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01f      	beq.n	8002438 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800240e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002412:	82fb      	strh	r3, [r7, #22]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	441a      	add	r2, r3
 8002422:	8afb      	ldrh	r3, [r7, #22]
 8002424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800242c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002430:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002434:	b29b      	uxth	r3, r3
 8002436:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002438:	8b7b      	ldrh	r3, [r7, #26]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8087 	beq.w	800254e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	6959      	ldr	r1, [r3, #20]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	891a      	ldrh	r2, [r3, #8]
 800244c:	8b7b      	ldrh	r3, [r7, #26]
 800244e:	f004 fb7f 	bl	8006b50 <USB_ReadPMA>
 8002452:	e07c      	b.n	800254e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245c:	b29b      	uxth	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	3306      	adds	r3, #6
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	4413      	add	r3, r2
 8002472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	8b7b      	ldrh	r3, [r7, #26]
 8002484:	429a      	cmp	r2, r3
 8002486:	d306      	bcc.n	8002496 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	8b7b      	ldrh	r3, [r7, #26]
 800248e:	1ad2      	subs	r2, r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	619a      	str	r2, [r3, #24]
 8002494:	e002      	b.n	800249c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d123      	bne.n	80024ec <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	83fb      	strh	r3, [r7, #30]
 80024c0:	8bfb      	ldrh	r3, [r7, #30]
 80024c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024c6:	83fb      	strh	r3, [r7, #30]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	8bfb      	ldrh	r3, [r7, #30]
 80024d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d11f      	bne.n	8002536 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800250c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002510:	83bb      	strh	r3, [r7, #28]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	441a      	add	r2, r3
 8002520:	8bbb      	ldrh	r3, [r7, #28]
 8002522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800252a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800252e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002532:	b29b      	uxth	r3, r3
 8002534:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002536:	8b7b      	ldrh	r3, [r7, #26]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	6959      	ldr	r1, [r3, #20]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	895a      	ldrh	r2, [r3, #10]
 8002548:	8b7b      	ldrh	r3, [r7, #26]
 800254a:	f004 fb01 	bl	8006b50 <USB_ReadPMA>
    }
  }

  return count;
 800254e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b0a4      	sub	sp, #144	; 0x90
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	4613      	mov	r3, r2
 8002564:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 81dd 	beq.w	800292c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	3302      	adds	r3, #2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d907      	bls.n	80025ba <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025b2:	1ad2      	subs	r2, r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	619a      	str	r2, [r3, #24]
 80025b8:	e002      	b.n	80025c0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 80b9 	bne.w	800273c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	785b      	ldrb	r3, [r3, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d126      	bne.n	8002620 <HAL_PCD_EP_DB_Transmit+0xc8>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	4413      	add	r3, r2
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	011a      	lsls	r2, r3, #4
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f2:	4413      	add	r3, r2
 80025f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002604:	b29a      	uxth	r2, r3
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	801a      	strh	r2, [r3, #0]
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002618:	b29a      	uxth	r2, r3
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	e01a      	b.n	8002656 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d116      	bne.n	8002656 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263c:	4413      	add	r3, r2
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	011a      	lsls	r2, r3, #4
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	4413      	add	r3, r2
 800264a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	2200      	movs	r2, #0
 8002654:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	785b      	ldrb	r3, [r3, #1]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d126      	bne.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	011a      	lsls	r2, r3, #4
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	4413      	add	r3, r2
 8002686:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002696:	b29a      	uxth	r2, r3
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	801a      	strh	r2, [r3, #0]
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	801a      	strh	r2, [r3, #0]
 80026b0:	e017      	b.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d113      	bne.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	4413      	add	r3, r2
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	011a      	lsls	r2, r3, #4
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	4413      	add	r3, r2
 80026d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026da:	623b      	str	r3, [r7, #32]
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	2200      	movs	r2, #0
 80026e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4619      	mov	r1, r3
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f006 f836 	bl	800875a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 82fc 	beq.w	8002cf2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002714:	82fb      	strh	r3, [r7, #22]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	441a      	add	r2, r3
 8002724:	8afb      	ldrh	r3, [r7, #22]
 8002726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800272a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800272e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002736:	b29b      	uxth	r3, r3
 8002738:	8013      	strh	r3, [r2, #0]
 800273a:	e2da      	b.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d021      	beq.n	800278a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002760:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	441a      	add	r2, r3
 8002772:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800277e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002786:	b29b      	uxth	r3, r3
 8002788:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002790:	2b01      	cmp	r3, #1
 8002792:	f040 82ae 	bne.w	8002cf2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800279e:	441a      	add	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027ac:	441a      	add	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	6a1a      	ldr	r2, [r3, #32]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d30b      	bcc.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	6a1a      	ldr	r2, [r3, #32]
 80027ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ce:	1ad2      	subs	r2, r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	621a      	str	r2, [r3, #32]
 80027d4:	e017      	b.n	8002806 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d108      	bne.n	80027f0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80027de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027ee:	e00a      	b.n	8002806 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2200      	movs	r2, #0
 8002804:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	785b      	ldrb	r3, [r3, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d165      	bne.n	80028da <HAL_PCD_EP_DB_Transmit+0x382>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002822:	4413      	add	r3, r2
 8002824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	011a      	lsls	r2, r3, #4
 800282c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282e:	4413      	add	r3, r2
 8002830:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002840:	b29a      	uxth	r2, r3
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284a:	2b3e      	cmp	r3, #62	; 0x3e
 800284c:	d91d      	bls.n	800288a <HAL_PCD_EP_DB_Transmit+0x332>
 800284e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	64bb      	str	r3, [r7, #72]	; 0x48
 8002856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <HAL_PCD_EP_DB_Transmit+0x310>
 8002862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002864:	3b01      	subs	r3, #1
 8002866:	64bb      	str	r3, [r7, #72]	; 0x48
 8002868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	b29a      	uxth	r2, r3
 800286e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002870:	b29b      	uxth	r3, r3
 8002872:	029b      	lsls	r3, r3, #10
 8002874:	b29b      	uxth	r3, r3
 8002876:	4313      	orrs	r3, r2
 8002878:	b29b      	uxth	r3, r3
 800287a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800287e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002882:	b29a      	uxth	r2, r3
 8002884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002886:	801a      	strh	r2, [r3, #0]
 8002888:	e044      	b.n	8002914 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800288a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10a      	bne.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x350>
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800289c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	e035      	b.n	8002914 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80028a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80028b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x36a>
 80028bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028be:	3301      	adds	r3, #1
 80028c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80028c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	029b      	lsls	r3, r3, #10
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	4313      	orrs	r3, r2
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d6:	801a      	strh	r2, [r3, #0]
 80028d8:	e01c      	b.n	8002914 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	785b      	ldrb	r3, [r3, #1]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d118      	bne.n	8002914 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	647b      	str	r3, [r7, #68]	; 0x44
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f6:	4413      	add	r3, r2
 80028f8:	647b      	str	r3, [r7, #68]	; 0x44
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	011a      	lsls	r2, r3, #4
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	4413      	add	r3, r2
 8002904:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002908:	643b      	str	r3, [r7, #64]	; 0x40
 800290a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290e:	b29a      	uxth	r2, r3
 8002910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002912:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	6959      	ldr	r1, [r3, #20]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	891a      	ldrh	r2, [r3, #8]
 8002920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002924:	b29b      	uxth	r3, r3
 8002926:	f004 f8ce 	bl	8006ac6 <USB_WritePMA>
 800292a:	e1e2      	b.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002934:	b29b      	uxth	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	3306      	adds	r3, #6
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	4413      	add	r3, r2
 800294a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002954:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	699a      	ldr	r2, [r3, #24]
 800295c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002960:	429a      	cmp	r2, r3
 8002962:	d307      	bcc.n	8002974 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800296c:	1ad2      	subs	r2, r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	619a      	str	r2, [r3, #24]
 8002972:	e002      	b.n	800297a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 80c0 	bne.w	8002b04 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	785b      	ldrb	r3, [r3, #1]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d126      	bne.n	80029da <HAL_PCD_EP_DB_Transmit+0x482>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029a0:	4413      	add	r3, r2
 80029a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	011a      	lsls	r2, r3, #4
 80029aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029ac:	4413      	add	r3, r2
 80029ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80029b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029be:	b29a      	uxth	r2, r3
 80029c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029c2:	801a      	strh	r2, [r3, #0]
 80029c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029d6:	801a      	strh	r2, [r3, #0]
 80029d8:	e01a      	b.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	785b      	ldrb	r3, [r3, #1]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d116      	bne.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	667b      	str	r3, [r7, #100]	; 0x64
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029f6:	4413      	add	r3, r2
 80029f8:	667b      	str	r3, [r7, #100]	; 0x64
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	011a      	lsls	r2, r3, #4
 8002a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a02:	4413      	add	r3, r2
 8002a04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a08:	663b      	str	r3, [r7, #96]	; 0x60
 8002a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	677b      	str	r3, [r7, #116]	; 0x74
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d12b      	bne.n	8002a76 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a32:	4413      	add	r3, r2
 8002a34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	011a      	lsls	r2, r3, #4
 8002a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3e:	4413      	add	r3, r2
 8002a40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a5a:	801a      	strh	r2, [r3, #0]
 8002a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a72:	801a      	strh	r2, [r3, #0]
 8002a74:	e017      	b.n	8002aa6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	785b      	ldrb	r3, [r3, #1]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d113      	bne.n	8002aa6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8c:	4413      	add	r3, r2
 8002a8e:	677b      	str	r3, [r7, #116]	; 0x74
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	011a      	lsls	r2, r3, #4
 8002a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a98:	4413      	add	r3, r2
 8002a9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a9e:	673b      	str	r3, [r7, #112]	; 0x70
 8002aa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f005 fe54 	bl	800875a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f040 811a 	bne.w	8002cf2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	441a      	add	r2, r3
 8002aea:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002af6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	8013      	strh	r3, [r2, #0]
 8002b02:	e0f6      	b.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d121      	bne.n	8002b52 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	441a      	add	r2, r3
 8002b3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	f040 80ca 	bne.w	8002cf2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b66:	441a      	add	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	69da      	ldr	r2, [r3, #28]
 8002b70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b74:	441a      	add	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	6a1a      	ldr	r2, [r3, #32]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d30b      	bcc.n	8002b9e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6a1a      	ldr	r2, [r3, #32]
 8002b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b96:	1ad2      	subs	r2, r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	621a      	str	r2, [r3, #32]
 8002b9c:	e017      	b.n	8002bce <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d108      	bne.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002ba6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bb6:	e00a      	b.n	8002bce <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	785b      	ldrb	r3, [r3, #1]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d165      	bne.n	8002ca8 <HAL_PCD_EP_DB_Transmit+0x750>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf0:	4413      	add	r3, r2
 8002bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	011a      	lsls	r2, r3, #4
 8002bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c02:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c12:	801a      	strh	r2, [r3, #0]
 8002c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c18:	2b3e      	cmp	r3, #62	; 0x3e
 8002c1a:	d91d      	bls.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x700>
 8002c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c32:	3b01      	subs	r3, #1
 8002c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	029b      	lsls	r3, r3, #10
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	4313      	orrs	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	e041      	b.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x784>
 8002c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c72:	801a      	strh	r2, [r3, #0]
 8002c74:	e032      	b.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x784>
 8002c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_PCD_EP_DB_Transmit+0x738>
 8002c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca4:	801a      	strh	r2, [r3, #0]
 8002ca6:	e019      	b.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x784>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d115      	bne.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x784>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbe:	4413      	add	r3, r2
 8002cc0:	657b      	str	r3, [r7, #84]	; 0x54
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	011a      	lsls	r2, r3, #4
 8002cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cca:	4413      	add	r3, r2
 8002ccc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8002cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cda:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6959      	ldr	r1, [r3, #20]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	895a      	ldrh	r2, [r3, #10]
 8002ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f003 feea 	bl	8006ac6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d0c:	82bb      	strh	r3, [r7, #20]
 8002d0e:	8abb      	ldrh	r3, [r7, #20]
 8002d10:	f083 0310 	eor.w	r3, r3, #16
 8002d14:	82bb      	strh	r3, [r7, #20]
 8002d16:	8abb      	ldrh	r3, [r7, #20]
 8002d18:	f083 0320 	eor.w	r3, r3, #32
 8002d1c:	82bb      	strh	r3, [r7, #20]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	441a      	add	r2, r3
 8002d2c:	8abb      	ldrh	r3, [r7, #20]
 8002d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3790      	adds	r7, #144	; 0x90
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	817b      	strh	r3, [r7, #10]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d6a:	897b      	ldrh	r3, [r7, #10]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	e009      	b.n	8002d96 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d82:	897a      	ldrh	r2, [r7, #10]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d96:	893b      	ldrh	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d107      	bne.n	8002dac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	80da      	strh	r2, [r3, #6]
 8002daa:	e00b      	b.n	8002dc4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2201      	movs	r2, #1
 8002db0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e272      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8087 	beq.w	8002efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df0:	4b92      	ldr	r3, [pc, #584]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d00c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dfc:	4b8f      	ldr	r3, [pc, #572]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d112      	bne.n	8002e2e <HAL_RCC_OscConfig+0x5e>
 8002e08:	4b8c      	ldr	r3, [pc, #560]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d10b      	bne.n	8002e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e16:	4b89      	ldr	r3, [pc, #548]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d06c      	beq.n	8002efc <HAL_RCC_OscConfig+0x12c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d168      	bne.n	8002efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e24c      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x76>
 8002e38:	4b80      	ldr	r3, [pc, #512]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a7f      	ldr	r2, [pc, #508]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e02e      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd4>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x98>
 8002e4e:	4b7b      	ldr	r3, [pc, #492]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a7a      	ldr	r2, [pc, #488]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b78      	ldr	r3, [pc, #480]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a77      	ldr	r2, [pc, #476]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e01d      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0xbc>
 8002e72:	4b72      	ldr	r3, [pc, #456]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a71      	ldr	r2, [pc, #452]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd4>
 8002e8c:	4b6b      	ldr	r3, [pc, #428]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a6a      	ldr	r2, [pc, #424]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b68      	ldr	r3, [pc, #416]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a67      	ldr	r2, [pc, #412]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fd fe98 	bl	8000be0 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fd fe94 	bl	8000be0 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e200      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b5d      	ldr	r3, [pc, #372]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xe4>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fd fe84 	bl	8000be0 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fd fe80 	bl	8000be0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1ec      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	4b53      	ldr	r3, [pc, #332]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x10c>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d063      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0a:	4b4c      	ldr	r3, [pc, #304]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f16:	4b49      	ldr	r3, [pc, #292]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d11c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x18c>
 8002f22:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	4b43      	ldr	r3, [pc, #268]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x176>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1c0      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4939      	ldr	r1, [pc, #228]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	e03a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fd fe39 	bl	8000be0 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fd fe35 	bl	8000be0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1a1      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4927      	ldr	r1, [pc, #156]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
 8002fa4:	e015      	b.n	8002fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fd fe18 	bl	8000be0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fd fe14 	bl	8000be0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e180      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d03a      	beq.n	8003054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d019      	beq.n	800301a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fec:	f7fd fdf8 	bl	8000be0 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7fd fdf4 	bl	8000be0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e160      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003012:	2001      	movs	r0, #1
 8003014:	f000 face 	bl	80035b4 <RCC_Delay>
 8003018:	e01c      	b.n	8003054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <HAL_RCC_OscConfig+0x274>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003020:	f7fd fdde 	bl	8000be0 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003026:	e00f      	b.n	8003048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003028:	f7fd fdda 	bl	8000be0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d908      	bls.n	8003048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e146      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	42420000 	.word	0x42420000
 8003044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	4b92      	ldr	r3, [pc, #584]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e9      	bne.n	8003028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a6 	beq.w	80031ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003062:	2300      	movs	r3, #0
 8003064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003066:	4b8b      	ldr	r3, [pc, #556]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10d      	bne.n	800308e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4a87      	ldr	r2, [pc, #540]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	61d3      	str	r3, [r2, #28]
 800307e:	4b85      	ldr	r3, [pc, #532]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308e:	4b82      	ldr	r3, [pc, #520]	; (8003298 <HAL_RCC_OscConfig+0x4c8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309a:	4b7f      	ldr	r3, [pc, #508]	; (8003298 <HAL_RCC_OscConfig+0x4c8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a7e      	ldr	r2, [pc, #504]	; (8003298 <HAL_RCC_OscConfig+0x4c8>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a6:	f7fd fd9b 	bl	8000be0 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7fd fd97 	bl	8000be0 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b64      	cmp	r3, #100	; 0x64
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e103      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	4b75      	ldr	r3, [pc, #468]	; (8003298 <HAL_RCC_OscConfig+0x4c8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x312>
 80030d4:	4b6f      	ldr	r3, [pc, #444]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4a6e      	ldr	r2, [pc, #440]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6213      	str	r3, [r2, #32]
 80030e0:	e02d      	b.n	800313e <HAL_RCC_OscConfig+0x36e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x334>
 80030ea:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4a69      	ldr	r2, [pc, #420]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	6213      	str	r3, [r2, #32]
 80030f6:	4b67      	ldr	r3, [pc, #412]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4a66      	ldr	r2, [pc, #408]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	f023 0304 	bic.w	r3, r3, #4
 8003100:	6213      	str	r3, [r2, #32]
 8003102:	e01c      	b.n	800313e <HAL_RCC_OscConfig+0x36e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b05      	cmp	r3, #5
 800310a:	d10c      	bne.n	8003126 <HAL_RCC_OscConfig+0x356>
 800310c:	4b61      	ldr	r3, [pc, #388]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a60      	ldr	r2, [pc, #384]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	4b5e      	ldr	r3, [pc, #376]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4a5d      	ldr	r2, [pc, #372]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6213      	str	r3, [r2, #32]
 8003124:	e00b      	b.n	800313e <HAL_RCC_OscConfig+0x36e>
 8003126:	4b5b      	ldr	r3, [pc, #364]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a5a      	ldr	r2, [pc, #360]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	6213      	str	r3, [r2, #32]
 8003132:	4b58      	ldr	r3, [pc, #352]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4a57      	ldr	r2, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d015      	beq.n	8003172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003146:	f7fd fd4b 	bl	8000be0 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7fd fd47 	bl	8000be0 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f241 3288 	movw	r2, #5000	; 0x1388
 800315c:	4293      	cmp	r3, r2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0b1      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	4b4b      	ldr	r3, [pc, #300]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0ee      	beq.n	800314e <HAL_RCC_OscConfig+0x37e>
 8003170:	e014      	b.n	800319c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003172:	f7fd fd35 	bl	8000be0 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003178:	e00a      	b.n	8003190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7fd fd31 	bl	8000be0 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	; 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e09b      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	4b40      	ldr	r3, [pc, #256]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ee      	bne.n	800317a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a2:	4b3c      	ldr	r3, [pc, #240]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8087 	beq.w	80032c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b8:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d061      	beq.n	8003288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d146      	bne.n	800325a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031cc:	4b33      	ldr	r3, [pc, #204]	; (800329c <HAL_RCC_OscConfig+0x4cc>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fd fd05 	bl	8000be0 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031da:	f7fd fd01 	bl	8000be0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e06d      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ec:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d108      	bne.n	8003214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	4921      	ldr	r1, [pc, #132]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003214:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a19      	ldr	r1, [r3, #32]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	430b      	orrs	r3, r1
 8003226:	491b      	ldr	r1, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x4cc>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fd fcd5 	bl	8000be0 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fd fcd1 	bl	8000be0 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e03d      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x46a>
 8003258:	e035      	b.n	80032c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCC_OscConfig+0x4cc>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fd fcbe 	bl	8000be0 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7fd fcba 	bl	8000be0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e026      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x498>
 8003286:	e01e      	b.n	80032c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e019      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
 800329c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x500>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d106      	bne.n	80032c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000

080032d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0d0      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e8:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d910      	bls.n	8003318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b67      	ldr	r3, [pc, #412]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 0207 	bic.w	r2, r3, #7
 80032fe:	4965      	ldr	r1, [pc, #404]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b63      	ldr	r3, [pc, #396]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0b8      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003330:	4b59      	ldr	r3, [pc, #356]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	4a58      	ldr	r2, [pc, #352]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800333a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003348:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a52      	ldr	r2, [pc, #328]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003354:	4b50      	ldr	r3, [pc, #320]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	494d      	ldr	r1, [pc, #308]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d040      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d115      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e07f      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003392:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e073      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a2:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e06b      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b2:	4b39      	ldr	r3, [pc, #228]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f023 0203 	bic.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4936      	ldr	r1, [pc, #216]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c4:	f7fd fc0c 	bl	8000be0 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033cc:	f7fd fc08 	bl	8000be0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e053      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 020c 	and.w	r2, r3, #12
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d1eb      	bne.n	80033cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d210      	bcs.n	8003424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 0207 	bic.w	r2, r3, #7
 800340a:	4922      	ldr	r1, [pc, #136]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b20      	ldr	r3, [pc, #128]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e032      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003430:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4916      	ldr	r1, [pc, #88]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800344e:	4b12      	ldr	r3, [pc, #72]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	490e      	ldr	r1, [pc, #56]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003462:	f000 f821 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 8003466:	4602      	mov	r2, r0
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	490a      	ldr	r1, [pc, #40]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003474:	5ccb      	ldrb	r3, [r1, r3]
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <HAL_RCC_ClockConfig+0x1cc>)
 800347c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd fb6a 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40022000 	.word	0x40022000
 8003498:	40021000 	.word	0x40021000
 800349c:	0800a240 	.word	0x0800a240
 80034a0:	20000000 	.word	0x20000000
 80034a4:	20000004 	.word	0x20000004

080034a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <HAL_RCC_GetSysClockFreq+0x94>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d002      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x30>
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d003      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x36>
 80034d6:	e027      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <HAL_RCC_GetSysClockFreq+0x98>)
 80034da:	613b      	str	r3, [r7, #16]
      break;
 80034dc:	e027      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	0c9b      	lsrs	r3, r3, #18
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	4a17      	ldr	r2, [pc, #92]	; (8003544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034e8:	5cd3      	ldrb	r3, [r2, r3]
 80034ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d010      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034f6:	4b11      	ldr	r3, [pc, #68]	; (800353c <HAL_RCC_GetSysClockFreq+0x94>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	0c5b      	lsrs	r3, r3, #17
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	4a11      	ldr	r2, [pc, #68]	; (8003548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <HAL_RCC_GetSysClockFreq+0x98>)
 800350a:	fb03 f202 	mul.w	r2, r3, r2
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e004      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a0c      	ldr	r2, [pc, #48]	; (800354c <HAL_RCC_GetSysClockFreq+0xa4>)
 800351c:	fb02 f303 	mul.w	r3, r2, r3
 8003520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	613b      	str	r3, [r7, #16]
      break;
 8003526:	e002      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCC_GetSysClockFreq+0x98>)
 800352a:	613b      	str	r3, [r7, #16]
      break;
 800352c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352e:	693b      	ldr	r3, [r7, #16]
}
 8003530:	4618      	mov	r0, r3
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	007a1200 	.word	0x007a1200
 8003544:	0800a258 	.word	0x0800a258
 8003548:	0800a268 	.word	0x0800a268
 800354c:	003d0900 	.word	0x003d0900

08003550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003554:	4b02      	ldr	r3, [pc, #8]	; (8003560 <HAL_RCC_GetHCLKFreq+0x10>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	20000000 	.word	0x20000000

08003564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003568:	f7ff fff2 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4903      	ldr	r1, [pc, #12]	; (8003588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000
 8003588:	0800a250 	.word	0x0800a250

0800358c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003590:	f7ff ffde 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	0adb      	lsrs	r3, r3, #11
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	; (80035b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	0800a250 	.word	0x0800a250

080035b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <RCC_Delay+0x34>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <RCC_Delay+0x38>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	0a5b      	lsrs	r3, r3, #9
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035d0:	bf00      	nop
  }
  while (Delay --);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1e5a      	subs	r2, r3, #1
 80035d6:	60fa      	str	r2, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f9      	bne.n	80035d0 <RCC_Delay+0x1c>
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	20000000 	.word	0x20000000
 80035ec:	10624dd3 	.word	0x10624dd3

080035f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d07d      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800360c:	2300      	movs	r3, #0
 800360e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003610:	4b4f      	ldr	r3, [pc, #316]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10d      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361c:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	4a4b      	ldr	r2, [pc, #300]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003626:	61d3      	str	r3, [r2, #28]
 8003628:	4b49      	ldr	r3, [pc, #292]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003634:	2301      	movs	r3, #1
 8003636:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b46      	ldr	r3, [pc, #280]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d118      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a42      	ldr	r2, [pc, #264]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003650:	f7fd fac6 	bl	8000be0 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	e008      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003658:	f7fd fac2 	bl	8000be0 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e06d      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d02e      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	429a      	cmp	r2, r3
 8003692:	d027      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036a4:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036aa:	4a29      	ldr	r2, [pc, #164]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d014      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fd fa91 	bl	8000be0 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fd fa8d 	bl	8000be0 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e036      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ee      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e4:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4917      	ldr	r1, [pc, #92]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	4a13      	ldr	r2, [pc, #76]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003706:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	490b      	ldr	r1, [pc, #44]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	4904      	ldr	r1, [pc, #16]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	40007000 	.word	0x40007000
 8003758:	42420440 	.word	0x42420440

0800375c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e042      	b.n	80037f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd f84a 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800379e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fdfb 	bl	800439c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b20      	cmp	r3, #32
 800381a:	d16d      	bne.n	80038f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_UART_Transmit+0x2c>
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e066      	b.n	80038fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2221      	movs	r2, #33	; 0x21
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800383a:	f7fd f9d1 	bl	8000be0 <HAL_GetTick>
 800383e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	88fa      	ldrh	r2, [r7, #6]
 800384a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003854:	d108      	bne.n	8003868 <HAL_UART_Transmit+0x6c>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d104      	bne.n	8003868 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	e003      	b.n	8003870 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003870:	e02a      	b.n	80038c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fb4a 	bl	8003f16 <UART_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e036      	b.n	80038fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10b      	bne.n	80038aa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	3302      	adds	r3, #2
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	e007      	b.n	80038ba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	3301      	adds	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1cf      	bne.n	8003872 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	2140      	movs	r1, #64	; 0x40
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fb1a 	bl	8003f16 <UART_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e006      	b.n	80038fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b08c      	sub	sp, #48	; 0x30
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	4613      	mov	r3, r2
 800390e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b20      	cmp	r3, #32
 800391a:	d14a      	bne.n	80039b2 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e043      	b.n	80039b4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	461a      	mov	r2, r3
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fb57 	bl	8003ff2 <UART_Start_Receive_IT>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800394a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800394e:	2b00      	cmp	r3, #0
 8003950:	d12c      	bne.n	80039ac <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	2b01      	cmp	r3, #1
 8003958:	d125      	bne.n	80039a6 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	617b      	str	r3, [r7, #20]
   return(result);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f043 0310 	orr.w	r3, r3, #16
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003990:	627a      	str	r2, [r7, #36]	; 0x24
 8003992:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	6a39      	ldr	r1, [r7, #32]
 8003996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	61fb      	str	r3, [r7, #28]
   return(result);
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e5      	bne.n	8003970 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80039a4:	e002      	b.n	80039ac <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80039ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039b0:	e000      	b.n	80039b4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3730      	adds	r7, #48	; 0x30
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b0ba      	sub	sp, #232	; 0xe8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <HAL_UART_IRQHandler+0x66>
 8003a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fbff 	bl	800421e <UART_Receive_IT>
      return;
 8003a20:	e25b      	b.n	8003eda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80de 	beq.w	8003be8 <HAL_UART_IRQHandler+0x22c>
 8003a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d106      	bne.n	8003a46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80d1 	beq.w	8003be8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_UART_IRQHandler+0xae>
 8003a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_UART_IRQHandler+0xd2>
 8003a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f043 0202 	orr.w	r2, r3, #2
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_UART_IRQHandler+0xf6>
 8003a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f043 0204 	orr.w	r2, r3, #4
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d011      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x126>
 8003abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d105      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f043 0208 	orr.w	r2, r3, #8
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 81f2 	beq.w	8003ed0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_UART_IRQHandler+0x14e>
 8003af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fb8a 	bl	800421e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <HAL_UART_IRQHandler+0x17a>
 8003b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d04f      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fa94 	bl	8004064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d041      	beq.n	8003bce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3314      	adds	r3, #20
 8003b50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1d9      	bne.n	8003b4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d013      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	4a7e      	ldr	r2, [pc, #504]	; (8003d9c <HAL_UART_IRQHandler+0x3e0>)
 8003ba4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fd f98e 	bl	8000ecc <HAL_DMA_Abort_IT>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	e00e      	b.n	8003be4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f99c 	bl	8003f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	e00a      	b.n	8003be4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f998 	bl	8003f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd4:	e006      	b.n	8003be4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f994 	bl	8003f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003be2:	e175      	b.n	8003ed0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	bf00      	nop
    return;
 8003be6:	e173      	b.n	8003ed0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	f040 814f 	bne.w	8003e90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8148 	beq.w	8003e90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8141 	beq.w	8003e90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80b6 	beq.w	8003da0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8145 	beq.w	8003ed4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c52:	429a      	cmp	r2, r3
 8003c54:	f080 813e 	bcs.w	8003ed4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	f000 8088 	beq.w	8003d7c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	330c      	adds	r3, #12
 8003c94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c98:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ca4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1d9      	bne.n	8003c6c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3314      	adds	r3, #20
 8003cd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cdc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ce4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e1      	bne.n	8003cb8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3314      	adds	r3, #20
 8003d14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d18:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e3      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d4c:	f023 0310 	bic.w	r3, r3, #16
 8003d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d60:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e3      	bne.n	8003d3a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fd f86d 	bl	8000e56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fc fb7c 	bl	8000490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d98:	e09c      	b.n	8003ed4 <HAL_UART_IRQHandler+0x518>
 8003d9a:	bf00      	nop
 8003d9c:	08004129 	.word	0x08004129
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 808e 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8089 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dea:	647a      	str	r2, [r7, #68]	; 0x44
 8003dec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e3      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3314      	adds	r3, #20
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e22:	633a      	str	r2, [r7, #48]	; 0x30
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e3      	bne.n	8003dfe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0310 	bic.w	r3, r3, #16
 8003e5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e68:	61fa      	str	r2, [r7, #28]
 8003e6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	69b9      	ldr	r1, [r7, #24]
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	617b      	str	r3, [r7, #20]
   return(result);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e3      	bne.n	8003e44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7fc fb01 	bl	8000490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e8e:	e023      	b.n	8003ed8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d009      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x4f4>
 8003e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f951 	bl	8004150 <UART_Transmit_IT>
    return;
 8003eae:	e014      	b.n	8003eda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00e      	beq.n	8003eda <HAL_UART_IRQHandler+0x51e>
 8003ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f990 	bl	80041ee <UART_EndTransmit_IT>
    return;
 8003ece:	e004      	b.n	8003eda <HAL_UART_IRQHandler+0x51e>
    return;
 8003ed0:	bf00      	nop
 8003ed2:	e002      	b.n	8003eda <HAL_UART_IRQHandler+0x51e>
      return;
 8003ed4:	bf00      	nop
 8003ed6:	e000      	b.n	8003eda <HAL_UART_IRQHandler+0x51e>
      return;
 8003ed8:	bf00      	nop
  }
}
 8003eda:	37e8      	adds	r7, #232	; 0xe8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b090      	sub	sp, #64	; 0x40
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	4613      	mov	r3, r2
 8003f24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f26:	e050      	b.n	8003fca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d04c      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f36:	f7fc fe53 	bl	8000be0 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d241      	bcs.n	8003fca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f66:	637a      	str	r2, [r7, #52]	; 0x34
 8003f68:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e5      	bne.n	8003f46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3314      	adds	r3, #20
 8003f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	613b      	str	r3, [r7, #16]
   return(result);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3314      	adds	r3, #20
 8003f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f9a:	623a      	str	r2, [r7, #32]
 8003f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	69f9      	ldr	r1, [r7, #28]
 8003fa0:	6a3a      	ldr	r2, [r7, #32]
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e5      	bne.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e00f      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	bf0c      	ite	eq
 8003fda:	2301      	moveq	r3, #1
 8003fdc:	2300      	movne	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d09f      	beq.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3740      	adds	r7, #64	; 0x40
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2222      	movs	r2, #34	; 0x22
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004036:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0220 	orr.w	r2, r2, #32
 8004056:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004064:	b480      	push	{r7}
 8004066:	b095      	sub	sp, #84	; 0x54
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800408c:	643a      	str	r2, [r7, #64]	; 0x40
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e5      	bne.n	800406c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3314      	adds	r3, #20
 80040a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3314      	adds	r3, #20
 80040be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d119      	bne.n	8004110 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f023 0310 	bic.w	r3, r3, #16
 80040f2:	647b      	str	r3, [r7, #68]	; 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040fc:	61ba      	str	r2, [r7, #24]
 80040fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6979      	ldr	r1, [r7, #20]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	613b      	str	r3, [r7, #16]
   return(result);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800411e:	bf00      	nop
 8004120:	3754      	adds	r7, #84	; 0x54
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff fede 	bl	8003f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b21      	cmp	r3, #33	; 0x21
 8004162:	d13e      	bne.n	80041e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416c:	d114      	bne.n	8004198 <UART_Transmit_IT+0x48>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d110      	bne.n	8004198 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800418a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	1c9a      	adds	r2, r3, #2
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	621a      	str	r2, [r3, #32]
 8004196:	e008      	b.n	80041aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	1c59      	adds	r1, r3, #1
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6211      	str	r1, [r2, #32]
 80041a2:	781a      	ldrb	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4619      	mov	r1, r3
 80041b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004204:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fe66 	bl	8003ee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b08c      	sub	sp, #48	; 0x30
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b22      	cmp	r3, #34	; 0x22
 8004230:	f040 80ae 	bne.w	8004390 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423c:	d117      	bne.n	800426e <UART_Receive_IT+0x50>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d113      	bne.n	800426e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	b29b      	uxth	r3, r3
 8004258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425c:	b29a      	uxth	r2, r3
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	1c9a      	adds	r2, r3, #2
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	629a      	str	r2, [r3, #40]	; 0x28
 800426c:	e026      	b.n	80042bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004280:	d007      	beq.n	8004292 <UART_Receive_IT+0x74>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <UART_Receive_IT+0x82>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e008      	b.n	80042b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4619      	mov	r1, r3
 80042ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d15d      	bne.n	800438c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0220 	bic.w	r2, r2, #32
 80042de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	2b01      	cmp	r3, #1
 8004314:	d135      	bne.n	8004382 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	613b      	str	r3, [r7, #16]
   return(result);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f023 0310 	bic.w	r3, r3, #16
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433c:	623a      	str	r2, [r7, #32]
 800433e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	69f9      	ldr	r1, [r7, #28]
 8004342:	6a3a      	ldr	r2, [r7, #32]
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	61bb      	str	r3, [r7, #24]
   return(result);
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e5      	bne.n	800431c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	2b10      	cmp	r3, #16
 800435c:	d10a      	bne.n	8004374 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc f888 	bl	8000490 <HAL_UARTEx_RxEventCallback>
 8004380:	e002      	b.n	8004388 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff fdb5 	bl	8003ef2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e002      	b.n	8004392 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	e000      	b.n	8004392 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004390:	2302      	movs	r3, #2
  }
}
 8004392:	4618      	mov	r0, r3
 8004394:	3730      	adds	r7, #48	; 0x30
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043d6:	f023 030c 	bic.w	r3, r3, #12
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	430b      	orrs	r3, r1
 80043e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2c      	ldr	r2, [pc, #176]	; (80044b0 <UART_SetConfig+0x114>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d103      	bne.n	800440c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004404:	f7ff f8c2 	bl	800358c <HAL_RCC_GetPCLK2Freq>
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	e002      	b.n	8004412 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800440c:	f7ff f8aa 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 8004410:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009a      	lsls	r2, r3, #2
 800441c:	441a      	add	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	4a22      	ldr	r2, [pc, #136]	; (80044b4 <UART_SetConfig+0x118>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	0119      	lsls	r1, r3, #4
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009a      	lsls	r2, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	fbb2 f2f3 	udiv	r2, r2, r3
 8004448:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <UART_SetConfig+0x118>)
 800444a:	fba3 0302 	umull	r0, r3, r3, r2
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2064      	movs	r0, #100	; 0x64
 8004452:	fb00 f303 	mul.w	r3, r0, r3
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	3332      	adds	r3, #50	; 0x32
 800445c:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <UART_SetConfig+0x118>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004468:	4419      	add	r1, r3
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009a      	lsls	r2, r3, #2
 8004474:	441a      	add	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <UART_SetConfig+0x118>)
 8004482:	fba3 0302 	umull	r0, r3, r3, r2
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	2064      	movs	r0, #100	; 0x64
 800448a:	fb00 f303 	mul.w	r3, r0, r3
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	3332      	adds	r3, #50	; 0x32
 8004494:	4a07      	ldr	r2, [pc, #28]	; (80044b4 <UART_SetConfig+0x118>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	f003 020f 	and.w	r2, r3, #15
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	440a      	add	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40013800 	.word	0x40013800
 80044b4:	51eb851f 	.word	0x51eb851f

080044b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044b8:	b084      	sub	sp, #16
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	f107 0014 	add.w	r0, r7, #20
 80044c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	b004      	add	sp, #16
 80044d6:	4770      	bx	lr

080044d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044e8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800450c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004510:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	b29b      	uxth	r3, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	b29b      	uxth	r3, r3
 8004522:	4013      	ands	r3, r2
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004550:	b084      	sub	sp, #16
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	f107 0014 	add.w	r0, r7, #20
 800455e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	b004      	add	sp, #16
 800458e:	4770      	bx	lr

08004590 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004590:	b480      	push	{r7}
 8004592:	b09d      	sub	sp, #116	; 0x74
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	78db      	ldrb	r3, [r3, #3]
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d81f      	bhi.n	8004602 <USB_ActivateEndpoint+0x72>
 80045c2:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <USB_ActivateEndpoint+0x38>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045f5 	.word	0x080045f5
 80045d0:	0800460b 	.word	0x0800460b
 80045d4:	080045e7 	.word	0x080045e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045e4:	e012      	b.n	800460c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045f2:	e00b      	b.n	800460c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004600:	e004      	b.n	800460c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004608:	e000      	b.n	800460c <USB_ActivateEndpoint+0x7c>
      break;
 800460a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	441a      	add	r2, r3
 8004616:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800461a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462a:	b29b      	uxth	r3, r3
 800462c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004644:	b29a      	uxth	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004670:	b29b      	uxth	r3, r3
 8004672:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	7b1b      	ldrb	r3, [r3, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f040 8178 	bne.w	800496e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	785b      	ldrb	r3, [r3, #1]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 8084 	beq.w	8004790 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004692:	b29b      	uxth	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	4413      	add	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	011a      	lsls	r2, r3, #4
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	88db      	ldrh	r3, [r3, #6]
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	827b      	strh	r3, [r7, #18]
 80046ca:	8a7b      	ldrh	r3, [r7, #18]
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <USB_ActivateEndpoint+0x17c>
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	823b      	strh	r3, [r7, #16]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	441a      	add	r2, r3
 80046f6:	8a3b      	ldrh	r3, [r7, #16]
 80046f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004704:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004708:	b29b      	uxth	r3, r3
 800470a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	78db      	ldrb	r3, [r3, #3]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d020      	beq.n	8004756 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472a:	81bb      	strh	r3, [r7, #12]
 800472c:	89bb      	ldrh	r3, [r7, #12]
 800472e:	f083 0320 	eor.w	r3, r3, #32
 8004732:	81bb      	strh	r3, [r7, #12]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	441a      	add	r2, r3
 800473e:	89bb      	ldrh	r3, [r7, #12]
 8004740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004750:	b29b      	uxth	r3, r3
 8004752:	8013      	strh	r3, [r2, #0]
 8004754:	e2d5      	b.n	8004d02 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476c:	81fb      	strh	r3, [r7, #14]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	441a      	add	r2, r3
 8004778:	89fb      	ldrh	r3, [r7, #14]
 800477a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478a:	b29b      	uxth	r3, r3
 800478c:	8013      	strh	r3, [r2, #0]
 800478e:	e2b8      	b.n	8004d02 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	633b      	str	r3, [r7, #48]	; 0x30
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800479a:	b29b      	uxth	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	4413      	add	r3, r2
 80047a2:	633b      	str	r3, [r7, #48]	; 0x30
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	011a      	lsls	r2, r3, #4
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	88db      	ldrh	r3, [r3, #6]
 80047b8:	085b      	lsrs	r3, r3, #1
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	4413      	add	r3, r2
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	011a      	lsls	r2, r3, #4
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	4413      	add	r3, r2
 80047e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	801a      	strh	r2, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b3e      	cmp	r3, #62	; 0x3e
 80047fe:	d91d      	bls.n	800483c <USB_ActivateEndpoint+0x2ac>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	66bb      	str	r3, [r7, #104]	; 0x68
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <USB_ActivateEndpoint+0x28a>
 8004814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004816:	3b01      	subs	r3, #1
 8004818:	66bb      	str	r3, [r7, #104]	; 0x68
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29a      	uxth	r2, r3
 8004820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004822:	b29b      	uxth	r3, r3
 8004824:	029b      	lsls	r3, r3, #10
 8004826:	b29b      	uxth	r3, r3
 8004828:	4313      	orrs	r3, r2
 800482a:	b29b      	uxth	r3, r3
 800482c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004834:	b29a      	uxth	r2, r3
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	e026      	b.n	800488a <USB_ActivateEndpoint+0x2fa>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <USB_ActivateEndpoint+0x2ca>
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004852:	b29a      	uxth	r2, r3
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	801a      	strh	r2, [r3, #0]
 8004858:	e017      	b.n	800488a <USB_ActivateEndpoint+0x2fa>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	66bb      	str	r3, [r7, #104]	; 0x68
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <USB_ActivateEndpoint+0x2e4>
 800486e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004870:	3301      	adds	r3, #1
 8004872:	66bb      	str	r3, [r7, #104]	; 0x68
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	b29a      	uxth	r2, r3
 800487a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800487c:	b29b      	uxth	r3, r3
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	b29b      	uxth	r3, r3
 8004882:	4313      	orrs	r3, r2
 8004884:	b29a      	uxth	r2, r3
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	847b      	strh	r3, [r7, #34]	; 0x22
 8004898:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800489a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01b      	beq.n	80048da <USB_ActivateEndpoint+0x34a>
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b8:	843b      	strh	r3, [r7, #32]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	8c3b      	ldrh	r3, [r7, #32]
 80048c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d124      	bne.n	800492c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f8:	83bb      	strh	r3, [r7, #28]
 80048fa:	8bbb      	ldrh	r3, [r7, #28]
 80048fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004900:	83bb      	strh	r3, [r7, #28]
 8004902:	8bbb      	ldrh	r3, [r7, #28]
 8004904:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004908:	83bb      	strh	r3, [r7, #28]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	441a      	add	r2, r3
 8004914:	8bbb      	ldrh	r3, [r7, #28]
 8004916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800491e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004926:	b29b      	uxth	r3, r3
 8004928:	8013      	strh	r3, [r2, #0]
 800492a:	e1ea      	b.n	8004d02 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800493e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004942:	83fb      	strh	r3, [r7, #30]
 8004944:	8bfb      	ldrh	r3, [r7, #30]
 8004946:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800494a:	83fb      	strh	r3, [r7, #30]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	8bfb      	ldrh	r3, [r7, #30]
 8004958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004968:	b29b      	uxth	r3, r3
 800496a:	8013      	strh	r3, [r2, #0]
 800496c:	e1c9      	b.n	8004d02 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	78db      	ldrb	r3, [r3, #3]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d11e      	bne.n	80049b4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800499e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	8013      	strh	r3, [r2, #0]
 80049b2:	e01d      	b.n	80049f0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80049c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	441a      	add	r2, r3
 80049d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a00:	4413      	add	r3, r2
 8004a02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	011a      	lsls	r2, r3, #4
 8004a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a12:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	891b      	ldrh	r3, [r3, #8]
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a22:	801a      	strh	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	657b      	str	r3, [r7, #84]	; 0x54
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a34:	4413      	add	r3, r2
 8004a36:	657b      	str	r3, [r7, #84]	; 0x54
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	011a      	lsls	r2, r3, #4
 8004a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a46:	653b      	str	r3, [r7, #80]	; 0x50
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	895b      	ldrh	r3, [r3, #10]
 8004a4c:	085b      	lsrs	r3, r3, #1
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a56:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	785b      	ldrb	r3, [r3, #1]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 8093 	bne.w	8004b88 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01b      	beq.n	8004ab6 <USB_ActivateEndpoint+0x526>
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a94:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004ac4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01b      	beq.n	8004b06 <USB_ActivateEndpoint+0x576>
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b24:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	441a      	add	r2, r3
 8004b70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	8013      	strh	r3, [r2, #0]
 8004b86:	e0bc      	b.n	8004d02 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01d      	beq.n	8004be0 <USB_ActivateEndpoint+0x650>
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	441a      	add	r2, r3
 8004bc8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01d      	beq.n	8004c38 <USB_ActivateEndpoint+0x6a8>
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	441a      	add	r2, r3
 8004c20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	78db      	ldrb	r3, [r3, #3]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d024      	beq.n	8004c8a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c5e:	f083 0320 	eor.w	r3, r3, #32
 8004c62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	441a      	add	r2, r3
 8004c70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	8013      	strh	r3, [r2, #0]
 8004c88:	e01d      	b.n	8004cc6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cdc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	441a      	add	r2, r3
 8004cea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004d02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3774      	adds	r7, #116	; 0x74
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b08d      	sub	sp, #52	; 0x34
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	7b1b      	ldrb	r3, [r3, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f040 808e 	bne.w	8004e40 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d044      	beq.n	8004db6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	81bb      	strh	r3, [r7, #12]
 8004d3a:	89bb      	ldrh	r3, [r7, #12]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01b      	beq.n	8004d7c <USB_DeactivateEndpoint+0x6c>
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	817b      	strh	r3, [r7, #10]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	441a      	add	r2, r3
 8004d66:	897b      	ldrh	r3, [r7, #10]
 8004d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d92:	813b      	strh	r3, [r7, #8]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	893b      	ldrh	r3, [r7, #8]
 8004da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	8013      	strh	r3, [r2, #0]
 8004db4:	e192      	b.n	80050dc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	827b      	strh	r3, [r7, #18]
 8004dc4:	8a7b      	ldrh	r3, [r7, #18]
 8004dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d01b      	beq.n	8004e06 <USB_DeactivateEndpoint+0xf6>
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de4:	823b      	strh	r3, [r7, #16]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	441a      	add	r2, r3
 8004df0:	8a3b      	ldrh	r3, [r7, #16]
 8004df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1c:	81fb      	strh	r3, [r7, #14]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	441a      	add	r2, r3
 8004e28:	89fb      	ldrh	r3, [r7, #14]
 8004e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8013      	strh	r3, [r2, #0]
 8004e3e:	e14d      	b.n	80050dc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	785b      	ldrb	r3, [r3, #1]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f040 80a5 	bne.w	8004f94 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	843b      	strh	r3, [r7, #32]
 8004e58:	8c3b      	ldrh	r3, [r7, #32]
 8004e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01b      	beq.n	8004e9a <USB_DeactivateEndpoint+0x18a>
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e78:	83fb      	strh	r3, [r7, #30]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	441a      	add	r2, r3
 8004e84:	8bfb      	ldrh	r3, [r7, #30]
 8004e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	83bb      	strh	r3, [r7, #28]
 8004ea8:	8bbb      	ldrh	r3, [r7, #28]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01b      	beq.n	8004eea <USB_DeactivateEndpoint+0x1da>
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec8:	837b      	strh	r3, [r7, #26]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	8b7b      	ldrh	r3, [r7, #26]
 8004ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f00:	833b      	strh	r3, [r7, #24]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	8b3b      	ldrh	r3, [r7, #24]
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f38:	82fb      	strh	r3, [r7, #22]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	441a      	add	r2, r3
 8004f44:	8afb      	ldrh	r3, [r7, #22]
 8004f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f70:	82bb      	strh	r3, [r7, #20]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	441a      	add	r2, r3
 8004f7c:	8abb      	ldrh	r3, [r7, #20]
 8004f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	8013      	strh	r3, [r2, #0]
 8004f92:	e0a3      	b.n	80050dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004fa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01b      	beq.n	8004fe4 <USB_DeactivateEndpoint+0x2d4>
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	441a      	add	r2, r3
 8004fce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ff2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01b      	beq.n	8005034 <USB_DeactivateEndpoint+0x324>
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005012:	853b      	strh	r3, [r7, #40]	; 0x28
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	441a      	add	r2, r3
 800501e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005030:	b29b      	uxth	r3, r3
 8005032:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	441a      	add	r2, r3
 8005056:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005068:	b29b      	uxth	r3, r3
 800506a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005082:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800509c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d8:	b29b      	uxth	r3, r3
 80050da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3734      	adds	r7, #52	; 0x34
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc80      	pop	{r7}
 80050e6:	4770      	bx	lr

080050e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b0c2      	sub	sp, #264	; 0x108
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050f6:	6018      	str	r0, [r3, #0]
 80050f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005100:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	2b01      	cmp	r3, #1
 8005110:	f040 86b7 	bne.w	8005e82 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699a      	ldr	r2, [r3, #24]
 8005120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	429a      	cmp	r2, r3
 800512e:	d908      	bls.n	8005142 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005140:	e007      	b.n	8005152 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	7b1b      	ldrb	r3, [r3, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d13a      	bne.n	80051d8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6959      	ldr	r1, [r3, #20]
 800516e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	88da      	ldrh	r2, [r3, #6]
 800517a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800517e:	b29b      	uxth	r3, r3
 8005180:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005184:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005188:	6800      	ldr	r0, [r0, #0]
 800518a:	f001 fc9c 	bl	8006ac6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800518e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4413      	add	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	011a      	lsls	r2, r3, #4
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	f000 be1f 	b.w	8005e16 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	78db      	ldrb	r3, [r3, #3]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	f040 8462 	bne.w	8005aae <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	429a      	cmp	r2, r3
 8005204:	f240 83df 	bls.w	80059c6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	441a      	add	r2, r3
 800524c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005258:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800525c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005274:	1ad2      	subs	r2, r2, r3
 8005276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800527a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 81c7 	beq.w	8005638 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	633b      	str	r3, [r7, #48]	; 0x30
 80052b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d177      	bne.n	80053b6 <USB_EPStartXfer+0x2ce>
 80052c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	461a      	mov	r2, r3
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	4413      	add	r3, r2
 80052e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	011a      	lsls	r2, r3, #4
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	4413      	add	r3, r2
 80052fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800530c:	b29a      	uxth	r2, r3
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005316:	2b3e      	cmp	r3, #62	; 0x3e
 8005318:	d921      	bls.n	800535e <USB_EPStartXfer+0x276>
 800531a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <USB_EPStartXfer+0x252>
 8005330:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005334:	3b01      	subs	r3, #1
 8005336:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29a      	uxth	r2, r3
 8005340:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005344:	b29b      	uxth	r3, r3
 8005346:	029b      	lsls	r3, r3, #10
 8005348:	b29b      	uxth	r3, r3
 800534a:	4313      	orrs	r3, r2
 800534c:	b29b      	uxth	r3, r3
 800534e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005356:	b29a      	uxth	r2, r3
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	e050      	b.n	8005400 <USB_EPStartXfer+0x318>
 800535e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10a      	bne.n	800537c <USB_EPStartXfer+0x294>
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005374:	b29a      	uxth	r2, r3
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	801a      	strh	r2, [r3, #0]
 800537a:	e041      	b.n	8005400 <USB_EPStartXfer+0x318>
 800537c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d004      	beq.n	800539c <USB_EPStartXfer+0x2b4>
 8005392:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005396:	3301      	adds	r3, #1
 8005398:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	029b      	lsls	r3, r3, #10
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	4313      	orrs	r3, r2
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	e024      	b.n	8005400 <USB_EPStartXfer+0x318>
 80053b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	785b      	ldrb	r3, [r3, #1]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d11c      	bne.n	8005400 <USB_EPStartXfer+0x318>
 80053c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	461a      	mov	r2, r3
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	4413      	add	r3, r2
 80053dc:	633b      	str	r3, [r7, #48]	; 0x30
 80053de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	011a      	lsls	r2, r3, #4
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	4413      	add	r3, r2
 80053f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	895b      	ldrh	r3, [r3, #10]
 800540c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6959      	ldr	r1, [r3, #20]
 800541c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005420:	b29b      	uxth	r3, r3
 8005422:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005426:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800542a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800542e:	6800      	ldr	r0, [r0, #0]
 8005430:	f001 fb49 	bl	8006ac6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005444:	441a      	add	r2, r3
 8005446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6a1a      	ldr	r2, [r3, #32]
 800545e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	429a      	cmp	r2, r3
 800546c:	d90f      	bls.n	800548e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800546e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6a1a      	ldr	r2, [r3, #32]
 800547a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800547e:	1ad2      	subs	r2, r2, r3
 8005480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	621a      	str	r2, [r3, #32]
 800548c:	e00e      	b.n	80054ac <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800548e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800549e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2200      	movs	r2, #0
 80054aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d177      	bne.n	80055ac <USB_EPStartXfer+0x4c4>
 80054bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	4413      	add	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	011a      	lsls	r2, r3, #4
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	4413      	add	r3, r2
 80054f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005502:	b29a      	uxth	r2, r3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550c:	2b3e      	cmp	r3, #62	; 0x3e
 800550e:	d921      	bls.n	8005554 <USB_EPStartXfer+0x46c>
 8005510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800551a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551e:	f003 031f 	and.w	r3, r3, #31
 8005522:	2b00      	cmp	r3, #0
 8005524:	d104      	bne.n	8005530 <USB_EPStartXfer+0x448>
 8005526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800552a:	3b01      	subs	r3, #1
 800552c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29a      	uxth	r2, r3
 8005536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800553a:	b29b      	uxth	r3, r3
 800553c:	029b      	lsls	r3, r3, #10
 800553e:	b29b      	uxth	r3, r3
 8005540:	4313      	orrs	r3, r2
 8005542:	b29b      	uxth	r3, r3
 8005544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554c:	b29a      	uxth	r2, r3
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	801a      	strh	r2, [r3, #0]
 8005552:	e056      	b.n	8005602 <USB_EPStartXfer+0x51a>
 8005554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <USB_EPStartXfer+0x48a>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800556a:	b29a      	uxth	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	e047      	b.n	8005602 <USB_EPStartXfer+0x51a>
 8005572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005576:	085b      	lsrs	r3, r3, #1
 8005578:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800557c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <USB_EPStartXfer+0x4aa>
 8005588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800558c:	3301      	adds	r3, #1
 800558e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29a      	uxth	r2, r3
 8005598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559c:	b29b      	uxth	r3, r3
 800559e:	029b      	lsls	r3, r3, #10
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	4313      	orrs	r3, r2
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	801a      	strh	r2, [r3, #0]
 80055aa:	e02a      	b.n	8005602 <USB_EPStartXfer+0x51a>
 80055ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	785b      	ldrb	r3, [r3, #1]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d122      	bne.n	8005602 <USB_EPStartXfer+0x51a>
 80055bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	623b      	str	r3, [r7, #32]
 80055c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	4413      	add	r3, r2
 80055de:	623b      	str	r3, [r7, #32]
 80055e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	011a      	lsls	r2, r3, #4
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	4413      	add	r3, r2
 80055f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055f6:	61fb      	str	r3, [r7, #28]
 80055f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	891b      	ldrh	r3, [r3, #8]
 800560e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6959      	ldr	r1, [r3, #20]
 800561e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005622:	b29b      	uxth	r3, r3
 8005624:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005628:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800562c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005630:	6800      	ldr	r0, [r0, #0]
 8005632:	f001 fa48 	bl	8006ac6 <USB_WritePMA>
 8005636:	e3ee      	b.n	8005e16 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d177      	bne.n	8005738 <USB_EPStartXfer+0x650>
 8005648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	64bb      	str	r3, [r7, #72]	; 0x48
 8005654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005662:	b29b      	uxth	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005668:	4413      	add	r3, r2
 800566a:	64bb      	str	r3, [r7, #72]	; 0x48
 800566c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	011a      	lsls	r2, r3, #4
 800567a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567c:	4413      	add	r3, r2
 800567e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005682:	647b      	str	r3, [r7, #68]	; 0x44
 8005684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800568e:	b29a      	uxth	r2, r3
 8005690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005692:	801a      	strh	r2, [r3, #0]
 8005694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005698:	2b3e      	cmp	r3, #62	; 0x3e
 800569a:	d921      	bls.n	80056e0 <USB_EPStartXfer+0x5f8>
 800569c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <USB_EPStartXfer+0x5d4>
 80056b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056b6:	3b01      	subs	r3, #1
 80056b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	029b      	lsls	r3, r3, #10
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	4313      	orrs	r3, r2
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d8:	b29a      	uxth	r2, r3
 80056da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	e056      	b.n	800578e <USB_EPStartXfer+0x6a6>
 80056e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <USB_EPStartXfer+0x616>
 80056e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056fa:	801a      	strh	r2, [r3, #0]
 80056fc:	e047      	b.n	800578e <USB_EPStartXfer+0x6a6>
 80056fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <USB_EPStartXfer+0x636>
 8005714:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005718:	3301      	adds	r3, #1
 800571a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800571e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29a      	uxth	r2, r3
 8005724:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005728:	b29b      	uxth	r3, r3
 800572a:	029b      	lsls	r3, r3, #10
 800572c:	b29b      	uxth	r3, r3
 800572e:	4313      	orrs	r3, r2
 8005730:	b29a      	uxth	r2, r3
 8005732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	e02a      	b.n	800578e <USB_EPStartXfer+0x6a6>
 8005738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	785b      	ldrb	r3, [r3, #1]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d122      	bne.n	800578e <USB_EPStartXfer+0x6a6>
 8005748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	653b      	str	r3, [r7, #80]	; 0x50
 8005754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005762:	b29b      	uxth	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005768:	4413      	add	r3, r2
 800576a:	653b      	str	r3, [r7, #80]	; 0x50
 800576c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	011a      	lsls	r2, r3, #4
 800577a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800577c:	4413      	add	r3, r2
 800577e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005788:	b29a      	uxth	r2, r3
 800578a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800578e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	891b      	ldrh	r3, [r3, #8]
 800579a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800579e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6959      	ldr	r1, [r3, #20]
 80057aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057bc:	6800      	ldr	r0, [r0, #0]
 80057be:	f001 f982 	bl	8006ac6 <USB_WritePMA>
            ep->xfer_buff += len;
 80057c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695a      	ldr	r2, [r3, #20]
 80057ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d2:	441a      	add	r2, r3
 80057d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6a1a      	ldr	r2, [r3, #32]
 80057ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d90f      	bls.n	800581c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80057fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6a1a      	ldr	r2, [r3, #32]
 8005808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800580c:	1ad2      	subs	r2, r2, r3
 800580e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	621a      	str	r2, [r3, #32]
 800581a:	e00e      	b.n	800583a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800581c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800582c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2200      	movs	r2, #0
 8005838:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800583a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	643b      	str	r3, [r7, #64]	; 0x40
 8005846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	785b      	ldrb	r3, [r3, #1]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d177      	bne.n	8005946 <USB_EPStartXfer+0x85e>
 8005856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	63bb      	str	r3, [r7, #56]	; 0x38
 8005862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005870:	b29b      	uxth	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	4413      	add	r3, r2
 8005878:	63bb      	str	r3, [r7, #56]	; 0x38
 800587a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	011a      	lsls	r2, r3, #4
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588a:	4413      	add	r3, r2
 800588c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005890:	637b      	str	r3, [r7, #52]	; 0x34
 8005892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800589c:	b29a      	uxth	r2, r3
 800589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a0:	801a      	strh	r2, [r3, #0]
 80058a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a6:	2b3e      	cmp	r3, #62	; 0x3e
 80058a8:	d921      	bls.n	80058ee <USB_EPStartXfer+0x806>
 80058aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d104      	bne.n	80058ca <USB_EPStartXfer+0x7e2>
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c4:	3b01      	subs	r3, #1
 80058c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	029b      	lsls	r3, r3, #10
 80058d8:	b29b      	uxth	r3, r3
 80058da:	4313      	orrs	r3, r2
 80058dc:	b29b      	uxth	r3, r3
 80058de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ea:	801a      	strh	r2, [r3, #0]
 80058ec:	e050      	b.n	8005990 <USB_EPStartXfer+0x8a8>
 80058ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <USB_EPStartXfer+0x824>
 80058f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005904:	b29a      	uxth	r2, r3
 8005906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005908:	801a      	strh	r2, [r3, #0]
 800590a:	e041      	b.n	8005990 <USB_EPStartXfer+0x8a8>
 800590c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <USB_EPStartXfer+0x844>
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005926:	3301      	adds	r3, #1
 8005928:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800592c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	b29a      	uxth	r2, r3
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005936:	b29b      	uxth	r3, r3
 8005938:	029b      	lsls	r3, r3, #10
 800593a:	b29b      	uxth	r3, r3
 800593c:	4313      	orrs	r3, r2
 800593e:	b29a      	uxth	r2, r3
 8005940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	e024      	b.n	8005990 <USB_EPStartXfer+0x8a8>
 8005946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d11c      	bne.n	8005990 <USB_EPStartXfer+0x8a8>
 8005956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005964:	b29b      	uxth	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800596a:	4413      	add	r3, r2
 800596c:	643b      	str	r3, [r7, #64]	; 0x40
 800596e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	011a      	lsls	r2, r3, #4
 800597c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800597e:	4413      	add	r3, r2
 8005980:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800598a:	b29a      	uxth	r2, r3
 800598c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	895b      	ldrh	r3, [r3, #10]
 800599c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6959      	ldr	r1, [r3, #20]
 80059ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059be:	6800      	ldr	r0, [r0, #0]
 80059c0:	f001 f881 	bl	8006ac6 <USB_WritePMA>
 80059c4:	e227      	b.n	8005e16 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80059d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	461a      	mov	r2, r3
 8005a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a52:	4413      	add	r3, r2
 8005a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	011a      	lsls	r2, r3, #4
 8005a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a66:	4413      	add	r3, r2
 8005a68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	891b      	ldrh	r3, [r3, #8]
 8005a84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6959      	ldr	r1, [r3, #20]
 8005a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005aa2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005aa6:	6800      	ldr	r0, [r0, #0]
 8005aa8:	f001 f80d 	bl	8006ac6 <USB_WritePMA>
 8005aac:	e1b3      	b.n	8005e16 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6a1a      	ldr	r2, [r3, #32]
 8005aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 80c6 	beq.w	8005c80 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	673b      	str	r3, [r7, #112]	; 0x70
 8005b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d177      	bne.n	8005c00 <USB_EPStartXfer+0xb18>
 8005b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b30:	4413      	add	r3, r2
 8005b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	011a      	lsls	r2, r3, #4
 8005b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b44:	4413      	add	r3, r2
 8005b46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b4a:	667b      	str	r3, [r7, #100]	; 0x64
 8005b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b5a:	801a      	strh	r2, [r3, #0]
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b60:	2b3e      	cmp	r3, #62	; 0x3e
 8005b62:	d921      	bls.n	8005ba8 <USB_EPStartXfer+0xac0>
 8005b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <USB_EPStartXfer+0xa9c>
 8005b7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	029b      	lsls	r3, r3, #10
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	4313      	orrs	r3, r2
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e050      	b.n	8005c4a <USB_EPStartXfer+0xb62>
 8005ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <USB_EPStartXfer+0xade>
 8005bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	e041      	b.n	8005c4a <USB_EPStartXfer+0xb62>
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bca:	085b      	lsrs	r3, r3, #1
 8005bcc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d004      	beq.n	8005be6 <USB_EPStartXfer+0xafe>
 8005bdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005be0:	3301      	adds	r3, #1
 8005be2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	029b      	lsls	r3, r3, #10
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	e024      	b.n	8005c4a <USB_EPStartXfer+0xb62>
 8005c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	785b      	ldrb	r3, [r3, #1]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d11c      	bne.n	8005c4a <USB_EPStartXfer+0xb62>
 8005c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c24:	4413      	add	r3, r2
 8005c26:	673b      	str	r3, [r7, #112]	; 0x70
 8005c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	011a      	lsls	r2, r3, #4
 8005c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c38:	4413      	add	r3, r2
 8005c3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	895b      	ldrh	r3, [r3, #10]
 8005c56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6959      	ldr	r1, [r3, #20]
 8005c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c78:	6800      	ldr	r0, [r0, #0]
 8005c7a:	f000 ff24 	bl	8006ac6 <USB_WritePMA>
 8005c7e:	e0ca      	b.n	8005e16 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	785b      	ldrb	r3, [r3, #1]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d177      	bne.n	8005d80 <USB_EPStartXfer+0xc98>
 8005c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cb0:	4413      	add	r3, r2
 8005cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	011a      	lsls	r2, r3, #4
 8005cc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cca:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cda:	801a      	strh	r2, [r3, #0]
 8005cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ce2:	d921      	bls.n	8005d28 <USB_EPStartXfer+0xc40>
 8005ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf2:	f003 031f 	and.w	r3, r3, #31
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <USB_EPStartXfer+0xc1c>
 8005cfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	029b      	lsls	r3, r3, #10
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	4313      	orrs	r3, r2
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d24:	801a      	strh	r2, [r3, #0]
 8005d26:	e05c      	b.n	8005de2 <USB_EPStartXfer+0xcfa>
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10a      	bne.n	8005d46 <USB_EPStartXfer+0xc5e>
 8005d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d42:	801a      	strh	r2, [r3, #0]
 8005d44:	e04d      	b.n	8005de2 <USB_EPStartXfer+0xcfa>
 8005d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d4a:	085b      	lsrs	r3, r3, #1
 8005d4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <USB_EPStartXfer+0xc7e>
 8005d5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d60:	3301      	adds	r3, #1
 8005d62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	029b      	lsls	r3, r3, #10
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	4313      	orrs	r3, r2
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d7c:	801a      	strh	r2, [r3, #0]
 8005d7e:	e030      	b.n	8005de2 <USB_EPStartXfer+0xcfa>
 8005d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d128      	bne.n	8005de2 <USB_EPStartXfer+0xcfa>
 8005d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	461a      	mov	r2, r3
 8005db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005db4:	4413      	add	r3, r2
 8005db6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	011a      	lsls	r2, r3, #4
 8005dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dcc:	4413      	add	r3, r2
 8005dce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005de0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	891b      	ldrh	r3, [r3, #8]
 8005dee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6959      	ldr	r1, [r3, #20]
 8005dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e08:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e10:	6800      	ldr	r0, [r0, #0]
 8005e12:	f000 fe58 	bl	8006ac6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e3c:	817b      	strh	r3, [r7, #10]
 8005e3e:	897b      	ldrh	r3, [r7, #10]
 8005e40:	f083 0310 	eor.w	r3, r3, #16
 8005e44:	817b      	strh	r3, [r7, #10]
 8005e46:	897b      	ldrh	r3, [r7, #10]
 8005e48:	f083 0320 	eor.w	r3, r3, #32
 8005e4c:	817b      	strh	r3, [r7, #10]
 8005e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	441a      	add	r2, r3
 8005e68:	897b      	ldrh	r3, [r7, #10]
 8005e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	8013      	strh	r3, [r2, #0]
 8005e7e:	f000 bcde 	b.w	800683e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	7b1b      	ldrb	r3, [r3, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f040 80bb 	bne.w	800600a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	699a      	ldr	r2, [r3, #24]
 8005ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d917      	bls.n	8005ee0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	699a      	ldr	r2, [r3, #24]
 8005ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed0:	1ad2      	subs	r2, r2, r3
 8005ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	619a      	str	r2, [r3, #24]
 8005ede:	e00e      	b.n	8005efe <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2200      	movs	r2, #0
 8005efc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f22:	4413      	add	r3, r2
 8005f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	011a      	lsls	r2, r3, #4
 8005f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f5e:	d924      	bls.n	8005faa <USB_EPStartXfer+0xec2>
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6e:	f003 031f 	and.w	r3, r3, #31
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <USB_EPStartXfer+0xe98>
 8005f76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	029b      	lsls	r3, r3, #10
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	4313      	orrs	r3, r2
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fa4:	801a      	strh	r2, [r3, #0]
 8005fa6:	f000 bc10 	b.w	80067ca <USB_EPStartXfer+0x16e2>
 8005faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10c      	bne.n	8005fcc <USB_EPStartXfer+0xee4>
 8005fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	e3fe      	b.n	80067ca <USB_EPStartXfer+0x16e2>
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <USB_EPStartXfer+0xf04>
 8005fe2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	029b      	lsls	r3, r3, #10
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	4313      	orrs	r3, r2
 8006000:	b29a      	uxth	r2, r3
 8006002:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	e3df      	b.n	80067ca <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800600a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	78db      	ldrb	r3, [r3, #3]
 8006016:	2b02      	cmp	r3, #2
 8006018:	f040 8218 	bne.w	800644c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800601c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	785b      	ldrb	r3, [r3, #1]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f040 809d 	bne.w	8006168 <USB_EPStartXfer+0x1080>
 800602e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800603c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604a:	b29b      	uxth	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006052:	4413      	add	r3, r2
 8006054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	011a      	lsls	r2, r3, #4
 8006066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800606a:	4413      	add	r3, r2
 800606c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006080:	b29a      	uxth	r2, r3
 8006082:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006086:	801a      	strh	r2, [r3, #0]
 8006088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2b3e      	cmp	r3, #62	; 0x3e
 8006096:	d92b      	bls.n	80060f0 <USB_EPStartXfer+0x1008>
 8006098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 031f 	and.w	r3, r3, #31
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <USB_EPStartXfer+0xfe0>
 80060be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c2:	3b01      	subs	r3, #1
 80060c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	029b      	lsls	r3, r3, #10
 80060d8:	b29b      	uxth	r3, r3
 80060da:	4313      	orrs	r3, r2
 80060dc:	b29b      	uxth	r3, r3
 80060de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	e070      	b.n	80061d2 <USB_EPStartXfer+0x10ea>
 80060f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10c      	bne.n	800611a <USB_EPStartXfer+0x1032>
 8006100:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006110:	b29a      	uxth	r2, r3
 8006112:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	e05b      	b.n	80061d2 <USB_EPStartXfer+0x10ea>
 800611a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800612c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <USB_EPStartXfer+0x1062>
 8006140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006144:	3301      	adds	r3, #1
 8006146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800614a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29a      	uxth	r2, r3
 8006152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006156:	b29b      	uxth	r3, r3
 8006158:	029b      	lsls	r3, r3, #10
 800615a:	b29b      	uxth	r3, r3
 800615c:	4313      	orrs	r3, r2
 800615e:	b29a      	uxth	r2, r3
 8006160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006164:	801a      	strh	r2, [r3, #0]
 8006166:	e034      	b.n	80061d2 <USB_EPStartXfer+0x10ea>
 8006168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	785b      	ldrb	r3, [r3, #1]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d12c      	bne.n	80061d2 <USB_EPStartXfer+0x10ea>
 8006178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006194:	b29b      	uxth	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800619c:	4413      	add	r3, r2
 800619e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	011a      	lsls	r2, r3, #4
 80061b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061b4:	4413      	add	r3, r2
 80061b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 809d 	bne.w	800632c <USB_EPStartXfer+0x1244>
 80061f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620e:	b29b      	uxth	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006216:	4413      	add	r3, r2
 8006218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800621c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	011a      	lsls	r2, r3, #4
 800622a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800622e:	4413      	add	r3, r2
 8006230:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006244:	b29a      	uxth	r2, r3
 8006246:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b3e      	cmp	r3, #62	; 0x3e
 800625a:	d92b      	bls.n	80062b4 <USB_EPStartXfer+0x11cc>
 800625c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800626e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <USB_EPStartXfer+0x11a4>
 8006282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006286:	3b01      	subs	r3, #1
 8006288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800628c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29a      	uxth	r2, r3
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006298:	b29b      	uxth	r3, r3
 800629a:	029b      	lsls	r3, r3, #10
 800629c:	b29b      	uxth	r3, r3
 800629e:	4313      	orrs	r3, r2
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	e069      	b.n	8006388 <USB_EPStartXfer+0x12a0>
 80062b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10c      	bne.n	80062de <USB_EPStartXfer+0x11f6>
 80062c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	e054      	b.n	8006388 <USB_EPStartXfer+0x12a0>
 80062de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	085b      	lsrs	r3, r3, #1
 80062ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <USB_EPStartXfer+0x1226>
 8006304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006308:	3301      	adds	r3, #1
 800630a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800630e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29a      	uxth	r2, r3
 8006316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800631a:	b29b      	uxth	r3, r3
 800631c:	029b      	lsls	r3, r3, #10
 800631e:	b29b      	uxth	r3, r3
 8006320:	4313      	orrs	r3, r2
 8006322:	b29a      	uxth	r2, r3
 8006324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	e02d      	b.n	8006388 <USB_EPStartXfer+0x12a0>
 800632c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d125      	bne.n	8006388 <USB_EPStartXfer+0x12a0>
 800633c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006340:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634a:	b29b      	uxth	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006352:	4413      	add	r3, r2
 8006354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	011a      	lsls	r2, r3, #4
 8006366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800636a:	4413      	add	r3, r2
 800636c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006370:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	b29a      	uxth	r2, r3
 8006382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006386:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8218 	beq.w	80067ca <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800639a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <USB_EPStartXfer+0x12ea>
 80063c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10d      	bne.n	80063ee <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f040 81f5 	bne.w	80067ca <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f040 81ee 	bne.w	80067ca <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006414:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	441a      	add	r2, r3
 8006432:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006442:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006446:	b29b      	uxth	r3, r3
 8006448:	8013      	strh	r3, [r2, #0]
 800644a:	e1be      	b.n	80067ca <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800644c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	78db      	ldrb	r3, [r3, #3]
 8006458:	2b01      	cmp	r3, #1
 800645a:	f040 81b4 	bne.w	80067c6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800645e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699a      	ldr	r2, [r3, #24]
 800646a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	429a      	cmp	r2, r3
 8006478:	d917      	bls.n	80064aa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800647a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800648a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649a:	1ad2      	subs	r2, r2, r3
 800649c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	619a      	str	r2, [r3, #24]
 80064a8:	e00e      	b.n	80064c8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80064aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80064ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2200      	movs	r2, #0
 80064c6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f040 8085 	bne.w	80065e4 <USB_EPStartXfer+0x14fc>
 80064da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064fe:	4413      	add	r3, r2
 8006500:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	011a      	lsls	r2, r3, #4
 8006512:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006516:	4413      	add	r3, r2
 8006518:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800651c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29b      	uxth	r3, r3
 8006528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800652c:	b29a      	uxth	r2, r3
 800652e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006532:	801a      	strh	r2, [r3, #0]
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006538:	2b3e      	cmp	r3, #62	; 0x3e
 800653a:	d923      	bls.n	8006584 <USB_EPStartXfer+0x149c>
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006540:	095b      	lsrs	r3, r3, #5
 8006542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800654a:	f003 031f 	and.w	r3, r3, #31
 800654e:	2b00      	cmp	r3, #0
 8006550:	d104      	bne.n	800655c <USB_EPStartXfer+0x1474>
 8006552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006556:	3b01      	subs	r3, #1
 8006558:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800655c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29a      	uxth	r2, r3
 8006564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006568:	b29b      	uxth	r3, r3
 800656a:	029b      	lsls	r3, r3, #10
 800656c:	b29b      	uxth	r3, r3
 800656e:	4313      	orrs	r3, r2
 8006570:	b29b      	uxth	r3, r3
 8006572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657a:	b29a      	uxth	r2, r3
 800657c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006580:	801a      	strh	r2, [r3, #0]
 8006582:	e060      	b.n	8006646 <USB_EPStartXfer+0x155e>
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10c      	bne.n	80065a6 <USB_EPStartXfer+0x14be>
 800658c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659c:	b29a      	uxth	r2, r3
 800659e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e04f      	b.n	8006646 <USB_EPStartXfer+0x155e>
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <USB_EPStartXfer+0x14de>
 80065bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065c0:	3301      	adds	r3, #1
 80065c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	029b      	lsls	r3, r3, #10
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	4313      	orrs	r3, r2
 80065da:	b29a      	uxth	r2, r3
 80065dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	e030      	b.n	8006646 <USB_EPStartXfer+0x155e>
 80065e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d128      	bne.n	8006646 <USB_EPStartXfer+0x155e>
 80065f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006610:	b29b      	uxth	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006618:	4413      	add	r3, r2
 800661a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800661e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	011a      	lsls	r2, r3, #4
 800662c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006630:	4413      	add	r3, r2
 8006632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006636:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663e:	b29a      	uxth	r2, r3
 8006640:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b00      	cmp	r3, #0
 8006662:	f040 8085 	bne.w	8006770 <USB_EPStartXfer+0x1688>
 8006666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006682:	b29b      	uxth	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800668a:	4413      	add	r3, r2
 800668c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	011a      	lsls	r2, r3, #4
 800669e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066a2:	4413      	add	r3, r2
 80066a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c4:	2b3e      	cmp	r3, #62	; 0x3e
 80066c6:	d923      	bls.n	8006710 <USB_EPStartXfer+0x1628>
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <USB_EPStartXfer+0x1600>
 80066de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066e2:	3b01      	subs	r3, #1
 80066e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	029b      	lsls	r3, r3, #10
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	4313      	orrs	r3, r2
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006706:	b29a      	uxth	r2, r3
 8006708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800670c:	801a      	strh	r2, [r3, #0]
 800670e:	e05c      	b.n	80067ca <USB_EPStartXfer+0x16e2>
 8006710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10c      	bne.n	8006732 <USB_EPStartXfer+0x164a>
 8006718:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006728:	b29a      	uxth	r2, r3
 800672a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800672e:	801a      	strh	r2, [r3, #0]
 8006730:	e04b      	b.n	80067ca <USB_EPStartXfer+0x16e2>
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006736:	085b      	lsrs	r3, r3, #1
 8006738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <USB_EPStartXfer+0x166a>
 8006748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800674c:	3301      	adds	r3, #1
 800674e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29a      	uxth	r2, r3
 800675a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800675e:	b29b      	uxth	r3, r3
 8006760:	029b      	lsls	r3, r3, #10
 8006762:	b29b      	uxth	r3, r3
 8006764:	4313      	orrs	r3, r2
 8006766:	b29a      	uxth	r2, r3
 8006768:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800676c:	801a      	strh	r2, [r3, #0]
 800676e:	e02c      	b.n	80067ca <USB_EPStartXfer+0x16e2>
 8006770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d124      	bne.n	80067ca <USB_EPStartXfer+0x16e2>
 8006780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678e:	b29b      	uxth	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006796:	4413      	add	r3, r2
 8006798:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800679c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	011a      	lsls	r2, r3, #4
 80067aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067ae:	4413      	add	r3, r2
 80067b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067bc:	b29a      	uxth	r2, r3
 80067be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	e001      	b.n	80067ca <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e03a      	b.n	8006840 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006800:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006804:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006808:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800680c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	441a      	add	r2, r3
 8006826:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800682a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683a:	b29b      	uxth	r3, r3
 800683c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800684a:	b480      	push	{r7}
 800684c:	b085      	sub	sp, #20
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d020      	beq.n	800689e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006872:	81bb      	strh	r3, [r7, #12]
 8006874:	89bb      	ldrh	r3, [r7, #12]
 8006876:	f083 0310 	eor.w	r3, r3, #16
 800687a:	81bb      	strh	r3, [r7, #12]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	441a      	add	r2, r3
 8006886:	89bb      	ldrh	r3, [r7, #12]
 8006888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800688c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006898:	b29b      	uxth	r3, r3
 800689a:	8013      	strh	r3, [r2, #0]
 800689c:	e01f      	b.n	80068de <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b4:	81fb      	strh	r3, [r7, #14]
 80068b6:	89fb      	ldrh	r3, [r7, #14]
 80068b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068bc:	81fb      	strh	r3, [r7, #14]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	441a      	add	r2, r3
 80068c8:	89fb      	ldrh	r3, [r7, #14]
 80068ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068da:	b29b      	uxth	r3, r3
 80068dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr

080068ea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b087      	sub	sp, #28
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	7b1b      	ldrb	r3, [r3, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f040 809d 	bne.w	8006a38 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	785b      	ldrb	r3, [r3, #1]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d04c      	beq.n	80069a0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	823b      	strh	r3, [r7, #16]
 8006914:	8a3b      	ldrh	r3, [r7, #16]
 8006916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01b      	beq.n	8006956 <USB_EPClearStall+0x6c>
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006934:	81fb      	strh	r3, [r7, #14]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	441a      	add	r2, r3
 8006940:	89fb      	ldrh	r3, [r7, #14]
 8006942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006952:	b29b      	uxth	r3, r3
 8006954:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	78db      	ldrb	r3, [r3, #3]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d06c      	beq.n	8006a38 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006974:	81bb      	strh	r3, [r7, #12]
 8006976:	89bb      	ldrh	r3, [r7, #12]
 8006978:	f083 0320 	eor.w	r3, r3, #32
 800697c:	81bb      	strh	r3, [r7, #12]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	441a      	add	r2, r3
 8006988:	89bb      	ldrh	r3, [r7, #12]
 800698a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699a:	b29b      	uxth	r3, r3
 800699c:	8013      	strh	r3, [r2, #0]
 800699e:	e04b      	b.n	8006a38 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	82fb      	strh	r3, [r7, #22]
 80069ae:	8afb      	ldrh	r3, [r7, #22]
 80069b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01b      	beq.n	80069f0 <USB_EPClearStall+0x106>
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ce:	82bb      	strh	r3, [r7, #20]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	8abb      	ldrh	r3, [r7, #20]
 80069dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	827b      	strh	r3, [r7, #18]
 8006a08:	8a7b      	ldrh	r3, [r7, #18]
 8006a0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a0e:	827b      	strh	r3, [r7, #18]
 8006a10:	8a7b      	ldrh	r3, [r7, #18]
 8006a12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a16:	827b      	strh	r3, [r7, #18]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	441a      	add	r2, r3
 8006a22:	8a7b      	ldrh	r3, [r7, #18]
 8006a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr

08006a44 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d103      	bne.n	8006a5e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2280      	movs	r2, #128	; 0x80
 8006a5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr

08006a6a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr

08006a92 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr

08006ac6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b08b      	sub	sp, #44	; 0x2c
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	80fb      	strh	r3, [r7, #6]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006adc:	88bb      	ldrh	r3, [r7, #4]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	085b      	lsrs	r3, r3, #1
 8006ae2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006aec:	88fb      	ldrh	r3, [r7, #6]
 8006aee:	005a      	lsls	r2, r3, #1
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
 8006afe:	e01e      	b.n	8006b3e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	b21a      	sxth	r2, r3
 8006b10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	b21b      	sxth	r3, r3
 8006b18:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	8a7a      	ldrh	r2, [r7, #18]
 8006b1e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	3302      	adds	r3, #2
 8006b24:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	3302      	adds	r3, #2
 8006b2a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	3301      	adds	r3, #1
 8006b36:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1dd      	bne.n	8006b00 <USB_WritePMA+0x3a>
  }
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop
 8006b48:	372c      	adds	r7, #44	; 0x2c
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr

08006b50 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b08b      	sub	sp, #44	; 0x2c
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	460b      	mov	r3, r1
 8006b60:	80fb      	strh	r3, [r7, #6]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b66:	88bb      	ldrh	r3, [r7, #4]
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	005a      	lsls	r2, r3, #1
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b82:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
 8006b88:	e01b      	b.n	8006bc2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	3302      	adds	r3, #2
 8006b96:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	0a1b      	lsrs	r3, r3, #8
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	3302      	adds	r3, #2
 8006bba:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e0      	bne.n	8006b8a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006bc8:	88bb      	ldrh	r3, [r7, #4]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d007      	beq.n	8006be4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	701a      	strb	r2, [r3, #0]
  }
}
 8006be4:	bf00      	nop
 8006be6:	372c      	adds	r7, #44	; 0x2c
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7c1b      	ldrb	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d115      	bne.n	8006c32 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	2181      	movs	r1, #129	; 0x81
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f001 fe87 	bl	8008922 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c1e:	2202      	movs	r2, #2
 8006c20:	2101      	movs	r1, #1
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 fe7d 	bl	8008922 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006c30:	e012      	b.n	8006c58 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c32:	2340      	movs	r3, #64	; 0x40
 8006c34:	2202      	movs	r2, #2
 8006c36:	2181      	movs	r1, #129	; 0x81
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 fe72 	bl	8008922 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c44:	2340      	movs	r3, #64	; 0x40
 8006c46:	2202      	movs	r2, #2
 8006c48:	2101      	movs	r1, #1
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 fe69 	bl	8008922 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c58:	2308      	movs	r3, #8
 8006c5a:	2203      	movs	r2, #3
 8006c5c:	2182      	movs	r1, #130	; 0x82
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 fe5f 	bl	8008922 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c6a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c6e:	f001 ff7f 	bl	8008b70 <USBD_static_malloc>
 8006c72:	4602      	mov	r2, r0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d102      	bne.n	8006c8a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c84:	2301      	movs	r3, #1
 8006c86:	73fb      	strb	r3, [r7, #15]
 8006c88:	e026      	b.n	8006cd8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c90:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	7c1b      	ldrb	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d109      	bne.n	8006cc8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 ff1f 	bl	8008b04 <USBD_LL_PrepareReceive>
 8006cc6:	e007      	b.n	8006cd8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cce:	2340      	movs	r3, #64	; 0x40
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f001 ff16 	bl	8008b04 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cf2:	2181      	movs	r1, #129	; 0x81
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 fe3a 	bl	800896e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d00:	2101      	movs	r1, #1
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 fe33 	bl	800896e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d10:	2182      	movs	r1, #130	; 0x82
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fe2b 	bl	800896e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00e      	beq.n	8006d46 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 ff25 	bl	8008b88 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d039      	beq.n	8006dee <USBD_CDC_Setup+0x9e>
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	d17f      	bne.n	8006e7e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	88db      	ldrh	r3, [r3, #6]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d029      	beq.n	8006dda <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	b25b      	sxtb	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	da11      	bge.n	8006db4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006d9c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	88d2      	ldrh	r2, [r2, #6]
 8006da2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006da4:	6939      	ldr	r1, [r7, #16]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	88db      	ldrh	r3, [r3, #6]
 8006daa:	461a      	mov	r2, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 fa0a 	bl	80081c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006db2:	e06b      	b.n	8006e8c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	785a      	ldrb	r2, [r3, #1]
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	88db      	ldrh	r3, [r3, #6]
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006dca:	6939      	ldr	r1, [r7, #16]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	88db      	ldrh	r3, [r3, #6]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 fa25 	bl	8008222 <USBD_CtlPrepareRx>
      break;
 8006dd8:	e058      	b.n	8006e8c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	7850      	ldrb	r0, [r2, #1]
 8006de6:	2200      	movs	r2, #0
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	4798      	blx	r3
      break;
 8006dec:	e04e      	b.n	8006e8c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	2b0b      	cmp	r3, #11
 8006df4:	d02e      	beq.n	8006e54 <USBD_CDC_Setup+0x104>
 8006df6:	2b0b      	cmp	r3, #11
 8006df8:	dc38      	bgt.n	8006e6c <USBD_CDC_Setup+0x11c>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <USBD_CDC_Setup+0xb4>
 8006dfe:	2b0a      	cmp	r3, #10
 8006e00:	d014      	beq.n	8006e2c <USBD_CDC_Setup+0xdc>
 8006e02:	e033      	b.n	8006e6c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d107      	bne.n	8006e1e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e0e:	f107 030c 	add.w	r3, r7, #12
 8006e12:	2202      	movs	r2, #2
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 f9d5 	bl	80081c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e1c:	e02e      	b.n	8006e7c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 f966 	bl	80080f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e26:	2302      	movs	r3, #2
 8006e28:	75fb      	strb	r3, [r7, #23]
          break;
 8006e2a:	e027      	b.n	8006e7c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d107      	bne.n	8006e46 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e36:	f107 030f 	add.w	r3, r7, #15
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 f9c1 	bl	80081c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e44:	e01a      	b.n	8006e7c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 f952 	bl	80080f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e4e:	2302      	movs	r3, #2
 8006e50:	75fb      	strb	r3, [r7, #23]
          break;
 8006e52:	e013      	b.n	8006e7c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d00d      	beq.n	8006e7a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 f946 	bl	80080f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e66:	2302      	movs	r3, #2
 8006e68:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e6a:	e006      	b.n	8006e7a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 f93f 	bl	80080f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e74:	2302      	movs	r3, #2
 8006e76:	75fb      	strb	r3, [r7, #23]
          break;
 8006e78:	e000      	b.n	8006e7c <USBD_CDC_Setup+0x12c>
          break;
 8006e7a:	bf00      	nop
      }
      break;
 8006e7c:	e006      	b.n	8006e8c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 f936 	bl	80080f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e86:	2302      	movs	r3, #2
 8006e88:	75fb      	strb	r3, [r7, #23]
      break;
 8006e8a:	bf00      	nop
  }

  return ret;
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b084      	sub	sp, #16
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eb0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d03a      	beq.n	8006f32 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ebc:	78fa      	ldrb	r2, [r7, #3]
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	331c      	adds	r3, #28
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d029      	beq.n	8006f26 <USBD_CDC_DataIn+0x90>
 8006ed2:	78fa      	ldrb	r2, [r7, #3]
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	331c      	adds	r3, #28
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	78f9      	ldrb	r1, [r7, #3]
 8006ee6:	68b8      	ldr	r0, [r7, #8]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	4403      	add	r3, r0
 8006ef2:	3338      	adds	r3, #56	; 0x38
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	fbb2 f1f3 	udiv	r1, r2, r3
 8006efa:	fb01 f303 	mul.w	r3, r1, r3
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d110      	bne.n	8006f26 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f04:	78fa      	ldrb	r2, [r7, #3]
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	440b      	add	r3, r1
 8006f12:	331c      	adds	r3, #28
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f18:	78f9      	ldrb	r1, [r7, #3]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 fdcd 	bl	8008abe <USBD_LL_Transmit>
 8006f24:	e003      	b.n	8006f2e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e000      	b.n	8006f34 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f32:	2302      	movs	r3, #2
  }
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fdf8 	bl	8008b4a <USBD_LL_GetRxDataSize>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00d      	beq.n	8006f88 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f80:	4611      	mov	r1, r2
 8006f82:	4798      	blx	r3

    return USBD_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	e000      	b.n	8006f8a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f88:	2302      	movs	r3, #2
  }
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d015      	beq.n	8006fd8 <USBD_CDC_EP0_RxReady+0x46>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fb2:	2bff      	cmp	r3, #255	; 0xff
 8006fb4:	d010      	beq.n	8006fd8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006fc4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fcc:	b292      	uxth	r2, r2
 8006fce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	22ff      	movs	r2, #255	; 0xff
 8006fd4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2243      	movs	r2, #67	; 0x43
 8006ff0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006ff2:	4b03      	ldr	r3, [pc, #12]	; (8007000 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	20000094 	.word	0x20000094

08007004 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2243      	movs	r2, #67	; 0x43
 8007010:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007012:	4b03      	ldr	r3, [pc, #12]	; (8007020 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	bc80      	pop	{r7}
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	20000050 	.word	0x20000050

08007024 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2243      	movs	r2, #67	; 0x43
 8007030:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007032:	4b03      	ldr	r3, [pc, #12]	; (8007040 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	200000d8 	.word	0x200000d8

08007044 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	220a      	movs	r2, #10
 8007050:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007052:	4b03      	ldr	r3, [pc, #12]	; (8007060 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	bc80      	pop	{r7}
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	2000000c 	.word	0x2000000c

08007064 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800706e:	2302      	movs	r3, #2
 8007070:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d005      	beq.n	8007084 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	bc80      	pop	{r7}
 800708e:	4770      	bx	lr

08007090 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	4613      	mov	r3, r2
 800709c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070ae:	88fa      	ldrh	r2, [r7, #6]
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr

080070c2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bc80      	pop	{r7}
 80070e6:	4770      	bx	lr

080070e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d01c      	beq.n	800713c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007108:	2b00      	cmp	r3, #0
 800710a:	d115      	bne.n	8007138 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2201      	movs	r2, #1
 8007110:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800712a:	b29b      	uxth	r3, r3
 800712c:	2181      	movs	r1, #129	; 0x81
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 fcc5 	bl	8008abe <USBD_LL_Transmit>

      return USBD_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	e002      	b.n	800713e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007138:	2301      	movs	r3, #1
 800713a:	e000      	b.n	800713e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800713c:	2302      	movs	r3, #2
  }
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007154:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715c:	2b00      	cmp	r3, #0
 800715e:	d017      	beq.n	8007190 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7c1b      	ldrb	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d109      	bne.n	800717c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800716e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007172:	2101      	movs	r1, #1
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 fcc5 	bl	8008b04 <USBD_LL_PrepareReceive>
 800717a:	e007      	b.n	800718c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007182:	2340      	movs	r3, #64	; 0x40
 8007184:	2101      	movs	r1, #1
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 fcbc 	bl	8008b04 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	e000      	b.n	8007192 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007190:	2302      	movs	r3, #2
  }
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	4613      	mov	r3, r2
 80071a6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80071ae:	2302      	movs	r3, #2
 80071b0:	e01a      	b.n	80071e8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	79fa      	ldrb	r2, [r7, #7]
 80071de:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f001 fb29 	bl	8008838 <USBD_LL_Init>

  return USBD_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d006      	beq.n	8007212 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	73fb      	strb	r3, [r7, #15]
 8007210:	e001      	b.n	8007216 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007212:	2302      	movs	r3, #2
 8007214:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr

08007222 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fb5e 	bl	80088ec <USBD_LL_Start>

  return USBD_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr

0800724e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	460b      	mov	r3, r1
 8007258:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800725a:	2302      	movs	r3, #2
 800725c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00c      	beq.n	8007282 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	78fa      	ldrb	r2, [r7, #3]
 8007272:	4611      	mov	r1, r2
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	78fa      	ldrb	r2, [r7, #3]
 80072a2:	4611      	mov	r1, r2
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3

  return USBD_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fed8 	bl	800807a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072d8:	461a      	mov	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d016      	beq.n	800731c <USBD_LL_SetupStage+0x6a>
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d81c      	bhi.n	800732c <USBD_LL_SetupStage+0x7a>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <USBD_LL_SetupStage+0x4a>
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d008      	beq.n	800730c <USBD_LL_SetupStage+0x5a>
 80072fa:	e017      	b.n	800732c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f9cb 	bl	80076a0 <USBD_StdDevReq>
      break;
 800730a:	e01a      	b.n	8007342 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fa2d 	bl	8007774 <USBD_StdItfReq>
      break;
 800731a:	e012      	b.n	8007342 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fa6d 	bl	8007804 <USBD_StdEPReq>
      break;
 800732a:	e00a      	b.n	8007342 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007332:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007336:	b2db      	uxtb	r3, r3
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 fb36 	bl	80089ac <USBD_LL_StallEP>
      break;
 8007340:	bf00      	nop
  }

  return USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	460b      	mov	r3, r1
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800735a:	7afb      	ldrb	r3, [r7, #11]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d14b      	bne.n	80073f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007366:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800736e:	2b03      	cmp	r3, #3
 8007370:	d134      	bne.n	80073dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	429a      	cmp	r2, r3
 800737c:	d919      	bls.n	80073b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	1ad2      	subs	r2, r2, r3
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007394:	429a      	cmp	r2, r3
 8007396:	d203      	bcs.n	80073a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800739c:	b29b      	uxth	r3, r3
 800739e:	e002      	b.n	80073a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	461a      	mov	r2, r3
 80073a8:	6879      	ldr	r1, [r7, #4]
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 ff57 	bl	800825e <USBD_CtlContinueRx>
 80073b0:	e038      	b.n	8007424 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d105      	bne.n	80073d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 ff54 	bl	8008282 <USBD_CtlSendStatus>
 80073da:	e023      	b.n	8007424 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073e2:	2b05      	cmp	r3, #5
 80073e4:	d11e      	bne.n	8007424 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80073ee:	2100      	movs	r1, #0
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f001 fadb 	bl	80089ac <USBD_LL_StallEP>
 80073f6:	e015      	b.n	8007424 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00d      	beq.n	8007420 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800740a:	2b03      	cmp	r3, #3
 800740c:	d108      	bne.n	8007420 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	7afa      	ldrb	r2, [r7, #11]
 8007418:	4611      	mov	r1, r2
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	4798      	blx	r3
 800741e:	e001      	b.n	8007424 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007420:	2302      	movs	r3, #2
 8007422:	e000      	b.n	8007426 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b086      	sub	sp, #24
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	460b      	mov	r3, r1
 8007438:	607a      	str	r2, [r7, #4]
 800743a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800743c:	7afb      	ldrb	r3, [r7, #11]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d17f      	bne.n	8007542 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3314      	adds	r3, #20
 8007446:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800744e:	2b02      	cmp	r3, #2
 8007450:	d15c      	bne.n	800750c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	429a      	cmp	r2, r3
 800745c:	d915      	bls.n	800748a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	1ad2      	subs	r2, r2, r3
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	b29b      	uxth	r3, r3
 8007472:	461a      	mov	r2, r3
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fec1 	bl	80081fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800747c:	2300      	movs	r3, #0
 800747e:	2200      	movs	r2, #0
 8007480:	2100      	movs	r1, #0
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f001 fb3e 	bl	8008b04 <USBD_LL_PrepareReceive>
 8007488:	e04e      	b.n	8007528 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	6912      	ldr	r2, [r2, #16]
 8007492:	fbb3 f1f2 	udiv	r1, r3, r2
 8007496:	fb01 f202 	mul.w	r2, r1, r2
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d11c      	bne.n	80074da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d316      	bcc.n	80074da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d20f      	bcs.n	80074da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074ba:	2200      	movs	r2, #0
 80074bc:	2100      	movs	r1, #0
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fe9d 	bl	80081fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074cc:	2300      	movs	r3, #0
 80074ce:	2200      	movs	r2, #0
 80074d0:	2100      	movs	r1, #0
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f001 fb16 	bl	8008b04 <USBD_LL_PrepareReceive>
 80074d8:	e026      	b.n	8007528 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d105      	bne.n	80074fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80074fc:	2180      	movs	r1, #128	; 0x80
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f001 fa54 	bl	80089ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 fecf 	bl	80082a8 <USBD_CtlReceiveStatus>
 800750a:	e00d      	b.n	8007528 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007512:	2b04      	cmp	r3, #4
 8007514:	d004      	beq.n	8007520 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800751c:	2b00      	cmp	r3, #0
 800751e:	d103      	bne.n	8007528 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007520:	2180      	movs	r1, #128	; 0x80
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f001 fa42 	bl	80089ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800752e:	2b01      	cmp	r3, #1
 8007530:	d11d      	bne.n	800756e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff fe81 	bl	800723a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007540:	e015      	b.n	800756e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00d      	beq.n	800756a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007554:	2b03      	cmp	r3, #3
 8007556:	d108      	bne.n	800756a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	7afa      	ldrb	r2, [r7, #11]
 8007562:	4611      	mov	r1, r2
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	4798      	blx	r3
 8007568:	e001      	b.n	800756e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800756a:	2302      	movs	r3, #2
 800756c:	e000      	b.n	8007570 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007580:	2340      	movs	r3, #64	; 0x40
 8007582:	2200      	movs	r2, #0
 8007584:	2100      	movs	r1, #0
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 f9cb 	bl	8008922 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2240      	movs	r2, #64	; 0x40
 8007598:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	2200      	movs	r2, #0
 80075a0:	2180      	movs	r1, #128	; 0x80
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 f9bd 	bl	8008922 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2240      	movs	r2, #64	; 0x40
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d009      	beq.n	80075f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	6852      	ldr	r2, [r2, #4]
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	4611      	mov	r1, r2
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
  }

  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	78fa      	ldrb	r2, [r7, #3]
 800760a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2204      	movs	r2, #4
 8007630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr

08007640 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764e:	2b04      	cmp	r3, #4
 8007650:	d105      	bne.n	800765e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr

0800766a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007678:	2b03      	cmp	r3, #3
 800767a:	d10b      	bne.n	8007694 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076b6:	2b40      	cmp	r3, #64	; 0x40
 80076b8:	d005      	beq.n	80076c6 <USBD_StdDevReq+0x26>
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	d84f      	bhi.n	800775e <USBD_StdDevReq+0xbe>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d009      	beq.n	80076d6 <USBD_StdDevReq+0x36>
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d14b      	bne.n	800775e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	4798      	blx	r3
      break;
 80076d4:	e048      	b.n	8007768 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	785b      	ldrb	r3, [r3, #1]
 80076da:	2b09      	cmp	r3, #9
 80076dc:	d839      	bhi.n	8007752 <USBD_StdDevReq+0xb2>
 80076de:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <USBD_StdDevReq+0x44>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	08007735 	.word	0x08007735
 80076e8:	08007749 	.word	0x08007749
 80076ec:	08007753 	.word	0x08007753
 80076f0:	0800773f 	.word	0x0800773f
 80076f4:	08007753 	.word	0x08007753
 80076f8:	08007717 	.word	0x08007717
 80076fc:	0800770d 	.word	0x0800770d
 8007700:	08007753 	.word	0x08007753
 8007704:	0800772b 	.word	0x0800772b
 8007708:	08007721 	.word	0x08007721
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f9dc 	bl	8007acc <USBD_GetDescriptor>
          break;
 8007714:	e022      	b.n	800775c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fb3f 	bl	8007d9c <USBD_SetAddress>
          break;
 800771e:	e01d      	b.n	800775c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fb7e 	bl	8007e24 <USBD_SetConfig>
          break;
 8007728:	e018      	b.n	800775c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fc07 	bl	8007f40 <USBD_GetConfig>
          break;
 8007732:	e013      	b.n	800775c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fc37 	bl	8007faa <USBD_GetStatus>
          break;
 800773c:	e00e      	b.n	800775c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fc65 	bl	8008010 <USBD_SetFeature>
          break;
 8007746:	e009      	b.n	800775c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fc74 	bl	8008038 <USBD_ClrFeature>
          break;
 8007750:	e004      	b.n	800775c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fccc 	bl	80080f2 <USBD_CtlError>
          break;
 800775a:	bf00      	nop
      }
      break;
 800775c:	e004      	b.n	8007768 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fcc6 	bl	80080f2 <USBD_CtlError>
      break;
 8007766:	bf00      	nop
  }

  return ret;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop

08007774 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d005      	beq.n	800779a <USBD_StdItfReq+0x26>
 800778e:	2b40      	cmp	r3, #64	; 0x40
 8007790:	d82e      	bhi.n	80077f0 <USBD_StdItfReq+0x7c>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <USBD_StdItfReq+0x26>
 8007796:	2b20      	cmp	r3, #32
 8007798:	d12a      	bne.n	80077f0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a0:	3b01      	subs	r3, #1
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d81d      	bhi.n	80077e2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	889b      	ldrh	r3, [r3, #4]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d813      	bhi.n	80077d8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	88db      	ldrh	r3, [r3, #6]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d110      	bne.n	80077ec <USBD_StdItfReq+0x78>
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10d      	bne.n	80077ec <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fd56 	bl	8008282 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077d6:	e009      	b.n	80077ec <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fc89 	bl	80080f2 <USBD_CtlError>
          break;
 80077e0:	e004      	b.n	80077ec <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fc84 	bl	80080f2 <USBD_CtlError>
          break;
 80077ea:	e000      	b.n	80077ee <USBD_StdItfReq+0x7a>
          break;
 80077ec:	bf00      	nop
      }
      break;
 80077ee:	e004      	b.n	80077fa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fc7d 	bl	80080f2 <USBD_CtlError>
      break;
 80077f8:	bf00      	nop
  }

  return USBD_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	889b      	ldrh	r3, [r3, #4]
 8007816:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007820:	2b40      	cmp	r3, #64	; 0x40
 8007822:	d007      	beq.n	8007834 <USBD_StdEPReq+0x30>
 8007824:	2b40      	cmp	r3, #64	; 0x40
 8007826:	f200 8146 	bhi.w	8007ab6 <USBD_StdEPReq+0x2b2>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <USBD_StdEPReq+0x40>
 800782e:	2b20      	cmp	r3, #32
 8007830:	f040 8141 	bne.w	8007ab6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
      break;
 8007842:	e13d      	b.n	8007ac0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800784c:	2b20      	cmp	r3, #32
 800784e:	d10a      	bne.n	8007866 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	e12d      	b.n	8007ac2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	785b      	ldrb	r3, [r3, #1]
 800786a:	2b03      	cmp	r3, #3
 800786c:	d007      	beq.n	800787e <USBD_StdEPReq+0x7a>
 800786e:	2b03      	cmp	r3, #3
 8007870:	f300 811b 	bgt.w	8007aaa <USBD_StdEPReq+0x2a6>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d072      	beq.n	800795e <USBD_StdEPReq+0x15a>
 8007878:	2b01      	cmp	r3, #1
 800787a:	d03a      	beq.n	80078f2 <USBD_StdEPReq+0xee>
 800787c:	e115      	b.n	8007aaa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007884:	2b02      	cmp	r3, #2
 8007886:	d002      	beq.n	800788e <USBD_StdEPReq+0x8a>
 8007888:	2b03      	cmp	r3, #3
 800788a:	d015      	beq.n	80078b8 <USBD_StdEPReq+0xb4>
 800788c:	e02b      	b.n	80078e6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00c      	beq.n	80078ae <USBD_StdEPReq+0xaa>
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	2b80      	cmp	r3, #128	; 0x80
 8007898:	d009      	beq.n	80078ae <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 f884 	bl	80089ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078a4:	2180      	movs	r1, #128	; 0x80
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 f880 	bl	80089ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078ac:	e020      	b.n	80078f0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fc1e 	bl	80080f2 <USBD_CtlError>
              break;
 80078b6:	e01b      	b.n	80078f0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	885b      	ldrh	r3, [r3, #2]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10e      	bne.n	80078de <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00b      	beq.n	80078de <USBD_StdEPReq+0xda>
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b80      	cmp	r3, #128	; 0x80
 80078ca:	d008      	beq.n	80078de <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	88db      	ldrh	r3, [r3, #6]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80078d4:	7bbb      	ldrb	r3, [r7, #14]
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f001 f867 	bl	80089ac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fccf 	bl	8008282 <USBD_CtlSendStatus>

              break;
 80078e4:	e004      	b.n	80078f0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fc02 	bl	80080f2 <USBD_CtlError>
              break;
 80078ee:	bf00      	nop
          }
          break;
 80078f0:	e0e0      	b.n	8007ab4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d002      	beq.n	8007902 <USBD_StdEPReq+0xfe>
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d015      	beq.n	800792c <USBD_StdEPReq+0x128>
 8007900:	e026      	b.n	8007950 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00c      	beq.n	8007922 <USBD_StdEPReq+0x11e>
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b80      	cmp	r3, #128	; 0x80
 800790c:	d009      	beq.n	8007922 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 f84a 	bl	80089ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007918:	2180      	movs	r1, #128	; 0x80
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 f846 	bl	80089ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007920:	e01c      	b.n	800795c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fbe4 	bl	80080f2 <USBD_CtlError>
              break;
 800792a:	e017      	b.n	800795c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	885b      	ldrh	r3, [r3, #2]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d112      	bne.n	800795a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800793a:	2b00      	cmp	r3, #0
 800793c:	d004      	beq.n	8007948 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 f851 	bl	80089ea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fc9a 	bl	8008282 <USBD_CtlSendStatus>
              }
              break;
 800794e:	e004      	b.n	800795a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fbcd 	bl	80080f2 <USBD_CtlError>
              break;
 8007958:	e000      	b.n	800795c <USBD_StdEPReq+0x158>
              break;
 800795a:	bf00      	nop
          }
          break;
 800795c:	e0aa      	b.n	8007ab4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007964:	2b02      	cmp	r3, #2
 8007966:	d002      	beq.n	800796e <USBD_StdEPReq+0x16a>
 8007968:	2b03      	cmp	r3, #3
 800796a:	d032      	beq.n	80079d2 <USBD_StdEPReq+0x1ce>
 800796c:	e097      	b.n	8007a9e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d007      	beq.n	8007984 <USBD_StdEPReq+0x180>
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b80      	cmp	r3, #128	; 0x80
 8007978:	d004      	beq.n	8007984 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fbb8 	bl	80080f2 <USBD_CtlError>
                break;
 8007982:	e091      	b.n	8007aa8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007988:	2b00      	cmp	r3, #0
 800798a:	da0b      	bge.n	80079a4 <USBD_StdEPReq+0x1a0>
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	3310      	adds	r3, #16
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	4413      	add	r3, r2
 80079a0:	3304      	adds	r3, #4
 80079a2:	e00b      	b.n	80079bc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4413      	add	r3, r2
 80079ba:	3304      	adds	r3, #4
 80079bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2202      	movs	r2, #2
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fbfb 	bl	80081c6 <USBD_CtlSendData>
              break;
 80079d0:	e06a      	b.n	8007aa8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	da11      	bge.n	80079fe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	f003 020f 	and.w	r2, r3, #15
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	3318      	adds	r3, #24
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d117      	bne.n	8007a24 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fb7b 	bl	80080f2 <USBD_CtlError>
                  break;
 80079fc:	e054      	b.n	8007aa8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d104      	bne.n	8007a24 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fb68 	bl	80080f2 <USBD_CtlError>
                  break;
 8007a22:	e041      	b.n	8007aa8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	da0b      	bge.n	8007a44 <USBD_StdEPReq+0x240>
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	3310      	adds	r3, #16
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	4413      	add	r3, r2
 8007a40:	3304      	adds	r3, #4
 8007a42:	e00b      	b.n	8007a5c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <USBD_StdEPReq+0x266>
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	2b80      	cmp	r3, #128	; 0x80
 8007a68:	d103      	bne.n	8007a72 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	e00e      	b.n	8007a90 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 ffd6 	bl	8008a28 <USBD_LL_IsStallEP>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2201      	movs	r2, #1
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	e002      	b.n	8007a90 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2202      	movs	r2, #2
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fb95 	bl	80081c6 <USBD_CtlSendData>
              break;
 8007a9c:	e004      	b.n	8007aa8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fb26 	bl	80080f2 <USBD_CtlError>
              break;
 8007aa6:	bf00      	nop
          }
          break;
 8007aa8:	e004      	b.n	8007ab4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fb20 	bl	80080f2 <USBD_CtlError>
          break;
 8007ab2:	bf00      	nop
      }
      break;
 8007ab4:	e004      	b.n	8007ac0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fb1a 	bl	80080f2 <USBD_CtlError>
      break;
 8007abe:	bf00      	nop
  }

  return ret;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	885b      	ldrh	r3, [r3, #2]
 8007ae6:	0a1b      	lsrs	r3, r3, #8
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	3b01      	subs	r3, #1
 8007aec:	2b06      	cmp	r3, #6
 8007aee:	f200 8128 	bhi.w	8007d42 <USBD_GetDescriptor+0x276>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <USBD_GetDescriptor+0x2c>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b15 	.word	0x08007b15
 8007afc:	08007b2d 	.word	0x08007b2d
 8007b00:	08007b6d 	.word	0x08007b6d
 8007b04:	08007d43 	.word	0x08007d43
 8007b08:	08007d43 	.word	0x08007d43
 8007b0c:	08007ce3 	.word	0x08007ce3
 8007b10:	08007d0f 	.word	0x08007d0f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	7c12      	ldrb	r2, [r2, #16]
 8007b20:	f107 0108 	add.w	r1, r7, #8
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
 8007b28:	60f8      	str	r0, [r7, #12]
      break;
 8007b2a:	e112      	b.n	8007d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	7c1b      	ldrb	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10d      	bne.n	8007b50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3c:	f107 0208 	add.w	r2, r7, #8
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b4e:	e100      	b.n	8007d52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	f107 0208 	add.w	r2, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3301      	adds	r3, #1
 8007b66:	2202      	movs	r2, #2
 8007b68:	701a      	strb	r2, [r3, #0]
      break;
 8007b6a:	e0f2      	b.n	8007d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	885b      	ldrh	r3, [r3, #2]
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b05      	cmp	r3, #5
 8007b74:	f200 80ac 	bhi.w	8007cd0 <USBD_GetDescriptor+0x204>
 8007b78:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <USBD_GetDescriptor+0xb4>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007b99 	.word	0x08007b99
 8007b84:	08007bcd 	.word	0x08007bcd
 8007b88:	08007c01 	.word	0x08007c01
 8007b8c:	08007c35 	.word	0x08007c35
 8007b90:	08007c69 	.word	0x08007c69
 8007b94:	08007c9d 	.word	0x08007c9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	7c12      	ldrb	r2, [r2, #16]
 8007bb0:	f107 0108 	add.w	r1, r7, #8
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4798      	blx	r3
 8007bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bba:	e091      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa97 	bl	80080f2 <USBD_CtlError>
            err++;
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bca:	e089      	b.n	8007ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	7c12      	ldrb	r2, [r2, #16]
 8007be4:	f107 0108 	add.w	r1, r7, #8
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
 8007bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bee:	e077      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa7d 	bl	80080f2 <USBD_CtlError>
            err++;
 8007bf8:	7afb      	ldrb	r3, [r7, #11]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bfe:	e06f      	b.n	8007ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00b      	beq.n	8007c24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	7c12      	ldrb	r2, [r2, #16]
 8007c18:	f107 0108 	add.w	r1, r7, #8
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	4798      	blx	r3
 8007c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c22:	e05d      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa63 	bl	80080f2 <USBD_CtlError>
            err++;
 8007c2c:	7afb      	ldrb	r3, [r7, #11]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	72fb      	strb	r3, [r7, #11]
          break;
 8007c32:	e055      	b.n	8007ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00b      	beq.n	8007c58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	7c12      	ldrb	r2, [r2, #16]
 8007c4c:	f107 0108 	add.w	r1, r7, #8
 8007c50:	4610      	mov	r0, r2
 8007c52:	4798      	blx	r3
 8007c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c56:	e043      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa49 	bl	80080f2 <USBD_CtlError>
            err++;
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	3301      	adds	r3, #1
 8007c64:	72fb      	strb	r3, [r7, #11]
          break;
 8007c66:	e03b      	b.n	8007ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00b      	beq.n	8007c8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	7c12      	ldrb	r2, [r2, #16]
 8007c80:	f107 0108 	add.w	r1, r7, #8
 8007c84:	4610      	mov	r0, r2
 8007c86:	4798      	blx	r3
 8007c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c8a:	e029      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa2f 	bl	80080f2 <USBD_CtlError>
            err++;
 8007c94:	7afb      	ldrb	r3, [r7, #11]
 8007c96:	3301      	adds	r3, #1
 8007c98:	72fb      	strb	r3, [r7, #11]
          break;
 8007c9a:	e021      	b.n	8007ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	7c12      	ldrb	r2, [r2, #16]
 8007cb4:	f107 0108 	add.w	r1, r7, #8
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
 8007cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cbe:	e00f      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fa15 	bl	80080f2 <USBD_CtlError>
            err++;
 8007cc8:	7afb      	ldrb	r3, [r7, #11]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cce:	e007      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa0d 	bl	80080f2 <USBD_CtlError>
          err++;
 8007cd8:	7afb      	ldrb	r3, [r7, #11]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007cde:	e038      	b.n	8007d52 <USBD_GetDescriptor+0x286>
 8007ce0:	e037      	b.n	8007d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	7c1b      	ldrb	r3, [r3, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf2:	f107 0208 	add.w	r2, r7, #8
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	4798      	blx	r3
 8007cfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cfc:	e029      	b.n	8007d52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f9f6 	bl	80080f2 <USBD_CtlError>
        err++;
 8007d06:	7afb      	ldrb	r3, [r7, #11]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d0c:	e021      	b.n	8007d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	7c1b      	ldrb	r3, [r3, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10d      	bne.n	8007d32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1e:	f107 0208 	add.w	r2, r7, #8
 8007d22:	4610      	mov	r0, r2
 8007d24:	4798      	blx	r3
 8007d26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	2207      	movs	r2, #7
 8007d2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d30:	e00f      	b.n	8007d52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f9dc 	bl	80080f2 <USBD_CtlError>
        err++;
 8007d3a:	7afb      	ldrb	r3, [r7, #11]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d40:	e007      	b.n	8007d52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f9d4 	bl	80080f2 <USBD_CtlError>
      err++;
 8007d4a:	7afb      	ldrb	r3, [r7, #11]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d50:	bf00      	nop
  }

  if (err != 0U)
 8007d52:	7afb      	ldrb	r3, [r7, #11]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d11c      	bne.n	8007d92 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007d58:	893b      	ldrh	r3, [r7, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d011      	beq.n	8007d82 <USBD_GetDescriptor+0x2b6>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	88db      	ldrh	r3, [r3, #6]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00d      	beq.n	8007d82 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	88da      	ldrh	r2, [r3, #6]
 8007d6a:	893b      	ldrh	r3, [r7, #8]
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	bf28      	it	cs
 8007d70:	4613      	movcs	r3, r2
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d76:	893b      	ldrh	r3, [r7, #8]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	68f9      	ldr	r1, [r7, #12]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fa22 	bl	80081c6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	88db      	ldrh	r3, [r3, #6]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d104      	bne.n	8007d94 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa79 	bl	8008282 <USBD_CtlSendStatus>
 8007d90:	e000      	b.n	8007d94 <USBD_GetDescriptor+0x2c8>
    return;
 8007d92:	bf00      	nop
    }
  }
}
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop

08007d9c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	889b      	ldrh	r3, [r3, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d130      	bne.n	8007e10 <USBD_SetAddress+0x74>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	88db      	ldrh	r3, [r3, #6]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d12c      	bne.n	8007e10 <USBD_SetAddress+0x74>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	885b      	ldrh	r3, [r3, #2]
 8007dba:	2b7f      	cmp	r3, #127	; 0x7f
 8007dbc:	d828      	bhi.n	8007e10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	885b      	ldrh	r3, [r3, #2]
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d104      	bne.n	8007dde <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f98b 	bl	80080f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ddc:	e01d      	b.n	8007e1a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	7bfa      	ldrb	r2, [r7, #15]
 8007de2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fe48 	bl	8008a80 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fa46 	bl	8008282 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d004      	beq.n	8007e06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e04:	e009      	b.n	8007e1a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0e:	e004      	b.n	8007e1a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f96d 	bl	80080f2 <USBD_CtlError>
  }
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	885b      	ldrh	r3, [r3, #2]
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	4b41      	ldr	r3, [pc, #260]	; (8007f3c <USBD_SetConfig+0x118>)
 8007e36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e38:	4b40      	ldr	r3, [pc, #256]	; (8007f3c <USBD_SetConfig+0x118>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d904      	bls.n	8007e4a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f955 	bl	80080f2 <USBD_CtlError>
 8007e48:	e075      	b.n	8007f36 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d002      	beq.n	8007e5a <USBD_SetConfig+0x36>
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d023      	beq.n	8007ea0 <USBD_SetConfig+0x7c>
 8007e58:	e062      	b.n	8007f20 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e5a:	4b38      	ldr	r3, [pc, #224]	; (8007f3c <USBD_SetConfig+0x118>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d01a      	beq.n	8007e98 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007e62:	4b36      	ldr	r3, [pc, #216]	; (8007f3c <USBD_SetConfig+0x118>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2203      	movs	r2, #3
 8007e70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e74:	4b31      	ldr	r3, [pc, #196]	; (8007f3c <USBD_SetConfig+0x118>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff f9e7 	bl	800724e <USBD_SetClassConfig>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d104      	bne.n	8007e90 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f932 	bl	80080f2 <USBD_CtlError>
            return;
 8007e8e:	e052      	b.n	8007f36 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f9f6 	bl	8008282 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e96:	e04e      	b.n	8007f36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f9f2 	bl	8008282 <USBD_CtlSendStatus>
        break;
 8007e9e:	e04a      	b.n	8007f36 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ea0:	4b26      	ldr	r3, [pc, #152]	; (8007f3c <USBD_SetConfig+0x118>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d112      	bne.n	8007ece <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007eb0:	4b22      	ldr	r3, [pc, #136]	; (8007f3c <USBD_SetConfig+0x118>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007eba:	4b20      	ldr	r3, [pc, #128]	; (8007f3c <USBD_SetConfig+0x118>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff f9e3 	bl	800728c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f9db 	bl	8008282 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ecc:	e033      	b.n	8007f36 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007ece:	4b1b      	ldr	r3, [pc, #108]	; (8007f3c <USBD_SetConfig+0x118>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d01d      	beq.n	8007f18 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff f9d1 	bl	800728c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007eea:	4b14      	ldr	r3, [pc, #80]	; (8007f3c <USBD_SetConfig+0x118>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ef4:	4b11      	ldr	r3, [pc, #68]	; (8007f3c <USBD_SetConfig+0x118>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7ff f9a7 	bl	800724e <USBD_SetClassConfig>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d104      	bne.n	8007f10 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f8f2 	bl	80080f2 <USBD_CtlError>
            return;
 8007f0e:	e012      	b.n	8007f36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f9b6 	bl	8008282 <USBD_CtlSendStatus>
        break;
 8007f16:	e00e      	b.n	8007f36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f9b2 	bl	8008282 <USBD_CtlSendStatus>
        break;
 8007f1e:	e00a      	b.n	8007f36 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f8e5 	bl	80080f2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f28:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <USBD_SetConfig+0x118>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff f9ac 	bl	800728c <USBD_ClrClassConfig>
        break;
 8007f34:	bf00      	nop
    }
  }
}
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	200002cc 	.word	0x200002cc

08007f40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	88db      	ldrh	r3, [r3, #6]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d004      	beq.n	8007f5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f8cc 	bl	80080f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f5a:	e022      	b.n	8007fa2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	dc02      	bgt.n	8007f6c <USBD_GetConfig+0x2c>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dc03      	bgt.n	8007f72 <USBD_GetConfig+0x32>
 8007f6a:	e015      	b.n	8007f98 <USBD_GetConfig+0x58>
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d00b      	beq.n	8007f88 <USBD_GetConfig+0x48>
 8007f70:	e012      	b.n	8007f98 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f920 	bl	80081c6 <USBD_CtlSendData>
        break;
 8007f86:	e00c      	b.n	8007fa2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f918 	bl	80081c6 <USBD_CtlSendData>
        break;
 8007f96:	e004      	b.n	8007fa2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f8a9 	bl	80080f2 <USBD_CtlError>
        break;
 8007fa0:	bf00      	nop
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d81e      	bhi.n	8007ffe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	88db      	ldrh	r3, [r3, #6]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d004      	beq.n	8007fd2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f891 	bl	80080f2 <USBD_CtlError>
        break;
 8007fd0:	e01a      	b.n	8008008 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d005      	beq.n	8007fee <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f043 0202 	orr.w	r2, r3, #2
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	330c      	adds	r3, #12
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f8e5 	bl	80081c6 <USBD_CtlSendData>
      break;
 8007ffc:	e004      	b.n	8008008 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f876 	bl	80080f2 <USBD_CtlError>
      break;
 8008006:	bf00      	nop
  }
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	885b      	ldrh	r3, [r3, #2]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d106      	bne.n	8008030 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f929 	bl	8008282 <USBD_CtlSendStatus>
  }
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008048:	3b01      	subs	r3, #1
 800804a:	2b02      	cmp	r3, #2
 800804c:	d80b      	bhi.n	8008066 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	885b      	ldrh	r3, [r3, #2]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d10c      	bne.n	8008070 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f90f 	bl	8008282 <USBD_CtlSendStatus>
      }
      break;
 8008064:	e004      	b.n	8008070 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f842 	bl	80080f2 <USBD_CtlError>
      break;
 800806e:	e000      	b.n	8008072 <USBD_ClrFeature+0x3a>
      break;
 8008070:	bf00      	nop
  }
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781a      	ldrb	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	785a      	ldrb	r2, [r3, #1]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	3302      	adds	r3, #2
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	b29a      	uxth	r2, r3
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	3303      	adds	r3, #3
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	4413      	add	r3, r2
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	3304      	adds	r3, #4
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	3305      	adds	r3, #5
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	021b      	lsls	r3, r3, #8
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	4413      	add	r3, r2
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	3306      	adds	r3, #6
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	3307      	adds	r3, #7
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	b29b      	uxth	r3, r3
 80080e0:	4413      	add	r3, r2
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	80da      	strh	r2, [r3, #6]

}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr

080080f2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80080fc:	2180      	movs	r1, #128	; 0x80
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fc54 	bl	80089ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008104:	2100      	movs	r1, #0
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fc50 	bl	80089ac <USBD_LL_StallEP>
}
 800810c:	bf00      	nop
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d032      	beq.n	8008190 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 f834 	bl	8008198 <USBD_GetLen>
 8008130:	4603      	mov	r3, r0
 8008132:	3301      	adds	r3, #1
 8008134:	b29b      	uxth	r3, r3
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	b29a      	uxth	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	75fa      	strb	r2, [r7, #23]
 8008144:	461a      	mov	r2, r3
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	4413      	add	r3, r2
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	7812      	ldrb	r2, [r2, #0]
 800814e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	75fa      	strb	r2, [r7, #23]
 8008156:	461a      	mov	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4413      	add	r3, r2
 800815c:	2203      	movs	r2, #3
 800815e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008160:	e012      	b.n	8008188 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	60fa      	str	r2, [r7, #12]
 8008168:	7dfa      	ldrb	r2, [r7, #23]
 800816a:	1c51      	adds	r1, r2, #1
 800816c:	75f9      	strb	r1, [r7, #23]
 800816e:	4611      	mov	r1, r2
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	440a      	add	r2, r1
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	75fa      	strb	r2, [r7, #23]
 800817e:	461a      	mov	r2, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4413      	add	r3, r2
 8008184:	2200      	movs	r2, #0
 8008186:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e8      	bne.n	8008162 <USBD_GetString+0x4e>
    }
  }
}
 8008190:	bf00      	nop
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80081a4:	e005      	b.n	80081b2 <USBD_GetLen+0x1a>
  {
    len++;
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	3301      	adds	r3, #1
 80081aa:	73fb      	strb	r3, [r7, #15]
    buf++;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3301      	adds	r3, #1
 80081b0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1f5      	bne.n	80081a6 <USBD_GetLen+0xe>
  }

  return len;
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr

080081c6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60f8      	str	r0, [r7, #12]
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	4613      	mov	r3, r2
 80081d2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081dc:	88fa      	ldrh	r2, [r7, #6]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80081e2:	88fa      	ldrh	r2, [r7, #6]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081e8:	88fb      	ldrh	r3, [r7, #6]
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	2100      	movs	r1, #0
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 fc65 	bl	8008abe <USBD_LL_Transmit>

  return USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	4613      	mov	r3, r2
 800820a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800820c:	88fb      	ldrh	r3, [r7, #6]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	2100      	movs	r1, #0
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 fc53 	bl	8008abe <USBD_LL_Transmit>

  return USBD_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	4613      	mov	r3, r2
 800822e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2203      	movs	r2, #3
 8008234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008238:	88fa      	ldrh	r2, [r7, #6]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008240:	88fa      	ldrh	r2, [r7, #6]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008248:	88fb      	ldrh	r3, [r7, #6]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	2100      	movs	r1, #0
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fc58 	bl	8008b04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	4613      	mov	r3, r2
 800826a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800826c:	88fb      	ldrh	r3, [r7, #6]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	2100      	movs	r1, #0
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 fc46 	bl	8008b04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2204      	movs	r2, #4
 800828e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008292:	2300      	movs	r3, #0
 8008294:	2200      	movs	r2, #0
 8008296:	2100      	movs	r1, #0
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fc10 	bl	8008abe <USBD_LL_Transmit>

  return USBD_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2205      	movs	r2, #5
 80082b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082b8:	2300      	movs	r3, #0
 80082ba:	2200      	movs	r2, #0
 80082bc:	2100      	movs	r1, #0
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fc20 	bl	8008b04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082d4:	2200      	movs	r2, #0
 80082d6:	4912      	ldr	r1, [pc, #72]	; (8008320 <MX_USB_DEVICE_Init+0x50>)
 80082d8:	4812      	ldr	r0, [pc, #72]	; (8008324 <MX_USB_DEVICE_Init+0x54>)
 80082da:	f7fe ff5e 	bl	800719a <USBD_Init>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d001      	beq.n	80082e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082e4:	f7f8 fa2c 	bl	8000740 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082e8:	490f      	ldr	r1, [pc, #60]	; (8008328 <MX_USB_DEVICE_Init+0x58>)
 80082ea:	480e      	ldr	r0, [pc, #56]	; (8008324 <MX_USB_DEVICE_Init+0x54>)
 80082ec:	f7fe ff80 	bl	80071f0 <USBD_RegisterClass>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082f6:	f7f8 fa23 	bl	8000740 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082fa:	490c      	ldr	r1, [pc, #48]	; (800832c <MX_USB_DEVICE_Init+0x5c>)
 80082fc:	4809      	ldr	r0, [pc, #36]	; (8008324 <MX_USB_DEVICE_Init+0x54>)
 80082fe:	f7fe feb1 	bl	8007064 <USBD_CDC_RegisterInterface>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008308:	f7f8 fa1a 	bl	8000740 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800830c:	4805      	ldr	r0, [pc, #20]	; (8008324 <MX_USB_DEVICE_Init+0x54>)
 800830e:	f7fe ff88 	bl	8007222 <USBD_Start>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008318:	f7f8 fa12 	bl	8000740 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800831c:	bf00      	nop
 800831e:	bd80      	pop	{r7, pc}
 8008320:	2000012c 	.word	0x2000012c
 8008324:	200002d0 	.word	0x200002d0
 8008328:	20000018 	.word	0x20000018
 800832c:	2000011c 	.word	0x2000011c

08008330 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008334:	2200      	movs	r2, #0
 8008336:	4905      	ldr	r1, [pc, #20]	; (800834c <CDC_Init_FS+0x1c>)
 8008338:	4805      	ldr	r0, [pc, #20]	; (8008350 <CDC_Init_FS+0x20>)
 800833a:	f7fe fea9 	bl	8007090 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800833e:	4905      	ldr	r1, [pc, #20]	; (8008354 <CDC_Init_FS+0x24>)
 8008340:	4803      	ldr	r0, [pc, #12]	; (8008350 <CDC_Init_FS+0x20>)
 8008342:	f7fe febe 	bl	80070c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008346:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008348:	4618      	mov	r0, r3
 800834a:	bd80      	pop	{r7, pc}
 800834c:	2000097c 	.word	0x2000097c
 8008350:	200002d0 	.word	0x200002d0
 8008354:	20000594 	.word	0x20000594

08008358 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008358:	b480      	push	{r7}
 800835a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800835c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800835e:	4618      	mov	r0, r3
 8008360:	46bd      	mov	sp, r7
 8008362:	bc80      	pop	{r7}
 8008364:	4770      	bx	lr
	...

08008368 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	6039      	str	r1, [r7, #0]
 8008372:	71fb      	strb	r3, [r7, #7]
 8008374:	4613      	mov	r3, r2
 8008376:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	2b23      	cmp	r3, #35	; 0x23
 800837c:	d84a      	bhi.n	8008414 <CDC_Control_FS+0xac>
 800837e:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <CDC_Control_FS+0x1c>)
 8008380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008384:	08008415 	.word	0x08008415
 8008388:	08008415 	.word	0x08008415
 800838c:	08008415 	.word	0x08008415
 8008390:	08008415 	.word	0x08008415
 8008394:	08008415 	.word	0x08008415
 8008398:	08008415 	.word	0x08008415
 800839c:	08008415 	.word	0x08008415
 80083a0:	08008415 	.word	0x08008415
 80083a4:	08008415 	.word	0x08008415
 80083a8:	08008415 	.word	0x08008415
 80083ac:	08008415 	.word	0x08008415
 80083b0:	08008415 	.word	0x08008415
 80083b4:	08008415 	.word	0x08008415
 80083b8:	08008415 	.word	0x08008415
 80083bc:	08008415 	.word	0x08008415
 80083c0:	08008415 	.word	0x08008415
 80083c4:	08008415 	.word	0x08008415
 80083c8:	08008415 	.word	0x08008415
 80083cc:	08008415 	.word	0x08008415
 80083d0:	08008415 	.word	0x08008415
 80083d4:	08008415 	.word	0x08008415
 80083d8:	08008415 	.word	0x08008415
 80083dc:	08008415 	.word	0x08008415
 80083e0:	08008415 	.word	0x08008415
 80083e4:	08008415 	.word	0x08008415
 80083e8:	08008415 	.word	0x08008415
 80083ec:	08008415 	.word	0x08008415
 80083f0:	08008415 	.word	0x08008415
 80083f4:	08008415 	.word	0x08008415
 80083f8:	08008415 	.word	0x08008415
 80083fc:	08008415 	.word	0x08008415
 8008400:	08008415 	.word	0x08008415
 8008404:	08008415 	.word	0x08008415
 8008408:	08008415 	.word	0x08008415
 800840c:	08008415 	.word	0x08008415
 8008410:	08008415 	.word	0x08008415
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008414:	bf00      	nop
  }

  return (USBD_OK);
 8008416:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop

08008424 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	4805      	ldr	r0, [pc, #20]	; (8008448 <CDC_Receive_FS+0x24>)
 8008432:	f7fe fe46 	bl	80070c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008436:	4804      	ldr	r0, [pc, #16]	; (8008448 <CDC_Receive_FS+0x24>)
 8008438:	f7fe fe85 	bl	8007146 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800843c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	200002d0 	.word	0x200002d0

0800844c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800845c:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <CDC_Transmit_FS+0x48>)
 800845e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008462:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800846e:	2301      	movs	r3, #1
 8008470:	e00b      	b.n	800848a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008472:	887b      	ldrh	r3, [r7, #2]
 8008474:	461a      	mov	r2, r3
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	4806      	ldr	r0, [pc, #24]	; (8008494 <CDC_Transmit_FS+0x48>)
 800847a:	f7fe fe09 	bl	8007090 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800847e:	4805      	ldr	r0, [pc, #20]	; (8008494 <CDC_Transmit_FS+0x48>)
 8008480:	f7fe fe32 	bl	80070e8 <USBD_CDC_TransmitPacket>
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	200002d0 	.word	0x200002d0

08008498 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	6039      	str	r1, [r7, #0]
 80084a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2212      	movs	r2, #18
 80084a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084aa:	4b03      	ldr	r3, [pc, #12]	; (80084b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	20000148 	.word	0x20000148

080084bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	6039      	str	r1, [r7, #0]
 80084c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2204      	movs	r2, #4
 80084cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084ce:	4b03      	ldr	r3, [pc, #12]	; (80084dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bc80      	pop	{r7}
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	2000015c 	.word	0x2000015c

080084e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	6039      	str	r1, [r7, #0]
 80084ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084ec:	79fb      	ldrb	r3, [r7, #7]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d105      	bne.n	80084fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	4907      	ldr	r1, [pc, #28]	; (8008514 <USBD_FS_ProductStrDescriptor+0x34>)
 80084f6:	4808      	ldr	r0, [pc, #32]	; (8008518 <USBD_FS_ProductStrDescriptor+0x38>)
 80084f8:	f7ff fe0c 	bl	8008114 <USBD_GetString>
 80084fc:	e004      	b.n	8008508 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	4904      	ldr	r1, [pc, #16]	; (8008514 <USBD_FS_ProductStrDescriptor+0x34>)
 8008502:	4805      	ldr	r0, [pc, #20]	; (8008518 <USBD_FS_ProductStrDescriptor+0x38>)
 8008504:	f7ff fe06 	bl	8008114 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008508:	4b02      	ldr	r3, [pc, #8]	; (8008514 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000d64 	.word	0x20000d64
 8008518:	08009ff8 	.word	0x08009ff8

0800851c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	4603      	mov	r3, r0
 8008524:	6039      	str	r1, [r7, #0]
 8008526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	4904      	ldr	r1, [pc, #16]	; (800853c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800852c:	4804      	ldr	r0, [pc, #16]	; (8008540 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800852e:	f7ff fdf1 	bl	8008114 <USBD_GetString>
  return USBD_StrDesc;
 8008532:	4b02      	ldr	r3, [pc, #8]	; (800853c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20000d64 	.word	0x20000d64
 8008540:	0800a010 	.word	0x0800a010

08008544 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	6039      	str	r1, [r7, #0]
 800854e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	221a      	movs	r2, #26
 8008554:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008556:	f000 f843 	bl	80085e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800855a:	4b02      	ldr	r3, [pc, #8]	; (8008564 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20000160 	.word	0x20000160

08008568 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008574:	79fb      	ldrb	r3, [r7, #7]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d105      	bne.n	8008586 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	4907      	ldr	r1, [pc, #28]	; (800859c <USBD_FS_ConfigStrDescriptor+0x34>)
 800857e:	4808      	ldr	r0, [pc, #32]	; (80085a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008580:	f7ff fdc8 	bl	8008114 <USBD_GetString>
 8008584:	e004      	b.n	8008590 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	4904      	ldr	r1, [pc, #16]	; (800859c <USBD_FS_ConfigStrDescriptor+0x34>)
 800858a:	4805      	ldr	r0, [pc, #20]	; (80085a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800858c:	f7ff fdc2 	bl	8008114 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008590:	4b02      	ldr	r3, [pc, #8]	; (800859c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000d64 	.word	0x20000d64
 80085a0:	0800a024 	.word	0x0800a024

080085a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4603      	mov	r3, r0
 80085ac:	6039      	str	r1, [r7, #0]
 80085ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d105      	bne.n	80085c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	4907      	ldr	r1, [pc, #28]	; (80085d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085ba:	4808      	ldr	r0, [pc, #32]	; (80085dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085bc:	f7ff fdaa 	bl	8008114 <USBD_GetString>
 80085c0:	e004      	b.n	80085cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	4904      	ldr	r1, [pc, #16]	; (80085d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085c6:	4805      	ldr	r0, [pc, #20]	; (80085dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085c8:	f7ff fda4 	bl	8008114 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085cc:	4b02      	ldr	r3, [pc, #8]	; (80085d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	20000d64 	.word	0x20000d64
 80085dc:	0800a030 	.word	0x0800a030

080085e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085e6:	4b0f      	ldr	r3, [pc, #60]	; (8008624 <Get_SerialNum+0x44>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085ec:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <Get_SerialNum+0x48>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085f2:	4b0e      	ldr	r3, [pc, #56]	; (800862c <Get_SerialNum+0x4c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4413      	add	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d009      	beq.n	800861a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008606:	2208      	movs	r2, #8
 8008608:	4909      	ldr	r1, [pc, #36]	; (8008630 <Get_SerialNum+0x50>)
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 f814 	bl	8008638 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008610:	2204      	movs	r2, #4
 8008612:	4908      	ldr	r1, [pc, #32]	; (8008634 <Get_SerialNum+0x54>)
 8008614:	68b8      	ldr	r0, [r7, #8]
 8008616:	f000 f80f 	bl	8008638 <IntToUnicode>
  }
}
 800861a:	bf00      	nop
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	1ffff7e8 	.word	0x1ffff7e8
 8008628:	1ffff7ec 	.word	0x1ffff7ec
 800862c:	1ffff7f0 	.word	0x1ffff7f0
 8008630:	20000162 	.word	0x20000162
 8008634:	20000172 	.word	0x20000172

08008638 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	4613      	mov	r3, r2
 8008644:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800864a:	2300      	movs	r3, #0
 800864c:	75fb      	strb	r3, [r7, #23]
 800864e:	e027      	b.n	80086a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	0f1b      	lsrs	r3, r3, #28
 8008654:	2b09      	cmp	r3, #9
 8008656:	d80b      	bhi.n	8008670 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	0f1b      	lsrs	r3, r3, #28
 800865c:	b2da      	uxtb	r2, r3
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	4619      	mov	r1, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	440b      	add	r3, r1
 8008668:	3230      	adds	r2, #48	; 0x30
 800866a:	b2d2      	uxtb	r2, r2
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	e00a      	b.n	8008686 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	0f1b      	lsrs	r3, r3, #28
 8008674:	b2da      	uxtb	r2, r3
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	4619      	mov	r1, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	440b      	add	r3, r1
 8008680:	3237      	adds	r2, #55	; 0x37
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	011b      	lsls	r3, r3, #4
 800868a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	3301      	adds	r3, #1
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	4413      	add	r3, r2
 8008696:	2200      	movs	r2, #0
 8008698:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	3301      	adds	r3, #1
 800869e:	75fb      	strb	r3, [r7, #23]
 80086a0:	7dfa      	ldrb	r2, [r7, #23]
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d3d3      	bcc.n	8008650 <IntToUnicode+0x18>
  }
}
 80086a8:	bf00      	nop
 80086aa:	bf00      	nop
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bc80      	pop	{r7}
 80086b2:	4770      	bx	lr

080086b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0d      	ldr	r2, [pc, #52]	; (80086f8 <HAL_PCD_MspInit+0x44>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d113      	bne.n	80086ee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80086c6:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <HAL_PCD_MspInit+0x48>)
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	4a0c      	ldr	r2, [pc, #48]	; (80086fc <HAL_PCD_MspInit+0x48>)
 80086cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086d0:	61d3      	str	r3, [r2, #28]
 80086d2:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <HAL_PCD_MspInit+0x48>)
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80086de:	2200      	movs	r2, #0
 80086e0:	2100      	movs	r1, #0
 80086e2:	2014      	movs	r0, #20
 80086e4:	f7f8 fb81 	bl	8000dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80086e8:	2014      	movs	r0, #20
 80086ea:	f7f8 fb9a 	bl	8000e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80086ee:	bf00      	nop
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	40005c00 	.word	0x40005c00
 80086fc:	40021000 	.word	0x40021000

08008700 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008714:	4619      	mov	r1, r3
 8008716:	4610      	mov	r0, r2
 8008718:	f7fe fdcb 	bl	80072b2 <USBD_LL_SetupStage>
}
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008736:	78fa      	ldrb	r2, [r7, #3]
 8008738:	6879      	ldr	r1, [r7, #4]
 800873a:	4613      	mov	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	440b      	add	r3, r1
 8008744:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	4619      	mov	r1, r3
 800874e:	f7fe fdfd 	bl	800734c <USBD_LL_DataOutStage>
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	460b      	mov	r3, r1
 8008764:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800876c:	78fa      	ldrb	r2, [r7, #3]
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	440b      	add	r3, r1
 800877a:	333c      	adds	r3, #60	; 0x3c
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	78fb      	ldrb	r3, [r7, #3]
 8008780:	4619      	mov	r1, r3
 8008782:	f7fe fe54 	bl	800742e <USBD_LL_DataInStage>
}
 8008786:	bf00      	nop
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe ff64 	bl	800766a <USBD_LL_SOF>
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087b2:	2301      	movs	r3, #1
 80087b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d001      	beq.n	80087c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80087be:	f7f7 ffbf 	bl	8000740 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80087c8:	7bfa      	ldrb	r2, [r7, #15]
 80087ca:	4611      	mov	r1, r2
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fe ff14 	bl	80075fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fe fecd 	bl	8007578 <USBD_LL_Reset>
}
 80087de:	bf00      	nop
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe ff0e 	bl	8007618 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d005      	beq.n	8008810 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008804:	4b04      	ldr	r3, [pc, #16]	; (8008818 <HAL_PCD_SuspendCallback+0x30>)
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	4a03      	ldr	r2, [pc, #12]	; (8008818 <HAL_PCD_SuspendCallback+0x30>)
 800880a:	f043 0306 	orr.w	r3, r3, #6
 800880e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	e000ed00 	.word	0xe000ed00

0800881c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800882a:	4618      	mov	r0, r3
 800882c:	f7fe ff08 	bl	8007640 <USBD_LL_Resume>
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008840:	4a28      	ldr	r2, [pc, #160]	; (80088e4 <USBD_LL_Init+0xac>)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a26      	ldr	r2, [pc, #152]	; (80088e4 <USBD_LL_Init+0xac>)
 800884c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008850:	4b24      	ldr	r3, [pc, #144]	; (80088e4 <USBD_LL_Init+0xac>)
 8008852:	4a25      	ldr	r2, [pc, #148]	; (80088e8 <USBD_LL_Init+0xb0>)
 8008854:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008856:	4b23      	ldr	r3, [pc, #140]	; (80088e4 <USBD_LL_Init+0xac>)
 8008858:	2208      	movs	r2, #8
 800885a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800885c:	4b21      	ldr	r3, [pc, #132]	; (80088e4 <USBD_LL_Init+0xac>)
 800885e:	2202      	movs	r2, #2
 8008860:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008862:	4b20      	ldr	r3, [pc, #128]	; (80088e4 <USBD_LL_Init+0xac>)
 8008864:	2200      	movs	r2, #0
 8008866:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008868:	4b1e      	ldr	r3, [pc, #120]	; (80088e4 <USBD_LL_Init+0xac>)
 800886a:	2200      	movs	r2, #0
 800886c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800886e:	4b1d      	ldr	r3, [pc, #116]	; (80088e4 <USBD_LL_Init+0xac>)
 8008870:	2200      	movs	r2, #0
 8008872:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008874:	481b      	ldr	r0, [pc, #108]	; (80088e4 <USBD_LL_Init+0xac>)
 8008876:	f7f8 fd3d 	bl	80012f4 <HAL_PCD_Init>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008880:	f7f7 ff5e 	bl	8000740 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800888a:	2318      	movs	r3, #24
 800888c:	2200      	movs	r2, #0
 800888e:	2100      	movs	r1, #0
 8008890:	f7fa fa5c 	bl	8002d4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800889a:	2358      	movs	r3, #88	; 0x58
 800889c:	2200      	movs	r2, #0
 800889e:	2180      	movs	r1, #128	; 0x80
 80088a0:	f7fa fa54 	bl	8002d4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088aa:	23c0      	movs	r3, #192	; 0xc0
 80088ac:	2200      	movs	r2, #0
 80088ae:	2181      	movs	r1, #129	; 0x81
 80088b0:	f7fa fa4c 	bl	8002d4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80088be:	2200      	movs	r2, #0
 80088c0:	2101      	movs	r1, #1
 80088c2:	f7fa fa43 	bl	8002d4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088d0:	2200      	movs	r2, #0
 80088d2:	2182      	movs	r1, #130	; 0x82
 80088d4:	f7fa fa3a 	bl	8002d4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	20000f64 	.word	0x20000f64
 80088e8:	40005c00 	.word	0x40005c00

080088ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008902:	4618      	mov	r0, r3
 8008904:	f7f8 fdf5 	bl	80014f2 <HAL_PCD_Start>
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 f94e 	bl	8008bb0 <USBD_Get_USB_Status>
 8008914:	4603      	mov	r3, r0
 8008916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008918:	7bbb      	ldrb	r3, [r7, #14]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	4608      	mov	r0, r1
 800892c:	4611      	mov	r1, r2
 800892e:	461a      	mov	r2, r3
 8008930:	4603      	mov	r3, r0
 8008932:	70fb      	strb	r3, [r7, #3]
 8008934:	460b      	mov	r3, r1
 8008936:	70bb      	strb	r3, [r7, #2]
 8008938:	4613      	mov	r3, r2
 800893a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800894a:	78bb      	ldrb	r3, [r7, #2]
 800894c:	883a      	ldrh	r2, [r7, #0]
 800894e:	78f9      	ldrb	r1, [r7, #3]
 8008950:	f7f8 ff4a 	bl	80017e8 <HAL_PCD_EP_Open>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 f928 	bl	8008bb0 <USBD_Get_USB_Status>
 8008960:	4603      	mov	r3, r0
 8008962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008964:	7bbb      	ldrb	r3, [r7, #14]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	460b      	mov	r3, r1
 8008978:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008988:	78fa      	ldrb	r2, [r7, #3]
 800898a:	4611      	mov	r1, r2
 800898c:	4618      	mov	r0, r3
 800898e:	f7f8 ff88 	bl	80018a2 <HAL_PCD_EP_Close>
 8008992:	4603      	mov	r3, r0
 8008994:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 f909 	bl	8008bb0 <USBD_Get_USB_Status>
 800899e:	4603      	mov	r3, r0
 80089a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	4611      	mov	r1, r2
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7f9 f830 	bl	8001a30 <HAL_PCD_EP_SetStall>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 f8ea 	bl	8008bb0 <USBD_Get_USB_Status>
 80089dc:	4603      	mov	r3, r0
 80089de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	460b      	mov	r3, r1
 80089f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a04:	78fa      	ldrb	r2, [r7, #3]
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f9 f871 	bl	8001af0 <HAL_PCD_EP_ClrStall>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 f8cb 	bl	8008bb0 <USBD_Get_USB_Status>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	da0c      	bge.n	8008a5e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a44:	78fb      	ldrb	r3, [r7, #3]
 8008a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4a:	68f9      	ldr	r1, [r7, #12]
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	440b      	add	r3, r1
 8008a58:	3302      	adds	r3, #2
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	e00b      	b.n	8008a76 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a64:	68f9      	ldr	r1, [r7, #12]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	00db      	lsls	r3, r3, #3
 8008a6e:	440b      	add	r3, r1
 8008a70:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008a74:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bc80      	pop	{r7}
 8008a7e:	4770      	bx	lr

08008a80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7f8 fe7d 	bl	800179e <HAL_PCD_SetAddress>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f880 	bl	8008bb0 <USBD_Get_USB_Status>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b086      	sub	sp, #24
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	460b      	mov	r3, r1
 8008acc:	72fb      	strb	r3, [r7, #11]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ae0:	893b      	ldrh	r3, [r7, #8]
 8008ae2:	7af9      	ldrb	r1, [r7, #11]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	f7f8 ff6c 	bl	80019c2 <HAL_PCD_EP_Transmit>
 8008aea:	4603      	mov	r3, r0
 8008aec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f85d 	bl	8008bb0 <USBD_Get_USB_Status>
 8008af6:	4603      	mov	r3, r0
 8008af8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008afa:	7dbb      	ldrb	r3, [r7, #22]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	607a      	str	r2, [r7, #4]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	460b      	mov	r3, r1
 8008b12:	72fb      	strb	r3, [r7, #11]
 8008b14:	4613      	mov	r3, r2
 8008b16:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b26:	893b      	ldrh	r3, [r7, #8]
 8008b28:	7af9      	ldrb	r1, [r7, #11]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	f7f8 ff01 	bl	8001932 <HAL_PCD_EP_Receive>
 8008b30:	4603      	mov	r3, r0
 8008b32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b34:	7dfb      	ldrb	r3, [r7, #23]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 f83a 	bl	8008bb0 <USBD_Get_USB_Status>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b40:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b5c:	78fa      	ldrb	r2, [r7, #3]
 8008b5e:	4611      	mov	r1, r2
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7f8 ff17 	bl	8001994 <HAL_PCD_EP_GetRxCount>
 8008b66:	4603      	mov	r3, r0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b78:	4b02      	ldr	r3, [pc, #8]	; (8008b84 <USBD_static_malloc+0x14>)
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bc80      	pop	{r7}
 8008b82:	4770      	bx	lr
 8008b84:	20001254 	.word	0x20001254

08008b88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bc80      	pop	{r7}
 8008b98:	4770      	bx	lr

08008b9a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bc80      	pop	{r7}
 8008bae:	4770      	bx	lr

08008bb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d817      	bhi.n	8008bf4 <USBD_Get_USB_Status+0x44>
 8008bc4:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <USBD_Get_USB_Status+0x1c>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008bdd 	.word	0x08008bdd
 8008bd0:	08008be3 	.word	0x08008be3
 8008bd4:	08008be9 	.word	0x08008be9
 8008bd8:	08008bef 	.word	0x08008bef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
    break;
 8008be0:	e00b      	b.n	8008bfa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008be2:	2302      	movs	r3, #2
 8008be4:	73fb      	strb	r3, [r7, #15]
    break;
 8008be6:	e008      	b.n	8008bfa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008be8:	2301      	movs	r3, #1
 8008bea:	73fb      	strb	r3, [r7, #15]
    break;
 8008bec:	e005      	b.n	8008bfa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bee:	2302      	movs	r3, #2
 8008bf0:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf2:	e002      	b.n	8008bfa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf8:	bf00      	nop
  }
  return usb_status;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bc80      	pop	{r7}
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <__errno>:
 8008c08:	4b01      	ldr	r3, [pc, #4]	; (8008c10 <__errno+0x8>)
 8008c0a:	6818      	ldr	r0, [r3, #0]
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	2000017c 	.word	0x2000017c

08008c14 <__libc_init_array>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	2600      	movs	r6, #0
 8008c18:	4d0c      	ldr	r5, [pc, #48]	; (8008c4c <__libc_init_array+0x38>)
 8008c1a:	4c0d      	ldr	r4, [pc, #52]	; (8008c50 <__libc_init_array+0x3c>)
 8008c1c:	1b64      	subs	r4, r4, r5
 8008c1e:	10a4      	asrs	r4, r4, #2
 8008c20:	42a6      	cmp	r6, r4
 8008c22:	d109      	bne.n	8008c38 <__libc_init_array+0x24>
 8008c24:	f001 f9aa 	bl	8009f7c <_init>
 8008c28:	2600      	movs	r6, #0
 8008c2a:	4d0a      	ldr	r5, [pc, #40]	; (8008c54 <__libc_init_array+0x40>)
 8008c2c:	4c0a      	ldr	r4, [pc, #40]	; (8008c58 <__libc_init_array+0x44>)
 8008c2e:	1b64      	subs	r4, r4, r5
 8008c30:	10a4      	asrs	r4, r4, #2
 8008c32:	42a6      	cmp	r6, r4
 8008c34:	d105      	bne.n	8008c42 <__libc_init_array+0x2e>
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3c:	4798      	blx	r3
 8008c3e:	3601      	adds	r6, #1
 8008c40:	e7ee      	b.n	8008c20 <__libc_init_array+0xc>
 8008c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c46:	4798      	blx	r3
 8008c48:	3601      	adds	r6, #1
 8008c4a:	e7f2      	b.n	8008c32 <__libc_init_array+0x1e>
 8008c4c:	0800a304 	.word	0x0800a304
 8008c50:	0800a304 	.word	0x0800a304
 8008c54:	0800a304 	.word	0x0800a304
 8008c58:	0800a308 	.word	0x0800a308

08008c5c <malloc>:
 8008c5c:	4b02      	ldr	r3, [pc, #8]	; (8008c68 <malloc+0xc>)
 8008c5e:	4601      	mov	r1, r0
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	f000 b87b 	b.w	8008d5c <_malloc_r>
 8008c66:	bf00      	nop
 8008c68:	2000017c 	.word	0x2000017c

08008c6c <free>:
 8008c6c:	4b02      	ldr	r3, [pc, #8]	; (8008c78 <free+0xc>)
 8008c6e:	4601      	mov	r1, r0
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	f000 b80b 	b.w	8008c8c <_free_r>
 8008c76:	bf00      	nop
 8008c78:	2000017c 	.word	0x2000017c

08008c7c <memset>:
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	4402      	add	r2, r0
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d100      	bne.n	8008c86 <memset+0xa>
 8008c84:	4770      	bx	lr
 8008c86:	f803 1b01 	strb.w	r1, [r3], #1
 8008c8a:	e7f9      	b.n	8008c80 <memset+0x4>

08008c8c <_free_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4605      	mov	r5, r0
 8008c90:	2900      	cmp	r1, #0
 8008c92:	d040      	beq.n	8008d16 <_free_r+0x8a>
 8008c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c98:	1f0c      	subs	r4, r1, #4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bfb8      	it	lt
 8008c9e:	18e4      	addlt	r4, r4, r3
 8008ca0:	f000 fa18 	bl	80090d4 <__malloc_lock>
 8008ca4:	4a1c      	ldr	r2, [pc, #112]	; (8008d18 <_free_r+0x8c>)
 8008ca6:	6813      	ldr	r3, [r2, #0]
 8008ca8:	b933      	cbnz	r3, 8008cb8 <_free_r+0x2c>
 8008caa:	6063      	str	r3, [r4, #4]
 8008cac:	6014      	str	r4, [r2, #0]
 8008cae:	4628      	mov	r0, r5
 8008cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cb4:	f000 ba14 	b.w	80090e0 <__malloc_unlock>
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	d908      	bls.n	8008cce <_free_r+0x42>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	1821      	adds	r1, r4, r0
 8008cc0:	428b      	cmp	r3, r1
 8008cc2:	bf01      	itttt	eq
 8008cc4:	6819      	ldreq	r1, [r3, #0]
 8008cc6:	685b      	ldreq	r3, [r3, #4]
 8008cc8:	1809      	addeq	r1, r1, r0
 8008cca:	6021      	streq	r1, [r4, #0]
 8008ccc:	e7ed      	b.n	8008caa <_free_r+0x1e>
 8008cce:	461a      	mov	r2, r3
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	b10b      	cbz	r3, 8008cd8 <_free_r+0x4c>
 8008cd4:	42a3      	cmp	r3, r4
 8008cd6:	d9fa      	bls.n	8008cce <_free_r+0x42>
 8008cd8:	6811      	ldr	r1, [r2, #0]
 8008cda:	1850      	adds	r0, r2, r1
 8008cdc:	42a0      	cmp	r0, r4
 8008cde:	d10b      	bne.n	8008cf8 <_free_r+0x6c>
 8008ce0:	6820      	ldr	r0, [r4, #0]
 8008ce2:	4401      	add	r1, r0
 8008ce4:	1850      	adds	r0, r2, r1
 8008ce6:	4283      	cmp	r3, r0
 8008ce8:	6011      	str	r1, [r2, #0]
 8008cea:	d1e0      	bne.n	8008cae <_free_r+0x22>
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	4401      	add	r1, r0
 8008cf2:	6011      	str	r1, [r2, #0]
 8008cf4:	6053      	str	r3, [r2, #4]
 8008cf6:	e7da      	b.n	8008cae <_free_r+0x22>
 8008cf8:	d902      	bls.n	8008d00 <_free_r+0x74>
 8008cfa:	230c      	movs	r3, #12
 8008cfc:	602b      	str	r3, [r5, #0]
 8008cfe:	e7d6      	b.n	8008cae <_free_r+0x22>
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	1821      	adds	r1, r4, r0
 8008d04:	428b      	cmp	r3, r1
 8008d06:	bf01      	itttt	eq
 8008d08:	6819      	ldreq	r1, [r3, #0]
 8008d0a:	685b      	ldreq	r3, [r3, #4]
 8008d0c:	1809      	addeq	r1, r1, r0
 8008d0e:	6021      	streq	r1, [r4, #0]
 8008d10:	6063      	str	r3, [r4, #4]
 8008d12:	6054      	str	r4, [r2, #4]
 8008d14:	e7cb      	b.n	8008cae <_free_r+0x22>
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	20001474 	.word	0x20001474

08008d1c <sbrk_aligned>:
 8008d1c:	b570      	push	{r4, r5, r6, lr}
 8008d1e:	4e0e      	ldr	r6, [pc, #56]	; (8008d58 <sbrk_aligned+0x3c>)
 8008d20:	460c      	mov	r4, r1
 8008d22:	6831      	ldr	r1, [r6, #0]
 8008d24:	4605      	mov	r5, r0
 8008d26:	b911      	cbnz	r1, 8008d2e <sbrk_aligned+0x12>
 8008d28:	f000 f8a4 	bl	8008e74 <_sbrk_r>
 8008d2c:	6030      	str	r0, [r6, #0]
 8008d2e:	4621      	mov	r1, r4
 8008d30:	4628      	mov	r0, r5
 8008d32:	f000 f89f 	bl	8008e74 <_sbrk_r>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	d00a      	beq.n	8008d50 <sbrk_aligned+0x34>
 8008d3a:	1cc4      	adds	r4, r0, #3
 8008d3c:	f024 0403 	bic.w	r4, r4, #3
 8008d40:	42a0      	cmp	r0, r4
 8008d42:	d007      	beq.n	8008d54 <sbrk_aligned+0x38>
 8008d44:	1a21      	subs	r1, r4, r0
 8008d46:	4628      	mov	r0, r5
 8008d48:	f000 f894 	bl	8008e74 <_sbrk_r>
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d101      	bne.n	8008d54 <sbrk_aligned+0x38>
 8008d50:	f04f 34ff 	mov.w	r4, #4294967295
 8008d54:	4620      	mov	r0, r4
 8008d56:	bd70      	pop	{r4, r5, r6, pc}
 8008d58:	20001478 	.word	0x20001478

08008d5c <_malloc_r>:
 8008d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d60:	1ccd      	adds	r5, r1, #3
 8008d62:	f025 0503 	bic.w	r5, r5, #3
 8008d66:	3508      	adds	r5, #8
 8008d68:	2d0c      	cmp	r5, #12
 8008d6a:	bf38      	it	cc
 8008d6c:	250c      	movcc	r5, #12
 8008d6e:	2d00      	cmp	r5, #0
 8008d70:	4607      	mov	r7, r0
 8008d72:	db01      	blt.n	8008d78 <_malloc_r+0x1c>
 8008d74:	42a9      	cmp	r1, r5
 8008d76:	d905      	bls.n	8008d84 <_malloc_r+0x28>
 8008d78:	230c      	movs	r3, #12
 8008d7a:	2600      	movs	r6, #0
 8008d7c:	603b      	str	r3, [r7, #0]
 8008d7e:	4630      	mov	r0, r6
 8008d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d84:	4e2e      	ldr	r6, [pc, #184]	; (8008e40 <_malloc_r+0xe4>)
 8008d86:	f000 f9a5 	bl	80090d4 <__malloc_lock>
 8008d8a:	6833      	ldr	r3, [r6, #0]
 8008d8c:	461c      	mov	r4, r3
 8008d8e:	bb34      	cbnz	r4, 8008dde <_malloc_r+0x82>
 8008d90:	4629      	mov	r1, r5
 8008d92:	4638      	mov	r0, r7
 8008d94:	f7ff ffc2 	bl	8008d1c <sbrk_aligned>
 8008d98:	1c43      	adds	r3, r0, #1
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	d14d      	bne.n	8008e3a <_malloc_r+0xde>
 8008d9e:	6834      	ldr	r4, [r6, #0]
 8008da0:	4626      	mov	r6, r4
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	d140      	bne.n	8008e28 <_malloc_r+0xcc>
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	4631      	mov	r1, r6
 8008daa:	4638      	mov	r0, r7
 8008dac:	eb04 0803 	add.w	r8, r4, r3
 8008db0:	f000 f860 	bl	8008e74 <_sbrk_r>
 8008db4:	4580      	cmp	r8, r0
 8008db6:	d13a      	bne.n	8008e2e <_malloc_r+0xd2>
 8008db8:	6821      	ldr	r1, [r4, #0]
 8008dba:	3503      	adds	r5, #3
 8008dbc:	1a6d      	subs	r5, r5, r1
 8008dbe:	f025 0503 	bic.w	r5, r5, #3
 8008dc2:	3508      	adds	r5, #8
 8008dc4:	2d0c      	cmp	r5, #12
 8008dc6:	bf38      	it	cc
 8008dc8:	250c      	movcc	r5, #12
 8008dca:	4638      	mov	r0, r7
 8008dcc:	4629      	mov	r1, r5
 8008dce:	f7ff ffa5 	bl	8008d1c <sbrk_aligned>
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	d02b      	beq.n	8008e2e <_malloc_r+0xd2>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	442b      	add	r3, r5
 8008dda:	6023      	str	r3, [r4, #0]
 8008ddc:	e00e      	b.n	8008dfc <_malloc_r+0xa0>
 8008dde:	6822      	ldr	r2, [r4, #0]
 8008de0:	1b52      	subs	r2, r2, r5
 8008de2:	d41e      	bmi.n	8008e22 <_malloc_r+0xc6>
 8008de4:	2a0b      	cmp	r2, #11
 8008de6:	d916      	bls.n	8008e16 <_malloc_r+0xba>
 8008de8:	1961      	adds	r1, r4, r5
 8008dea:	42a3      	cmp	r3, r4
 8008dec:	6025      	str	r5, [r4, #0]
 8008dee:	bf18      	it	ne
 8008df0:	6059      	strne	r1, [r3, #4]
 8008df2:	6863      	ldr	r3, [r4, #4]
 8008df4:	bf08      	it	eq
 8008df6:	6031      	streq	r1, [r6, #0]
 8008df8:	5162      	str	r2, [r4, r5]
 8008dfa:	604b      	str	r3, [r1, #4]
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f104 060b 	add.w	r6, r4, #11
 8008e02:	f000 f96d 	bl	80090e0 <__malloc_unlock>
 8008e06:	f026 0607 	bic.w	r6, r6, #7
 8008e0a:	1d23      	adds	r3, r4, #4
 8008e0c:	1af2      	subs	r2, r6, r3
 8008e0e:	d0b6      	beq.n	8008d7e <_malloc_r+0x22>
 8008e10:	1b9b      	subs	r3, r3, r6
 8008e12:	50a3      	str	r3, [r4, r2]
 8008e14:	e7b3      	b.n	8008d7e <_malloc_r+0x22>
 8008e16:	6862      	ldr	r2, [r4, #4]
 8008e18:	42a3      	cmp	r3, r4
 8008e1a:	bf0c      	ite	eq
 8008e1c:	6032      	streq	r2, [r6, #0]
 8008e1e:	605a      	strne	r2, [r3, #4]
 8008e20:	e7ec      	b.n	8008dfc <_malloc_r+0xa0>
 8008e22:	4623      	mov	r3, r4
 8008e24:	6864      	ldr	r4, [r4, #4]
 8008e26:	e7b2      	b.n	8008d8e <_malloc_r+0x32>
 8008e28:	4634      	mov	r4, r6
 8008e2a:	6876      	ldr	r6, [r6, #4]
 8008e2c:	e7b9      	b.n	8008da2 <_malloc_r+0x46>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	4638      	mov	r0, r7
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	f000 f954 	bl	80090e0 <__malloc_unlock>
 8008e38:	e7a1      	b.n	8008d7e <_malloc_r+0x22>
 8008e3a:	6025      	str	r5, [r4, #0]
 8008e3c:	e7de      	b.n	8008dfc <_malloc_r+0xa0>
 8008e3e:	bf00      	nop
 8008e40:	20001474 	.word	0x20001474

08008e44 <iprintf>:
 8008e44:	b40f      	push	{r0, r1, r2, r3}
 8008e46:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <iprintf+0x2c>)
 8008e48:	b513      	push	{r0, r1, r4, lr}
 8008e4a:	681c      	ldr	r4, [r3, #0]
 8008e4c:	b124      	cbz	r4, 8008e58 <iprintf+0x14>
 8008e4e:	69a3      	ldr	r3, [r4, #24]
 8008e50:	b913      	cbnz	r3, 8008e58 <iprintf+0x14>
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 f89e 	bl	8008f94 <__sinit>
 8008e58:	ab05      	add	r3, sp, #20
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	9a04      	ldr	r2, [sp, #16]
 8008e5e:	68a1      	ldr	r1, [r4, #8]
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	f000 fac7 	bl	80093f4 <_vfiprintf_r>
 8008e66:	b002      	add	sp, #8
 8008e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e6c:	b004      	add	sp, #16
 8008e6e:	4770      	bx	lr
 8008e70:	2000017c 	.word	0x2000017c

08008e74 <_sbrk_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	2300      	movs	r3, #0
 8008e78:	4d05      	ldr	r5, [pc, #20]	; (8008e90 <_sbrk_r+0x1c>)
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	602b      	str	r3, [r5, #0]
 8008e80:	f7f7 fdf4 	bl	8000a6c <_sbrk>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_sbrk_r+0x1a>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_sbrk_r+0x1a>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	20001480 	.word	0x20001480

08008e94 <siprintf>:
 8008e94:	b40e      	push	{r1, r2, r3}
 8008e96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e9a:	b500      	push	{lr}
 8008e9c:	b09c      	sub	sp, #112	; 0x70
 8008e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8008ea0:	9002      	str	r0, [sp, #8]
 8008ea2:	9006      	str	r0, [sp, #24]
 8008ea4:	9107      	str	r1, [sp, #28]
 8008ea6:	9104      	str	r1, [sp, #16]
 8008ea8:	4808      	ldr	r0, [pc, #32]	; (8008ecc <siprintf+0x38>)
 8008eaa:	4909      	ldr	r1, [pc, #36]	; (8008ed0 <siprintf+0x3c>)
 8008eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb0:	9105      	str	r1, [sp, #20]
 8008eb2:	6800      	ldr	r0, [r0, #0]
 8008eb4:	a902      	add	r1, sp, #8
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	f000 f974 	bl	80091a4 <_svfiprintf_r>
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	9b02      	ldr	r3, [sp, #8]
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	b01c      	add	sp, #112	; 0x70
 8008ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ec8:	b003      	add	sp, #12
 8008eca:	4770      	bx	lr
 8008ecc:	2000017c 	.word	0x2000017c
 8008ed0:	ffff0208 	.word	0xffff0208

08008ed4 <strcpy>:
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eda:	f803 2b01 	strb.w	r2, [r3], #1
 8008ede:	2a00      	cmp	r2, #0
 8008ee0:	d1f9      	bne.n	8008ed6 <strcpy+0x2>
 8008ee2:	4770      	bx	lr

08008ee4 <std>:
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	b510      	push	{r4, lr}
 8008ee8:	4604      	mov	r4, r0
 8008eea:	e9c0 3300 	strd	r3, r3, [r0]
 8008eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ef2:	6083      	str	r3, [r0, #8]
 8008ef4:	8181      	strh	r1, [r0, #12]
 8008ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ef8:	81c2      	strh	r2, [r0, #14]
 8008efa:	6183      	str	r3, [r0, #24]
 8008efc:	4619      	mov	r1, r3
 8008efe:	2208      	movs	r2, #8
 8008f00:	305c      	adds	r0, #92	; 0x5c
 8008f02:	f7ff febb 	bl	8008c7c <memset>
 8008f06:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <std+0x38>)
 8008f08:	6224      	str	r4, [r4, #32]
 8008f0a:	6263      	str	r3, [r4, #36]	; 0x24
 8008f0c:	4b04      	ldr	r3, [pc, #16]	; (8008f20 <std+0x3c>)
 8008f0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f10:	4b04      	ldr	r3, [pc, #16]	; (8008f24 <std+0x40>)
 8008f12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f14:	4b04      	ldr	r3, [pc, #16]	; (8008f28 <std+0x44>)
 8008f16:	6323      	str	r3, [r4, #48]	; 0x30
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	bf00      	nop
 8008f1c:	08009981 	.word	0x08009981
 8008f20:	080099a3 	.word	0x080099a3
 8008f24:	080099db 	.word	0x080099db
 8008f28:	080099ff 	.word	0x080099ff

08008f2c <_cleanup_r>:
 8008f2c:	4901      	ldr	r1, [pc, #4]	; (8008f34 <_cleanup_r+0x8>)
 8008f2e:	f000 b8af 	b.w	8009090 <_fwalk_reent>
 8008f32:	bf00      	nop
 8008f34:	08009cd1 	.word	0x08009cd1

08008f38 <__sfmoreglue>:
 8008f38:	2268      	movs	r2, #104	; 0x68
 8008f3a:	b570      	push	{r4, r5, r6, lr}
 8008f3c:	1e4d      	subs	r5, r1, #1
 8008f3e:	4355      	muls	r5, r2
 8008f40:	460e      	mov	r6, r1
 8008f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f46:	f7ff ff09 	bl	8008d5c <_malloc_r>
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	b140      	cbz	r0, 8008f60 <__sfmoreglue+0x28>
 8008f4e:	2100      	movs	r1, #0
 8008f50:	e9c0 1600 	strd	r1, r6, [r0]
 8008f54:	300c      	adds	r0, #12
 8008f56:	60a0      	str	r0, [r4, #8]
 8008f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f5c:	f7ff fe8e 	bl	8008c7c <memset>
 8008f60:	4620      	mov	r0, r4
 8008f62:	bd70      	pop	{r4, r5, r6, pc}

08008f64 <__sfp_lock_acquire>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__sfp_lock_acquire+0x8>)
 8008f66:	f000 b8b3 	b.w	80090d0 <__retarget_lock_acquire_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	2000147d 	.word	0x2000147d

08008f70 <__sfp_lock_release>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__sfp_lock_release+0x8>)
 8008f72:	f000 b8ae 	b.w	80090d2 <__retarget_lock_release_recursive>
 8008f76:	bf00      	nop
 8008f78:	2000147d 	.word	0x2000147d

08008f7c <__sinit_lock_acquire>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	; (8008f84 <__sinit_lock_acquire+0x8>)
 8008f7e:	f000 b8a7 	b.w	80090d0 <__retarget_lock_acquire_recursive>
 8008f82:	bf00      	nop
 8008f84:	2000147e 	.word	0x2000147e

08008f88 <__sinit_lock_release>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__sinit_lock_release+0x8>)
 8008f8a:	f000 b8a2 	b.w	80090d2 <__retarget_lock_release_recursive>
 8008f8e:	bf00      	nop
 8008f90:	2000147e 	.word	0x2000147e

08008f94 <__sinit>:
 8008f94:	b510      	push	{r4, lr}
 8008f96:	4604      	mov	r4, r0
 8008f98:	f7ff fff0 	bl	8008f7c <__sinit_lock_acquire>
 8008f9c:	69a3      	ldr	r3, [r4, #24]
 8008f9e:	b11b      	cbz	r3, 8008fa8 <__sinit+0x14>
 8008fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa4:	f7ff bff0 	b.w	8008f88 <__sinit_lock_release>
 8008fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fac:	6523      	str	r3, [r4, #80]	; 0x50
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <__sinit+0x68>)
 8008fb0:	4a13      	ldr	r2, [pc, #76]	; (8009000 <__sinit+0x6c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fb6:	42a3      	cmp	r3, r4
 8008fb8:	bf08      	it	eq
 8008fba:	2301      	moveq	r3, #1
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	bf08      	it	eq
 8008fc0:	61a3      	streq	r3, [r4, #24]
 8008fc2:	f000 f81f 	bl	8009004 <__sfp>
 8008fc6:	6060      	str	r0, [r4, #4]
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f000 f81b 	bl	8009004 <__sfp>
 8008fce:	60a0      	str	r0, [r4, #8]
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f000 f817 	bl	8009004 <__sfp>
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2104      	movs	r1, #4
 8008fda:	60e0      	str	r0, [r4, #12]
 8008fdc:	6860      	ldr	r0, [r4, #4]
 8008fde:	f7ff ff81 	bl	8008ee4 <std>
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	2109      	movs	r1, #9
 8008fe6:	68a0      	ldr	r0, [r4, #8]
 8008fe8:	f7ff ff7c 	bl	8008ee4 <std>
 8008fec:	2202      	movs	r2, #2
 8008fee:	2112      	movs	r1, #18
 8008ff0:	68e0      	ldr	r0, [r4, #12]
 8008ff2:	f7ff ff77 	bl	8008ee4 <std>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	61a3      	str	r3, [r4, #24]
 8008ffa:	e7d1      	b.n	8008fa0 <__sinit+0xc>
 8008ffc:	0800a26c 	.word	0x0800a26c
 8009000:	08008f2d 	.word	0x08008f2d

08009004 <__sfp>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	4607      	mov	r7, r0
 8009008:	f7ff ffac 	bl	8008f64 <__sfp_lock_acquire>
 800900c:	4b1e      	ldr	r3, [pc, #120]	; (8009088 <__sfp+0x84>)
 800900e:	681e      	ldr	r6, [r3, #0]
 8009010:	69b3      	ldr	r3, [r6, #24]
 8009012:	b913      	cbnz	r3, 800901a <__sfp+0x16>
 8009014:	4630      	mov	r0, r6
 8009016:	f7ff ffbd 	bl	8008f94 <__sinit>
 800901a:	3648      	adds	r6, #72	; 0x48
 800901c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009020:	3b01      	subs	r3, #1
 8009022:	d503      	bpl.n	800902c <__sfp+0x28>
 8009024:	6833      	ldr	r3, [r6, #0]
 8009026:	b30b      	cbz	r3, 800906c <__sfp+0x68>
 8009028:	6836      	ldr	r6, [r6, #0]
 800902a:	e7f7      	b.n	800901c <__sfp+0x18>
 800902c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009030:	b9d5      	cbnz	r5, 8009068 <__sfp+0x64>
 8009032:	4b16      	ldr	r3, [pc, #88]	; (800908c <__sfp+0x88>)
 8009034:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009038:	60e3      	str	r3, [r4, #12]
 800903a:	6665      	str	r5, [r4, #100]	; 0x64
 800903c:	f000 f847 	bl	80090ce <__retarget_lock_init_recursive>
 8009040:	f7ff ff96 	bl	8008f70 <__sfp_lock_release>
 8009044:	2208      	movs	r2, #8
 8009046:	4629      	mov	r1, r5
 8009048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800904c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009050:	6025      	str	r5, [r4, #0]
 8009052:	61a5      	str	r5, [r4, #24]
 8009054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009058:	f7ff fe10 	bl	8008c7c <memset>
 800905c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009064:	4620      	mov	r0, r4
 8009066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009068:	3468      	adds	r4, #104	; 0x68
 800906a:	e7d9      	b.n	8009020 <__sfp+0x1c>
 800906c:	2104      	movs	r1, #4
 800906e:	4638      	mov	r0, r7
 8009070:	f7ff ff62 	bl	8008f38 <__sfmoreglue>
 8009074:	4604      	mov	r4, r0
 8009076:	6030      	str	r0, [r6, #0]
 8009078:	2800      	cmp	r0, #0
 800907a:	d1d5      	bne.n	8009028 <__sfp+0x24>
 800907c:	f7ff ff78 	bl	8008f70 <__sfp_lock_release>
 8009080:	230c      	movs	r3, #12
 8009082:	603b      	str	r3, [r7, #0]
 8009084:	e7ee      	b.n	8009064 <__sfp+0x60>
 8009086:	bf00      	nop
 8009088:	0800a26c 	.word	0x0800a26c
 800908c:	ffff0001 	.word	0xffff0001

08009090 <_fwalk_reent>:
 8009090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009094:	4606      	mov	r6, r0
 8009096:	4688      	mov	r8, r1
 8009098:	2700      	movs	r7, #0
 800909a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800909e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090a2:	f1b9 0901 	subs.w	r9, r9, #1
 80090a6:	d505      	bpl.n	80090b4 <_fwalk_reent+0x24>
 80090a8:	6824      	ldr	r4, [r4, #0]
 80090aa:	2c00      	cmp	r4, #0
 80090ac:	d1f7      	bne.n	800909e <_fwalk_reent+0xe>
 80090ae:	4638      	mov	r0, r7
 80090b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b4:	89ab      	ldrh	r3, [r5, #12]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d907      	bls.n	80090ca <_fwalk_reent+0x3a>
 80090ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090be:	3301      	adds	r3, #1
 80090c0:	d003      	beq.n	80090ca <_fwalk_reent+0x3a>
 80090c2:	4629      	mov	r1, r5
 80090c4:	4630      	mov	r0, r6
 80090c6:	47c0      	blx	r8
 80090c8:	4307      	orrs	r7, r0
 80090ca:	3568      	adds	r5, #104	; 0x68
 80090cc:	e7e9      	b.n	80090a2 <_fwalk_reent+0x12>

080090ce <__retarget_lock_init_recursive>:
 80090ce:	4770      	bx	lr

080090d0 <__retarget_lock_acquire_recursive>:
 80090d0:	4770      	bx	lr

080090d2 <__retarget_lock_release_recursive>:
 80090d2:	4770      	bx	lr

080090d4 <__malloc_lock>:
 80090d4:	4801      	ldr	r0, [pc, #4]	; (80090dc <__malloc_lock+0x8>)
 80090d6:	f7ff bffb 	b.w	80090d0 <__retarget_lock_acquire_recursive>
 80090da:	bf00      	nop
 80090dc:	2000147c 	.word	0x2000147c

080090e0 <__malloc_unlock>:
 80090e0:	4801      	ldr	r0, [pc, #4]	; (80090e8 <__malloc_unlock+0x8>)
 80090e2:	f7ff bff6 	b.w	80090d2 <__retarget_lock_release_recursive>
 80090e6:	bf00      	nop
 80090e8:	2000147c 	.word	0x2000147c

080090ec <__ssputs_r>:
 80090ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f0:	688e      	ldr	r6, [r1, #8]
 80090f2:	4682      	mov	sl, r0
 80090f4:	429e      	cmp	r6, r3
 80090f6:	460c      	mov	r4, r1
 80090f8:	4690      	mov	r8, r2
 80090fa:	461f      	mov	r7, r3
 80090fc:	d838      	bhi.n	8009170 <__ssputs_r+0x84>
 80090fe:	898a      	ldrh	r2, [r1, #12]
 8009100:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009104:	d032      	beq.n	800916c <__ssputs_r+0x80>
 8009106:	6825      	ldr	r5, [r4, #0]
 8009108:	6909      	ldr	r1, [r1, #16]
 800910a:	3301      	adds	r3, #1
 800910c:	eba5 0901 	sub.w	r9, r5, r1
 8009110:	6965      	ldr	r5, [r4, #20]
 8009112:	444b      	add	r3, r9
 8009114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800911c:	106d      	asrs	r5, r5, #1
 800911e:	429d      	cmp	r5, r3
 8009120:	bf38      	it	cc
 8009122:	461d      	movcc	r5, r3
 8009124:	0553      	lsls	r3, r2, #21
 8009126:	d531      	bpl.n	800918c <__ssputs_r+0xa0>
 8009128:	4629      	mov	r1, r5
 800912a:	f7ff fe17 	bl	8008d5c <_malloc_r>
 800912e:	4606      	mov	r6, r0
 8009130:	b950      	cbnz	r0, 8009148 <__ssputs_r+0x5c>
 8009132:	230c      	movs	r3, #12
 8009134:	f04f 30ff 	mov.w	r0, #4294967295
 8009138:	f8ca 3000 	str.w	r3, [sl]
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009148:	464a      	mov	r2, r9
 800914a:	6921      	ldr	r1, [r4, #16]
 800914c:	f000 fe82 	bl	8009e54 <memcpy>
 8009150:	89a3      	ldrh	r3, [r4, #12]
 8009152:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800915a:	81a3      	strh	r3, [r4, #12]
 800915c:	6126      	str	r6, [r4, #16]
 800915e:	444e      	add	r6, r9
 8009160:	6026      	str	r6, [r4, #0]
 8009162:	463e      	mov	r6, r7
 8009164:	6165      	str	r5, [r4, #20]
 8009166:	eba5 0509 	sub.w	r5, r5, r9
 800916a:	60a5      	str	r5, [r4, #8]
 800916c:	42be      	cmp	r6, r7
 800916e:	d900      	bls.n	8009172 <__ssputs_r+0x86>
 8009170:	463e      	mov	r6, r7
 8009172:	4632      	mov	r2, r6
 8009174:	4641      	mov	r1, r8
 8009176:	6820      	ldr	r0, [r4, #0]
 8009178:	f000 fe7a 	bl	8009e70 <memmove>
 800917c:	68a3      	ldr	r3, [r4, #8]
 800917e:	2000      	movs	r0, #0
 8009180:	1b9b      	subs	r3, r3, r6
 8009182:	60a3      	str	r3, [r4, #8]
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	4433      	add	r3, r6
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	e7db      	b.n	8009144 <__ssputs_r+0x58>
 800918c:	462a      	mov	r2, r5
 800918e:	f000 fe89 	bl	8009ea4 <_realloc_r>
 8009192:	4606      	mov	r6, r0
 8009194:	2800      	cmp	r0, #0
 8009196:	d1e1      	bne.n	800915c <__ssputs_r+0x70>
 8009198:	4650      	mov	r0, sl
 800919a:	6921      	ldr	r1, [r4, #16]
 800919c:	f7ff fd76 	bl	8008c8c <_free_r>
 80091a0:	e7c7      	b.n	8009132 <__ssputs_r+0x46>
	...

080091a4 <_svfiprintf_r>:
 80091a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a8:	4698      	mov	r8, r3
 80091aa:	898b      	ldrh	r3, [r1, #12]
 80091ac:	4607      	mov	r7, r0
 80091ae:	061b      	lsls	r3, r3, #24
 80091b0:	460d      	mov	r5, r1
 80091b2:	4614      	mov	r4, r2
 80091b4:	b09d      	sub	sp, #116	; 0x74
 80091b6:	d50e      	bpl.n	80091d6 <_svfiprintf_r+0x32>
 80091b8:	690b      	ldr	r3, [r1, #16]
 80091ba:	b963      	cbnz	r3, 80091d6 <_svfiprintf_r+0x32>
 80091bc:	2140      	movs	r1, #64	; 0x40
 80091be:	f7ff fdcd 	bl	8008d5c <_malloc_r>
 80091c2:	6028      	str	r0, [r5, #0]
 80091c4:	6128      	str	r0, [r5, #16]
 80091c6:	b920      	cbnz	r0, 80091d2 <_svfiprintf_r+0x2e>
 80091c8:	230c      	movs	r3, #12
 80091ca:	603b      	str	r3, [r7, #0]
 80091cc:	f04f 30ff 	mov.w	r0, #4294967295
 80091d0:	e0d1      	b.n	8009376 <_svfiprintf_r+0x1d2>
 80091d2:	2340      	movs	r3, #64	; 0x40
 80091d4:	616b      	str	r3, [r5, #20]
 80091d6:	2300      	movs	r3, #0
 80091d8:	9309      	str	r3, [sp, #36]	; 0x24
 80091da:	2320      	movs	r3, #32
 80091dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091e0:	2330      	movs	r3, #48	; 0x30
 80091e2:	f04f 0901 	mov.w	r9, #1
 80091e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80091ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009390 <_svfiprintf_r+0x1ec>
 80091ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091f2:	4623      	mov	r3, r4
 80091f4:	469a      	mov	sl, r3
 80091f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091fa:	b10a      	cbz	r2, 8009200 <_svfiprintf_r+0x5c>
 80091fc:	2a25      	cmp	r2, #37	; 0x25
 80091fe:	d1f9      	bne.n	80091f4 <_svfiprintf_r+0x50>
 8009200:	ebba 0b04 	subs.w	fp, sl, r4
 8009204:	d00b      	beq.n	800921e <_svfiprintf_r+0x7a>
 8009206:	465b      	mov	r3, fp
 8009208:	4622      	mov	r2, r4
 800920a:	4629      	mov	r1, r5
 800920c:	4638      	mov	r0, r7
 800920e:	f7ff ff6d 	bl	80090ec <__ssputs_r>
 8009212:	3001      	adds	r0, #1
 8009214:	f000 80aa 	beq.w	800936c <_svfiprintf_r+0x1c8>
 8009218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800921a:	445a      	add	r2, fp
 800921c:	9209      	str	r2, [sp, #36]	; 0x24
 800921e:	f89a 3000 	ldrb.w	r3, [sl]
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 80a2 	beq.w	800936c <_svfiprintf_r+0x1c8>
 8009228:	2300      	movs	r3, #0
 800922a:	f04f 32ff 	mov.w	r2, #4294967295
 800922e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009232:	f10a 0a01 	add.w	sl, sl, #1
 8009236:	9304      	str	r3, [sp, #16]
 8009238:	9307      	str	r3, [sp, #28]
 800923a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800923e:	931a      	str	r3, [sp, #104]	; 0x68
 8009240:	4654      	mov	r4, sl
 8009242:	2205      	movs	r2, #5
 8009244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009248:	4851      	ldr	r0, [pc, #324]	; (8009390 <_svfiprintf_r+0x1ec>)
 800924a:	f000 fdf5 	bl	8009e38 <memchr>
 800924e:	9a04      	ldr	r2, [sp, #16]
 8009250:	b9d8      	cbnz	r0, 800928a <_svfiprintf_r+0xe6>
 8009252:	06d0      	lsls	r0, r2, #27
 8009254:	bf44      	itt	mi
 8009256:	2320      	movmi	r3, #32
 8009258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800925c:	0711      	lsls	r1, r2, #28
 800925e:	bf44      	itt	mi
 8009260:	232b      	movmi	r3, #43	; 0x2b
 8009262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009266:	f89a 3000 	ldrb.w	r3, [sl]
 800926a:	2b2a      	cmp	r3, #42	; 0x2a
 800926c:	d015      	beq.n	800929a <_svfiprintf_r+0xf6>
 800926e:	4654      	mov	r4, sl
 8009270:	2000      	movs	r0, #0
 8009272:	f04f 0c0a 	mov.w	ip, #10
 8009276:	9a07      	ldr	r2, [sp, #28]
 8009278:	4621      	mov	r1, r4
 800927a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800927e:	3b30      	subs	r3, #48	; 0x30
 8009280:	2b09      	cmp	r3, #9
 8009282:	d94e      	bls.n	8009322 <_svfiprintf_r+0x17e>
 8009284:	b1b0      	cbz	r0, 80092b4 <_svfiprintf_r+0x110>
 8009286:	9207      	str	r2, [sp, #28]
 8009288:	e014      	b.n	80092b4 <_svfiprintf_r+0x110>
 800928a:	eba0 0308 	sub.w	r3, r0, r8
 800928e:	fa09 f303 	lsl.w	r3, r9, r3
 8009292:	4313      	orrs	r3, r2
 8009294:	46a2      	mov	sl, r4
 8009296:	9304      	str	r3, [sp, #16]
 8009298:	e7d2      	b.n	8009240 <_svfiprintf_r+0x9c>
 800929a:	9b03      	ldr	r3, [sp, #12]
 800929c:	1d19      	adds	r1, r3, #4
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	9103      	str	r1, [sp, #12]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	bfbb      	ittet	lt
 80092a6:	425b      	neglt	r3, r3
 80092a8:	f042 0202 	orrlt.w	r2, r2, #2
 80092ac:	9307      	strge	r3, [sp, #28]
 80092ae:	9307      	strlt	r3, [sp, #28]
 80092b0:	bfb8      	it	lt
 80092b2:	9204      	strlt	r2, [sp, #16]
 80092b4:	7823      	ldrb	r3, [r4, #0]
 80092b6:	2b2e      	cmp	r3, #46	; 0x2e
 80092b8:	d10c      	bne.n	80092d4 <_svfiprintf_r+0x130>
 80092ba:	7863      	ldrb	r3, [r4, #1]
 80092bc:	2b2a      	cmp	r3, #42	; 0x2a
 80092be:	d135      	bne.n	800932c <_svfiprintf_r+0x188>
 80092c0:	9b03      	ldr	r3, [sp, #12]
 80092c2:	3402      	adds	r4, #2
 80092c4:	1d1a      	adds	r2, r3, #4
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	9203      	str	r2, [sp, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bfb8      	it	lt
 80092ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80092d2:	9305      	str	r3, [sp, #20]
 80092d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009394 <_svfiprintf_r+0x1f0>
 80092d8:	2203      	movs	r2, #3
 80092da:	4650      	mov	r0, sl
 80092dc:	7821      	ldrb	r1, [r4, #0]
 80092de:	f000 fdab 	bl	8009e38 <memchr>
 80092e2:	b140      	cbz	r0, 80092f6 <_svfiprintf_r+0x152>
 80092e4:	2340      	movs	r3, #64	; 0x40
 80092e6:	eba0 000a 	sub.w	r0, r0, sl
 80092ea:	fa03 f000 	lsl.w	r0, r3, r0
 80092ee:	9b04      	ldr	r3, [sp, #16]
 80092f0:	3401      	adds	r4, #1
 80092f2:	4303      	orrs	r3, r0
 80092f4:	9304      	str	r3, [sp, #16]
 80092f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fa:	2206      	movs	r2, #6
 80092fc:	4826      	ldr	r0, [pc, #152]	; (8009398 <_svfiprintf_r+0x1f4>)
 80092fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009302:	f000 fd99 	bl	8009e38 <memchr>
 8009306:	2800      	cmp	r0, #0
 8009308:	d038      	beq.n	800937c <_svfiprintf_r+0x1d8>
 800930a:	4b24      	ldr	r3, [pc, #144]	; (800939c <_svfiprintf_r+0x1f8>)
 800930c:	bb1b      	cbnz	r3, 8009356 <_svfiprintf_r+0x1b2>
 800930e:	9b03      	ldr	r3, [sp, #12]
 8009310:	3307      	adds	r3, #7
 8009312:	f023 0307 	bic.w	r3, r3, #7
 8009316:	3308      	adds	r3, #8
 8009318:	9303      	str	r3, [sp, #12]
 800931a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800931c:	4433      	add	r3, r6
 800931e:	9309      	str	r3, [sp, #36]	; 0x24
 8009320:	e767      	b.n	80091f2 <_svfiprintf_r+0x4e>
 8009322:	460c      	mov	r4, r1
 8009324:	2001      	movs	r0, #1
 8009326:	fb0c 3202 	mla	r2, ip, r2, r3
 800932a:	e7a5      	b.n	8009278 <_svfiprintf_r+0xd4>
 800932c:	2300      	movs	r3, #0
 800932e:	f04f 0c0a 	mov.w	ip, #10
 8009332:	4619      	mov	r1, r3
 8009334:	3401      	adds	r4, #1
 8009336:	9305      	str	r3, [sp, #20]
 8009338:	4620      	mov	r0, r4
 800933a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800933e:	3a30      	subs	r2, #48	; 0x30
 8009340:	2a09      	cmp	r2, #9
 8009342:	d903      	bls.n	800934c <_svfiprintf_r+0x1a8>
 8009344:	2b00      	cmp	r3, #0
 8009346:	d0c5      	beq.n	80092d4 <_svfiprintf_r+0x130>
 8009348:	9105      	str	r1, [sp, #20]
 800934a:	e7c3      	b.n	80092d4 <_svfiprintf_r+0x130>
 800934c:	4604      	mov	r4, r0
 800934e:	2301      	movs	r3, #1
 8009350:	fb0c 2101 	mla	r1, ip, r1, r2
 8009354:	e7f0      	b.n	8009338 <_svfiprintf_r+0x194>
 8009356:	ab03      	add	r3, sp, #12
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	462a      	mov	r2, r5
 800935c:	4638      	mov	r0, r7
 800935e:	4b10      	ldr	r3, [pc, #64]	; (80093a0 <_svfiprintf_r+0x1fc>)
 8009360:	a904      	add	r1, sp, #16
 8009362:	f3af 8000 	nop.w
 8009366:	1c42      	adds	r2, r0, #1
 8009368:	4606      	mov	r6, r0
 800936a:	d1d6      	bne.n	800931a <_svfiprintf_r+0x176>
 800936c:	89ab      	ldrh	r3, [r5, #12]
 800936e:	065b      	lsls	r3, r3, #25
 8009370:	f53f af2c 	bmi.w	80091cc <_svfiprintf_r+0x28>
 8009374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009376:	b01d      	add	sp, #116	; 0x74
 8009378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937c:	ab03      	add	r3, sp, #12
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	462a      	mov	r2, r5
 8009382:	4638      	mov	r0, r7
 8009384:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <_svfiprintf_r+0x1fc>)
 8009386:	a904      	add	r1, sp, #16
 8009388:	f000 f9d4 	bl	8009734 <_printf_i>
 800938c:	e7eb      	b.n	8009366 <_svfiprintf_r+0x1c2>
 800938e:	bf00      	nop
 8009390:	0800a2d0 	.word	0x0800a2d0
 8009394:	0800a2d6 	.word	0x0800a2d6
 8009398:	0800a2da 	.word	0x0800a2da
 800939c:	00000000 	.word	0x00000000
 80093a0:	080090ed 	.word	0x080090ed

080093a4 <__sfputc_r>:
 80093a4:	6893      	ldr	r3, [r2, #8]
 80093a6:	b410      	push	{r4}
 80093a8:	3b01      	subs	r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	6093      	str	r3, [r2, #8]
 80093ae:	da07      	bge.n	80093c0 <__sfputc_r+0x1c>
 80093b0:	6994      	ldr	r4, [r2, #24]
 80093b2:	42a3      	cmp	r3, r4
 80093b4:	db01      	blt.n	80093ba <__sfputc_r+0x16>
 80093b6:	290a      	cmp	r1, #10
 80093b8:	d102      	bne.n	80093c0 <__sfputc_r+0x1c>
 80093ba:	bc10      	pop	{r4}
 80093bc:	f000 bb24 	b.w	8009a08 <__swbuf_r>
 80093c0:	6813      	ldr	r3, [r2, #0]
 80093c2:	1c58      	adds	r0, r3, #1
 80093c4:	6010      	str	r0, [r2, #0]
 80093c6:	7019      	strb	r1, [r3, #0]
 80093c8:	4608      	mov	r0, r1
 80093ca:	bc10      	pop	{r4}
 80093cc:	4770      	bx	lr

080093ce <__sfputs_r>:
 80093ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d0:	4606      	mov	r6, r0
 80093d2:	460f      	mov	r7, r1
 80093d4:	4614      	mov	r4, r2
 80093d6:	18d5      	adds	r5, r2, r3
 80093d8:	42ac      	cmp	r4, r5
 80093da:	d101      	bne.n	80093e0 <__sfputs_r+0x12>
 80093dc:	2000      	movs	r0, #0
 80093de:	e007      	b.n	80093f0 <__sfputs_r+0x22>
 80093e0:	463a      	mov	r2, r7
 80093e2:	4630      	mov	r0, r6
 80093e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e8:	f7ff ffdc 	bl	80093a4 <__sfputc_r>
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	d1f3      	bne.n	80093d8 <__sfputs_r+0xa>
 80093f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093f4 <_vfiprintf_r>:
 80093f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f8:	460d      	mov	r5, r1
 80093fa:	4614      	mov	r4, r2
 80093fc:	4698      	mov	r8, r3
 80093fe:	4606      	mov	r6, r0
 8009400:	b09d      	sub	sp, #116	; 0x74
 8009402:	b118      	cbz	r0, 800940c <_vfiprintf_r+0x18>
 8009404:	6983      	ldr	r3, [r0, #24]
 8009406:	b90b      	cbnz	r3, 800940c <_vfiprintf_r+0x18>
 8009408:	f7ff fdc4 	bl	8008f94 <__sinit>
 800940c:	4b89      	ldr	r3, [pc, #548]	; (8009634 <_vfiprintf_r+0x240>)
 800940e:	429d      	cmp	r5, r3
 8009410:	d11b      	bne.n	800944a <_vfiprintf_r+0x56>
 8009412:	6875      	ldr	r5, [r6, #4]
 8009414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009416:	07d9      	lsls	r1, r3, #31
 8009418:	d405      	bmi.n	8009426 <_vfiprintf_r+0x32>
 800941a:	89ab      	ldrh	r3, [r5, #12]
 800941c:	059a      	lsls	r2, r3, #22
 800941e:	d402      	bmi.n	8009426 <_vfiprintf_r+0x32>
 8009420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009422:	f7ff fe55 	bl	80090d0 <__retarget_lock_acquire_recursive>
 8009426:	89ab      	ldrh	r3, [r5, #12]
 8009428:	071b      	lsls	r3, r3, #28
 800942a:	d501      	bpl.n	8009430 <_vfiprintf_r+0x3c>
 800942c:	692b      	ldr	r3, [r5, #16]
 800942e:	b9eb      	cbnz	r3, 800946c <_vfiprintf_r+0x78>
 8009430:	4629      	mov	r1, r5
 8009432:	4630      	mov	r0, r6
 8009434:	f000 fb4c 	bl	8009ad0 <__swsetup_r>
 8009438:	b1c0      	cbz	r0, 800946c <_vfiprintf_r+0x78>
 800943a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800943c:	07dc      	lsls	r4, r3, #31
 800943e:	d50e      	bpl.n	800945e <_vfiprintf_r+0x6a>
 8009440:	f04f 30ff 	mov.w	r0, #4294967295
 8009444:	b01d      	add	sp, #116	; 0x74
 8009446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944a:	4b7b      	ldr	r3, [pc, #492]	; (8009638 <_vfiprintf_r+0x244>)
 800944c:	429d      	cmp	r5, r3
 800944e:	d101      	bne.n	8009454 <_vfiprintf_r+0x60>
 8009450:	68b5      	ldr	r5, [r6, #8]
 8009452:	e7df      	b.n	8009414 <_vfiprintf_r+0x20>
 8009454:	4b79      	ldr	r3, [pc, #484]	; (800963c <_vfiprintf_r+0x248>)
 8009456:	429d      	cmp	r5, r3
 8009458:	bf08      	it	eq
 800945a:	68f5      	ldreq	r5, [r6, #12]
 800945c:	e7da      	b.n	8009414 <_vfiprintf_r+0x20>
 800945e:	89ab      	ldrh	r3, [r5, #12]
 8009460:	0598      	lsls	r0, r3, #22
 8009462:	d4ed      	bmi.n	8009440 <_vfiprintf_r+0x4c>
 8009464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009466:	f7ff fe34 	bl	80090d2 <__retarget_lock_release_recursive>
 800946a:	e7e9      	b.n	8009440 <_vfiprintf_r+0x4c>
 800946c:	2300      	movs	r3, #0
 800946e:	9309      	str	r3, [sp, #36]	; 0x24
 8009470:	2320      	movs	r3, #32
 8009472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009476:	2330      	movs	r3, #48	; 0x30
 8009478:	f04f 0901 	mov.w	r9, #1
 800947c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009480:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009640 <_vfiprintf_r+0x24c>
 8009484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009488:	4623      	mov	r3, r4
 800948a:	469a      	mov	sl, r3
 800948c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009490:	b10a      	cbz	r2, 8009496 <_vfiprintf_r+0xa2>
 8009492:	2a25      	cmp	r2, #37	; 0x25
 8009494:	d1f9      	bne.n	800948a <_vfiprintf_r+0x96>
 8009496:	ebba 0b04 	subs.w	fp, sl, r4
 800949a:	d00b      	beq.n	80094b4 <_vfiprintf_r+0xc0>
 800949c:	465b      	mov	r3, fp
 800949e:	4622      	mov	r2, r4
 80094a0:	4629      	mov	r1, r5
 80094a2:	4630      	mov	r0, r6
 80094a4:	f7ff ff93 	bl	80093ce <__sfputs_r>
 80094a8:	3001      	adds	r0, #1
 80094aa:	f000 80aa 	beq.w	8009602 <_vfiprintf_r+0x20e>
 80094ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094b0:	445a      	add	r2, fp
 80094b2:	9209      	str	r2, [sp, #36]	; 0x24
 80094b4:	f89a 3000 	ldrb.w	r3, [sl]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 80a2 	beq.w	8009602 <_vfiprintf_r+0x20e>
 80094be:	2300      	movs	r3, #0
 80094c0:	f04f 32ff 	mov.w	r2, #4294967295
 80094c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094c8:	f10a 0a01 	add.w	sl, sl, #1
 80094cc:	9304      	str	r3, [sp, #16]
 80094ce:	9307      	str	r3, [sp, #28]
 80094d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094d4:	931a      	str	r3, [sp, #104]	; 0x68
 80094d6:	4654      	mov	r4, sl
 80094d8:	2205      	movs	r2, #5
 80094da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094de:	4858      	ldr	r0, [pc, #352]	; (8009640 <_vfiprintf_r+0x24c>)
 80094e0:	f000 fcaa 	bl	8009e38 <memchr>
 80094e4:	9a04      	ldr	r2, [sp, #16]
 80094e6:	b9d8      	cbnz	r0, 8009520 <_vfiprintf_r+0x12c>
 80094e8:	06d1      	lsls	r1, r2, #27
 80094ea:	bf44      	itt	mi
 80094ec:	2320      	movmi	r3, #32
 80094ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094f2:	0713      	lsls	r3, r2, #28
 80094f4:	bf44      	itt	mi
 80094f6:	232b      	movmi	r3, #43	; 0x2b
 80094f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009500:	2b2a      	cmp	r3, #42	; 0x2a
 8009502:	d015      	beq.n	8009530 <_vfiprintf_r+0x13c>
 8009504:	4654      	mov	r4, sl
 8009506:	2000      	movs	r0, #0
 8009508:	f04f 0c0a 	mov.w	ip, #10
 800950c:	9a07      	ldr	r2, [sp, #28]
 800950e:	4621      	mov	r1, r4
 8009510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009514:	3b30      	subs	r3, #48	; 0x30
 8009516:	2b09      	cmp	r3, #9
 8009518:	d94e      	bls.n	80095b8 <_vfiprintf_r+0x1c4>
 800951a:	b1b0      	cbz	r0, 800954a <_vfiprintf_r+0x156>
 800951c:	9207      	str	r2, [sp, #28]
 800951e:	e014      	b.n	800954a <_vfiprintf_r+0x156>
 8009520:	eba0 0308 	sub.w	r3, r0, r8
 8009524:	fa09 f303 	lsl.w	r3, r9, r3
 8009528:	4313      	orrs	r3, r2
 800952a:	46a2      	mov	sl, r4
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	e7d2      	b.n	80094d6 <_vfiprintf_r+0xe2>
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	1d19      	adds	r1, r3, #4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	9103      	str	r1, [sp, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	bfbb      	ittet	lt
 800953c:	425b      	neglt	r3, r3
 800953e:	f042 0202 	orrlt.w	r2, r2, #2
 8009542:	9307      	strge	r3, [sp, #28]
 8009544:	9307      	strlt	r3, [sp, #28]
 8009546:	bfb8      	it	lt
 8009548:	9204      	strlt	r2, [sp, #16]
 800954a:	7823      	ldrb	r3, [r4, #0]
 800954c:	2b2e      	cmp	r3, #46	; 0x2e
 800954e:	d10c      	bne.n	800956a <_vfiprintf_r+0x176>
 8009550:	7863      	ldrb	r3, [r4, #1]
 8009552:	2b2a      	cmp	r3, #42	; 0x2a
 8009554:	d135      	bne.n	80095c2 <_vfiprintf_r+0x1ce>
 8009556:	9b03      	ldr	r3, [sp, #12]
 8009558:	3402      	adds	r4, #2
 800955a:	1d1a      	adds	r2, r3, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	9203      	str	r2, [sp, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	bfb8      	it	lt
 8009564:	f04f 33ff 	movlt.w	r3, #4294967295
 8009568:	9305      	str	r3, [sp, #20]
 800956a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009644 <_vfiprintf_r+0x250>
 800956e:	2203      	movs	r2, #3
 8009570:	4650      	mov	r0, sl
 8009572:	7821      	ldrb	r1, [r4, #0]
 8009574:	f000 fc60 	bl	8009e38 <memchr>
 8009578:	b140      	cbz	r0, 800958c <_vfiprintf_r+0x198>
 800957a:	2340      	movs	r3, #64	; 0x40
 800957c:	eba0 000a 	sub.w	r0, r0, sl
 8009580:	fa03 f000 	lsl.w	r0, r3, r0
 8009584:	9b04      	ldr	r3, [sp, #16]
 8009586:	3401      	adds	r4, #1
 8009588:	4303      	orrs	r3, r0
 800958a:	9304      	str	r3, [sp, #16]
 800958c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009590:	2206      	movs	r2, #6
 8009592:	482d      	ldr	r0, [pc, #180]	; (8009648 <_vfiprintf_r+0x254>)
 8009594:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009598:	f000 fc4e 	bl	8009e38 <memchr>
 800959c:	2800      	cmp	r0, #0
 800959e:	d03f      	beq.n	8009620 <_vfiprintf_r+0x22c>
 80095a0:	4b2a      	ldr	r3, [pc, #168]	; (800964c <_vfiprintf_r+0x258>)
 80095a2:	bb1b      	cbnz	r3, 80095ec <_vfiprintf_r+0x1f8>
 80095a4:	9b03      	ldr	r3, [sp, #12]
 80095a6:	3307      	adds	r3, #7
 80095a8:	f023 0307 	bic.w	r3, r3, #7
 80095ac:	3308      	adds	r3, #8
 80095ae:	9303      	str	r3, [sp, #12]
 80095b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b2:	443b      	add	r3, r7
 80095b4:	9309      	str	r3, [sp, #36]	; 0x24
 80095b6:	e767      	b.n	8009488 <_vfiprintf_r+0x94>
 80095b8:	460c      	mov	r4, r1
 80095ba:	2001      	movs	r0, #1
 80095bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80095c0:	e7a5      	b.n	800950e <_vfiprintf_r+0x11a>
 80095c2:	2300      	movs	r3, #0
 80095c4:	f04f 0c0a 	mov.w	ip, #10
 80095c8:	4619      	mov	r1, r3
 80095ca:	3401      	adds	r4, #1
 80095cc:	9305      	str	r3, [sp, #20]
 80095ce:	4620      	mov	r0, r4
 80095d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095d4:	3a30      	subs	r2, #48	; 0x30
 80095d6:	2a09      	cmp	r2, #9
 80095d8:	d903      	bls.n	80095e2 <_vfiprintf_r+0x1ee>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d0c5      	beq.n	800956a <_vfiprintf_r+0x176>
 80095de:	9105      	str	r1, [sp, #20]
 80095e0:	e7c3      	b.n	800956a <_vfiprintf_r+0x176>
 80095e2:	4604      	mov	r4, r0
 80095e4:	2301      	movs	r3, #1
 80095e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80095ea:	e7f0      	b.n	80095ce <_vfiprintf_r+0x1da>
 80095ec:	ab03      	add	r3, sp, #12
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	462a      	mov	r2, r5
 80095f2:	4630      	mov	r0, r6
 80095f4:	4b16      	ldr	r3, [pc, #88]	; (8009650 <_vfiprintf_r+0x25c>)
 80095f6:	a904      	add	r1, sp, #16
 80095f8:	f3af 8000 	nop.w
 80095fc:	4607      	mov	r7, r0
 80095fe:	1c78      	adds	r0, r7, #1
 8009600:	d1d6      	bne.n	80095b0 <_vfiprintf_r+0x1bc>
 8009602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009604:	07d9      	lsls	r1, r3, #31
 8009606:	d405      	bmi.n	8009614 <_vfiprintf_r+0x220>
 8009608:	89ab      	ldrh	r3, [r5, #12]
 800960a:	059a      	lsls	r2, r3, #22
 800960c:	d402      	bmi.n	8009614 <_vfiprintf_r+0x220>
 800960e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009610:	f7ff fd5f 	bl	80090d2 <__retarget_lock_release_recursive>
 8009614:	89ab      	ldrh	r3, [r5, #12]
 8009616:	065b      	lsls	r3, r3, #25
 8009618:	f53f af12 	bmi.w	8009440 <_vfiprintf_r+0x4c>
 800961c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800961e:	e711      	b.n	8009444 <_vfiprintf_r+0x50>
 8009620:	ab03      	add	r3, sp, #12
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	462a      	mov	r2, r5
 8009626:	4630      	mov	r0, r6
 8009628:	4b09      	ldr	r3, [pc, #36]	; (8009650 <_vfiprintf_r+0x25c>)
 800962a:	a904      	add	r1, sp, #16
 800962c:	f000 f882 	bl	8009734 <_printf_i>
 8009630:	e7e4      	b.n	80095fc <_vfiprintf_r+0x208>
 8009632:	bf00      	nop
 8009634:	0800a290 	.word	0x0800a290
 8009638:	0800a2b0 	.word	0x0800a2b0
 800963c:	0800a270 	.word	0x0800a270
 8009640:	0800a2d0 	.word	0x0800a2d0
 8009644:	0800a2d6 	.word	0x0800a2d6
 8009648:	0800a2da 	.word	0x0800a2da
 800964c:	00000000 	.word	0x00000000
 8009650:	080093cf 	.word	0x080093cf

08009654 <_printf_common>:
 8009654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009658:	4616      	mov	r6, r2
 800965a:	4699      	mov	r9, r3
 800965c:	688a      	ldr	r2, [r1, #8]
 800965e:	690b      	ldr	r3, [r1, #16]
 8009660:	4607      	mov	r7, r0
 8009662:	4293      	cmp	r3, r2
 8009664:	bfb8      	it	lt
 8009666:	4613      	movlt	r3, r2
 8009668:	6033      	str	r3, [r6, #0]
 800966a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800966e:	460c      	mov	r4, r1
 8009670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009674:	b10a      	cbz	r2, 800967a <_printf_common+0x26>
 8009676:	3301      	adds	r3, #1
 8009678:	6033      	str	r3, [r6, #0]
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	0699      	lsls	r1, r3, #26
 800967e:	bf42      	ittt	mi
 8009680:	6833      	ldrmi	r3, [r6, #0]
 8009682:	3302      	addmi	r3, #2
 8009684:	6033      	strmi	r3, [r6, #0]
 8009686:	6825      	ldr	r5, [r4, #0]
 8009688:	f015 0506 	ands.w	r5, r5, #6
 800968c:	d106      	bne.n	800969c <_printf_common+0x48>
 800968e:	f104 0a19 	add.w	sl, r4, #25
 8009692:	68e3      	ldr	r3, [r4, #12]
 8009694:	6832      	ldr	r2, [r6, #0]
 8009696:	1a9b      	subs	r3, r3, r2
 8009698:	42ab      	cmp	r3, r5
 800969a:	dc28      	bgt.n	80096ee <_printf_common+0x9a>
 800969c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096a0:	1e13      	subs	r3, r2, #0
 80096a2:	6822      	ldr	r2, [r4, #0]
 80096a4:	bf18      	it	ne
 80096a6:	2301      	movne	r3, #1
 80096a8:	0692      	lsls	r2, r2, #26
 80096aa:	d42d      	bmi.n	8009708 <_printf_common+0xb4>
 80096ac:	4649      	mov	r1, r9
 80096ae:	4638      	mov	r0, r7
 80096b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096b4:	47c0      	blx	r8
 80096b6:	3001      	adds	r0, #1
 80096b8:	d020      	beq.n	80096fc <_printf_common+0xa8>
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	68e5      	ldr	r5, [r4, #12]
 80096be:	f003 0306 	and.w	r3, r3, #6
 80096c2:	2b04      	cmp	r3, #4
 80096c4:	bf18      	it	ne
 80096c6:	2500      	movne	r5, #0
 80096c8:	6832      	ldr	r2, [r6, #0]
 80096ca:	f04f 0600 	mov.w	r6, #0
 80096ce:	68a3      	ldr	r3, [r4, #8]
 80096d0:	bf08      	it	eq
 80096d2:	1aad      	subeq	r5, r5, r2
 80096d4:	6922      	ldr	r2, [r4, #16]
 80096d6:	bf08      	it	eq
 80096d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096dc:	4293      	cmp	r3, r2
 80096de:	bfc4      	itt	gt
 80096e0:	1a9b      	subgt	r3, r3, r2
 80096e2:	18ed      	addgt	r5, r5, r3
 80096e4:	341a      	adds	r4, #26
 80096e6:	42b5      	cmp	r5, r6
 80096e8:	d11a      	bne.n	8009720 <_printf_common+0xcc>
 80096ea:	2000      	movs	r0, #0
 80096ec:	e008      	b.n	8009700 <_printf_common+0xac>
 80096ee:	2301      	movs	r3, #1
 80096f0:	4652      	mov	r2, sl
 80096f2:	4649      	mov	r1, r9
 80096f4:	4638      	mov	r0, r7
 80096f6:	47c0      	blx	r8
 80096f8:	3001      	adds	r0, #1
 80096fa:	d103      	bne.n	8009704 <_printf_common+0xb0>
 80096fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009704:	3501      	adds	r5, #1
 8009706:	e7c4      	b.n	8009692 <_printf_common+0x3e>
 8009708:	2030      	movs	r0, #48	; 0x30
 800970a:	18e1      	adds	r1, r4, r3
 800970c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009710:	1c5a      	adds	r2, r3, #1
 8009712:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009716:	4422      	add	r2, r4
 8009718:	3302      	adds	r3, #2
 800971a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800971e:	e7c5      	b.n	80096ac <_printf_common+0x58>
 8009720:	2301      	movs	r3, #1
 8009722:	4622      	mov	r2, r4
 8009724:	4649      	mov	r1, r9
 8009726:	4638      	mov	r0, r7
 8009728:	47c0      	blx	r8
 800972a:	3001      	adds	r0, #1
 800972c:	d0e6      	beq.n	80096fc <_printf_common+0xa8>
 800972e:	3601      	adds	r6, #1
 8009730:	e7d9      	b.n	80096e6 <_printf_common+0x92>
	...

08009734 <_printf_i>:
 8009734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009738:	7e0f      	ldrb	r7, [r1, #24]
 800973a:	4691      	mov	r9, r2
 800973c:	2f78      	cmp	r7, #120	; 0x78
 800973e:	4680      	mov	r8, r0
 8009740:	460c      	mov	r4, r1
 8009742:	469a      	mov	sl, r3
 8009744:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800974a:	d807      	bhi.n	800975c <_printf_i+0x28>
 800974c:	2f62      	cmp	r7, #98	; 0x62
 800974e:	d80a      	bhi.n	8009766 <_printf_i+0x32>
 8009750:	2f00      	cmp	r7, #0
 8009752:	f000 80d9 	beq.w	8009908 <_printf_i+0x1d4>
 8009756:	2f58      	cmp	r7, #88	; 0x58
 8009758:	f000 80a4 	beq.w	80098a4 <_printf_i+0x170>
 800975c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009764:	e03a      	b.n	80097dc <_printf_i+0xa8>
 8009766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800976a:	2b15      	cmp	r3, #21
 800976c:	d8f6      	bhi.n	800975c <_printf_i+0x28>
 800976e:	a101      	add	r1, pc, #4	; (adr r1, 8009774 <_printf_i+0x40>)
 8009770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009774:	080097cd 	.word	0x080097cd
 8009778:	080097e1 	.word	0x080097e1
 800977c:	0800975d 	.word	0x0800975d
 8009780:	0800975d 	.word	0x0800975d
 8009784:	0800975d 	.word	0x0800975d
 8009788:	0800975d 	.word	0x0800975d
 800978c:	080097e1 	.word	0x080097e1
 8009790:	0800975d 	.word	0x0800975d
 8009794:	0800975d 	.word	0x0800975d
 8009798:	0800975d 	.word	0x0800975d
 800979c:	0800975d 	.word	0x0800975d
 80097a0:	080098ef 	.word	0x080098ef
 80097a4:	08009811 	.word	0x08009811
 80097a8:	080098d1 	.word	0x080098d1
 80097ac:	0800975d 	.word	0x0800975d
 80097b0:	0800975d 	.word	0x0800975d
 80097b4:	08009911 	.word	0x08009911
 80097b8:	0800975d 	.word	0x0800975d
 80097bc:	08009811 	.word	0x08009811
 80097c0:	0800975d 	.word	0x0800975d
 80097c4:	0800975d 	.word	0x0800975d
 80097c8:	080098d9 	.word	0x080098d9
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	1d1a      	adds	r2, r3, #4
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	602a      	str	r2, [r5, #0]
 80097d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097dc:	2301      	movs	r3, #1
 80097de:	e0a4      	b.n	800992a <_printf_i+0x1f6>
 80097e0:	6820      	ldr	r0, [r4, #0]
 80097e2:	6829      	ldr	r1, [r5, #0]
 80097e4:	0606      	lsls	r6, r0, #24
 80097e6:	f101 0304 	add.w	r3, r1, #4
 80097ea:	d50a      	bpl.n	8009802 <_printf_i+0xce>
 80097ec:	680e      	ldr	r6, [r1, #0]
 80097ee:	602b      	str	r3, [r5, #0]
 80097f0:	2e00      	cmp	r6, #0
 80097f2:	da03      	bge.n	80097fc <_printf_i+0xc8>
 80097f4:	232d      	movs	r3, #45	; 0x2d
 80097f6:	4276      	negs	r6, r6
 80097f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097fc:	230a      	movs	r3, #10
 80097fe:	485e      	ldr	r0, [pc, #376]	; (8009978 <_printf_i+0x244>)
 8009800:	e019      	b.n	8009836 <_printf_i+0x102>
 8009802:	680e      	ldr	r6, [r1, #0]
 8009804:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009808:	602b      	str	r3, [r5, #0]
 800980a:	bf18      	it	ne
 800980c:	b236      	sxthne	r6, r6
 800980e:	e7ef      	b.n	80097f0 <_printf_i+0xbc>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	6820      	ldr	r0, [r4, #0]
 8009814:	1d19      	adds	r1, r3, #4
 8009816:	6029      	str	r1, [r5, #0]
 8009818:	0601      	lsls	r1, r0, #24
 800981a:	d501      	bpl.n	8009820 <_printf_i+0xec>
 800981c:	681e      	ldr	r6, [r3, #0]
 800981e:	e002      	b.n	8009826 <_printf_i+0xf2>
 8009820:	0646      	lsls	r6, r0, #25
 8009822:	d5fb      	bpl.n	800981c <_printf_i+0xe8>
 8009824:	881e      	ldrh	r6, [r3, #0]
 8009826:	2f6f      	cmp	r7, #111	; 0x6f
 8009828:	bf0c      	ite	eq
 800982a:	2308      	moveq	r3, #8
 800982c:	230a      	movne	r3, #10
 800982e:	4852      	ldr	r0, [pc, #328]	; (8009978 <_printf_i+0x244>)
 8009830:	2100      	movs	r1, #0
 8009832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009836:	6865      	ldr	r5, [r4, #4]
 8009838:	2d00      	cmp	r5, #0
 800983a:	bfa8      	it	ge
 800983c:	6821      	ldrge	r1, [r4, #0]
 800983e:	60a5      	str	r5, [r4, #8]
 8009840:	bfa4      	itt	ge
 8009842:	f021 0104 	bicge.w	r1, r1, #4
 8009846:	6021      	strge	r1, [r4, #0]
 8009848:	b90e      	cbnz	r6, 800984e <_printf_i+0x11a>
 800984a:	2d00      	cmp	r5, #0
 800984c:	d04d      	beq.n	80098ea <_printf_i+0x1b6>
 800984e:	4615      	mov	r5, r2
 8009850:	fbb6 f1f3 	udiv	r1, r6, r3
 8009854:	fb03 6711 	mls	r7, r3, r1, r6
 8009858:	5dc7      	ldrb	r7, [r0, r7]
 800985a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800985e:	4637      	mov	r7, r6
 8009860:	42bb      	cmp	r3, r7
 8009862:	460e      	mov	r6, r1
 8009864:	d9f4      	bls.n	8009850 <_printf_i+0x11c>
 8009866:	2b08      	cmp	r3, #8
 8009868:	d10b      	bne.n	8009882 <_printf_i+0x14e>
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	07de      	lsls	r6, r3, #31
 800986e:	d508      	bpl.n	8009882 <_printf_i+0x14e>
 8009870:	6923      	ldr	r3, [r4, #16]
 8009872:	6861      	ldr	r1, [r4, #4]
 8009874:	4299      	cmp	r1, r3
 8009876:	bfde      	ittt	le
 8009878:	2330      	movle	r3, #48	; 0x30
 800987a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800987e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009882:	1b52      	subs	r2, r2, r5
 8009884:	6122      	str	r2, [r4, #16]
 8009886:	464b      	mov	r3, r9
 8009888:	4621      	mov	r1, r4
 800988a:	4640      	mov	r0, r8
 800988c:	f8cd a000 	str.w	sl, [sp]
 8009890:	aa03      	add	r2, sp, #12
 8009892:	f7ff fedf 	bl	8009654 <_printf_common>
 8009896:	3001      	adds	r0, #1
 8009898:	d14c      	bne.n	8009934 <_printf_i+0x200>
 800989a:	f04f 30ff 	mov.w	r0, #4294967295
 800989e:	b004      	add	sp, #16
 80098a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a4:	4834      	ldr	r0, [pc, #208]	; (8009978 <_printf_i+0x244>)
 80098a6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098aa:	6829      	ldr	r1, [r5, #0]
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80098b2:	6029      	str	r1, [r5, #0]
 80098b4:	061d      	lsls	r5, r3, #24
 80098b6:	d514      	bpl.n	80098e2 <_printf_i+0x1ae>
 80098b8:	07df      	lsls	r7, r3, #31
 80098ba:	bf44      	itt	mi
 80098bc:	f043 0320 	orrmi.w	r3, r3, #32
 80098c0:	6023      	strmi	r3, [r4, #0]
 80098c2:	b91e      	cbnz	r6, 80098cc <_printf_i+0x198>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	f023 0320 	bic.w	r3, r3, #32
 80098ca:	6023      	str	r3, [r4, #0]
 80098cc:	2310      	movs	r3, #16
 80098ce:	e7af      	b.n	8009830 <_printf_i+0xfc>
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	f043 0320 	orr.w	r3, r3, #32
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	2378      	movs	r3, #120	; 0x78
 80098da:	4828      	ldr	r0, [pc, #160]	; (800997c <_printf_i+0x248>)
 80098dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098e0:	e7e3      	b.n	80098aa <_printf_i+0x176>
 80098e2:	0659      	lsls	r1, r3, #25
 80098e4:	bf48      	it	mi
 80098e6:	b2b6      	uxthmi	r6, r6
 80098e8:	e7e6      	b.n	80098b8 <_printf_i+0x184>
 80098ea:	4615      	mov	r5, r2
 80098ec:	e7bb      	b.n	8009866 <_printf_i+0x132>
 80098ee:	682b      	ldr	r3, [r5, #0]
 80098f0:	6826      	ldr	r6, [r4, #0]
 80098f2:	1d18      	adds	r0, r3, #4
 80098f4:	6961      	ldr	r1, [r4, #20]
 80098f6:	6028      	str	r0, [r5, #0]
 80098f8:	0635      	lsls	r5, r6, #24
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	d501      	bpl.n	8009902 <_printf_i+0x1ce>
 80098fe:	6019      	str	r1, [r3, #0]
 8009900:	e002      	b.n	8009908 <_printf_i+0x1d4>
 8009902:	0670      	lsls	r0, r6, #25
 8009904:	d5fb      	bpl.n	80098fe <_printf_i+0x1ca>
 8009906:	8019      	strh	r1, [r3, #0]
 8009908:	2300      	movs	r3, #0
 800990a:	4615      	mov	r5, r2
 800990c:	6123      	str	r3, [r4, #16]
 800990e:	e7ba      	b.n	8009886 <_printf_i+0x152>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	2100      	movs	r1, #0
 8009914:	1d1a      	adds	r2, r3, #4
 8009916:	602a      	str	r2, [r5, #0]
 8009918:	681d      	ldr	r5, [r3, #0]
 800991a:	6862      	ldr	r2, [r4, #4]
 800991c:	4628      	mov	r0, r5
 800991e:	f000 fa8b 	bl	8009e38 <memchr>
 8009922:	b108      	cbz	r0, 8009928 <_printf_i+0x1f4>
 8009924:	1b40      	subs	r0, r0, r5
 8009926:	6060      	str	r0, [r4, #4]
 8009928:	6863      	ldr	r3, [r4, #4]
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	2300      	movs	r3, #0
 800992e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009932:	e7a8      	b.n	8009886 <_printf_i+0x152>
 8009934:	462a      	mov	r2, r5
 8009936:	4649      	mov	r1, r9
 8009938:	4640      	mov	r0, r8
 800993a:	6923      	ldr	r3, [r4, #16]
 800993c:	47d0      	blx	sl
 800993e:	3001      	adds	r0, #1
 8009940:	d0ab      	beq.n	800989a <_printf_i+0x166>
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	079b      	lsls	r3, r3, #30
 8009946:	d413      	bmi.n	8009970 <_printf_i+0x23c>
 8009948:	68e0      	ldr	r0, [r4, #12]
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	4298      	cmp	r0, r3
 800994e:	bfb8      	it	lt
 8009950:	4618      	movlt	r0, r3
 8009952:	e7a4      	b.n	800989e <_printf_i+0x16a>
 8009954:	2301      	movs	r3, #1
 8009956:	4632      	mov	r2, r6
 8009958:	4649      	mov	r1, r9
 800995a:	4640      	mov	r0, r8
 800995c:	47d0      	blx	sl
 800995e:	3001      	adds	r0, #1
 8009960:	d09b      	beq.n	800989a <_printf_i+0x166>
 8009962:	3501      	adds	r5, #1
 8009964:	68e3      	ldr	r3, [r4, #12]
 8009966:	9903      	ldr	r1, [sp, #12]
 8009968:	1a5b      	subs	r3, r3, r1
 800996a:	42ab      	cmp	r3, r5
 800996c:	dcf2      	bgt.n	8009954 <_printf_i+0x220>
 800996e:	e7eb      	b.n	8009948 <_printf_i+0x214>
 8009970:	2500      	movs	r5, #0
 8009972:	f104 0619 	add.w	r6, r4, #25
 8009976:	e7f5      	b.n	8009964 <_printf_i+0x230>
 8009978:	0800a2e1 	.word	0x0800a2e1
 800997c:	0800a2f2 	.word	0x0800a2f2

08009980 <__sread>:
 8009980:	b510      	push	{r4, lr}
 8009982:	460c      	mov	r4, r1
 8009984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009988:	f000 fabc 	bl	8009f04 <_read_r>
 800998c:	2800      	cmp	r0, #0
 800998e:	bfab      	itete	ge
 8009990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009992:	89a3      	ldrhlt	r3, [r4, #12]
 8009994:	181b      	addge	r3, r3, r0
 8009996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800999a:	bfac      	ite	ge
 800999c:	6563      	strge	r3, [r4, #84]	; 0x54
 800999e:	81a3      	strhlt	r3, [r4, #12]
 80099a0:	bd10      	pop	{r4, pc}

080099a2 <__swrite>:
 80099a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a6:	461f      	mov	r7, r3
 80099a8:	898b      	ldrh	r3, [r1, #12]
 80099aa:	4605      	mov	r5, r0
 80099ac:	05db      	lsls	r3, r3, #23
 80099ae:	460c      	mov	r4, r1
 80099b0:	4616      	mov	r6, r2
 80099b2:	d505      	bpl.n	80099c0 <__swrite+0x1e>
 80099b4:	2302      	movs	r3, #2
 80099b6:	2200      	movs	r2, #0
 80099b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099bc:	f000 f9c4 	bl	8009d48 <_lseek_r>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	4632      	mov	r2, r6
 80099c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099c8:	81a3      	strh	r3, [r4, #12]
 80099ca:	4628      	mov	r0, r5
 80099cc:	463b      	mov	r3, r7
 80099ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099d6:	f000 b869 	b.w	8009aac <_write_r>

080099da <__sseek>:
 80099da:	b510      	push	{r4, lr}
 80099dc:	460c      	mov	r4, r1
 80099de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e2:	f000 f9b1 	bl	8009d48 <_lseek_r>
 80099e6:	1c43      	adds	r3, r0, #1
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	bf15      	itete	ne
 80099ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80099ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099f6:	81a3      	strheq	r3, [r4, #12]
 80099f8:	bf18      	it	ne
 80099fa:	81a3      	strhne	r3, [r4, #12]
 80099fc:	bd10      	pop	{r4, pc}

080099fe <__sclose>:
 80099fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a02:	f000 b8d3 	b.w	8009bac <_close_r>
	...

08009a08 <__swbuf_r>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	460e      	mov	r6, r1
 8009a0c:	4614      	mov	r4, r2
 8009a0e:	4605      	mov	r5, r0
 8009a10:	b118      	cbz	r0, 8009a1a <__swbuf_r+0x12>
 8009a12:	6983      	ldr	r3, [r0, #24]
 8009a14:	b90b      	cbnz	r3, 8009a1a <__swbuf_r+0x12>
 8009a16:	f7ff fabd 	bl	8008f94 <__sinit>
 8009a1a:	4b21      	ldr	r3, [pc, #132]	; (8009aa0 <__swbuf_r+0x98>)
 8009a1c:	429c      	cmp	r4, r3
 8009a1e:	d12b      	bne.n	8009a78 <__swbuf_r+0x70>
 8009a20:	686c      	ldr	r4, [r5, #4]
 8009a22:	69a3      	ldr	r3, [r4, #24]
 8009a24:	60a3      	str	r3, [r4, #8]
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	071a      	lsls	r2, r3, #28
 8009a2a:	d52f      	bpl.n	8009a8c <__swbuf_r+0x84>
 8009a2c:	6923      	ldr	r3, [r4, #16]
 8009a2e:	b36b      	cbz	r3, 8009a8c <__swbuf_r+0x84>
 8009a30:	6923      	ldr	r3, [r4, #16]
 8009a32:	6820      	ldr	r0, [r4, #0]
 8009a34:	b2f6      	uxtb	r6, r6
 8009a36:	1ac0      	subs	r0, r0, r3
 8009a38:	6963      	ldr	r3, [r4, #20]
 8009a3a:	4637      	mov	r7, r6
 8009a3c:	4283      	cmp	r3, r0
 8009a3e:	dc04      	bgt.n	8009a4a <__swbuf_r+0x42>
 8009a40:	4621      	mov	r1, r4
 8009a42:	4628      	mov	r0, r5
 8009a44:	f000 f944 	bl	8009cd0 <_fflush_r>
 8009a48:	bb30      	cbnz	r0, 8009a98 <__swbuf_r+0x90>
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	60a3      	str	r3, [r4, #8]
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	1c5a      	adds	r2, r3, #1
 8009a56:	6022      	str	r2, [r4, #0]
 8009a58:	701e      	strb	r6, [r3, #0]
 8009a5a:	6963      	ldr	r3, [r4, #20]
 8009a5c:	4283      	cmp	r3, r0
 8009a5e:	d004      	beq.n	8009a6a <__swbuf_r+0x62>
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	07db      	lsls	r3, r3, #31
 8009a64:	d506      	bpl.n	8009a74 <__swbuf_r+0x6c>
 8009a66:	2e0a      	cmp	r6, #10
 8009a68:	d104      	bne.n	8009a74 <__swbuf_r+0x6c>
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	f000 f92f 	bl	8009cd0 <_fflush_r>
 8009a72:	b988      	cbnz	r0, 8009a98 <__swbuf_r+0x90>
 8009a74:	4638      	mov	r0, r7
 8009a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a78:	4b0a      	ldr	r3, [pc, #40]	; (8009aa4 <__swbuf_r+0x9c>)
 8009a7a:	429c      	cmp	r4, r3
 8009a7c:	d101      	bne.n	8009a82 <__swbuf_r+0x7a>
 8009a7e:	68ac      	ldr	r4, [r5, #8]
 8009a80:	e7cf      	b.n	8009a22 <__swbuf_r+0x1a>
 8009a82:	4b09      	ldr	r3, [pc, #36]	; (8009aa8 <__swbuf_r+0xa0>)
 8009a84:	429c      	cmp	r4, r3
 8009a86:	bf08      	it	eq
 8009a88:	68ec      	ldreq	r4, [r5, #12]
 8009a8a:	e7ca      	b.n	8009a22 <__swbuf_r+0x1a>
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	4628      	mov	r0, r5
 8009a90:	f000 f81e 	bl	8009ad0 <__swsetup_r>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d0cb      	beq.n	8009a30 <__swbuf_r+0x28>
 8009a98:	f04f 37ff 	mov.w	r7, #4294967295
 8009a9c:	e7ea      	b.n	8009a74 <__swbuf_r+0x6c>
 8009a9e:	bf00      	nop
 8009aa0:	0800a290 	.word	0x0800a290
 8009aa4:	0800a2b0 	.word	0x0800a2b0
 8009aa8:	0800a270 	.word	0x0800a270

08009aac <_write_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	4d05      	ldr	r5, [pc, #20]	; (8009acc <_write_r+0x20>)
 8009ab8:	602a      	str	r2, [r5, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	f7f6 fb74 	bl	80001a8 <_write>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_write_r+0x1e>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_write_r+0x1e>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	20001480 	.word	0x20001480

08009ad0 <__swsetup_r>:
 8009ad0:	4b32      	ldr	r3, [pc, #200]	; (8009b9c <__swsetup_r+0xcc>)
 8009ad2:	b570      	push	{r4, r5, r6, lr}
 8009ad4:	681d      	ldr	r5, [r3, #0]
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	460c      	mov	r4, r1
 8009ada:	b125      	cbz	r5, 8009ae6 <__swsetup_r+0x16>
 8009adc:	69ab      	ldr	r3, [r5, #24]
 8009ade:	b913      	cbnz	r3, 8009ae6 <__swsetup_r+0x16>
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	f7ff fa57 	bl	8008f94 <__sinit>
 8009ae6:	4b2e      	ldr	r3, [pc, #184]	; (8009ba0 <__swsetup_r+0xd0>)
 8009ae8:	429c      	cmp	r4, r3
 8009aea:	d10f      	bne.n	8009b0c <__swsetup_r+0x3c>
 8009aec:	686c      	ldr	r4, [r5, #4]
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009af4:	0719      	lsls	r1, r3, #28
 8009af6:	d42c      	bmi.n	8009b52 <__swsetup_r+0x82>
 8009af8:	06dd      	lsls	r5, r3, #27
 8009afa:	d411      	bmi.n	8009b20 <__swsetup_r+0x50>
 8009afc:	2309      	movs	r3, #9
 8009afe:	6033      	str	r3, [r6, #0]
 8009b00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b04:	f04f 30ff 	mov.w	r0, #4294967295
 8009b08:	81a3      	strh	r3, [r4, #12]
 8009b0a:	e03e      	b.n	8009b8a <__swsetup_r+0xba>
 8009b0c:	4b25      	ldr	r3, [pc, #148]	; (8009ba4 <__swsetup_r+0xd4>)
 8009b0e:	429c      	cmp	r4, r3
 8009b10:	d101      	bne.n	8009b16 <__swsetup_r+0x46>
 8009b12:	68ac      	ldr	r4, [r5, #8]
 8009b14:	e7eb      	b.n	8009aee <__swsetup_r+0x1e>
 8009b16:	4b24      	ldr	r3, [pc, #144]	; (8009ba8 <__swsetup_r+0xd8>)
 8009b18:	429c      	cmp	r4, r3
 8009b1a:	bf08      	it	eq
 8009b1c:	68ec      	ldreq	r4, [r5, #12]
 8009b1e:	e7e6      	b.n	8009aee <__swsetup_r+0x1e>
 8009b20:	0758      	lsls	r0, r3, #29
 8009b22:	d512      	bpl.n	8009b4a <__swsetup_r+0x7a>
 8009b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b26:	b141      	cbz	r1, 8009b3a <__swsetup_r+0x6a>
 8009b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b2c:	4299      	cmp	r1, r3
 8009b2e:	d002      	beq.n	8009b36 <__swsetup_r+0x66>
 8009b30:	4630      	mov	r0, r6
 8009b32:	f7ff f8ab 	bl	8008c8c <_free_r>
 8009b36:	2300      	movs	r3, #0
 8009b38:	6363      	str	r3, [r4, #52]	; 0x34
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b40:	81a3      	strh	r3, [r4, #12]
 8009b42:	2300      	movs	r3, #0
 8009b44:	6063      	str	r3, [r4, #4]
 8009b46:	6923      	ldr	r3, [r4, #16]
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	f043 0308 	orr.w	r3, r3, #8
 8009b50:	81a3      	strh	r3, [r4, #12]
 8009b52:	6923      	ldr	r3, [r4, #16]
 8009b54:	b94b      	cbnz	r3, 8009b6a <__swsetup_r+0x9a>
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b60:	d003      	beq.n	8009b6a <__swsetup_r+0x9a>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4630      	mov	r0, r6
 8009b66:	f000 f927 	bl	8009db8 <__smakebuf_r>
 8009b6a:	89a0      	ldrh	r0, [r4, #12]
 8009b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b70:	f010 0301 	ands.w	r3, r0, #1
 8009b74:	d00a      	beq.n	8009b8c <__swsetup_r+0xbc>
 8009b76:	2300      	movs	r3, #0
 8009b78:	60a3      	str	r3, [r4, #8]
 8009b7a:	6963      	ldr	r3, [r4, #20]
 8009b7c:	425b      	negs	r3, r3
 8009b7e:	61a3      	str	r3, [r4, #24]
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	b943      	cbnz	r3, 8009b96 <__swsetup_r+0xc6>
 8009b84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b88:	d1ba      	bne.n	8009b00 <__swsetup_r+0x30>
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}
 8009b8c:	0781      	lsls	r1, r0, #30
 8009b8e:	bf58      	it	pl
 8009b90:	6963      	ldrpl	r3, [r4, #20]
 8009b92:	60a3      	str	r3, [r4, #8]
 8009b94:	e7f4      	b.n	8009b80 <__swsetup_r+0xb0>
 8009b96:	2000      	movs	r0, #0
 8009b98:	e7f7      	b.n	8009b8a <__swsetup_r+0xba>
 8009b9a:	bf00      	nop
 8009b9c:	2000017c 	.word	0x2000017c
 8009ba0:	0800a290 	.word	0x0800a290
 8009ba4:	0800a2b0 	.word	0x0800a2b0
 8009ba8:	0800a270 	.word	0x0800a270

08009bac <_close_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4d05      	ldr	r5, [pc, #20]	; (8009bc8 <_close_r+0x1c>)
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	602b      	str	r3, [r5, #0]
 8009bb8:	f7f6 ff27 	bl	8000a0a <_close>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	d102      	bne.n	8009bc6 <_close_r+0x1a>
 8009bc0:	682b      	ldr	r3, [r5, #0]
 8009bc2:	b103      	cbz	r3, 8009bc6 <_close_r+0x1a>
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
 8009bc8:	20001480 	.word	0x20001480

08009bcc <__sflush_r>:
 8009bcc:	898a      	ldrh	r2, [r1, #12]
 8009bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	0710      	lsls	r0, r2, #28
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	d457      	bmi.n	8009c88 <__sflush_r+0xbc>
 8009bd8:	684b      	ldr	r3, [r1, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	dc04      	bgt.n	8009be8 <__sflush_r+0x1c>
 8009bde:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	dc01      	bgt.n	8009be8 <__sflush_r+0x1c>
 8009be4:	2000      	movs	r0, #0
 8009be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bea:	2e00      	cmp	r6, #0
 8009bec:	d0fa      	beq.n	8009be4 <__sflush_r+0x18>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bf4:	682f      	ldr	r7, [r5, #0]
 8009bf6:	602b      	str	r3, [r5, #0]
 8009bf8:	d032      	beq.n	8009c60 <__sflush_r+0x94>
 8009bfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	075a      	lsls	r2, r3, #29
 8009c00:	d505      	bpl.n	8009c0e <__sflush_r+0x42>
 8009c02:	6863      	ldr	r3, [r4, #4]
 8009c04:	1ac0      	subs	r0, r0, r3
 8009c06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c08:	b10b      	cbz	r3, 8009c0e <__sflush_r+0x42>
 8009c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c0c:	1ac0      	subs	r0, r0, r3
 8009c0e:	2300      	movs	r3, #0
 8009c10:	4602      	mov	r2, r0
 8009c12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c14:	4628      	mov	r0, r5
 8009c16:	6a21      	ldr	r1, [r4, #32]
 8009c18:	47b0      	blx	r6
 8009c1a:	1c43      	adds	r3, r0, #1
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	d106      	bne.n	8009c2e <__sflush_r+0x62>
 8009c20:	6829      	ldr	r1, [r5, #0]
 8009c22:	291d      	cmp	r1, #29
 8009c24:	d82c      	bhi.n	8009c80 <__sflush_r+0xb4>
 8009c26:	4a29      	ldr	r2, [pc, #164]	; (8009ccc <__sflush_r+0x100>)
 8009c28:	40ca      	lsrs	r2, r1
 8009c2a:	07d6      	lsls	r6, r2, #31
 8009c2c:	d528      	bpl.n	8009c80 <__sflush_r+0xb4>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	6062      	str	r2, [r4, #4]
 8009c32:	6922      	ldr	r2, [r4, #16]
 8009c34:	04d9      	lsls	r1, r3, #19
 8009c36:	6022      	str	r2, [r4, #0]
 8009c38:	d504      	bpl.n	8009c44 <__sflush_r+0x78>
 8009c3a:	1c42      	adds	r2, r0, #1
 8009c3c:	d101      	bne.n	8009c42 <__sflush_r+0x76>
 8009c3e:	682b      	ldr	r3, [r5, #0]
 8009c40:	b903      	cbnz	r3, 8009c44 <__sflush_r+0x78>
 8009c42:	6560      	str	r0, [r4, #84]	; 0x54
 8009c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c46:	602f      	str	r7, [r5, #0]
 8009c48:	2900      	cmp	r1, #0
 8009c4a:	d0cb      	beq.n	8009be4 <__sflush_r+0x18>
 8009c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c50:	4299      	cmp	r1, r3
 8009c52:	d002      	beq.n	8009c5a <__sflush_r+0x8e>
 8009c54:	4628      	mov	r0, r5
 8009c56:	f7ff f819 	bl	8008c8c <_free_r>
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	6360      	str	r0, [r4, #52]	; 0x34
 8009c5e:	e7c2      	b.n	8009be6 <__sflush_r+0x1a>
 8009c60:	6a21      	ldr	r1, [r4, #32]
 8009c62:	2301      	movs	r3, #1
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b0      	blx	r6
 8009c68:	1c41      	adds	r1, r0, #1
 8009c6a:	d1c7      	bne.n	8009bfc <__sflush_r+0x30>
 8009c6c:	682b      	ldr	r3, [r5, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0c4      	beq.n	8009bfc <__sflush_r+0x30>
 8009c72:	2b1d      	cmp	r3, #29
 8009c74:	d001      	beq.n	8009c7a <__sflush_r+0xae>
 8009c76:	2b16      	cmp	r3, #22
 8009c78:	d101      	bne.n	8009c7e <__sflush_r+0xb2>
 8009c7a:	602f      	str	r7, [r5, #0]
 8009c7c:	e7b2      	b.n	8009be4 <__sflush_r+0x18>
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c84:	81a3      	strh	r3, [r4, #12]
 8009c86:	e7ae      	b.n	8009be6 <__sflush_r+0x1a>
 8009c88:	690f      	ldr	r7, [r1, #16]
 8009c8a:	2f00      	cmp	r7, #0
 8009c8c:	d0aa      	beq.n	8009be4 <__sflush_r+0x18>
 8009c8e:	0793      	lsls	r3, r2, #30
 8009c90:	bf18      	it	ne
 8009c92:	2300      	movne	r3, #0
 8009c94:	680e      	ldr	r6, [r1, #0]
 8009c96:	bf08      	it	eq
 8009c98:	694b      	ldreq	r3, [r1, #20]
 8009c9a:	1bf6      	subs	r6, r6, r7
 8009c9c:	600f      	str	r7, [r1, #0]
 8009c9e:	608b      	str	r3, [r1, #8]
 8009ca0:	2e00      	cmp	r6, #0
 8009ca2:	dd9f      	ble.n	8009be4 <__sflush_r+0x18>
 8009ca4:	4633      	mov	r3, r6
 8009ca6:	463a      	mov	r2, r7
 8009ca8:	4628      	mov	r0, r5
 8009caa:	6a21      	ldr	r1, [r4, #32]
 8009cac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009cb0:	47e0      	blx	ip
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	dc06      	bgt.n	8009cc4 <__sflush_r+0xf8>
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	e790      	b.n	8009be6 <__sflush_r+0x1a>
 8009cc4:	4407      	add	r7, r0
 8009cc6:	1a36      	subs	r6, r6, r0
 8009cc8:	e7ea      	b.n	8009ca0 <__sflush_r+0xd4>
 8009cca:	bf00      	nop
 8009ccc:	20400001 	.word	0x20400001

08009cd0 <_fflush_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	690b      	ldr	r3, [r1, #16]
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	b913      	cbnz	r3, 8009ce0 <_fflush_r+0x10>
 8009cda:	2500      	movs	r5, #0
 8009cdc:	4628      	mov	r0, r5
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	b118      	cbz	r0, 8009cea <_fflush_r+0x1a>
 8009ce2:	6983      	ldr	r3, [r0, #24]
 8009ce4:	b90b      	cbnz	r3, 8009cea <_fflush_r+0x1a>
 8009ce6:	f7ff f955 	bl	8008f94 <__sinit>
 8009cea:	4b14      	ldr	r3, [pc, #80]	; (8009d3c <_fflush_r+0x6c>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	d11b      	bne.n	8009d28 <_fflush_r+0x58>
 8009cf0:	686c      	ldr	r4, [r5, #4]
 8009cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0ef      	beq.n	8009cda <_fflush_r+0xa>
 8009cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cfc:	07d0      	lsls	r0, r2, #31
 8009cfe:	d404      	bmi.n	8009d0a <_fflush_r+0x3a>
 8009d00:	0599      	lsls	r1, r3, #22
 8009d02:	d402      	bmi.n	8009d0a <_fflush_r+0x3a>
 8009d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d06:	f7ff f9e3 	bl	80090d0 <__retarget_lock_acquire_recursive>
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	f7ff ff5d 	bl	8009bcc <__sflush_r>
 8009d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d14:	4605      	mov	r5, r0
 8009d16:	07da      	lsls	r2, r3, #31
 8009d18:	d4e0      	bmi.n	8009cdc <_fflush_r+0xc>
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	059b      	lsls	r3, r3, #22
 8009d1e:	d4dd      	bmi.n	8009cdc <_fflush_r+0xc>
 8009d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d22:	f7ff f9d6 	bl	80090d2 <__retarget_lock_release_recursive>
 8009d26:	e7d9      	b.n	8009cdc <_fflush_r+0xc>
 8009d28:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <_fflush_r+0x70>)
 8009d2a:	429c      	cmp	r4, r3
 8009d2c:	d101      	bne.n	8009d32 <_fflush_r+0x62>
 8009d2e:	68ac      	ldr	r4, [r5, #8]
 8009d30:	e7df      	b.n	8009cf2 <_fflush_r+0x22>
 8009d32:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <_fflush_r+0x74>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	bf08      	it	eq
 8009d38:	68ec      	ldreq	r4, [r5, #12]
 8009d3a:	e7da      	b.n	8009cf2 <_fflush_r+0x22>
 8009d3c:	0800a290 	.word	0x0800a290
 8009d40:	0800a2b0 	.word	0x0800a2b0
 8009d44:	0800a270 	.word	0x0800a270

08009d48 <_lseek_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	4608      	mov	r0, r1
 8009d4e:	4611      	mov	r1, r2
 8009d50:	2200      	movs	r2, #0
 8009d52:	4d05      	ldr	r5, [pc, #20]	; (8009d68 <_lseek_r+0x20>)
 8009d54:	602a      	str	r2, [r5, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	f7f6 fe7b 	bl	8000a52 <_lseek>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_lseek_r+0x1e>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_lseek_r+0x1e>
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	20001480 	.word	0x20001480

08009d6c <__swhatbuf_r>:
 8009d6c:	b570      	push	{r4, r5, r6, lr}
 8009d6e:	460e      	mov	r6, r1
 8009d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d74:	4614      	mov	r4, r2
 8009d76:	2900      	cmp	r1, #0
 8009d78:	461d      	mov	r5, r3
 8009d7a:	b096      	sub	sp, #88	; 0x58
 8009d7c:	da08      	bge.n	8009d90 <__swhatbuf_r+0x24>
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d84:	602a      	str	r2, [r5, #0]
 8009d86:	061a      	lsls	r2, r3, #24
 8009d88:	d410      	bmi.n	8009dac <__swhatbuf_r+0x40>
 8009d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d8e:	e00e      	b.n	8009dae <__swhatbuf_r+0x42>
 8009d90:	466a      	mov	r2, sp
 8009d92:	f000 f8c9 	bl	8009f28 <_fstat_r>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	dbf1      	blt.n	8009d7e <__swhatbuf_r+0x12>
 8009d9a:	9a01      	ldr	r2, [sp, #4]
 8009d9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009da0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009da4:	425a      	negs	r2, r3
 8009da6:	415a      	adcs	r2, r3
 8009da8:	602a      	str	r2, [r5, #0]
 8009daa:	e7ee      	b.n	8009d8a <__swhatbuf_r+0x1e>
 8009dac:	2340      	movs	r3, #64	; 0x40
 8009dae:	2000      	movs	r0, #0
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	b016      	add	sp, #88	; 0x58
 8009db4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009db8 <__smakebuf_r>:
 8009db8:	898b      	ldrh	r3, [r1, #12]
 8009dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dbc:	079d      	lsls	r5, r3, #30
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	d507      	bpl.n	8009dd4 <__smakebuf_r+0x1c>
 8009dc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	6123      	str	r3, [r4, #16]
 8009dcc:	2301      	movs	r3, #1
 8009dce:	6163      	str	r3, [r4, #20]
 8009dd0:	b002      	add	sp, #8
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	466a      	mov	r2, sp
 8009dd6:	ab01      	add	r3, sp, #4
 8009dd8:	f7ff ffc8 	bl	8009d6c <__swhatbuf_r>
 8009ddc:	9900      	ldr	r1, [sp, #0]
 8009dde:	4605      	mov	r5, r0
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7fe ffbb 	bl	8008d5c <_malloc_r>
 8009de6:	b948      	cbnz	r0, 8009dfc <__smakebuf_r+0x44>
 8009de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dec:	059a      	lsls	r2, r3, #22
 8009dee:	d4ef      	bmi.n	8009dd0 <__smakebuf_r+0x18>
 8009df0:	f023 0303 	bic.w	r3, r3, #3
 8009df4:	f043 0302 	orr.w	r3, r3, #2
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	e7e3      	b.n	8009dc4 <__smakebuf_r+0xc>
 8009dfc:	4b0d      	ldr	r3, [pc, #52]	; (8009e34 <__smakebuf_r+0x7c>)
 8009dfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	6020      	str	r0, [r4, #0]
 8009e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e08:	81a3      	strh	r3, [r4, #12]
 8009e0a:	9b00      	ldr	r3, [sp, #0]
 8009e0c:	6120      	str	r0, [r4, #16]
 8009e0e:	6163      	str	r3, [r4, #20]
 8009e10:	9b01      	ldr	r3, [sp, #4]
 8009e12:	b15b      	cbz	r3, 8009e2c <__smakebuf_r+0x74>
 8009e14:	4630      	mov	r0, r6
 8009e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e1a:	f000 f897 	bl	8009f4c <_isatty_r>
 8009e1e:	b128      	cbz	r0, 8009e2c <__smakebuf_r+0x74>
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	f023 0303 	bic.w	r3, r3, #3
 8009e26:	f043 0301 	orr.w	r3, r3, #1
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	89a0      	ldrh	r0, [r4, #12]
 8009e2e:	4305      	orrs	r5, r0
 8009e30:	81a5      	strh	r5, [r4, #12]
 8009e32:	e7cd      	b.n	8009dd0 <__smakebuf_r+0x18>
 8009e34:	08008f2d 	.word	0x08008f2d

08009e38 <memchr>:
 8009e38:	4603      	mov	r3, r0
 8009e3a:	b510      	push	{r4, lr}
 8009e3c:	b2c9      	uxtb	r1, r1
 8009e3e:	4402      	add	r2, r0
 8009e40:	4293      	cmp	r3, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	d101      	bne.n	8009e4a <memchr+0x12>
 8009e46:	2000      	movs	r0, #0
 8009e48:	e003      	b.n	8009e52 <memchr+0x1a>
 8009e4a:	7804      	ldrb	r4, [r0, #0]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	428c      	cmp	r4, r1
 8009e50:	d1f6      	bne.n	8009e40 <memchr+0x8>
 8009e52:	bd10      	pop	{r4, pc}

08009e54 <memcpy>:
 8009e54:	440a      	add	r2, r1
 8009e56:	4291      	cmp	r1, r2
 8009e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e5c:	d100      	bne.n	8009e60 <memcpy+0xc>
 8009e5e:	4770      	bx	lr
 8009e60:	b510      	push	{r4, lr}
 8009e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e66:	4291      	cmp	r1, r2
 8009e68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e6c:	d1f9      	bne.n	8009e62 <memcpy+0xe>
 8009e6e:	bd10      	pop	{r4, pc}

08009e70 <memmove>:
 8009e70:	4288      	cmp	r0, r1
 8009e72:	b510      	push	{r4, lr}
 8009e74:	eb01 0402 	add.w	r4, r1, r2
 8009e78:	d902      	bls.n	8009e80 <memmove+0x10>
 8009e7a:	4284      	cmp	r4, r0
 8009e7c:	4623      	mov	r3, r4
 8009e7e:	d807      	bhi.n	8009e90 <memmove+0x20>
 8009e80:	1e43      	subs	r3, r0, #1
 8009e82:	42a1      	cmp	r1, r4
 8009e84:	d008      	beq.n	8009e98 <memmove+0x28>
 8009e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e8e:	e7f8      	b.n	8009e82 <memmove+0x12>
 8009e90:	4601      	mov	r1, r0
 8009e92:	4402      	add	r2, r0
 8009e94:	428a      	cmp	r2, r1
 8009e96:	d100      	bne.n	8009e9a <memmove+0x2a>
 8009e98:	bd10      	pop	{r4, pc}
 8009e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ea2:	e7f7      	b.n	8009e94 <memmove+0x24>

08009ea4 <_realloc_r>:
 8009ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea8:	4680      	mov	r8, r0
 8009eaa:	4614      	mov	r4, r2
 8009eac:	460e      	mov	r6, r1
 8009eae:	b921      	cbnz	r1, 8009eba <_realloc_r+0x16>
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb6:	f7fe bf51 	b.w	8008d5c <_malloc_r>
 8009eba:	b92a      	cbnz	r2, 8009ec8 <_realloc_r+0x24>
 8009ebc:	f7fe fee6 	bl	8008c8c <_free_r>
 8009ec0:	4625      	mov	r5, r4
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec8:	f000 f850 	bl	8009f6c <_malloc_usable_size_r>
 8009ecc:	4284      	cmp	r4, r0
 8009ece:	4607      	mov	r7, r0
 8009ed0:	d802      	bhi.n	8009ed8 <_realloc_r+0x34>
 8009ed2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ed6:	d812      	bhi.n	8009efe <_realloc_r+0x5a>
 8009ed8:	4621      	mov	r1, r4
 8009eda:	4640      	mov	r0, r8
 8009edc:	f7fe ff3e 	bl	8008d5c <_malloc_r>
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d0ed      	beq.n	8009ec2 <_realloc_r+0x1e>
 8009ee6:	42bc      	cmp	r4, r7
 8009ee8:	4622      	mov	r2, r4
 8009eea:	4631      	mov	r1, r6
 8009eec:	bf28      	it	cs
 8009eee:	463a      	movcs	r2, r7
 8009ef0:	f7ff ffb0 	bl	8009e54 <memcpy>
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4640      	mov	r0, r8
 8009ef8:	f7fe fec8 	bl	8008c8c <_free_r>
 8009efc:	e7e1      	b.n	8009ec2 <_realloc_r+0x1e>
 8009efe:	4635      	mov	r5, r6
 8009f00:	e7df      	b.n	8009ec2 <_realloc_r+0x1e>
	...

08009f04 <_read_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	4d05      	ldr	r5, [pc, #20]	; (8009f24 <_read_r+0x20>)
 8009f10:	602a      	str	r2, [r5, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	f7f6 fd5c 	bl	80009d0 <_read>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d102      	bne.n	8009f22 <_read_r+0x1e>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	b103      	cbz	r3, 8009f22 <_read_r+0x1e>
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	20001480 	.word	0x20001480

08009f28 <_fstat_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	4d06      	ldr	r5, [pc, #24]	; (8009f48 <_fstat_r+0x20>)
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	4611      	mov	r1, r2
 8009f34:	602b      	str	r3, [r5, #0]
 8009f36:	f7f6 fd73 	bl	8000a20 <_fstat>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d102      	bne.n	8009f44 <_fstat_r+0x1c>
 8009f3e:	682b      	ldr	r3, [r5, #0]
 8009f40:	b103      	cbz	r3, 8009f44 <_fstat_r+0x1c>
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	bd38      	pop	{r3, r4, r5, pc}
 8009f46:	bf00      	nop
 8009f48:	20001480 	.word	0x20001480

08009f4c <_isatty_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	2300      	movs	r3, #0
 8009f50:	4d05      	ldr	r5, [pc, #20]	; (8009f68 <_isatty_r+0x1c>)
 8009f52:	4604      	mov	r4, r0
 8009f54:	4608      	mov	r0, r1
 8009f56:	602b      	str	r3, [r5, #0]
 8009f58:	f7f6 fd71 	bl	8000a3e <_isatty>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_isatty_r+0x1a>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_isatty_r+0x1a>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	20001480 	.word	0x20001480

08009f6c <_malloc_usable_size_r>:
 8009f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f70:	1f18      	subs	r0, r3, #4
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	bfbc      	itt	lt
 8009f76:	580b      	ldrlt	r3, [r1, r0]
 8009f78:	18c0      	addlt	r0, r0, r3
 8009f7a:	4770      	bx	lr

08009f7c <_init>:
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	bf00      	nop
 8009f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f82:	bc08      	pop	{r3}
 8009f84:	469e      	mov	lr, r3
 8009f86:	4770      	bx	lr

08009f88 <_fini>:
 8009f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8a:	bf00      	nop
 8009f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f8e:	bc08      	pop	{r3}
 8009f90:	469e      	mov	lr, r3
 8009f92:	4770      	bx	lr
