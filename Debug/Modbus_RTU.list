
Modbus_RTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08009f14  08009f14  00019f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a29c  0800a29c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a29c  0800a29c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a29c  0800a29c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a29c  0800a29c  0001a29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a0  0800a2a0  0001a2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a2a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  200001e0  0800a484  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001434  0800a484  00021434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120e9  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b8  00000000  00000000  000322f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  000355b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  000363e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab23  00000000  00000000  000370a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128b6  00000000  00000000  00051bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088af3  00000000  00000000  00064481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecf74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b8  00000000  00000000  000ecfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009efc 	.word	0x08009efc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08009efc 	.word	0x08009efc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Serial Wire Debug SWO Pri
int _write(int file, char *ptr, int len){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
     int DataIdx;
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001b4:	2300      	movs	r3, #0
 80001b6:	617b      	str	r3, [r7, #20]
 80001b8:	e009      	b.n	80001ce <_write+0x26>
         ITM_SendChar((*ptr++));
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	1c5a      	adds	r2, r3, #1
 80001be:	60ba      	str	r2, [r7, #8]
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f7ff ffca 	bl	800015c <ITM_SendChar>
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001c8:	697b      	ldr	r3, [r7, #20]
 80001ca:	3301      	adds	r3, #1
 80001cc:	617b      	str	r3, [r7, #20]
 80001ce:	697a      	ldr	r2, [r7, #20]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	dbf1      	blt.n	80001ba <_write+0x12>
     }
     return len;
 80001d6:	687b      	ldr	r3, [r7, #4]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3718      	adds	r7, #24
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}

080001e0 <send_debug_CDC>:

void send_debug_CDC(char *data){
 80001e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001e4:	b087      	sub	sp, #28
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
 80001ea:	466b      	mov	r3, sp
 80001ec:	461e      	mov	r6, r3

	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f4:	482b      	ldr	r0, [pc, #172]	; (80002a4 <send_debug_CDC+0xc4>)
 80001f6:	f001 f825 	bl	8001244 <HAL_GPIO_WritePin>
	int dataLen = strlen(data);
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f7ff ffa6 	bl	800014c <strlen>
 8000200:	4603      	mov	r3, r0
 8000202:	617b      	str	r3, [r7, #20]
	char dataCDC[dataLen + 1];
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	1c59      	adds	r1, r3, #1
 8000208:	1e4b      	subs	r3, r1, #1
 800020a:	613b      	str	r3, [r7, #16]
 800020c:	460a      	mov	r2, r1
 800020e:	2300      	movs	r3, #0
 8000210:	4690      	mov	r8, r2
 8000212:	4699      	mov	r9, r3
 8000214:	f04f 0200 	mov.w	r2, #0
 8000218:	f04f 0300 	mov.w	r3, #0
 800021c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000220:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000224:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000228:	460a      	mov	r2, r1
 800022a:	2300      	movs	r3, #0
 800022c:	4614      	mov	r4, r2
 800022e:	461d      	mov	r5, r3
 8000230:	f04f 0200 	mov.w	r2, #0
 8000234:	f04f 0300 	mov.w	r3, #0
 8000238:	00eb      	lsls	r3, r5, #3
 800023a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800023e:	00e2      	lsls	r2, r4, #3
 8000240:	460b      	mov	r3, r1
 8000242:	3307      	adds	r3, #7
 8000244:	08db      	lsrs	r3, r3, #3
 8000246:	00db      	lsls	r3, r3, #3
 8000248:	ebad 0d03 	sub.w	sp, sp, r3
 800024c:	466b      	mov	r3, sp
 800024e:	3300      	adds	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
	strcpy(dataCDC, data);
 8000252:	6879      	ldr	r1, [r7, #4]
 8000254:	68f8      	ldr	r0, [r7, #12]
 8000256:	f008 fdfd 	bl	8008e54 <strcpy>
	dataCDC[dataLen] = '\n';
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	4413      	add	r3, r2
 8000260:	220a      	movs	r2, #10
 8000262:	701a      	strb	r2, [r3, #0]
	dataCDC[dataLen + 1] = '\0';
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	3301      	adds	r3, #1
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	2100      	movs	r1, #0
 800026c:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS((uint8_t*)dataCDC, strlen(dataCDC));
 800026e:	68f8      	ldr	r0, [r7, #12]
 8000270:	f7ff ff6c 	bl	800014c <strlen>
 8000274:	4603      	mov	r3, r0
 8000276:	b29b      	uxth	r3, r3
 8000278:	4619      	mov	r1, r3
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f008 f8a6 	bl	80083cc <CDC_Transmit_FS>
	printf(dataCDC);
 8000280:	68f8      	ldr	r0, [r7, #12]
 8000282:	f008 fd9f 	bl	8008dc4 <iprintf>
	HAL_Delay(5);
 8000286:	2005      	movs	r0, #5
 8000288:	f000 fc74 	bl	8000b74 <HAL_Delay>
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 1);
 800028c:	2201      	movs	r2, #1
 800028e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000292:	4804      	ldr	r0, [pc, #16]	; (80002a4 <send_debug_CDC+0xc4>)
 8000294:	f000 ffd6 	bl	8001244 <HAL_GPIO_WritePin>
 8000298:	46b5      	mov	sp, r6

}
 800029a:	bf00      	nop
 800029c:	371c      	adds	r7, #28
 800029e:	46bd      	mov	sp, r7
 80002a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80002a4:	40011000 	.word	0x40011000

080002a8 <modbus>:

void modbus(uint8_t slaveAdd, uint8_t funcCode, uint8_t startAddr1, uint8_t startAddr2, uint8_t qty1, uint8_t qty2){
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b08b      	sub	sp, #44	; 0x2c
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4604      	mov	r4, r0
 80002b0:	4608      	mov	r0, r1
 80002b2:	4611      	mov	r1, r2
 80002b4:	461a      	mov	r2, r3
 80002b6:	4623      	mov	r3, r4
 80002b8:	71fb      	strb	r3, [r7, #7]
 80002ba:	4603      	mov	r3, r0
 80002bc:	71bb      	strb	r3, [r7, #6]
 80002be:	460b      	mov	r3, r1
 80002c0:	717b      	strb	r3, [r7, #5]
 80002c2:	4613      	mov	r3, r2
 80002c4:	713b      	strb	r3, [r7, #4]
	uint8_t* dataFrame[] = {&slaveAdd, &funcCode, &startAddr1, &startAddr2, &qty1, &qty2};
 80002c6:	1dfb      	adds	r3, r7, #7
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	1dbb      	adds	r3, r7, #6
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	1d7b      	adds	r3, r7, #5
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	617b      	str	r3, [r7, #20]
 80002d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002da:	61bb      	str	r3, [r7, #24]
 80002dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002e0:	61fb      	str	r3, [r7, #28]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, Rxdata, 32);
 80002e2:	2220      	movs	r2, #32
 80002e4:	4917      	ldr	r1, [pc, #92]	; (8000344 <modbus+0x9c>)
 80002e6:	4818      	ldr	r0, [pc, #96]	; (8000348 <modbus+0xa0>)
 80002e8:	f003 facb 	bl	8003882 <HAL_UARTEx_ReceiveToIdle_IT>
	for (int x = 0; x < 6; x++){
 80002ec:	2300      	movs	r3, #0
 80002ee:	627b      	str	r3, [r7, #36]	; 0x24
 80002f0:	e00e      	b.n	8000310 <modbus+0x68>
		Txdata[x] = *dataFrame[x];
 80002f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	3328      	adds	r3, #40	; 0x28
 80002f8:	443b      	add	r3, r7
 80002fa:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80002fe:	7819      	ldrb	r1, [r3, #0]
 8000300:	4a12      	ldr	r2, [pc, #72]	; (800034c <modbus+0xa4>)
 8000302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000304:	4413      	add	r3, r2
 8000306:	460a      	mov	r2, r1
 8000308:	701a      	strb	r2, [r3, #0]
	for (int x = 0; x < 6; x++){
 800030a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030c:	3301      	adds	r3, #1
 800030e:	627b      	str	r3, [r7, #36]	; 0x24
 8000310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000312:	2b05      	cmp	r3, #5
 8000314:	dded      	ble.n	80002f2 <modbus+0x4a>
	}
	uint16_t crc = crc16(Txdata, 6);
 8000316:	2106      	movs	r1, #6
 8000318:	480c      	ldr	r0, [pc, #48]	; (800034c <modbus+0xa4>)
 800031a:	f000 fa21 	bl	8000760 <crc16>
 800031e:	4603      	mov	r3, r0
 8000320:	847b      	strh	r3, [r7, #34]	; 0x22
    Txdata[6] = crc & 0xFF;         // CRC Low
 8000322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <modbus+0xa4>)
 8000328:	719a      	strb	r2, [r3, #6]
    Txdata[7] = (crc >> 8) & 0xFF;  // CRC High
 800032a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	b29b      	uxth	r3, r3
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <modbus+0xa4>)
 8000334:	71da      	strb	r2, [r3, #7]
    request_modbus(Txdata);
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <modbus+0xa4>)
 8000338:	f000 f80a 	bl	8000350 <request_modbus>
}
 800033c:	bf00      	nop
 800033e:	372c      	adds	r7, #44	; 0x2c
 8000340:	46bd      	mov	sp, r7
 8000342:	bd90      	pop	{r4, r7, pc}
 8000344:	20000244 	.word	0x20000244
 8000348:	200001fc 	.word	0x200001fc
 800034c:	20000264 	.word	0x20000264

08000350 <request_modbus>:

void request_modbus(uint8_t *data){
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	send_debug_CDC("[Modbus Request : ");
 8000358:	485a      	ldr	r0, [pc, #360]	; (80004c4 <request_modbus+0x174>)
 800035a:	f7ff ff41 	bl	80001e0 <send_debug_CDC>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000364:	4858      	ldr	r0, [pc, #352]	; (80004c8 <request_modbus+0x178>)
 8000366:	f000 ff6d 	bl	8001244 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, 8, 1000);
 800036a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800036e:	2208      	movs	r2, #8
 8000370:	6879      	ldr	r1, [r7, #4]
 8000372:	4856      	ldr	r0, [pc, #344]	; (80004cc <request_modbus+0x17c>)
 8000374:	f003 fa02 	bl	800377c <HAL_UART_Transmit>
	int offset = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < sizeof(Txdata)/sizeof(Txdata[0]); i++){
 800037c:	2300      	movs	r3, #0
 800037e:	61bb      	str	r3, [r7, #24]
 8000380:	e012      	b.n	80003a8 <request_modbus+0x58>
		offset+= sprintf(text+offset, "%02X", Txdata[i]);
 8000382:	4b53      	ldr	r3, [pc, #332]	; (80004d0 <request_modbus+0x180>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	18d0      	adds	r0, r2, r3
 800038a:	4a52      	ldr	r2, [pc, #328]	; (80004d4 <request_modbus+0x184>)
 800038c:	69bb      	ldr	r3, [r7, #24]
 800038e:	4413      	add	r3, r2
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	461a      	mov	r2, r3
 8000394:	4950      	ldr	r1, [pc, #320]	; (80004d8 <request_modbus+0x188>)
 8000396:	f008 fd3d 	bl	8008e14 <siprintf>
 800039a:	4602      	mov	r2, r0
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	4413      	add	r3, r2
 80003a0:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < sizeof(Txdata)/sizeof(Txdata[0]); i++){
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	3301      	adds	r3, #1
 80003a6:	61bb      	str	r3, [r7, #24]
 80003a8:	69bb      	ldr	r3, [r7, #24]
 80003aa:	2b07      	cmp	r3, #7
 80003ac:	d9e9      	bls.n	8000382 <request_modbus+0x32>
	}
	send_debug_CDC(text);
 80003ae:	4b48      	ldr	r3, [pc, #288]	; (80004d0 <request_modbus+0x180>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff14 	bl	80001e0 <send_debug_CDC>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003be:	4842      	ldr	r0, [pc, #264]	; (80004c8 <request_modbus+0x178>)
 80003c0:	f000 ff40 	bl	8001244 <HAL_GPIO_WritePin>

	if (Rxdata[0] != 0){
 80003c4:	4b45      	ldr	r3, [pc, #276]	; (80004dc <request_modbus+0x18c>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d038      	beq.n	800043e <request_modbus+0xee>
		modbus_stat = 1;
 80003cc:	4b44      	ldr	r3, [pc, #272]	; (80004e0 <request_modbus+0x190>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	701a      	strb	r2, [r3, #0]
		int offset1 = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]
 80003da:	e012      	b.n	8000402 <request_modbus+0xb2>
			offset1+= sprintf(text+offset1, "%02X", Rxdata[x]);
 80003dc:	4b3c      	ldr	r3, [pc, #240]	; (80004d0 <request_modbus+0x180>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	18d0      	adds	r0, r2, r3
 80003e4:	4a3d      	ldr	r2, [pc, #244]	; (80004dc <request_modbus+0x18c>)
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	4413      	add	r3, r2
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	493a      	ldr	r1, [pc, #232]	; (80004d8 <request_modbus+0x188>)
 80003f0:	f008 fd10 	bl	8008e14 <siprintf>
 80003f4:	4602      	mov	r2, r0
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	4413      	add	r3, r2
 80003fa:	617b      	str	r3, [r7, #20]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	3301      	adds	r3, #1
 8000400:	613b      	str	r3, [r7, #16]
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	2b1f      	cmp	r3, #31
 8000406:	d9e9      	bls.n	80003dc <request_modbus+0x8c>
		}
		send_debug_CDC("Modbus Response :");
 8000408:	4836      	ldr	r0, [pc, #216]	; (80004e4 <request_modbus+0x194>)
 800040a:	f7ff fee9 	bl	80001e0 <send_debug_CDC>
		send_debug_CDC(text);
 800040e:	4b30      	ldr	r3, [pc, #192]	; (80004d0 <request_modbus+0x180>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff fee4 	bl	80001e0 <send_debug_CDC>
		printf(text);
 8000418:	4b2d      	ldr	r3, [pc, #180]	; (80004d0 <request_modbus+0x180>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	f008 fcd1 	bl	8008dc4 <iprintf>
		HAL_Delay(5);
 8000422:	2005      	movs	r0, #5
 8000424:	f000 fba6 	bl	8000b74 <HAL_Delay>
		memset(Rxdata, 0, sizeof(Rxdata));
 8000428:	2220      	movs	r2, #32
 800042a:	2100      	movs	r1, #0
 800042c:	482b      	ldr	r0, [pc, #172]	; (80004dc <request_modbus+0x18c>)
 800042e:	f008 fbe5 	bl	8008bfc <memset>
		free(text);
 8000432:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <request_modbus+0x180>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4618      	mov	r0, r3
 8000438:	f008 fbd8 	bl	8008bec <free>
		printf(text);
		HAL_Delay(5);
		memset(Rxdata, 0, sizeof(Rxdata));
		free(text);
	}
}
 800043c:	e03d      	b.n	80004ba <request_modbus+0x16a>
		modbus_stat = 0;
 800043e:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <request_modbus+0x190>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
		send_debug_CDC("Modbus Response :");
 8000444:	4827      	ldr	r0, [pc, #156]	; (80004e4 <request_modbus+0x194>)
 8000446:	f7ff fecb 	bl	80001e0 <send_debug_CDC>
		int offset1 = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 800044e:	2300      	movs	r3, #0
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	e012      	b.n	800047a <request_modbus+0x12a>
			offset1+= sprintf(text+offset1, "%02X", Rxdata[x]);
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <request_modbus+0x180>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	18d0      	adds	r0, r2, r3
 800045c:	4a1f      	ldr	r2, [pc, #124]	; (80004dc <request_modbus+0x18c>)
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	4413      	add	r3, r2
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	491c      	ldr	r1, [pc, #112]	; (80004d8 <request_modbus+0x188>)
 8000468:	f008 fcd4 	bl	8008e14 <siprintf>
 800046c:	4602      	mov	r2, r0
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	4413      	add	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	3301      	adds	r3, #1
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	2b1f      	cmp	r3, #31
 800047e:	d9e9      	bls.n	8000454 <request_modbus+0x104>
		sprintf(text,"No Response from slave!!!");
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <request_modbus+0x180>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4918      	ldr	r1, [pc, #96]	; (80004e8 <request_modbus+0x198>)
 8000486:	4618      	mov	r0, r3
 8000488:	f008 fcc4 	bl	8008e14 <siprintf>
		send_debug_CDC(text);
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <request_modbus+0x180>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fea5 	bl	80001e0 <send_debug_CDC>
		printf(text);
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <request_modbus+0x180>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4618      	mov	r0, r3
 800049c:	f008 fc92 	bl	8008dc4 <iprintf>
		HAL_Delay(5);
 80004a0:	2005      	movs	r0, #5
 80004a2:	f000 fb67 	bl	8000b74 <HAL_Delay>
		memset(Rxdata, 0, sizeof(Rxdata));
 80004a6:	2220      	movs	r2, #32
 80004a8:	2100      	movs	r1, #0
 80004aa:	480c      	ldr	r0, [pc, #48]	; (80004dc <request_modbus+0x18c>)
 80004ac:	f008 fba6 	bl	8008bfc <memset>
		free(text);
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <request_modbus+0x180>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f008 fb99 	bl	8008bec <free>
}
 80004ba:	bf00      	nop
 80004bc:	3720      	adds	r7, #32
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	08009f14 	.word	0x08009f14
 80004c8:	40010800 	.word	0x40010800
 80004cc:	200001fc 	.word	0x200001fc
 80004d0:	20000270 	.word	0x20000270
 80004d4:	20000264 	.word	0x20000264
 80004d8:	08009f28 	.word	0x08009f28
 80004dc:	20000244 	.word	0x20000244
 80004e0:	2000026c 	.word	0x2000026c
 80004e4:	08009f30 	.word	0x08009f30
 80004e8:	08009f44 	.word	0x08009f44

080004ec <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	807b      	strh	r3, [r7, #2]

}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
	...

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fad1 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f82f 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8b1 	bl	8000678 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000516:	f007 fe9b 	bl	8008250 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800051a:	f000 f883 	bl	8000624 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_CDC("[MODBUS RTU PROGRAM]");
 800051e:	4810      	ldr	r0, [pc, #64]	; (8000560 <main+0x5c>)
 8000520:	f7ff fe5e 	bl	80001e0 <send_debug_CDC>
  text = malloc(512);
 8000524:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000528:	f008 fb58 	bl	8008bdc <malloc>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <main+0x60>)
 8000532:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  send_debug_CDC("\n");
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <main+0x64>)
 8000536:	f7ff fe53 	bl	80001e0 <send_debug_CDC>
	  send_debug_CDC("Modbus Request Data");
 800053a:	480c      	ldr	r0, [pc, #48]	; (800056c <main+0x68>)
 800053c:	f7ff fe50 	bl	80001e0 <send_debug_CDC>

	  modbus(0x02, 0x03, 0x00, 0x00, 0x00, 0x0A);
 8000540:	230a      	movs	r3, #10
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	2300      	movs	r3, #0
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2300      	movs	r3, #0
 800054a:	2200      	movs	r2, #0
 800054c:	2103      	movs	r1, #3
 800054e:	2002      	movs	r0, #2
 8000550:	f7ff feaa 	bl	80002a8 <modbus>
	  HAL_Delay(1000);
 8000554:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000558:	f000 fb0c 	bl	8000b74 <HAL_Delay>
	  send_debug_CDC("\n");
 800055c:	e7ea      	b.n	8000534 <main+0x30>
 800055e:	bf00      	nop
 8000560:	08009f60 	.word	0x08009f60
 8000564:	20000270 	.word	0x20000270
 8000568:	08009f78 	.word	0x08009f78
 800056c:	08009f7c 	.word	0x08009f7c

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800057a:	2228      	movs	r2, #40	; 0x28
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f008 fb3c 	bl	8008bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fbc2 	bl	8002d50 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005d2:	f000 f8bf 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fe2e 	bl	8003254 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005fe:	f000 f8a9 	bl	8000754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000602:	2310      	movs	r3, #16
 8000604:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f002 ffaf 	bl	8003570 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000618:	f000 f89c 	bl	8000754 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	; 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_USART1_UART_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000630:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800065c:	f003 f83e 	bl	80036dc <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000666:	f000 f875 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200001fc 	.word	0x200001fc
 8000674:	40013800 	.word	0x40013800

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <MX_GPIO_Init+0xd0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a2d      	ldr	r2, [pc, #180]	; (8000748 <MX_GPIO_Init+0xd0>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_GPIO_Init+0xd0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0310 	and.w	r3, r3, #16
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006aa:	f043 0320 	orr.w	r3, r3, #32
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0320 	and.w	r3, r3, #32
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f2:	4816      	ldr	r0, [pc, #88]	; (800074c <MX_GPIO_Init+0xd4>)
 80006f4:	f000 fda6 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fe:	4814      	ldr	r0, [pc, #80]	; (8000750 <MX_GPIO_Init+0xd8>)
 8000700:	f000 fda0 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2302      	movs	r3, #2
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <MX_GPIO_Init+0xd4>)
 800071e:	f000 fc0d 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8000722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_GPIO_Init+0xd8>)
 800073c:	f000 fbfe 	bl	8000f3c <HAL_GPIO_Init>

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	40011000 	.word	0x40011000
 8000750:	40010800 	.word	0x40010800

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 800076c:	23ff      	movs	r3, #255	; 0xff
 800076e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000770:	23ff      	movs	r3, #255	; 0xff
 8000772:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000774:	e013      	b.n	800079e <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	4053      	eors	r3, r2
 8000782:	b2db      	uxtb	r3, r3
 8000784:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <crc16+0x64>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4413      	add	r3, r2
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	4053      	eors	r3, r2
 8000792:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000794:	4a0c      	ldr	r2, [pc, #48]	; (80007c8 <crc16+0x68>)
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 800079e:	887b      	ldrh	r3, [r7, #2]
 80007a0:	1e5a      	subs	r2, r3, #1
 80007a2:	807a      	strh	r2, [r7, #2]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1e6      	bne.n	8000776 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b21b      	sxth	r3, r3
 80007b6:	b29b      	uxth	r3, r3
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	08009fd8 	.word	0x08009fd8
 80007c8:	0800a0d8 	.word	0x0800a0d8

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_MspInit+0x5c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <HAL_MspInit+0x5c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_MspInit+0x5c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x5c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x5c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x5c>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_MspInit+0x60>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_MspInit+0x60>)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000
 800082c:	40010000 	.word	0x40010000

08000830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a20      	ldr	r2, [pc, #128]	; (80008cc <HAL_UART_MspInit+0x9c>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d139      	bne.n	80008c4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <HAL_UART_MspInit+0xa0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a1e      	ldr	r2, [pc, #120]	; (80008d0 <HAL_UART_MspInit+0xa0>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_UART_MspInit+0xa0>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_UART_MspInit+0xa0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <HAL_UART_MspInit+0xa0>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_UART_MspInit+0xa0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	4619      	mov	r1, r3
 8000894:	480f      	ldr	r0, [pc, #60]	; (80008d4 <HAL_UART_MspInit+0xa4>)
 8000896:	f000 fb51 	bl	8000f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <HAL_UART_MspInit+0xa4>)
 80008b0:	f000 fb44 	bl	8000f3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2025      	movs	r0, #37	; 0x25
 80008ba:	f000 fa56 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008be:	2025      	movs	r0, #37	; 0x25
 80008c0:	f000 fa6f 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40013800 	.word	0x40013800
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40010800 	.word	0x40010800

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091e:	f000 f90d 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800092e:	f000 fdc6 	bl	80014be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000f14 	.word	0x20000f14

0800093c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <USART1_IRQHandler+0x10>)
 8000942:	f002 fffb 	bl	800393c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200001fc 	.word	0x200001fc

08000950 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	e00a      	b.n	8000978 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000962:	f3af 8000 	nop.w
 8000966:	4601      	mov	r1, r0
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	b2ca      	uxtb	r2, r1
 8000970:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbf0      	blt.n	8000962 <_read+0x12>
	}

return len;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <_close>:
	}
	return len;
}

int _close(int file)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
	return -1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b0:	605a      	str	r2, [r3, #4]
	return 0;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <_isatty>:

int _isatty(int file)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	return 1;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
	return 0;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f008 f8b4 	bl	8008b88 <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20005000 	.word	0x20005000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	20000274 	.word	0x20000274
 8000a54:	20001438 	.word	0x20001438

08000a58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a64:	f7ff fff8 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a6a:	490c      	ldr	r1, [pc, #48]	; (8000a9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a80:	4c09      	ldr	r4, [pc, #36]	; (8000aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f008 f881 	bl	8008b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a92:	f7ff fd37 	bl	8000504 <main>
  bx lr
 8000a96:	4770      	bx	lr
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000aa0:	0800a2a4 	.word	0x0800a2a4
  ldr r2, =_sbss
 8000aa4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000aa8:	20001434 	.word	0x20001434

08000aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_2_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x28>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x28>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f947 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff fe7e 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f95f 	bl	8000dbe <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f927 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a03      	ldr	r2, [pc, #12]	; (8000b5c <HAL_IncTick+0x20>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000278 	.word	0x20000278

08000b60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <HAL_GetTick+0x10>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	20000278 	.word	0x20000278

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff fff0 	bl	8000b60 <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffe0 	bl	8000b60 <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008

08000bbc <__NVIC_SetPriorityGrouping>:
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4906      	ldr	r1, [pc, #24]	; (8000c54 <__NVIC_EnableIRQ+0x34>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Config>:
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff90 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff2d 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff42 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff35 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffa2 	bl	8000d10 <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b085      	sub	sp, #20
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d008      	beq.n	8000e00 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2204      	movs	r2, #4
 8000df2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e020      	b.n	8000e42 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 020e 	bic.w	r2, r2, #14
 8000e0e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0201 	bic.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d005      	beq.n	8000e70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2204      	movs	r2, #4
 8000e68:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e051      	b.n	8000f14 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 020e 	bic.w	r2, r2, #14
 8000e7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0201 	bic.w	r2, r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a22      	ldr	r2, [pc, #136]	; (8000f20 <HAL_DMA_Abort_IT+0xd4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d029      	beq.n	8000eee <HAL_DMA_Abort_IT+0xa2>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <HAL_DMA_Abort_IT+0xd8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d022      	beq.n	8000eea <HAL_DMA_Abort_IT+0x9e>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <HAL_DMA_Abort_IT+0xdc>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d01a      	beq.n	8000ee4 <HAL_DMA_Abort_IT+0x98>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a1e      	ldr	r2, [pc, #120]	; (8000f2c <HAL_DMA_Abort_IT+0xe0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d012      	beq.n	8000ede <HAL_DMA_Abort_IT+0x92>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <HAL_DMA_Abort_IT+0xe4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d00a      	beq.n	8000ed8 <HAL_DMA_Abort_IT+0x8c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <HAL_DMA_Abort_IT+0xe8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d102      	bne.n	8000ed2 <HAL_DMA_Abort_IT+0x86>
 8000ecc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ed0:	e00e      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
 8000ed2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ed6:	e00b      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
 8000ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000edc:	e008      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
 8000ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee2:	e005      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
 8000ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee8:	e002      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
 8000eea:	2310      	movs	r3, #16
 8000eec:	e000      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	4a11      	ldr	r2, [pc, #68]	; (8000f38 <HAL_DMA_Abort_IT+0xec>)
 8000ef2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	4798      	blx	r3
    } 
  }
  return status;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40020008 	.word	0x40020008
 8000f24:	4002001c 	.word	0x4002001c
 8000f28:	40020030 	.word	0x40020030
 8000f2c:	40020044 	.word	0x40020044
 8000f30:	40020058 	.word	0x40020058
 8000f34:	4002006c 	.word	0x4002006c
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b08b      	sub	sp, #44	; 0x2c
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4e:	e169      	b.n	8001224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f50:	2201      	movs	r2, #1
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f040 8158 	bne.w	800121e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4a9a      	ldr	r2, [pc, #616]	; (80011dc <HAL_GPIO_Init+0x2a0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d05e      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f78:	4a98      	ldr	r2, [pc, #608]	; (80011dc <HAL_GPIO_Init+0x2a0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d875      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000f7e:	4a98      	ldr	r2, [pc, #608]	; (80011e0 <HAL_GPIO_Init+0x2a4>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d058      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f84:	4a96      	ldr	r2, [pc, #600]	; (80011e0 <HAL_GPIO_Init+0x2a4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d86f      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000f8a:	4a96      	ldr	r2, [pc, #600]	; (80011e4 <HAL_GPIO_Init+0x2a8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d052      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f90:	4a94      	ldr	r2, [pc, #592]	; (80011e4 <HAL_GPIO_Init+0x2a8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d869      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000f96:	4a94      	ldr	r2, [pc, #592]	; (80011e8 <HAL_GPIO_Init+0x2ac>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d04c      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f9c:	4a92      	ldr	r2, [pc, #584]	; (80011e8 <HAL_GPIO_Init+0x2ac>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d863      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000fa2:	4a92      	ldr	r2, [pc, #584]	; (80011ec <HAL_GPIO_Init+0x2b0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d046      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000fa8:	4a90      	ldr	r2, [pc, #576]	; (80011ec <HAL_GPIO_Init+0x2b0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d85d      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d82a      	bhi.n	8001008 <HAL_GPIO_Init+0xcc>
 8000fb2:	2b12      	cmp	r3, #18
 8000fb4:	d859      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000fb6:	a201      	add	r2, pc, #4	; (adr r2, 8000fbc <HAL_GPIO_Init+0x80>)
 8000fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbc:	08001037 	.word	0x08001037
 8000fc0:	08001011 	.word	0x08001011
 8000fc4:	08001023 	.word	0x08001023
 8000fc8:	08001065 	.word	0x08001065
 8000fcc:	0800106b 	.word	0x0800106b
 8000fd0:	0800106b 	.word	0x0800106b
 8000fd4:	0800106b 	.word	0x0800106b
 8000fd8:	0800106b 	.word	0x0800106b
 8000fdc:	0800106b 	.word	0x0800106b
 8000fe0:	0800106b 	.word	0x0800106b
 8000fe4:	0800106b 	.word	0x0800106b
 8000fe8:	0800106b 	.word	0x0800106b
 8000fec:	0800106b 	.word	0x0800106b
 8000ff0:	0800106b 	.word	0x0800106b
 8000ff4:	0800106b 	.word	0x0800106b
 8000ff8:	0800106b 	.word	0x0800106b
 8000ffc:	0800106b 	.word	0x0800106b
 8001000:	08001019 	.word	0x08001019
 8001004:	0800102d 	.word	0x0800102d
 8001008:	4a79      	ldr	r2, [pc, #484]	; (80011f0 <HAL_GPIO_Init+0x2b4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800100e:	e02c      	b.n	800106a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	623b      	str	r3, [r7, #32]
          break;
 8001016:	e029      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	3304      	adds	r3, #4
 800101e:	623b      	str	r3, [r7, #32]
          break;
 8001020:	e024      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	3308      	adds	r3, #8
 8001028:	623b      	str	r3, [r7, #32]
          break;
 800102a:	e01f      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	330c      	adds	r3, #12
 8001032:	623b      	str	r3, [r7, #32]
          break;
 8001034:	e01a      	b.n	800106c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800103e:	2304      	movs	r3, #4
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e013      	b.n	800106c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d105      	bne.n	8001058 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800104c:	2308      	movs	r3, #8
 800104e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	611a      	str	r2, [r3, #16]
          break;
 8001056:	e009      	b.n	800106c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	615a      	str	r2, [r3, #20]
          break;
 8001062:	e003      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x130>
          break;
 800106a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2bff      	cmp	r3, #255	; 0xff
 8001070:	d801      	bhi.n	8001076 <HAL_GPIO_Init+0x13a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	e001      	b.n	800107a <HAL_GPIO_Init+0x13e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3304      	adds	r3, #4
 800107a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2bff      	cmp	r3, #255	; 0xff
 8001080:	d802      	bhi.n	8001088 <HAL_GPIO_Init+0x14c>
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0x152>
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	3b08      	subs	r3, #8
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	210f      	movs	r1, #15
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	401a      	ands	r2, r3
 80010a0:	6a39      	ldr	r1, [r7, #32]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	431a      	orrs	r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80b1 	beq.w	800121e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010bc:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	; (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010d4:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a40      	ldr	r2, [pc, #256]	; (80011fc <HAL_GPIO_Init+0x2c0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d013      	beq.n	8001128 <HAL_GPIO_Init+0x1ec>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a3f      	ldr	r2, [pc, #252]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d00d      	beq.n	8001124 <HAL_GPIO_Init+0x1e8>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a3e      	ldr	r2, [pc, #248]	; (8001204 <HAL_GPIO_Init+0x2c8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d007      	beq.n	8001120 <HAL_GPIO_Init+0x1e4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a3d      	ldr	r2, [pc, #244]	; (8001208 <HAL_GPIO_Init+0x2cc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_GPIO_Init+0x1e0>
 8001118:	2303      	movs	r3, #3
 800111a:	e006      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 800111c:	2304      	movs	r3, #4
 800111e:	e004      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 8001120:	2302      	movs	r3, #2
 8001122:	e002      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 8001128:	2300      	movs	r3, #0
 800112a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112c:	f002 0203 	and.w	r2, r2, #3
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	4093      	lsls	r3, r2
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4313      	orrs	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800113a:	492f      	ldr	r1, [pc, #188]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	492c      	ldr	r1, [pc, #176]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	608b      	str	r3, [r1, #8]
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	43db      	mvns	r3, r3
 800116a:	4928      	ldr	r1, [pc, #160]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800116c:	4013      	ands	r3, r2
 800116e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	4922      	ldr	r1, [pc, #136]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	60cb      	str	r3, [r1, #12]
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	43db      	mvns	r3, r3
 8001192:	491e      	ldr	r1, [pc, #120]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001194:	4013      	ands	r3, r2
 8001196:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4918      	ldr	r1, [pc, #96]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4914      	ldr	r1, [pc, #80]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d021      	beq.n	8001210 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	490e      	ldr	r1, [pc, #56]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
 80011d8:	e021      	b.n	800121e <HAL_GPIO_Init+0x2e2>
 80011da:	bf00      	nop
 80011dc:	10320000 	.word	0x10320000
 80011e0:	10310000 	.word	0x10310000
 80011e4:	10220000 	.word	0x10220000
 80011e8:	10210000 	.word	0x10210000
 80011ec:	10120000 	.word	0x10120000
 80011f0:	10110000 	.word	0x10110000
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000
 80011fc:	40010800 	.word	0x40010800
 8001200:	40010c00 	.word	0x40010c00
 8001204:	40011000 	.word	0x40011000
 8001208:	40011400 	.word	0x40011400
 800120c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_GPIO_Init+0x304>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	43db      	mvns	r3, r3
 8001218:	4909      	ldr	r1, [pc, #36]	; (8001240 <HAL_GPIO_Init+0x304>)
 800121a:	4013      	ands	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	3301      	adds	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	f47f ae8e 	bne.w	8000f50 <HAL_GPIO_Init+0x14>
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	372c      	adds	r7, #44	; 0x2c
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	611a      	str	r2, [r3, #16]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001276:	b08b      	sub	sp, #44	; 0x2c
 8001278:	af06      	add	r7, sp, #24
 800127a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e0f1      	b.n	800146a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d106      	bne.n	80012a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f007 f9ca 	bl	8008634 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2203      	movs	r2, #3
 80012a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 f8e9 	bl	8004484 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	687e      	ldr	r6, [r7, #4]
 80012ba:	466d      	mov	r5, sp
 80012bc:	f106 0410 	add.w	r4, r6, #16
 80012c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	602b      	str	r3, [r5, #0]
 80012c8:	1d33      	adds	r3, r6, #4
 80012ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012cc:	6838      	ldr	r0, [r7, #0]
 80012ce:	f003 f8b3 	bl	8004438 <USB_CoreInit>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2202      	movs	r2, #2
 80012dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0c2      	b.n	800146a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 f8e4 	bl	80044b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e040      	b.n	8001378 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	3301      	adds	r3, #1
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	440b      	add	r3, r1
 8001330:	3303      	adds	r3, #3
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	3338      	adds	r3, #56	; 0x38
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	333c      	adds	r3, #60	; 0x3c
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	3340      	adds	r3, #64	; 0x40
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3301      	adds	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3b9      	bcc.n	80012f6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	e044      	b.n	8001412 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	f203 1369 	addw	r3, r3, #361	; 0x169
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	440b      	add	r3, r1
 80013ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	440b      	add	r3, r1
 80013d8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	3301      	adds	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d3b5      	bcc.n	8001388 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	687e      	ldr	r6, [r7, #4]
 8001424:	466d      	mov	r5, sp
 8001426:	f106 0410 	add.w	r4, r6, #16
 800142a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	602b      	str	r3, [r5, #0]
 8001432:	1d33      	adds	r3, r6, #4
 8001434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001436:	6838      	ldr	r0, [r7, #0]
 8001438:	f003 f84a 	bl	80044d0 <USB_DevInit>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2202      	movs	r2, #2
 8001446:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e00d      	b.n	800146a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f005 facb 	bl	80069fe <USB_DevDisconnect>

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001472 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_PCD_Start+0x16>
 8001484:	2302      	movs	r3, #2
 8001486:	e016      	b.n	80014b6 <HAL_PCD_Start+0x44>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 ffdf 	bl	8004458 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800149a:	2101      	movs	r1, #1
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f007 fb3c 	bl	8008b1a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f005 fa9f 	bl	80069ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b088      	sub	sp, #32
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f005 faa1 	bl	8006a12 <USB_ReadInterrupts>
 80014d0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 fb1b 	bl	8001b18 <PCD_EP_ISR_Handler>

    return;
 80014e2:	e119      	b.n	8001718 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d013      	beq.n	8001516 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001500:	b292      	uxth	r2, r2
 8001502:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f007 f90f 	bl	800872a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800150c:	2100      	movs	r1, #0
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f905 	bl	800171e <HAL_PCD_SetAddress>

    return;
 8001514:	e100      	b.n	8001718 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00c      	beq.n	800153a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001528:	b29a      	uxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001532:	b292      	uxth	r2, r2
 8001534:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001538:	e0ee      	b.n	8001718 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00c      	beq.n	800155e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001556:	b292      	uxth	r2, r2
 8001558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800155c:	e0dc      	b.n	8001718 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d027      	beq.n	80015b8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0204 	bic.w	r2, r2, #4
 800157a:	b292      	uxth	r2, r2
 800157c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001588:	b29a      	uxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0208 	bic.w	r2, r2, #8
 8001592:	b292      	uxth	r2, r2
 8001594:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f007 f8ff 	bl	800879c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015b0:	b292      	uxth	r2, r2
 80015b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015b6:	e0af      	b.n	8001718 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8083 	beq.w	80016ca <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	77fb      	strb	r3, [r7, #31]
 80015c8:	e010      	b.n	80015ec <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	7ffb      	ldrb	r3, [r7, #31]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	441a      	add	r2, r3
 80015d6:	7ffb      	ldrb	r3, [r7, #31]
 80015d8:	8812      	ldrh	r2, [r2, #0]
 80015da:	b292      	uxth	r2, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	3320      	adds	r3, #32
 80015e0:	443b      	add	r3, r7
 80015e2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80015e6:	7ffb      	ldrb	r3, [r7, #31]
 80015e8:	3301      	adds	r3, #1
 80015ea:	77fb      	strb	r3, [r7, #31]
 80015ec:	7ffb      	ldrb	r3, [r7, #31]
 80015ee:	2b07      	cmp	r3, #7
 80015f0:	d9eb      	bls.n	80015ca <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0201 	orr.w	r2, r2, #1
 8001604:	b292      	uxth	r2, r2
 8001606:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001612:	b29a      	uxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	b292      	uxth	r2, r2
 800161e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001622:	bf00      	nop
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800162c:	b29b      	uxth	r3, r3
 800162e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f6      	beq.n	8001624 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800163e:	b29a      	uxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001648:	b292      	uxth	r2, r2
 800164a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	77fb      	strb	r3, [r7, #31]
 8001652:	e00f      	b.n	8001674 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001654:	7ffb      	ldrb	r3, [r7, #31]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	4611      	mov	r1, r2
 800165c:	7ffa      	ldrb	r2, [r7, #31]
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	440a      	add	r2, r1
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	3320      	adds	r3, #32
 8001666:	443b      	add	r3, r7
 8001668:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800166c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800166e:	7ffb      	ldrb	r3, [r7, #31]
 8001670:	3301      	adds	r3, #1
 8001672:	77fb      	strb	r3, [r7, #31]
 8001674:	7ffb      	ldrb	r3, [r7, #31]
 8001676:	2b07      	cmp	r3, #7
 8001678:	d9ec      	bls.n	8001654 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0208 	orr.w	r2, r2, #8
 800168c:	b292      	uxth	r2, r2
 800168e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800169a:	b29a      	uxth	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a4:	b292      	uxth	r2, r2
 80016a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0204 	orr.w	r2, r2, #4
 80016bc:	b292      	uxth	r2, r2
 80016be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f007 f850 	bl	8008768 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016c8:	e026      	b.n	8001718 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00f      	beq.n	80016f4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016dc:	b29a      	uxth	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e6:	b292      	uxth	r2, r2
 80016e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f007 f80e 	bl	800870e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016f2:	e011      	b.n	8001718 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00c      	beq.n	8001718 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001710:	b292      	uxth	r2, r2
 8001712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001716:	bf00      	nop
  }
}
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_PCD_SetAddress+0x1a>
 8001734:	2302      	movs	r3, #2
 8001736:	e013      	b.n	8001760 <HAL_PCD_SetAddress+0x42>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f005 f937 	bl	80069c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	4608      	mov	r0, r1
 8001772:	4611      	mov	r1, r2
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	70fb      	strb	r3, [r7, #3]
 800177a:	460b      	mov	r3, r1
 800177c:	803b      	strh	r3, [r7, #0]
 800177e:	4613      	mov	r3, r2
 8001780:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800178a:	2b00      	cmp	r3, #0
 800178c:	da0e      	bge.n	80017ac <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	705a      	strb	r2, [r3, #1]
 80017aa:	e00e      	b.n	80017ca <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	f003 0207 	and.w	r2, r3, #7
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017d6:	883a      	ldrh	r2, [r7, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	78ba      	ldrb	r2, [r7, #2]
 80017e0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017e2:	78bb      	ldrb	r3, [r7, #2]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d102      	bne.n	80017ee <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_PCD_EP_Open+0x94>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e00e      	b.n	800181a <HAL_PCD_EP_Open+0xb2>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fe80 	bl	8004510 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001818:	7afb      	ldrb	r3, [r7, #11]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800182e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001832:	2b00      	cmp	r3, #0
 8001834:	da0e      	bge.n	8001854 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2201      	movs	r2, #1
 8001850:	705a      	strb	r2, [r3, #1]
 8001852:	e00e      	b.n	8001872 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	f003 0207 	and.w	r2, r3, #7
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	b2da      	uxtb	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_PCD_EP_Close+0x6a>
 8001888:	2302      	movs	r3, #2
 800188a:	e00e      	b.n	80018aa <HAL_PCD_EP_Close+0x88>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	4618      	mov	r0, r3
 800189c:	f003 f9f8 	bl	8004c90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	460b      	mov	r3, r1
 80018c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018c2:	7afb      	ldrb	r3, [r7, #11]
 80018c4:	f003 0207 	and.w	r2, r3, #7
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2200      	movs	r2, #0
 80018f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018f2:	7afb      	ldrb	r3, [r7, #11]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6979      	ldr	r1, [r7, #20]
 8001904:	4618      	mov	r0, r3
 8001906:	f003 fbaf 	bl	8005068 <USB_EPStartXfer>

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	f003 0207 	and.w	r2, r3, #7
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	460b      	mov	r3, r1
 8001950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001952:	7afb      	ldrb	r3, [r7, #11]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2201      	movs	r2, #1
 800198c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800198e:	7afb      	ldrb	r3, [r7, #11]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	b2da      	uxtb	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6979      	ldr	r1, [r7, #20]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fb61 	bl	8005068 <USB_EPStartXfer>

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	f003 0207 	and.w	r2, r3, #7
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d901      	bls.n	80019ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e04c      	b.n	8001a68 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da0e      	bge.n	80019f4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2201      	movs	r2, #1
 80019f0:	705a      	strb	r2, [r3, #1]
 80019f2:	e00c      	b.n	8001a0e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2201      	movs	r2, #1
 8001a12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_PCD_EP_SetStall+0x7e>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e01c      	b.n	8001a68 <HAL_PCD_EP_SetStall+0xb8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f004 fec4 	bl	80067ca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d108      	bne.n	8001a5e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f004 ffe9 	bl	8006a30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	f003 020f 	and.w	r2, r3, #15
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d901      	bls.n	8001a8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e040      	b.n	8001b10 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da0e      	bge.n	8001ab4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	705a      	strb	r2, [r3, #1]
 8001ab2:	e00e      	b.n	8001ad2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 0207 	and.w	r2, r3, #7
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_PCD_EP_ClrStall+0x82>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e00e      	b.n	8001b10 <HAL_PCD_EP_ClrStall+0xa0>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68f9      	ldr	r1, [r7, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 feb2 	bl	800686a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b096      	sub	sp, #88	; 0x58
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b20:	e3bf      	b.n	80022a2 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001b3c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f040 8179 	bne.w	8001e38 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d152      	bne.n	8001bf8 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b62:	81fb      	strh	r3, [r7, #14]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	89fb      	ldrh	r3, [r7, #14]
 8001b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3328      	adds	r3, #40	; 0x28
 8001b7a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3302      	adds	r3, #2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	441a      	add	r2, r3
 8001bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f006 fd8e 	bl	80086da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 836b 	beq.w	80022a2 <PCD_EP_ISR_Handler+0x78a>
 8001bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 8366 	bne.w	80022a2 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	b292      	uxth	r2, r2
 8001bea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bf6:	e354      	b.n	80022a2 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bfe:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d034      	beq.n	8001c80 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	3306      	adds	r3, #6
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c40:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c52:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f004 ff3b 	bl	8006ad0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c66:	4013      	ands	r3, r2
 8001c68:	823b      	strh	r3, [r7, #16]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	8a3a      	ldrh	r2, [r7, #16]
 8001c70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c74:	b292      	uxth	r2, r2
 8001c76:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f006 fd01 	bl	8008680 <HAL_PCD_SetupStageCallback>
 8001c7e:	e310      	b.n	80022a2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c80:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f280 830c 	bge.w	80022a2 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c96:	4013      	ands	r3, r2
 8001c98:	83fb      	strh	r3, [r7, #30]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	8bfa      	ldrh	r2, [r7, #30]
 8001ca0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	3306      	adds	r3, #6
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d019      	beq.n	8001d10 <PCD_EP_ISR_Handler+0x1f8>
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d015      	beq.n	8001d10 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cea:	6959      	ldr	r1, [r3, #20]
 8001cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	f004 feeb 	bl	8006ad0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	441a      	add	r2, r3
 8001d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d06:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d08:	2100      	movs	r1, #0
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f006 fcca 	bl	80086a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001d1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 82bd 	bne.w	80022a2 <PCD_EP_ISR_Handler+0x78a>
 8001d28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d2c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001d30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d34:	f000 82b5 	beq.w	80022a2 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	801a      	strh	r2, [r3, #0]
 8001d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b3e      	cmp	r3, #62	; 0x3e
 8001d6e:	d91d      	bls.n	8001dac <PCD_EP_ISR_Handler+0x294>
 8001d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	647b      	str	r3, [r7, #68]	; 0x44
 8001d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <PCD_EP_ISR_Handler+0x272>
 8001d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d86:	3b01      	subs	r3, #1
 8001d88:	647b      	str	r3, [r7, #68]	; 0x44
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	029b      	lsls	r3, r3, #10
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	801a      	strh	r2, [r3, #0]
 8001daa:	e026      	b.n	8001dfa <PCD_EP_ISR_Handler+0x2e2>
 8001dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10a      	bne.n	8001dca <PCD_EP_ISR_Handler+0x2b2>
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	801a      	strh	r2, [r3, #0]
 8001dc8:	e017      	b.n	8001dfa <PCD_EP_ISR_Handler+0x2e2>
 8001dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <PCD_EP_ISR_Handler+0x2cc>
 8001dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de0:	3301      	adds	r3, #1
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	029b      	lsls	r3, r3, #10
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4313      	orrs	r3, r2
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0a:	827b      	strh	r3, [r7, #18]
 8001e0c:	8a7b      	ldrh	r3, [r7, #18]
 8001e0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e12:	827b      	strh	r3, [r7, #18]
 8001e14:	8a7b      	ldrh	r3, [r7, #18]
 8001e16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e1a:	827b      	strh	r3, [r7, #18]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	8a7b      	ldrh	r3, [r7, #18]
 8001e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	8013      	strh	r3, [r2, #0]
 8001e36:	e234      	b.n	80022a2 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e4c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f280 80fc 	bge.w	800204e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e8c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea4:	7b1b      	ldrb	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d125      	bne.n	8001ef6 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3306      	adds	r3, #6
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001ed6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8092 	beq.w	8002004 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee6:	6959      	ldr	r1, [r3, #20]
 8001ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eea:	88da      	ldrh	r2, [r3, #6]
 8001eec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ef0:	f004 fdee 	bl	8006ad0 <USB_ReadPMA>
 8001ef4:	e086      	b.n	8002004 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef8:	78db      	ldrb	r3, [r3, #3]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d10a      	bne.n	8001f14 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001efe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f02:	461a      	mov	r2, r3
 8001f04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f9d9 	bl	80022be <HAL_PCD_EP_DB_Receive>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001f12:	e077      	b.n	8002004 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	441a      	add	r2, r3
 8001f40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d024      	beq.n	8001fbc <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	3302      	adds	r3, #2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f9a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001f9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d02e      	beq.n	8002004 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fac:	6959      	ldr	r1, [r3, #20]
 8001fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb0:	891a      	ldrh	r2, [r3, #8]
 8001fb2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fb6:	f004 fd8b 	bl	8006ad0 <USB_ReadPMA>
 8001fba:	e023      	b.n	8002004 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3306      	adds	r3, #6
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001fe8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff6:	6959      	ldr	r1, [r3, #20]
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffa:	895a      	ldrh	r2, [r3, #10]
 8001ffc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002000:	f004 fd66 	bl	8006ad0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002006:	69da      	ldr	r2, [r3, #28]
 8002008:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800200c:	441a      	add	r2, r3
 800200e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002010:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800201a:	441a      	add	r2, r3
 800201c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <PCD_EP_ISR_Handler+0x51c>
 8002028:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800202c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d206      	bcs.n	8002042 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f006 fb32 	bl	80086a4 <HAL_PCD_DataOutStageCallback>
 8002040:	e005      	b.n	800204e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002048:	4618      	mov	r0, r3
 800204a:	f003 f80d 	bl	8005068 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800204e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8123 	beq.w	80022a2 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800205c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	441a      	add	r2, r3
 800209c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80020a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80020ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ae:	78db      	ldrb	r3, [r3, #3]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	f040 80a2 	bne.w	80021fa <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80020b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	7b1b      	ldrb	r3, [r3, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8093 	beq.w	80021ec <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d046      	beq.n	8002160 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d126      	bne.n	8002128 <PCD_EP_ISR_Handler+0x610>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	4413      	add	r3, r2
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	011a      	lsls	r2, r3, #4
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	4413      	add	r3, r2
 80020fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002100:	623b      	str	r3, [r7, #32]
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800210c:	b29a      	uxth	r2, r3
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	801a      	strh	r2, [r3, #0]
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800211c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002120:	b29a      	uxth	r2, r3
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	801a      	strh	r2, [r3, #0]
 8002126:	e061      	b.n	80021ec <PCD_EP_ISR_Handler+0x6d4>
 8002128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212a:	785b      	ldrb	r3, [r3, #1]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d15d      	bne.n	80021ec <PCD_EP_ISR_Handler+0x6d4>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800213e:	b29b      	uxth	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	4413      	add	r3, r2
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	011a      	lsls	r2, r3, #4
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	4413      	add	r3, r2
 8002152:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	2200      	movs	r2, #0
 800215c:	801a      	strh	r2, [r3, #0]
 800215e:	e045      	b.n	80021ec <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002168:	785b      	ldrb	r3, [r3, #1]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d126      	bne.n	80021bc <PCD_EP_ISR_Handler+0x6a4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217c:	b29b      	uxth	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002182:	4413      	add	r3, r2
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
 8002186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	011a      	lsls	r2, r3, #4
 800218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218e:	4413      	add	r3, r2
 8002190:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	801a      	strh	r2, [r3, #0]
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b8:	801a      	strh	r2, [r3, #0]
 80021ba:	e017      	b.n	80021ec <PCD_EP_ISR_Handler+0x6d4>
 80021bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021be:	785b      	ldrb	r3, [r3, #1]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d113      	bne.n	80021ec <PCD_EP_ISR_Handler+0x6d4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d2:	4413      	add	r3, r2
 80021d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	011a      	lsls	r2, r3, #4
 80021dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021de:	4413      	add	r3, r2
 80021e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80021e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e8:	2200      	movs	r2, #0
 80021ea:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f006 fa71 	bl	80086da <HAL_PCD_DataInStageCallback>
 80021f8:	e053      	b.n	80022a2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80021fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d146      	bne.n	8002294 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220e:	b29b      	uxth	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	3302      	adds	r3, #2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	4413      	add	r3, r2
 8002224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800222e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800223a:	429a      	cmp	r2, r3
 800223c:	d907      	bls.n	800224e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800223e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002246:	1ad2      	subs	r2, r2, r3
 8002248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224a:	619a      	str	r2, [r3, #24]
 800224c:	e002      	b.n	8002254 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800224e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d106      	bne.n	800226a <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800225c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f006 fa39 	bl	80086da <HAL_PCD_DataInStageCallback>
 8002268:	e01b      	b.n	80022a2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800226a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002272:	441a      	add	r2, r3
 8002274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002276:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002280:	441a      	add	r2, r3
 8002282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002284:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800228c:	4618      	mov	r0, r3
 800228e:	f002 feeb 	bl	8005068 <USB_EPStartXfer>
 8002292:	e006      	b.n	80022a2 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002294:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002298:	461a      	mov	r2, r3
 800229a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f91b 	bl	80024d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f6ff ac37 	blt.w	8001b22 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3758      	adds	r7, #88	; 0x58
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b088      	sub	sp, #32
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	4613      	mov	r3, r2
 80022ca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d07e      	beq.n	80023d4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022de:	b29b      	uxth	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	3302      	adds	r3, #2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	8b7b      	ldrh	r3, [r7, #26]
 8002306:	429a      	cmp	r2, r3
 8002308:	d306      	bcc.n	8002318 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	8b7b      	ldrh	r3, [r7, #26]
 8002310:	1ad2      	subs	r2, r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	619a      	str	r2, [r3, #24]
 8002316:	e002      	b.n	800231e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2200      	movs	r2, #0
 800231c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d123      	bne.n	800236e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800233c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002340:	833b      	strh	r3, [r7, #24]
 8002342:	8b3b      	ldrh	r3, [r7, #24]
 8002344:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002348:	833b      	strh	r3, [r7, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	441a      	add	r2, r3
 8002358:	8b3b      	ldrh	r3, [r7, #24]
 800235a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800235e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800236a:	b29b      	uxth	r3, r3
 800236c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01f      	beq.n	80023b8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002392:	82fb      	strh	r3, [r7, #22]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	441a      	add	r2, r3
 80023a2:	8afb      	ldrh	r3, [r7, #22]
 80023a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023b8:	8b7b      	ldrh	r3, [r7, #26]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8087 	beq.w	80024ce <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	6959      	ldr	r1, [r3, #20]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	891a      	ldrh	r2, [r3, #8]
 80023cc:	8b7b      	ldrh	r3, [r7, #26]
 80023ce:	f004 fb7f 	bl	8006ad0 <USB_ReadPMA>
 80023d2:	e07c      	b.n	80024ce <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	3306      	adds	r3, #6
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	8b7b      	ldrh	r3, [r7, #26]
 8002404:	429a      	cmp	r2, r3
 8002406:	d306      	bcc.n	8002416 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	699a      	ldr	r2, [r3, #24]
 800240c:	8b7b      	ldrh	r3, [r7, #26]
 800240e:	1ad2      	subs	r2, r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	619a      	str	r2, [r3, #24]
 8002414:	e002      	b.n	800241c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d123      	bne.n	800246c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800243a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243e:	83fb      	strh	r3, [r7, #30]
 8002440:	8bfb      	ldrh	r3, [r7, #30]
 8002442:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002446:	83fb      	strh	r3, [r7, #30]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	441a      	add	r2, r3
 8002456:	8bfb      	ldrh	r3, [r7, #30]
 8002458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800245c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002468:	b29b      	uxth	r3, r3
 800246a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11f      	bne.n	80024b6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800248c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002490:	83bb      	strh	r3, [r7, #28]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	441a      	add	r2, r3
 80024a0:	8bbb      	ldrh	r3, [r7, #28]
 80024a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024b6:	8b7b      	ldrh	r3, [r7, #26]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	6959      	ldr	r1, [r3, #20]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	895a      	ldrh	r2, [r3, #10]
 80024c8:	8b7b      	ldrh	r3, [r7, #26]
 80024ca:	f004 fb01 	bl	8006ad0 <USB_ReadPMA>
    }
  }

  return count;
 80024ce:	8b7b      	ldrh	r3, [r7, #26]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3720      	adds	r7, #32
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b0a4      	sub	sp, #144	; 0x90
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 81dd 	beq.w	80028ac <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	3302      	adds	r3, #2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800251a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002526:	429a      	cmp	r2, r3
 8002528:	d907      	bls.n	800253a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002532:	1ad2      	subs	r2, r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	619a      	str	r2, [r3, #24]
 8002538:	e002      	b.n	8002540 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f040 80b9 	bne.w	80026bc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	785b      	ldrb	r3, [r3, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d126      	bne.n	80025a0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002560:	b29b      	uxth	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002566:	4413      	add	r3, r2
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	011a      	lsls	r2, r3, #4
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	4413      	add	r3, r2
 8002574:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002584:	b29a      	uxth	r2, r3
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	801a      	strh	r2, [r3, #0]
 800258a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002598:	b29a      	uxth	r2, r3
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	801a      	strh	r2, [r3, #0]
 800259e:	e01a      	b.n	80025d6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	785b      	ldrb	r3, [r3, #1]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d116      	bne.n	80025d6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	4413      	add	r3, r2
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	011a      	lsls	r2, r3, #4
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c8:	4413      	add	r3, r2
 80025ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	2200      	movs	r2, #0
 80025d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	785b      	ldrb	r3, [r3, #1]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d126      	bne.n	8002632 <HAL_PCD_EP_DB_Transmit+0x15a>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	4413      	add	r3, r2
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	011a      	lsls	r2, r3, #4
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002616:	b29a      	uxth	r2, r3
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	801a      	strh	r2, [r3, #0]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800262a:	b29a      	uxth	r2, r3
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	801a      	strh	r2, [r3, #0]
 8002630:	e017      	b.n	8002662 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d113      	bne.n	8002662 <HAL_PCD_EP_DB_Transmit+0x18a>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002642:	b29b      	uxth	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	4413      	add	r3, r2
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	011a      	lsls	r2, r3, #4
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	4413      	add	r3, r2
 8002656:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	2200      	movs	r2, #0
 8002660:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	4619      	mov	r1, r3
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f006 f836 	bl	80086da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 82fc 	beq.w	8002c72 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002694:	82fb      	strh	r3, [r7, #22]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	441a      	add	r2, r3
 80026a4:	8afb      	ldrh	r3, [r7, #22]
 80026a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	8013      	strh	r3, [r2, #0]
 80026ba:	e2da      	b.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d021      	beq.n	800270a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	441a      	add	r2, r3
 80026f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80026f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002706:	b29b      	uxth	r3, r3
 8002708:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002710:	2b01      	cmp	r3, #1
 8002712:	f040 82ae 	bne.w	8002c72 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800271e:	441a      	add	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800272c:	441a      	add	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	6a1a      	ldr	r2, [r3, #32]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	429a      	cmp	r2, r3
 800273c:	d30b      	bcc.n	8002756 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	6a1a      	ldr	r2, [r3, #32]
 800274a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800274e:	1ad2      	subs	r2, r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	621a      	str	r2, [r3, #32]
 8002754:	e017      	b.n	8002786 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d108      	bne.n	8002770 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800275e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800276e:	e00a      	b.n	8002786 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2200      	movs	r2, #0
 8002784:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d165      	bne.n	800285a <HAL_PCD_EP_DB_Transmit+0x382>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279c:	b29b      	uxth	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a2:	4413      	add	r3, r2
 80027a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	011a      	lsls	r2, r3, #4
 80027ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ae:	4413      	add	r3, r2
 80027b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c4:	801a      	strh	r2, [r3, #0]
 80027c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ca:	2b3e      	cmp	r3, #62	; 0x3e
 80027cc:	d91d      	bls.n	800280a <HAL_PCD_EP_DB_Transmit+0x332>
 80027ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80027d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_PCD_EP_DB_Transmit+0x310>
 80027e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e4:	3b01      	subs	r3, #1
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	029b      	lsls	r3, r3, #10
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002802:	b29a      	uxth	r2, r3
 8002804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002806:	801a      	strh	r2, [r3, #0]
 8002808:	e044      	b.n	8002894 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800280a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <HAL_PCD_EP_DB_Transmit+0x350>
 8002812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800281c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002820:	b29a      	uxth	r2, r3
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	801a      	strh	r2, [r3, #0]
 8002826:	e035      	b.n	8002894 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002828:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002830:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_PCD_EP_DB_Transmit+0x36a>
 800283c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283e:	3301      	adds	r3, #1
 8002840:	64bb      	str	r3, [r7, #72]	; 0x48
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29a      	uxth	r2, r3
 8002848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284a:	b29b      	uxth	r3, r3
 800284c:	029b      	lsls	r3, r3, #10
 800284e:	b29b      	uxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b29a      	uxth	r2, r3
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	e01c      	b.n	8002894 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	785b      	ldrb	r3, [r3, #1]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d118      	bne.n	8002894 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002870:	b29b      	uxth	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002876:	4413      	add	r3, r2
 8002878:	647b      	str	r3, [r7, #68]	; 0x44
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	011a      	lsls	r2, r3, #4
 8002880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002882:	4413      	add	r3, r2
 8002884:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002888:	643b      	str	r3, [r7, #64]	; 0x40
 800288a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800288e:	b29a      	uxth	r2, r3
 8002890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002892:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	6959      	ldr	r1, [r3, #20]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	891a      	ldrh	r2, [r3, #8]
 80028a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	f004 f8ce 	bl	8006a46 <USB_WritePMA>
 80028aa:	e1e2      	b.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	3306      	adds	r3, #6
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d307      	bcc.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	699a      	ldr	r2, [r3, #24]
 80028e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028ec:	1ad2      	subs	r2, r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	619a      	str	r2, [r3, #24]
 80028f2:	e002      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2200      	movs	r2, #0
 80028f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 80c0 	bne.w	8002a84 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d126      	bne.n	800295a <HAL_PCD_EP_DB_Transmit+0x482>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002920:	4413      	add	r3, r2
 8002922:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	011a      	lsls	r2, r3, #4
 800292a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800292c:	4413      	add	r3, r2
 800292e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002932:	67bb      	str	r3, [r7, #120]	; 0x78
 8002934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293e:	b29a      	uxth	r2, r3
 8002940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002942:	801a      	strh	r2, [r3, #0]
 8002944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800294e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002952:	b29a      	uxth	r2, r3
 8002954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002956:	801a      	strh	r2, [r3, #0]
 8002958:	e01a      	b.n	8002990 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	785b      	ldrb	r3, [r3, #1]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d116      	bne.n	8002990 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	667b      	str	r3, [r7, #100]	; 0x64
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002976:	4413      	add	r3, r2
 8002978:	667b      	str	r3, [r7, #100]	; 0x64
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	011a      	lsls	r2, r3, #4
 8002980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002982:	4413      	add	r3, r2
 8002984:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002988:	663b      	str	r3, [r7, #96]	; 0x60
 800298a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800298c:	2200      	movs	r2, #0
 800298e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	677b      	str	r3, [r7, #116]	; 0x74
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d12b      	bne.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x51e>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b2:	4413      	add	r3, r2
 80029b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	011a      	lsls	r2, r3, #4
 80029bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029be:	4413      	add	r3, r2
 80029c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029da:	801a      	strh	r2, [r3, #0]
 80029dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	e017      	b.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x54e>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	785b      	ldrb	r3, [r3, #1]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d113      	bne.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x54e>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0c:	4413      	add	r3, r2
 8002a0e:	677b      	str	r3, [r7, #116]	; 0x74
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	011a      	lsls	r2, r3, #4
 8002a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a18:	4413      	add	r3, r2
 8002a1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a1e:	673b      	str	r3, [r7, #112]	; 0x70
 8002a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a22:	2200      	movs	r2, #0
 8002a24:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f005 fe54 	bl	80086da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f040 811a 	bne.w	8002c72 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a58:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	441a      	add	r2, r3
 8002a6a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	8013      	strh	r3, [r2, #0]
 8002a82:	e0f6      	b.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d121      	bne.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	441a      	add	r2, r3
 8002aba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	f040 80ca 	bne.w	8002c72 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ae6:	441a      	add	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002af4:	441a      	add	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d30b      	bcc.n	8002b1e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	6a1a      	ldr	r2, [r3, #32]
 8002b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b16:	1ad2      	subs	r2, r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	621a      	str	r2, [r3, #32]
 8002b1c:	e017      	b.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002b26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b36:	e00a      	b.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2200      	movs	r2, #0
 8002b44:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	657b      	str	r3, [r7, #84]	; 0x54
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d165      	bne.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x750>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b70:	4413      	add	r3, r2
 8002b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	011a      	lsls	r2, r3, #4
 8002b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b82:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b98:	2b3e      	cmp	r3, #62	; 0x3e
 8002b9a:	d91d      	bls.n	8002bd8 <HAL_PCD_EP_DB_Transmit+0x700>
 8002b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	029b      	lsls	r3, r3, #10
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd4:	801a      	strh	r2, [r3, #0]
 8002bd6:	e041      	b.n	8002c5c <HAL_PCD_EP_DB_Transmit+0x784>
 8002bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf2:	801a      	strh	r2, [r3, #0]
 8002bf4:	e032      	b.n	8002c5c <HAL_PCD_EP_DB_Transmit+0x784>
 8002bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_PCD_EP_DB_Transmit+0x738>
 8002c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	029b      	lsls	r3, r3, #10
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c24:	801a      	strh	r2, [r3, #0]
 8002c26:	e019      	b.n	8002c5c <HAL_PCD_EP_DB_Transmit+0x784>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d115      	bne.n	8002c5c <HAL_PCD_EP_DB_Transmit+0x784>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3e:	4413      	add	r3, r2
 8002c40:	657b      	str	r3, [r7, #84]	; 0x54
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	011a      	lsls	r2, r3, #4
 8002c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c50:	653b      	str	r3, [r7, #80]	; 0x50
 8002c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	6959      	ldr	r1, [r3, #20]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	895a      	ldrh	r2, [r3, #10]
 8002c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f003 feea 	bl	8006a46 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8c:	82bb      	strh	r3, [r7, #20]
 8002c8e:	8abb      	ldrh	r3, [r7, #20]
 8002c90:	f083 0310 	eor.w	r3, r3, #16
 8002c94:	82bb      	strh	r3, [r7, #20]
 8002c96:	8abb      	ldrh	r3, [r7, #20]
 8002c98:	f083 0320 	eor.w	r3, r3, #32
 8002c9c:	82bb      	strh	r3, [r7, #20]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	441a      	add	r2, r3
 8002cac:	8abb      	ldrh	r3, [r7, #20]
 8002cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3790      	adds	r7, #144	; 0x90
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	817b      	strh	r3, [r7, #10]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002cde:	897b      	ldrh	r3, [r7, #10]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cea:	897b      	ldrh	r3, [r7, #10]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	e009      	b.n	8002d16 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d02:	897a      	ldrh	r2, [r7, #10]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d16:	893b      	ldrh	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	80da      	strh	r2, [r3, #6]
 8002d2a:	e00b      	b.n	8002d44 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e272      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8087 	beq.w	8002e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d70:	4b92      	ldr	r3, [pc, #584]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d00c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d7c:	4b8f      	ldr	r3, [pc, #572]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d112      	bne.n	8002dae <HAL_RCC_OscConfig+0x5e>
 8002d88:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d94:	d10b      	bne.n	8002dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d96:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06c      	beq.n	8002e7c <HAL_RCC_OscConfig+0x12c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d168      	bne.n	8002e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e24c      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x76>
 8002db8:	4b80      	ldr	r3, [pc, #512]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a7f      	ldr	r2, [pc, #508]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e02e      	b.n	8002e24 <HAL_RCC_OscConfig+0xd4>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x98>
 8002dce:	4b7b      	ldr	r3, [pc, #492]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7a      	ldr	r2, [pc, #488]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b78      	ldr	r3, [pc, #480]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a77      	ldr	r2, [pc, #476]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e01d      	b.n	8002e24 <HAL_RCC_OscConfig+0xd4>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0xbc>
 8002df2:	4b72      	ldr	r3, [pc, #456]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a71      	ldr	r2, [pc, #452]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6e      	ldr	r2, [pc, #440]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCC_OscConfig+0xd4>
 8002e0c:	4b6b      	ldr	r3, [pc, #428]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6a      	ldr	r2, [pc, #424]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a67      	ldr	r2, [pc, #412]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fd fe98 	bl	8000b60 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fd fe94 	bl	8000b60 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e200      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b5d      	ldr	r3, [pc, #372]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0xe4>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fd fe84 	bl	8000b60 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fd fe80 	bl	8000b60 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e1ec      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	4b53      	ldr	r3, [pc, #332]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x10c>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d063      	beq.n	8002f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8a:	4b4c      	ldr	r3, [pc, #304]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e96:	4b49      	ldr	r3, [pc, #292]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d11c      	bne.n	8002edc <HAL_RCC_OscConfig+0x18c>
 8002ea2:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d116      	bne.n	8002edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eae:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x176>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e1c0      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4939      	ldr	r1, [pc, #228]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	e03a      	b.n	8002f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee4:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <HAL_RCC_OscConfig+0x270>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fd fe39 	bl	8000b60 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef2:	f7fd fe35 	bl	8000b60 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1a1      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f04:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f10:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4927      	ldr	r1, [pc, #156]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
 8002f24:	e015      	b.n	8002f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <HAL_RCC_OscConfig+0x270>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fd fe18 	bl	8000b60 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f34:	f7fd fe14 	bl	8000b60 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e180      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d03a      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d019      	beq.n	8002f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f66:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <HAL_RCC_OscConfig+0x274>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7fd fdf8 	bl	8000b60 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f74:	f7fd fdf4 	bl	8000b60 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e160      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f000 face 	bl	8003534 <RCC_Delay>
 8002f98:	e01c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7fd fdde 	bl	8000b60 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa6:	e00f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7fd fdda 	bl	8000b60 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d908      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e146      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	42420000 	.word	0x42420000
 8002fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc8:	4b92      	ldr	r3, [pc, #584]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e9      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80a6 	beq.w	800312e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe6:	4b8b      	ldr	r3, [pc, #556]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10d      	bne.n	800300e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff2:	4b88      	ldr	r3, [pc, #544]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4a87      	ldr	r2, [pc, #540]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	61d3      	str	r3, [r2, #28]
 8002ffe:	4b85      	ldr	r3, [pc, #532]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	4b82      	ldr	r3, [pc, #520]	; (8003218 <HAL_RCC_OscConfig+0x4c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d118      	bne.n	800304c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800301a:	4b7f      	ldr	r3, [pc, #508]	; (8003218 <HAL_RCC_OscConfig+0x4c8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7e      	ldr	r2, [pc, #504]	; (8003218 <HAL_RCC_OscConfig+0x4c8>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7fd fd9b 	bl	8000b60 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7fd fd97 	bl	8000b60 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b64      	cmp	r3, #100	; 0x64
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e103      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	4b75      	ldr	r3, [pc, #468]	; (8003218 <HAL_RCC_OscConfig+0x4c8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x312>
 8003054:	4b6f      	ldr	r3, [pc, #444]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4a6e      	ldr	r2, [pc, #440]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6213      	str	r3, [r2, #32]
 8003060:	e02d      	b.n	80030be <HAL_RCC_OscConfig+0x36e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x334>
 800306a:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4a69      	ldr	r2, [pc, #420]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	6213      	str	r3, [r2, #32]
 8003076:	4b67      	ldr	r3, [pc, #412]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a66      	ldr	r2, [pc, #408]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	6213      	str	r3, [r2, #32]
 8003082:	e01c      	b.n	80030be <HAL_RCC_OscConfig+0x36e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b05      	cmp	r3, #5
 800308a:	d10c      	bne.n	80030a6 <HAL_RCC_OscConfig+0x356>
 800308c:	4b61      	ldr	r3, [pc, #388]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a60      	ldr	r2, [pc, #384]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	f043 0304 	orr.w	r3, r3, #4
 8003096:	6213      	str	r3, [r2, #32]
 8003098:	4b5e      	ldr	r3, [pc, #376]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	4a5d      	ldr	r2, [pc, #372]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6213      	str	r3, [r2, #32]
 80030a4:	e00b      	b.n	80030be <HAL_RCC_OscConfig+0x36e>
 80030a6:	4b5b      	ldr	r3, [pc, #364]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4a5a      	ldr	r2, [pc, #360]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	6213      	str	r3, [r2, #32]
 80030b2:	4b58      	ldr	r3, [pc, #352]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4a57      	ldr	r2, [pc, #348]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d015      	beq.n	80030f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c6:	f7fd fd4b 	bl	8000b60 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ce:	f7fd fd47 	bl	8000b60 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0b1      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e4:	4b4b      	ldr	r3, [pc, #300]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ee      	beq.n	80030ce <HAL_RCC_OscConfig+0x37e>
 80030f0:	e014      	b.n	800311c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f2:	f7fd fd35 	bl	8000b60 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7fd fd31 	bl	8000b60 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	; 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e09b      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003110:	4b40      	ldr	r3, [pc, #256]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ee      	bne.n	80030fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d105      	bne.n	800312e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003122:	4b3c      	ldr	r3, [pc, #240]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	4a3b      	ldr	r2, [pc, #236]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8087 	beq.w	8003246 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003138:	4b36      	ldr	r3, [pc, #216]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d061      	beq.n	8003208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d146      	bne.n	80031da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314c:	4b33      	ldr	r3, [pc, #204]	; (800321c <HAL_RCC_OscConfig+0x4cc>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7fd fd05 	bl	8000b60 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315a:	f7fd fd01 	bl	8000b60 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e06d      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316c:	4b29      	ldr	r3, [pc, #164]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f0      	bne.n	800315a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003180:	d108      	bne.n	8003194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003182:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	4921      	ldr	r1, [pc, #132]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003194:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a19      	ldr	r1, [r3, #32]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	430b      	orrs	r3, r1
 80031a6:	491b      	ldr	r1, [pc, #108]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ac:	4b1b      	ldr	r3, [pc, #108]	; (800321c <HAL_RCC_OscConfig+0x4cc>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fd fcd5 	bl	8000b60 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fd fcd1 	bl	8000b60 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e03d      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x46a>
 80031d8:	e035      	b.n	8003246 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <HAL_RCC_OscConfig+0x4cc>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fd fcbe 	bl	8000b60 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fd fcba 	bl	8000b60 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e026      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x498>
 8003206:	e01e      	b.n	8003246 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e019      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
 8003214:	40021000 	.word	0x40021000
 8003218:	40007000 	.word	0x40007000
 800321c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_OscConfig+0x500>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	429a      	cmp	r2, r3
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000

08003254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0d0      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b6a      	ldr	r3, [pc, #424]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d910      	bls.n	8003298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b67      	ldr	r3, [pc, #412]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 0207 	bic.w	r2, r3, #7
 800327e:	4965      	ldr	r1, [pc, #404]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0b8      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b0:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	494d      	ldr	r1, [pc, #308]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d040      	beq.n	8003374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d115      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07f      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e073      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e06b      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003332:	4b39      	ldr	r3, [pc, #228]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f023 0203 	bic.w	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4936      	ldr	r1, [pc, #216]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003344:	f7fd fc0c 	bl	8000b60 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	e00a      	b.n	8003362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fd fc08 	bl	8000b60 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e053      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 020c 	and.w	r2, r3, #12
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	429a      	cmp	r2, r3
 8003372:	d1eb      	bne.n	800334c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d210      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 0207 	bic.w	r2, r3, #7
 800338a:	4922      	ldr	r1, [pc, #136]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e032      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4916      	ldr	r1, [pc, #88]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	490e      	ldr	r1, [pc, #56]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033e2:	f000 f821 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	490a      	ldr	r1, [pc, #40]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033f4:	5ccb      	ldrb	r3, [r1, r3]
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1cc>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1d0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd fb6a 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40022000 	.word	0x40022000
 8003418:	40021000 	.word	0x40021000
 800341c:	0800a1d8 	.word	0x0800a1d8
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004

08003428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	2300      	movs	r3, #0
 800343c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003442:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b04      	cmp	r3, #4
 8003450:	d002      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x30>
 8003452:	2b08      	cmp	r3, #8
 8003454:	d003      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x36>
 8003456:	e027      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800345a:	613b      	str	r3, [r7, #16]
      break;
 800345c:	e027      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	0c9b      	lsrs	r3, r3, #18
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	4a17      	ldr	r2, [pc, #92]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003468:	5cd3      	ldrb	r3, [r2, r3]
 800346a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d010      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	0c5b      	lsrs	r3, r3, #17
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003482:	5cd3      	ldrb	r3, [r2, r3]
 8003484:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800348a:	fb03 f202 	mul.w	r2, r3, r2
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	e004      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a0c      	ldr	r2, [pc, #48]	; (80034cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	613b      	str	r3, [r7, #16]
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80034aa:	613b      	str	r3, [r7, #16]
      break;
 80034ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ae:	693b      	ldr	r3, [r7, #16]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	007a1200 	.word	0x007a1200
 80034c4:	0800a1f0 	.word	0x0800a1f0
 80034c8:	0800a200 	.word	0x0800a200
 80034cc:	003d0900 	.word	0x003d0900

080034d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d4:	4b02      	ldr	r3, [pc, #8]	; (80034e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	20000000 	.word	0x20000000

080034e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034e8:	f7ff fff2 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4903      	ldr	r1, [pc, #12]	; (8003508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	0800a1e8 	.word	0x0800a1e8

0800350c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003510:	f7ff ffde 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 8003514:	4602      	mov	r2, r0
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	0adb      	lsrs	r3, r3, #11
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	4903      	ldr	r1, [pc, #12]	; (8003530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003522:	5ccb      	ldrb	r3, [r1, r3]
 8003524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	0800a1e8 	.word	0x0800a1e8

08003534 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <RCC_Delay+0x34>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0a      	ldr	r2, [pc, #40]	; (800356c <RCC_Delay+0x38>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	0a5b      	lsrs	r3, r3, #9
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003550:	bf00      	nop
  }
  while (Delay --);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1e5a      	subs	r2, r3, #1
 8003556:	60fa      	str	r2, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f9      	bne.n	8003550 <RCC_Delay+0x1c>
}
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	20000000 	.word	0x20000000
 800356c:	10624dd3 	.word	0x10624dd3

08003570 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d07d      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800358c:	2300      	movs	r3, #0
 800358e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003590:	4b4f      	ldr	r3, [pc, #316]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10d      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359c:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	4a4b      	ldr	r2, [pc, #300]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a6:	61d3      	str	r3, [r2, #28]
 80035a8:	4b49      	ldr	r3, [pc, #292]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b4:	2301      	movs	r3, #1
 80035b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d118      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c4:	4b43      	ldr	r3, [pc, #268]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a42      	ldr	r2, [pc, #264]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d0:	f7fd fac6 	bl	8000b60 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	e008      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d8:	f7fd fac2 	bl	8000b60 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e06d      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035f6:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d02e      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	429a      	cmp	r2, r3
 8003612:	d027      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003614:	4b2e      	ldr	r3, [pc, #184]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800361e:	4b2e      	ldr	r3, [pc, #184]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003624:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800362a:	4a29      	ldr	r2, [pc, #164]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d014      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363a:	f7fd fa91 	bl	8000b60 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	e00a      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003642:	f7fd fa8d 	bl	8000b60 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003650:	4293      	cmp	r3, r2
 8003652:	d901      	bls.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e036      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ee      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003664:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4917      	ldr	r1, [pc, #92]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003672:	4313      	orrs	r3, r2
 8003674:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d105      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367c:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003686:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003694:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	490b      	ldr	r1, [pc, #44]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036b2:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	4904      	ldr	r1, [pc, #16]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40007000 	.word	0x40007000
 80036d8:	42420440 	.word	0x42420440

080036dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e042      	b.n	8003774 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd f894 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800371e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fdfb 	bl	800431c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b20      	cmp	r3, #32
 800379a:	d16d      	bne.n	8003878 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_UART_Transmit+0x2c>
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e066      	b.n	800387a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2221      	movs	r2, #33	; 0x21
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ba:	f7fd f9d1 	bl	8000b60 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	88fa      	ldrh	r2, [r7, #6]
 80037c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d4:	d108      	bne.n	80037e8 <HAL_UART_Transmit+0x6c>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d104      	bne.n	80037e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	e003      	b.n	80037f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037f0:	e02a      	b.n	8003848 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fb4a 	bl	8003e96 <UART_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e036      	b.n	800387a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	3302      	adds	r3, #2
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e007      	b.n	800383a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3301      	adds	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1cf      	bne.n	80037f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	2140      	movs	r1, #64	; 0x40
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fb1a 	bl	8003e96 <UART_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e006      	b.n	800387a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b08c      	sub	sp, #48	; 0x30
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	4613      	mov	r3, r2
 800388e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b20      	cmp	r3, #32
 800389a:	d14a      	bne.n	8003932 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e043      	b.n	8003934 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fb57 	bl	8003f72 <UART_Start_Receive_IT>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80038ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d12c      	bne.n	800392c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d125      	bne.n	8003926 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	617b      	str	r3, [r7, #20]
   return(result);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f043 0310 	orr.w	r3, r3, #16
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003910:	627a      	str	r2, [r7, #36]	; 0x24
 8003912:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6a39      	ldr	r1, [r7, #32]
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	61fb      	str	r3, [r7, #28]
   return(result);
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e5      	bne.n	80038f0 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8003924:	e002      	b.n	800392c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800392c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003930:	e000      	b.n	8003934 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
  }
}
 8003934:	4618      	mov	r0, r3
 8003936:	3730      	adds	r7, #48	; 0x30
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b0ba      	sub	sp, #232	; 0xe8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003962:	2300      	movs	r3, #0
 8003964:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003968:	2300      	movs	r3, #0
 800396a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800397a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <HAL_UART_IRQHandler+0x66>
 800398e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fbff 	bl	800419e <UART_Receive_IT>
      return;
 80039a0:	e25b      	b.n	8003e5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80de 	beq.w	8003b68 <HAL_UART_IRQHandler+0x22c>
 80039ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80d1 	beq.w	8003b68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_UART_IRQHandler+0xae>
 80039d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <HAL_UART_IRQHandler+0xd2>
 80039f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f043 0202 	orr.w	r2, r3, #2
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_UART_IRQHandler+0xf6>
 8003a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f043 0204 	orr.w	r2, r3, #4
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d011      	beq.n	8003a62 <HAL_UART_IRQHandler+0x126>
 8003a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d105      	bne.n	8003a56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f043 0208 	orr.w	r2, r3, #8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 81f2 	beq.w	8003e50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_UART_IRQHandler+0x14e>
 8003a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fb8a 	bl	800419e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x17a>
 8003aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d04f      	beq.n	8003b56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fa94 	bl	8003fe4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d041      	beq.n	8003b4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3314      	adds	r3, #20
 8003ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3314      	adds	r3, #20
 8003af2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003af6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003afa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1d9      	bne.n	8003aca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d013      	beq.n	8003b46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	4a7e      	ldr	r2, [pc, #504]	; (8003d1c <HAL_UART_IRQHandler+0x3e0>)
 8003b24:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd f98e 	bl	8000e4c <HAL_DMA_Abort_IT>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b40:	4610      	mov	r0, r2
 8003b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b44:	e00e      	b.n	8003b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f99c 	bl	8003e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4c:	e00a      	b.n	8003b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f998 	bl	8003e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	e006      	b.n	8003b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f994 	bl	8003e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b62:	e175      	b.n	8003e50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	bf00      	nop
    return;
 8003b66:	e173      	b.n	8003e50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	f040 814f 	bne.w	8003e10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8148 	beq.w	8003e10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8141 	beq.w	8003e10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80b6 	beq.w	8003d20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8145 	beq.w	8003e54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	f080 813e 	bcs.w	8003e54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	f000 8088 	beq.w	8003cfc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1d9      	bne.n	8003bec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3314      	adds	r3, #20
 8003c3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3314      	adds	r3, #20
 8003c58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e1      	bne.n	8003c38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3314      	adds	r3, #20
 8003c7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e3      	bne.n	8003c74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc4:	e853 3f00 	ldrex	r3, [r3]
 8003cc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ccc:	f023 0310 	bic.w	r3, r3, #16
 8003cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cde:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ce0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e3      	bne.n	8003cba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd f86d 	bl	8000dd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fc fbea 	bl	80004ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d18:	e09c      	b.n	8003e54 <HAL_UART_IRQHandler+0x518>
 8003d1a:	bf00      	nop
 8003d1c:	080040a9 	.word	0x080040a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 808e 	beq.w	8003e58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8089 	beq.w	8003e58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d6a:	647a      	str	r2, [r7, #68]	; 0x44
 8003d6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e3      	bne.n	8003d46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3314      	adds	r3, #20
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3314      	adds	r3, #20
 8003d9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003da2:	633a      	str	r2, [r7, #48]	; 0x30
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e3      	bne.n	8003d7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0310 	bic.w	r3, r3, #16
 8003dda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003de8:	61fa      	str	r2, [r7, #28]
 8003dea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dec:	69b9      	ldr	r1, [r7, #24]
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	617b      	str	r3, [r7, #20]
   return(result);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e3      	bne.n	8003dc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e06:	4619      	mov	r1, r3
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fc fb6f 	bl	80004ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e0e:	e023      	b.n	8003e58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d009      	beq.n	8003e30 <HAL_UART_IRQHandler+0x4f4>
 8003e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f951 	bl	80040d0 <UART_Transmit_IT>
    return;
 8003e2e:	e014      	b.n	8003e5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00e      	beq.n	8003e5a <HAL_UART_IRQHandler+0x51e>
 8003e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f990 	bl	800416e <UART_EndTransmit_IT>
    return;
 8003e4e:	e004      	b.n	8003e5a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e50:	bf00      	nop
 8003e52:	e002      	b.n	8003e5a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e58:	bf00      	nop
  }
}
 8003e5a:	37e8      	adds	r7, #232	; 0xe8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b090      	sub	sp, #64	; 0x40
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea6:	e050      	b.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	d04c      	beq.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eb6:	f7fc fe53 	bl	8000b60 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d241      	bcs.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	330c      	adds	r3, #12
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ee6:	637a      	str	r2, [r7, #52]	; 0x34
 8003ee8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e5      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3314      	adds	r3, #20
 8003f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	613b      	str	r3, [r7, #16]
   return(result);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3314      	adds	r3, #20
 8003f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f1a:	623a      	str	r2, [r7, #32]
 8003f1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	69f9      	ldr	r1, [r7, #28]
 8003f20:	6a3a      	ldr	r2, [r7, #32]
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e00f      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4013      	ands	r3, r2
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	bf0c      	ite	eq
 8003f5a:	2301      	moveq	r3, #1
 8003f5c:	2300      	movne	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d09f      	beq.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3740      	adds	r7, #64	; 0x40
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2222      	movs	r2, #34	; 0x22
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0220 	orr.w	r2, r2, #32
 8003fd6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b095      	sub	sp, #84	; 0x54
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800400c:	643a      	str	r2, [r7, #64]	; 0x40
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004012:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e5      	bne.n	8003fec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3314      	adds	r3, #20
 8004026:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	64bb      	str	r3, [r7, #72]	; 0x48
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3314      	adds	r3, #20
 800403e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004040:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e5      	bne.n	8004020 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	2b01      	cmp	r3, #1
 800405a:	d119      	bne.n	8004090 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	60bb      	str	r3, [r7, #8]
   return(result);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f023 0310 	bic.w	r3, r3, #16
 8004072:	647b      	str	r3, [r7, #68]	; 0x44
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800407c:	61ba      	str	r2, [r7, #24]
 800407e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6979      	ldr	r1, [r7, #20]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	613b      	str	r3, [r7, #16]
   return(result);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e5      	bne.n	800405c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800409e:	bf00      	nop
 80040a0:	3754      	adds	r7, #84	; 0x54
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f7ff fede 	bl	8003e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b21      	cmp	r3, #33	; 0x21
 80040e2:	d13e      	bne.n	8004162 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ec:	d114      	bne.n	8004118 <UART_Transmit_IT+0x48>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d110      	bne.n	8004118 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800410a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	1c9a      	adds	r2, r3, #2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	621a      	str	r2, [r3, #32]
 8004116:	e008      	b.n	800412a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	1c59      	adds	r1, r3, #1
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6211      	str	r1, [r2, #32]
 8004122:	781a      	ldrb	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29b      	uxth	r3, r3
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	4619      	mov	r1, r3
 8004138:	84d1      	strh	r1, [r2, #38]	; 0x26
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10f      	bne.n	800415e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800414c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800415c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004184:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff fe66 	bl	8003e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b08c      	sub	sp, #48	; 0x30
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b22      	cmp	r3, #34	; 0x22
 80041b0:	f040 80ae 	bne.w	8004310 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041bc:	d117      	bne.n	80041ee <UART_Receive_IT+0x50>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d113      	bne.n	80041ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041dc:	b29a      	uxth	r2, r3
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	1c9a      	adds	r2, r3, #2
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
 80041ec:	e026      	b.n	800423c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004200:	d007      	beq.n	8004212 <UART_Receive_IT+0x74>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <UART_Receive_IT+0x82>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	701a      	strb	r2, [r3, #0]
 800421e:	e008      	b.n	8004232 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800422c:	b2da      	uxtb	r2, r3
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29b      	uxth	r3, r3
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	4619      	mov	r1, r3
 800424a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800424c:	2b00      	cmp	r3, #0
 800424e:	d15d      	bne.n	800430c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0220 	bic.w	r2, r2, #32
 800425e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800426e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	2b01      	cmp	r3, #1
 8004294:	d135      	bne.n	8004302 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	613b      	str	r3, [r7, #16]
   return(result);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f023 0310 	bic.w	r3, r3, #16
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042bc:	623a      	str	r2, [r7, #32]
 80042be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	69f9      	ldr	r1, [r7, #28]
 80042c2:	6a3a      	ldr	r2, [r7, #32]
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e5      	bne.n	800429c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d10a      	bne.n	80042f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fc f8f6 	bl	80004ec <HAL_UARTEx_RxEventCallback>
 8004300:	e002      	b.n	8004308 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fdb5 	bl	8003e72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e002      	b.n	8004312 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	e000      	b.n	8004312 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
  }
}
 8004312:	4618      	mov	r0, r3
 8004314:	3730      	adds	r7, #48	; 0x30
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004356:	f023 030c 	bic.w	r3, r3, #12
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	68b9      	ldr	r1, [r7, #8]
 8004360:	430b      	orrs	r3, r1
 8004362:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2c      	ldr	r2, [pc, #176]	; (8004430 <UART_SetConfig+0x114>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d103      	bne.n	800438c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004384:	f7ff f8c2 	bl	800350c <HAL_RCC_GetPCLK2Freq>
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	e002      	b.n	8004392 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800438c:	f7ff f8aa 	bl	80034e4 <HAL_RCC_GetPCLK1Freq>
 8004390:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	009a      	lsls	r2, r3, #2
 800439c:	441a      	add	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	4a22      	ldr	r2, [pc, #136]	; (8004434 <UART_SetConfig+0x118>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	0119      	lsls	r1, r3, #4
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009a      	lsls	r2, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c8:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <UART_SetConfig+0x118>)
 80043ca:	fba3 0302 	umull	r0, r3, r3, r2
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	2064      	movs	r0, #100	; 0x64
 80043d2:	fb00 f303 	mul.w	r3, r0, r3
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	3332      	adds	r3, #50	; 0x32
 80043dc:	4a15      	ldr	r2, [pc, #84]	; (8004434 <UART_SetConfig+0x118>)
 80043de:	fba2 2303 	umull	r2, r3, r2, r3
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e8:	4419      	add	r1, r3
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009a      	lsls	r2, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <UART_SetConfig+0x118>)
 8004402:	fba3 0302 	umull	r0, r3, r3, r2
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	2064      	movs	r0, #100	; 0x64
 800440a:	fb00 f303 	mul.w	r3, r0, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	3332      	adds	r3, #50	; 0x32
 8004414:	4a07      	ldr	r2, [pc, #28]	; (8004434 <UART_SetConfig+0x118>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	f003 020f 	and.w	r2, r3, #15
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	440a      	add	r2, r1
 8004426:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004428:	bf00      	nop
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40013800 	.word	0x40013800
 8004434:	51eb851f 	.word	0x51eb851f

08004438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004438:	b084      	sub	sp, #16
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	f107 0014 	add.w	r0, r7, #20
 8004446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	b004      	add	sp, #16
 8004456:	4770      	bx	lr

08004458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004468:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800446c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	b29a      	uxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800448c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004490:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	b29b      	uxth	r3, r3
 800449e:	43db      	mvns	r3, r3
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	4013      	ands	r3, r2
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044d0:	b084      	sub	sp, #16
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	f107 0014 	add.w	r0, r7, #20
 80044de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	b004      	add	sp, #16
 800450e:	4770      	bx	lr

08004510 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004510:	b480      	push	{r7}
 8004512:	b09d      	sub	sp, #116	; 0x74
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004536:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	78db      	ldrb	r3, [r3, #3]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d81f      	bhi.n	8004582 <USB_ActivateEndpoint+0x72>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <USB_ActivateEndpoint+0x38>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	08004559 	.word	0x08004559
 800454c:	08004575 	.word	0x08004575
 8004550:	0800458b 	.word	0x0800458b
 8004554:	08004567 	.word	0x08004567
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004558:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800455c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004560:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004564:	e012      	b.n	800458c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004566:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800456a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800456e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004572:	e00b      	b.n	800458c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004574:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004578:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800457c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004580:	e004      	b.n	800458c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004588:	e000      	b.n	800458c <USB_ActivateEndpoint+0x7c>
      break;
 800458a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	441a      	add	r2, r3
 8004596:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800459a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800459e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	441a      	add	r2, r3
 80045dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80045e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	7b1b      	ldrb	r3, [r3, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f040 8178 	bne.w	80048ee <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	785b      	ldrb	r3, [r3, #1]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8084 	beq.w	8004710 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	61bb      	str	r3, [r7, #24]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004612:	b29b      	uxth	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4413      	add	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	011a      	lsls	r2, r3, #4
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	88db      	ldrh	r3, [r3, #6]
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	b29b      	uxth	r3, r3
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	827b      	strh	r3, [r7, #18]
 800464a:	8a7b      	ldrh	r3, [r7, #18]
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01b      	beq.n	800468c <USB_ActivateEndpoint+0x17c>
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	b29b      	uxth	r3, r3
 8004662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466a:	823b      	strh	r3, [r7, #16]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	8a3b      	ldrh	r3, [r7, #16]
 8004678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004688:	b29b      	uxth	r3, r3
 800468a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	78db      	ldrb	r3, [r3, #3]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d020      	beq.n	80046d6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046aa:	81bb      	strh	r3, [r7, #12]
 80046ac:	89bb      	ldrh	r3, [r7, #12]
 80046ae:	f083 0320 	eor.w	r3, r3, #32
 80046b2:	81bb      	strh	r3, [r7, #12]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	441a      	add	r2, r3
 80046be:	89bb      	ldrh	r3, [r7, #12]
 80046c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	8013      	strh	r3, [r2, #0]
 80046d4:	e2d5      	b.n	8004c82 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ec:	81fb      	strh	r3, [r7, #14]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	441a      	add	r2, r3
 80046f8:	89fb      	ldrh	r3, [r7, #14]
 80046fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470a:	b29b      	uxth	r3, r3
 800470c:	8013      	strh	r3, [r2, #0]
 800470e:	e2b8      	b.n	8004c82 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	633b      	str	r3, [r7, #48]	; 0x30
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800471a:	b29b      	uxth	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	4413      	add	r3, r2
 8004722:	633b      	str	r3, [r7, #48]	; 0x30
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	011a      	lsls	r2, r3, #4
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	4413      	add	r3, r2
 800472e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	88db      	ldrh	r3, [r3, #6]
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	b29b      	uxth	r3, r3
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	62bb      	str	r3, [r7, #40]	; 0x28
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474e:	b29b      	uxth	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	4413      	add	r3, r2
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	011a      	lsls	r2, r3, #4
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	4413      	add	r3, r2
 8004762:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	b29b      	uxth	r3, r3
 800476e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004772:	b29a      	uxth	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	801a      	strh	r2, [r3, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b3e      	cmp	r3, #62	; 0x3e
 800477e:	d91d      	bls.n	80047bc <USB_ActivateEndpoint+0x2ac>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	66bb      	str	r3, [r7, #104]	; 0x68
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <USB_ActivateEndpoint+0x28a>
 8004794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004796:	3b01      	subs	r3, #1
 8004798:	66bb      	str	r3, [r7, #104]	; 0x68
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29a      	uxth	r2, r3
 80047a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	029b      	lsls	r3, r3, #10
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	4313      	orrs	r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	801a      	strh	r2, [r3, #0]
 80047ba:	e026      	b.n	800480a <USB_ActivateEndpoint+0x2fa>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <USB_ActivateEndpoint+0x2ca>
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	801a      	strh	r2, [r3, #0]
 80047d8:	e017      	b.n	800480a <USB_ActivateEndpoint+0x2fa>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <USB_ActivateEndpoint+0x2e4>
 80047ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047f0:	3301      	adds	r3, #1
 80047f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	029b      	lsls	r3, r3, #10
 8004800:	b29b      	uxth	r3, r3
 8004802:	4313      	orrs	r3, r2
 8004804:	b29a      	uxth	r2, r3
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	847b      	strh	r3, [r7, #34]	; 0x22
 8004818:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800481a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01b      	beq.n	800485a <USB_ActivateEndpoint+0x34a>
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004838:	843b      	strh	r3, [r7, #32]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	441a      	add	r2, r3
 8004844:	8c3b      	ldrh	r3, [r7, #32]
 8004846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004856:	b29b      	uxth	r3, r3
 8004858:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d124      	bne.n	80048ac <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004878:	83bb      	strh	r3, [r7, #28]
 800487a:	8bbb      	ldrh	r3, [r7, #28]
 800487c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004880:	83bb      	strh	r3, [r7, #28]
 8004882:	8bbb      	ldrh	r3, [r7, #28]
 8004884:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004888:	83bb      	strh	r3, [r7, #28]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	8bbb      	ldrh	r3, [r7, #28]
 8004896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]
 80048aa:	e1ea      	b.n	8004c82 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	83fb      	strh	r3, [r7, #30]
 80048c4:	8bfb      	ldrh	r3, [r7, #30]
 80048c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048ca:	83fb      	strh	r3, [r7, #30]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	8bfb      	ldrh	r3, [r7, #30]
 80048d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	8013      	strh	r3, [r2, #0]
 80048ec:	e1c9      	b.n	8004c82 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	78db      	ldrb	r3, [r3, #3]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d11e      	bne.n	8004934 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800491e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004926:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800492a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492e:	b29b      	uxth	r3, r3
 8004930:	8013      	strh	r3, [r2, #0]
 8004932:	e01d      	b.n	8004970 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29b      	uxth	r3, r3
 8004942:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800495c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496c:	b29b      	uxth	r3, r3
 800496e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800497a:	b29b      	uxth	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004980:	4413      	add	r3, r2
 8004982:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	011a      	lsls	r2, r3, #4
 800498a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800498c:	4413      	add	r3, r2
 800498e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004992:	65bb      	str	r3, [r7, #88]	; 0x58
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	891b      	ldrh	r3, [r3, #8]
 8004998:	085b      	lsrs	r3, r3, #1
 800499a:	b29b      	uxth	r3, r3
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049a2:	801a      	strh	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	657b      	str	r3, [r7, #84]	; 0x54
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b4:	4413      	add	r3, r2
 80049b6:	657b      	str	r3, [r7, #84]	; 0x54
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	011a      	lsls	r2, r3, #4
 80049be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	895b      	ldrh	r3, [r3, #10]
 80049cc:	085b      	lsrs	r3, r3, #1
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f040 8093 	bne.w	8004b08 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80049f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01b      	beq.n	8004a36 <USB_ActivateEndpoint+0x526>
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	441a      	add	r2, r3
 8004a20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01b      	beq.n	8004a86 <USB_ActivateEndpoint+0x576>
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a64:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	441a      	add	r2, r3
 8004a70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a9e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004aa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004aa4:	873b      	strh	r3, [r7, #56]	; 0x38
 8004aa6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004aa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004aac:	873b      	strh	r3, [r7, #56]	; 0x38
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	8013      	strh	r3, [r2, #0]
 8004b06:	e0bc      	b.n	8004c82 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01d      	beq.n	8004b60 <USB_ActivateEndpoint+0x650>
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	441a      	add	r2, r3
 8004b48:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01d      	beq.n	8004bb8 <USB_ActivateEndpoint+0x6a8>
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	78db      	ldrb	r3, [r3, #3]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d024      	beq.n	8004c0a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bde:	f083 0320 	eor.w	r3, r3, #32
 8004be2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	441a      	add	r2, r3
 8004bf0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	8013      	strh	r3, [r2, #0]
 8004c08:	e01d      	b.n	8004c46 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c20:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004c82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3774      	adds	r7, #116	; 0x74
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b08d      	sub	sp, #52	; 0x34
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	7b1b      	ldrb	r3, [r3, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 808e 	bne.w	8004dc0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	785b      	ldrb	r3, [r3, #1]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d044      	beq.n	8004d36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	81bb      	strh	r3, [r7, #12]
 8004cba:	89bb      	ldrh	r3, [r7, #12]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01b      	beq.n	8004cfc <USB_DeactivateEndpoint+0x6c>
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	817b      	strh	r3, [r7, #10]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	897b      	ldrh	r3, [r7, #10]
 8004ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d12:	813b      	strh	r3, [r7, #8]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	893b      	ldrh	r3, [r7, #8]
 8004d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	8013      	strh	r3, [r2, #0]
 8004d34:	e192      	b.n	800505c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	827b      	strh	r3, [r7, #18]
 8004d44:	8a7b      	ldrh	r3, [r7, #18]
 8004d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01b      	beq.n	8004d86 <USB_DeactivateEndpoint+0xf6>
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d64:	823b      	strh	r3, [r7, #16]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	441a      	add	r2, r3
 8004d70:	8a3b      	ldrh	r3, [r7, #16]
 8004d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9c:	81fb      	strh	r3, [r7, #14]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	441a      	add	r2, r3
 8004da8:	89fb      	ldrh	r3, [r7, #14]
 8004daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	8013      	strh	r3, [r2, #0]
 8004dbe:	e14d      	b.n	800505c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 80a5 	bne.w	8004f14 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	843b      	strh	r3, [r7, #32]
 8004dd8:	8c3b      	ldrh	r3, [r7, #32]
 8004dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01b      	beq.n	8004e1a <USB_DeactivateEndpoint+0x18a>
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df8:	83fb      	strh	r3, [r7, #30]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	8bfb      	ldrh	r3, [r7, #30]
 8004e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	83bb      	strh	r3, [r7, #28]
 8004e28:	8bbb      	ldrh	r3, [r7, #28]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01b      	beq.n	8004e6a <USB_DeactivateEndpoint+0x1da>
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	837b      	strh	r3, [r7, #26]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	8b7b      	ldrh	r3, [r7, #26]
 8004e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e80:	833b      	strh	r3, [r7, #24]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	8b3b      	ldrh	r3, [r7, #24]
 8004e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	82fb      	strh	r3, [r7, #22]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	8afb      	ldrh	r3, [r7, #22]
 8004ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef0:	82bb      	strh	r3, [r7, #20]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	441a      	add	r2, r3
 8004efc:	8abb      	ldrh	r3, [r7, #20]
 8004efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	8013      	strh	r3, [r2, #0]
 8004f12:	e0a3      	b.n	800505c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01b      	beq.n	8004f64 <USB_DeactivateEndpoint+0x2d4>
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01b      	beq.n	8004fb4 <USB_DeactivateEndpoint+0x324>
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	441a      	add	r2, r3
 8004fd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005002:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	441a      	add	r2, r3
 800500e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005020:	b29b      	uxth	r3, r3
 8005022:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	847b      	strh	r3, [r7, #34]	; 0x22
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	441a      	add	r2, r3
 8005046:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005058:	b29b      	uxth	r3, r3
 800505a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3734      	adds	r7, #52	; 0x34
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b0c2      	sub	sp, #264	; 0x108
 800506c:	af00      	add	r7, sp, #0
 800506e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005076:	6018      	str	r0, [r3, #0]
 8005078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800507c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005080:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	2b01      	cmp	r3, #1
 8005090:	f040 86b7 	bne.w	8005e02 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d908      	bls.n	80050c2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80050b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050c0:	e007      	b.n	80050d2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80050c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80050d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	7b1b      	ldrb	r3, [r3, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d13a      	bne.n	8005158 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6959      	ldr	r1, [r3, #20]
 80050ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	88da      	ldrh	r2, [r3, #6]
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005104:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005108:	6800      	ldr	r0, [r0, #0]
 800510a:	f001 fc9c 	bl	8006a46 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800510e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005112:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005128:	b29b      	uxth	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	011a      	lsls	r2, r3, #4
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4413      	add	r3, r2
 8005144:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	801a      	strh	r2, [r3, #0]
 8005154:	f000 be1f 	b.w	8005d96 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	78db      	ldrb	r3, [r3, #3]
 8005164:	2b02      	cmp	r3, #2
 8005166:	f040 8462 	bne.w	8005a2e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800516a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6a1a      	ldr	r2, [r3, #32]
 8005176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	429a      	cmp	r2, r3
 8005184:	f240 83df 	bls.w	8005946 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80051b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	441a      	add	r2, r3
 80051cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80051e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a1a      	ldr	r2, [r3, #32]
 80051f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051f4:	1ad2      	subs	r2, r2, r3
 80051f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 81c7 	beq.w	80055b8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800522a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	633b      	str	r3, [r7, #48]	; 0x30
 8005236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d177      	bne.n	8005336 <USB_EPStartXfer+0x2ce>
 8005246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	62bb      	str	r3, [r7, #40]	; 0x28
 8005252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005260:	b29b      	uxth	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	4413      	add	r3, r2
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28
 800526a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	011a      	lsls	r2, r3, #4
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	4413      	add	r3, r2
 800527c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800528c:	b29a      	uxth	r2, r3
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	801a      	strh	r2, [r3, #0]
 8005292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005296:	2b3e      	cmp	r3, #62	; 0x3e
 8005298:	d921      	bls.n	80052de <USB_EPStartXfer+0x276>
 800529a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <USB_EPStartXfer+0x252>
 80052b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052b4:	3b01      	subs	r3, #1
 80052b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29a      	uxth	r2, r3
 80052c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	029b      	lsls	r3, r3, #10
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	4313      	orrs	r3, r2
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	e050      	b.n	8005380 <USB_EPStartXfer+0x318>
 80052de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10a      	bne.n	80052fc <USB_EPStartXfer+0x294>
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	801a      	strh	r2, [r3, #0]
 80052fa:	e041      	b.n	8005380 <USB_EPStartXfer+0x318>
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d004      	beq.n	800531c <USB_EPStartXfer+0x2b4>
 8005312:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005316:	3301      	adds	r3, #1
 8005318:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29a      	uxth	r2, r3
 8005322:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005326:	b29b      	uxth	r3, r3
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	b29b      	uxth	r3, r3
 800532c:	4313      	orrs	r3, r2
 800532e:	b29a      	uxth	r2, r3
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	801a      	strh	r2, [r3, #0]
 8005334:	e024      	b.n	8005380 <USB_EPStartXfer+0x318>
 8005336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800533a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d11c      	bne.n	8005380 <USB_EPStartXfer+0x318>
 8005346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005354:	b29b      	uxth	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	4413      	add	r3, r2
 800535c:	633b      	str	r3, [r7, #48]	; 0x30
 800535e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	011a      	lsls	r2, r3, #4
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	4413      	add	r3, r2
 8005370:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800537a:	b29a      	uxth	r2, r3
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	895b      	ldrh	r3, [r3, #10]
 800538c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6959      	ldr	r1, [r3, #20]
 800539c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80053aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80053ae:	6800      	ldr	r0, [r0, #0]
 80053b0:	f001 fb49 	bl	8006a46 <USB_WritePMA>
            ep->xfer_buff += len;
 80053b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695a      	ldr	r2, [r3, #20]
 80053c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c4:	441a      	add	r2, r3
 80053c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d90f      	bls.n	800540e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80053ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6a1a      	ldr	r2, [r3, #32]
 80053fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fe:	1ad2      	subs	r2, r2, r3
 8005400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	621a      	str	r2, [r3, #32]
 800540c:	e00e      	b.n	800542c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800540e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800541e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2200      	movs	r2, #0
 800542a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800542c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d177      	bne.n	800552c <USB_EPStartXfer+0x4c4>
 800543c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005456:	b29b      	uxth	r3, r3
 8005458:	461a      	mov	r2, r3
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	4413      	add	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	011a      	lsls	r2, r3, #4
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	4413      	add	r3, r2
 8005472:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005482:	b29a      	uxth	r2, r3
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800548c:	2b3e      	cmp	r3, #62	; 0x3e
 800548e:	d921      	bls.n	80054d4 <USB_EPStartXfer+0x46c>
 8005490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800549a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d104      	bne.n	80054b0 <USB_EPStartXfer+0x448>
 80054a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054aa:	3b01      	subs	r3, #1
 80054ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	029b      	lsls	r3, r3, #10
 80054be:	b29b      	uxth	r3, r3
 80054c0:	4313      	orrs	r3, r2
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	e056      	b.n	8005582 <USB_EPStartXfer+0x51a>
 80054d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <USB_EPStartXfer+0x48a>
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	801a      	strh	r2, [r3, #0]
 80054f0:	e047      	b.n	8005582 <USB_EPStartXfer+0x51a>
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f6:	085b      	lsrs	r3, r3, #1
 80054f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d004      	beq.n	8005512 <USB_EPStartXfer+0x4aa>
 8005508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800550c:	3301      	adds	r3, #1
 800550e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29a      	uxth	r2, r3
 8005518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800551c:	b29b      	uxth	r3, r3
 800551e:	029b      	lsls	r3, r3, #10
 8005520:	b29b      	uxth	r3, r3
 8005522:	4313      	orrs	r3, r2
 8005524:	b29a      	uxth	r2, r3
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	801a      	strh	r2, [r3, #0]
 800552a:	e02a      	b.n	8005582 <USB_EPStartXfer+0x51a>
 800552c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d122      	bne.n	8005582 <USB_EPStartXfer+0x51a>
 800553c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	623b      	str	r3, [r7, #32]
 8005548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005556:	b29b      	uxth	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	4413      	add	r3, r2
 800555e:	623b      	str	r3, [r7, #32]
 8005560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	011a      	lsls	r2, r3, #4
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	4413      	add	r3, r2
 8005572:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800557c:	b29a      	uxth	r2, r3
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	891b      	ldrh	r3, [r3, #8]
 800558e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6959      	ldr	r1, [r3, #20]
 800559e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055b0:	6800      	ldr	r0, [r0, #0]
 80055b2:	f001 fa48 	bl	8006a46 <USB_WritePMA>
 80055b6:	e3ee      	b.n	8005d96 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	785b      	ldrb	r3, [r3, #1]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d177      	bne.n	80056b8 <USB_EPStartXfer+0x650>
 80055c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e8:	4413      	add	r3, r2
 80055ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	011a      	lsls	r2, r3, #4
 80055fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055fc:	4413      	add	r3, r2
 80055fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005602:	647b      	str	r3, [r7, #68]	; 0x44
 8005604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800560e:	b29a      	uxth	r2, r3
 8005610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005612:	801a      	strh	r2, [r3, #0]
 8005614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005618:	2b3e      	cmp	r3, #62	; 0x3e
 800561a:	d921      	bls.n	8005660 <USB_EPStartXfer+0x5f8>
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	2b00      	cmp	r3, #0
 8005630:	d104      	bne.n	800563c <USB_EPStartXfer+0x5d4>
 8005632:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005636:	3b01      	subs	r3, #1
 8005638:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800563c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29a      	uxth	r2, r3
 8005642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005646:	b29b      	uxth	r3, r3
 8005648:	029b      	lsls	r3, r3, #10
 800564a:	b29b      	uxth	r3, r3
 800564c:	4313      	orrs	r3, r2
 800564e:	b29b      	uxth	r3, r3
 8005650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005658:	b29a      	uxth	r2, r3
 800565a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565c:	801a      	strh	r2, [r3, #0]
 800565e:	e056      	b.n	800570e <USB_EPStartXfer+0x6a6>
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <USB_EPStartXfer+0x616>
 8005668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005676:	b29a      	uxth	r2, r3
 8005678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567a:	801a      	strh	r2, [r3, #0]
 800567c:	e047      	b.n	800570e <USB_EPStartXfer+0x6a6>
 800567e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <USB_EPStartXfer+0x636>
 8005694:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005698:	3301      	adds	r3, #1
 800569a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800569e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	029b      	lsls	r3, r3, #10
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	4313      	orrs	r3, r2
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	e02a      	b.n	800570e <USB_EPStartXfer+0x6a6>
 80056b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d122      	bne.n	800570e <USB_EPStartXfer+0x6a6>
 80056c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	653b      	str	r3, [r7, #80]	; 0x50
 80056d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056e8:	4413      	add	r3, r2
 80056ea:	653b      	str	r3, [r7, #80]	; 0x50
 80056ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	011a      	lsls	r2, r3, #4
 80056fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056fc:	4413      	add	r3, r2
 80056fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005708:	b29a      	uxth	r2, r3
 800570a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800570e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	891b      	ldrh	r3, [r3, #8]
 800571a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800571e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6959      	ldr	r1, [r3, #20]
 800572a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572e:	b29b      	uxth	r3, r3
 8005730:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005734:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005738:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800573c:	6800      	ldr	r0, [r0, #0]
 800573e:	f001 f982 	bl	8006a46 <USB_WritePMA>
            ep->xfer_buff += len;
 8005742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005752:	441a      	add	r2, r3
 8005754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6a1a      	ldr	r2, [r3, #32]
 800576c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	429a      	cmp	r2, r3
 800577a:	d90f      	bls.n	800579c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800577c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6a1a      	ldr	r2, [r3, #32]
 8005788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800578c:	1ad2      	subs	r2, r2, r3
 800578e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	621a      	str	r2, [r3, #32]
 800579a:	e00e      	b.n	80057ba <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800579c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80057ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2200      	movs	r2, #0
 80057b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	643b      	str	r3, [r7, #64]	; 0x40
 80057c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	785b      	ldrb	r3, [r3, #1]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d177      	bne.n	80058c6 <USB_EPStartXfer+0x85e>
 80057d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80057e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	4413      	add	r3, r2
 80057f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80057fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	011a      	lsls	r2, r3, #4
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	4413      	add	r3, r2
 800580c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005810:	637b      	str	r3, [r7, #52]	; 0x34
 8005812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800581c:	b29a      	uxth	r2, r3
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005820:	801a      	strh	r2, [r3, #0]
 8005822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005826:	2b3e      	cmp	r3, #62	; 0x3e
 8005828:	d921      	bls.n	800586e <USB_EPStartXfer+0x806>
 800582a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	2b00      	cmp	r3, #0
 800583e:	d104      	bne.n	800584a <USB_EPStartXfer+0x7e2>
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005844:	3b01      	subs	r3, #1
 8005846:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29a      	uxth	r2, r3
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	b29b      	uxth	r3, r3
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	b29b      	uxth	r3, r3
 800585a:	4313      	orrs	r3, r2
 800585c:	b29b      	uxth	r3, r3
 800585e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005866:	b29a      	uxth	r2, r3
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	e050      	b.n	8005910 <USB_EPStartXfer+0x8a8>
 800586e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <USB_EPStartXfer+0x824>
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005884:	b29a      	uxth	r2, r3
 8005886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005888:	801a      	strh	r2, [r3, #0]
 800588a:	e041      	b.n	8005910 <USB_EPStartXfer+0x8a8>
 800588c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005890:	085b      	lsrs	r3, r3, #1
 8005892:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <USB_EPStartXfer+0x844>
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a6:	3301      	adds	r3, #1
 80058a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	029b      	lsls	r3, r3, #10
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	4313      	orrs	r3, r2
 80058be:	b29a      	uxth	r2, r3
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	e024      	b.n	8005910 <USB_EPStartXfer+0x8a8>
 80058c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d11c      	bne.n	8005910 <USB_EPStartXfer+0x8a8>
 80058d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ea:	4413      	add	r3, r2
 80058ec:	643b      	str	r3, [r7, #64]	; 0x40
 80058ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	011a      	lsls	r2, r3, #4
 80058fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fe:	4413      	add	r3, r2
 8005900:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590a:	b29a      	uxth	r2, r3
 800590c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	895b      	ldrh	r3, [r3, #10]
 800591c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6959      	ldr	r1, [r3, #20]
 800592c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005930:	b29b      	uxth	r3, r3
 8005932:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005936:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800593a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800593e:	6800      	ldr	r0, [r0, #0]
 8005940:	f001 f881 	bl	8006a46 <USB_WritePMA>
 8005944:	e227      	b.n	8005d96 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b29b      	uxth	r3, r3
 8005974:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	441a      	add	r2, r3
 800599a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800599e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059d2:	4413      	add	r3, r2
 80059d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	011a      	lsls	r2, r3, #4
 80059e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e6:	4413      	add	r3, r2
 80059e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80059ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	891b      	ldrh	r3, [r3, #8]
 8005a04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6959      	ldr	r1, [r3, #20]
 8005a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a26:	6800      	ldr	r0, [r0, #0]
 8005a28:	f001 f80d 	bl	8006a46 <USB_WritePMA>
 8005a2c:	e1b3      	b.n	8005d96 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6a1a      	ldr	r2, [r3, #32]
 8005a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 80c6 	beq.w	8005c00 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d177      	bne.n	8005b80 <USB_EPStartXfer+0xb18>
 8005a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	461a      	mov	r2, r3
 8005aae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ab0:	4413      	add	r3, r2
 8005ab2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	011a      	lsls	r2, r3, #4
 8005ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aca:	667b      	str	r3, [r7, #100]	; 0x64
 8005acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ada:	801a      	strh	r2, [r3, #0]
 8005adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ae2:	d921      	bls.n	8005b28 <USB_EPStartXfer+0xac0>
 8005ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d104      	bne.n	8005b04 <USB_EPStartXfer+0xa9c>
 8005afa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005afe:	3b01      	subs	r3, #1
 8005b00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	029b      	lsls	r3, r3, #10
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	4313      	orrs	r3, r2
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	e050      	b.n	8005bca <USB_EPStartXfer+0xb62>
 8005b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <USB_EPStartXfer+0xade>
 8005b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	e041      	b.n	8005bca <USB_EPStartXfer+0xb62>
 8005b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <USB_EPStartXfer+0xafe>
 8005b5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b60:	3301      	adds	r3, #1
 8005b62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	029b      	lsls	r3, r3, #10
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	4313      	orrs	r3, r2
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	e024      	b.n	8005bca <USB_EPStartXfer+0xb62>
 8005b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d11c      	bne.n	8005bca <USB_EPStartXfer+0xb62>
 8005b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ba4:	4413      	add	r3, r2
 8005ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	011a      	lsls	r2, r3, #4
 8005bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bb8:	4413      	add	r3, r2
 8005bba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	895b      	ldrh	r3, [r3, #10]
 8005bd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6959      	ldr	r1, [r3, #20]
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005bf0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005bf4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bf8:	6800      	ldr	r0, [r0, #0]
 8005bfa:	f000 ff24 	bl	8006a46 <USB_WritePMA>
 8005bfe:	e0ca      	b.n	8005d96 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	785b      	ldrb	r3, [r3, #1]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d177      	bne.n	8005d00 <USB_EPStartXfer+0xc98>
 8005c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c30:	4413      	add	r3, r2
 8005c32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	011a      	lsls	r2, r3, #4
 8005c42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c44:	4413      	add	r3, r2
 8005c46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c60:	2b3e      	cmp	r3, #62	; 0x3e
 8005c62:	d921      	bls.n	8005ca8 <USB_EPStartXfer+0xc40>
 8005c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c72:	f003 031f 	and.w	r3, r3, #31
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d104      	bne.n	8005c84 <USB_EPStartXfer+0xc1c>
 8005c7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	029b      	lsls	r3, r3, #10
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	4313      	orrs	r3, r2
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	e05c      	b.n	8005d62 <USB_EPStartXfer+0xcfa>
 8005ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <USB_EPStartXfer+0xc5e>
 8005cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cc2:	801a      	strh	r2, [r3, #0]
 8005cc4:	e04d      	b.n	8005d62 <USB_EPStartXfer+0xcfa>
 8005cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d004      	beq.n	8005ce6 <USB_EPStartXfer+0xc7e>
 8005cdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	029b      	lsls	r3, r3, #10
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	e030      	b.n	8005d62 <USB_EPStartXfer+0xcfa>
 8005d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	785b      	ldrb	r3, [r3, #1]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d128      	bne.n	8005d62 <USB_EPStartXfer+0xcfa>
 8005d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d34:	4413      	add	r3, r2
 8005d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	011a      	lsls	r2, r3, #4
 8005d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	891b      	ldrh	r3, [r3, #8]
 8005d6e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6959      	ldr	r1, [r3, #20]
 8005d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d88:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d8c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d90:	6800      	ldr	r0, [r0, #0]
 8005d92:	f000 fe58 	bl	8006a46 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dbc:	817b      	strh	r3, [r7, #10]
 8005dbe:	897b      	ldrh	r3, [r7, #10]
 8005dc0:	f083 0310 	eor.w	r3, r3, #16
 8005dc4:	817b      	strh	r3, [r7, #10]
 8005dc6:	897b      	ldrh	r3, [r7, #10]
 8005dc8:	f083 0320 	eor.w	r3, r3, #32
 8005dcc:	817b      	strh	r3, [r7, #10]
 8005dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	441a      	add	r2, r3
 8005de8:	897b      	ldrh	r3, [r7, #10]
 8005dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	8013      	strh	r3, [r2, #0]
 8005dfe:	f000 bcde 	b.w	80067be <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	7b1b      	ldrb	r3, [r3, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f040 80bb 	bne.w	8005f8a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699a      	ldr	r2, [r3, #24]
 8005e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d917      	bls.n	8005e60 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699a      	ldr	r2, [r3, #24]
 8005e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e50:	1ad2      	subs	r2, r2, r3
 8005e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	619a      	str	r2, [r3, #24]
 8005e5e:	e00e      	b.n	8005e7e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	011a      	lsls	r2, r3, #4
 8005eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eba:	4413      	add	r3, r2
 8005ebc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ec0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ed6:	801a      	strh	r2, [r3, #0]
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005edc:	2b3e      	cmp	r3, #62	; 0x3e
 8005ede:	d924      	bls.n	8005f2a <USB_EPStartXfer+0xec2>
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eee:	f003 031f 	and.w	r3, r3, #31
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d104      	bne.n	8005f00 <USB_EPStartXfer+0xe98>
 8005ef6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005efa:	3b01      	subs	r3, #1
 8005efc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	029b      	lsls	r3, r3, #10
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	4313      	orrs	r3, r2
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f24:	801a      	strh	r2, [r3, #0]
 8005f26:	f000 bc10 	b.w	800674a <USB_EPStartXfer+0x16e2>
 8005f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10c      	bne.n	8005f4c <USB_EPStartXfer+0xee4>
 8005f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f48:	801a      	strh	r2, [r3, #0]
 8005f4a:	e3fe      	b.n	800674a <USB_EPStartXfer+0x16e2>
 8005f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d004      	beq.n	8005f6c <USB_EPStartXfer+0xf04>
 8005f62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f66:	3301      	adds	r3, #1
 8005f68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	029b      	lsls	r3, r3, #10
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	e3df      	b.n	800674a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	78db      	ldrb	r3, [r3, #3]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	f040 8218 	bne.w	80063cc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f040 809d 	bne.w	80060e8 <USB_EPStartXfer+0x1080>
 8005fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	011a      	lsls	r2, r3, #4
 8005fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fea:	4413      	add	r3, r2
 8005fec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006000:	b29a      	uxth	r2, r3
 8006002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b3e      	cmp	r3, #62	; 0x3e
 8006016:	d92b      	bls.n	8006070 <USB_EPStartXfer+0x1008>
 8006018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	095b      	lsrs	r3, r3, #5
 8006026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800602a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 031f 	and.w	r3, r3, #31
 800603a:	2b00      	cmp	r3, #0
 800603c:	d104      	bne.n	8006048 <USB_EPStartXfer+0xfe0>
 800603e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006042:	3b01      	subs	r3, #1
 8006044:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006048:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29a      	uxth	r2, r3
 8006050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006054:	b29b      	uxth	r3, r3
 8006056:	029b      	lsls	r3, r3, #10
 8006058:	b29b      	uxth	r3, r3
 800605a:	4313      	orrs	r3, r2
 800605c:	b29b      	uxth	r3, r3
 800605e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006066:	b29a      	uxth	r2, r3
 8006068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	e070      	b.n	8006152 <USB_EPStartXfer+0x10ea>
 8006070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10c      	bne.n	800609a <USB_EPStartXfer+0x1032>
 8006080:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006090:	b29a      	uxth	r2, r3
 8006092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	e05b      	b.n	8006152 <USB_EPStartXfer+0x10ea>
 800609a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	085b      	lsrs	r3, r3, #1
 80060a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d004      	beq.n	80060ca <USB_EPStartXfer+0x1062>
 80060c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c4:	3301      	adds	r3, #1
 80060c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	029b      	lsls	r3, r3, #10
 80060da:	b29b      	uxth	r3, r3
 80060dc:	4313      	orrs	r3, r2
 80060de:	b29a      	uxth	r2, r3
 80060e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	e034      	b.n	8006152 <USB_EPStartXfer+0x10ea>
 80060e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d12c      	bne.n	8006152 <USB_EPStartXfer+0x10ea>
 80060f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006114:	b29b      	uxth	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800611c:	4413      	add	r3, r2
 800611e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	011a      	lsls	r2, r3, #4
 8006130:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006134:	4413      	add	r3, r2
 8006136:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800613a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800613e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	b29a      	uxth	r2, r3
 800614c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006150:	801a      	strh	r2, [r3, #0]
 8006152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f040 809d 	bne.w	80062ac <USB_EPStartXfer+0x1244>
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618e:	b29b      	uxth	r3, r3
 8006190:	461a      	mov	r2, r3
 8006192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006196:	4413      	add	r3, r2
 8006198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800619c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	011a      	lsls	r2, r3, #4
 80061aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061ae:	4413      	add	r3, r2
 80061b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061ca:	801a      	strh	r2, [r3, #0]
 80061cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b3e      	cmp	r3, #62	; 0x3e
 80061da:	d92b      	bls.n	8006234 <USB_EPStartXfer+0x11cc>
 80061dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	095b      	lsrs	r3, r3, #5
 80061ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d104      	bne.n	800620c <USB_EPStartXfer+0x11a4>
 8006202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006206:	3b01      	subs	r3, #1
 8006208:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800620c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29a      	uxth	r2, r3
 8006214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006218:	b29b      	uxth	r3, r3
 800621a:	029b      	lsls	r3, r3, #10
 800621c:	b29b      	uxth	r3, r3
 800621e:	4313      	orrs	r3, r2
 8006220:	b29b      	uxth	r3, r3
 8006222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622a:	b29a      	uxth	r2, r3
 800622c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006230:	801a      	strh	r2, [r3, #0]
 8006232:	e069      	b.n	8006308 <USB_EPStartXfer+0x12a0>
 8006234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10c      	bne.n	800625e <USB_EPStartXfer+0x11f6>
 8006244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006254:	b29a      	uxth	r2, r3
 8006256:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	e054      	b.n	8006308 <USB_EPStartXfer+0x12a0>
 800625e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	085b      	lsrs	r3, r3, #1
 800626c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <USB_EPStartXfer+0x1226>
 8006284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006288:	3301      	adds	r3, #1
 800628a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800628e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29a      	uxth	r2, r3
 8006296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800629a:	b29b      	uxth	r3, r3
 800629c:	029b      	lsls	r3, r3, #10
 800629e:	b29b      	uxth	r3, r3
 80062a0:	4313      	orrs	r3, r2
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062a8:	801a      	strh	r2, [r3, #0]
 80062aa:	e02d      	b.n	8006308 <USB_EPStartXfer+0x12a0>
 80062ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d125      	bne.n	8006308 <USB_EPStartXfer+0x12a0>
 80062bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062d2:	4413      	add	r3, r2
 80062d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	011a      	lsls	r2, r3, #4
 80062e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062ea:	4413      	add	r3, r2
 80062ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	b29a      	uxth	r2, r3
 8006302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006306:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8218 	beq.w	800674a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800631a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800633a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800633e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <USB_EPStartXfer+0x12ea>
 8006346:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10d      	bne.n	800636e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006352:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800635a:	2b00      	cmp	r3, #0
 800635c:	f040 81f5 	bne.w	800674a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006360:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	f040 81ee 	bne.w	800674a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006394:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	441a      	add	r2, r3
 80063b2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80063b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	8013      	strh	r3, [r2, #0]
 80063ca:	e1be      	b.n	800674a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	78db      	ldrb	r3, [r3, #3]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	f040 81b4 	bne.w	8006746 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d917      	bls.n	800642a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80063fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800640a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699a      	ldr	r2, [r3, #24]
 8006416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641a:	1ad2      	subs	r2, r2, r3
 800641c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	619a      	str	r2, [r3, #24]
 8006428:	e00e      	b.n	8006448 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800642a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800643a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2200      	movs	r2, #0
 8006446:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	785b      	ldrb	r3, [r3, #1]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f040 8085 	bne.w	8006564 <USB_EPStartXfer+0x14fc>
 800645a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006476:	b29b      	uxth	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800647e:	4413      	add	r3, r2
 8006480:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	011a      	lsls	r2, r3, #4
 8006492:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006496:	4413      	add	r3, r2
 8006498:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800649c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064b2:	801a      	strh	r2, [r3, #0]
 80064b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b8:	2b3e      	cmp	r3, #62	; 0x3e
 80064ba:	d923      	bls.n	8006504 <USB_EPStartXfer+0x149c>
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <USB_EPStartXfer+0x1474>
 80064d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d6:	3b01      	subs	r3, #1
 80064d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	029b      	lsls	r3, r3, #10
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	4313      	orrs	r3, r2
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	e060      	b.n	80065c6 <USB_EPStartXfer+0x155e>
 8006504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10c      	bne.n	8006526 <USB_EPStartXfer+0x14be>
 800650c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651c:	b29a      	uxth	r2, r3
 800651e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006522:	801a      	strh	r2, [r3, #0]
 8006524:	e04f      	b.n	80065c6 <USB_EPStartXfer+0x155e>
 8006526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652a:	085b      	lsrs	r3, r3, #1
 800652c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <USB_EPStartXfer+0x14de>
 800653c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006540:	3301      	adds	r3, #1
 8006542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29a      	uxth	r2, r3
 800654e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006552:	b29b      	uxth	r3, r3
 8006554:	029b      	lsls	r3, r3, #10
 8006556:	b29b      	uxth	r3, r3
 8006558:	4313      	orrs	r3, r2
 800655a:	b29a      	uxth	r2, r3
 800655c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	e030      	b.n	80065c6 <USB_EPStartXfer+0x155e>
 8006564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d128      	bne.n	80065c6 <USB_EPStartXfer+0x155e>
 8006574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006590:	b29b      	uxth	r3, r3
 8006592:	461a      	mov	r2, r3
 8006594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006598:	4413      	add	r3, r2
 800659a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800659e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	011a      	lsls	r2, r3, #4
 80065ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065be:	b29a      	uxth	r2, r3
 80065c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 8085 	bne.w	80066f0 <USB_EPStartXfer+0x1688>
 80065e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006602:	b29b      	uxth	r3, r3
 8006604:	461a      	mov	r2, r3
 8006606:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800660a:	4413      	add	r3, r2
 800660c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	011a      	lsls	r2, r3, #4
 800661e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006622:	4413      	add	r3, r2
 8006624:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006628:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800662c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006638:	b29a      	uxth	r2, r3
 800663a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006644:	2b3e      	cmp	r3, #62	; 0x3e
 8006646:	d923      	bls.n	8006690 <USB_EPStartXfer+0x1628>
 8006648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006656:	f003 031f 	and.w	r3, r3, #31
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <USB_EPStartXfer+0x1600>
 800665e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006662:	3b01      	subs	r3, #1
 8006664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006668:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29a      	uxth	r2, r3
 8006670:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006674:	b29b      	uxth	r3, r3
 8006676:	029b      	lsls	r3, r3, #10
 8006678:	b29b      	uxth	r3, r3
 800667a:	4313      	orrs	r3, r2
 800667c:	b29b      	uxth	r3, r3
 800667e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006686:	b29a      	uxth	r2, r3
 8006688:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800668c:	801a      	strh	r2, [r3, #0]
 800668e:	e05c      	b.n	800674a <USB_EPStartXfer+0x16e2>
 8006690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10c      	bne.n	80066b2 <USB_EPStartXfer+0x164a>
 8006698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ae:	801a      	strh	r2, [r3, #0]
 80066b0:	e04b      	b.n	800674a <USB_EPStartXfer+0x16e2>
 80066b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b6:	085b      	lsrs	r3, r3, #1
 80066b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d004      	beq.n	80066d2 <USB_EPStartXfer+0x166a>
 80066c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066cc:	3301      	adds	r3, #1
 80066ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29a      	uxth	r2, r3
 80066da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066de:	b29b      	uxth	r3, r3
 80066e0:	029b      	lsls	r3, r3, #10
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4313      	orrs	r3, r2
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ec:	801a      	strh	r2, [r3, #0]
 80066ee:	e02c      	b.n	800674a <USB_EPStartXfer+0x16e2>
 80066f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d124      	bne.n	800674a <USB_EPStartXfer+0x16e2>
 8006700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006704:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670e:	b29b      	uxth	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006716:	4413      	add	r3, r2
 8006718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800671c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	011a      	lsls	r2, r3, #4
 800672a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800672e:	4413      	add	r3, r2
 8006730:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006734:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673c:	b29a      	uxth	r2, r3
 800673e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	e001      	b.n	800674a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e03a      	b.n	80067c0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800674a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800676c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006770:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006774:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006778:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800677c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006780:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006784:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006788:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800678c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	441a      	add	r2, r3
 80067a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d020      	beq.n	800681e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f2:	81bb      	strh	r3, [r7, #12]
 80067f4:	89bb      	ldrh	r3, [r7, #12]
 80067f6:	f083 0310 	eor.w	r3, r3, #16
 80067fa:	81bb      	strh	r3, [r7, #12]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	441a      	add	r2, r3
 8006806:	89bb      	ldrh	r3, [r7, #12]
 8006808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800680c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006818:	b29b      	uxth	r3, r3
 800681a:	8013      	strh	r3, [r2, #0]
 800681c:	e01f      	b.n	800685e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006834:	81fb      	strh	r3, [r7, #14]
 8006836:	89fb      	ldrh	r3, [r7, #14]
 8006838:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800683c:	81fb      	strh	r3, [r7, #14]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	441a      	add	r2, r3
 8006848:	89fb      	ldrh	r3, [r7, #14]
 800684a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685a:	b29b      	uxth	r3, r3
 800685c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr

0800686a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800686a:	b480      	push	{r7}
 800686c:	b087      	sub	sp, #28
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	7b1b      	ldrb	r3, [r3, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	f040 809d 	bne.w	80069b8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	785b      	ldrb	r3, [r3, #1]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d04c      	beq.n	8006920 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	823b      	strh	r3, [r7, #16]
 8006894:	8a3b      	ldrh	r3, [r7, #16]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01b      	beq.n	80068d6 <USB_EPClearStall+0x6c>
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b4:	81fb      	strh	r3, [r7, #14]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	441a      	add	r2, r3
 80068c0:	89fb      	ldrh	r3, [r7, #14]
 80068c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	78db      	ldrb	r3, [r3, #3]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d06c      	beq.n	80069b8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f4:	81bb      	strh	r3, [r7, #12]
 80068f6:	89bb      	ldrh	r3, [r7, #12]
 80068f8:	f083 0320 	eor.w	r3, r3, #32
 80068fc:	81bb      	strh	r3, [r7, #12]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	441a      	add	r2, r3
 8006908:	89bb      	ldrh	r3, [r7, #12]
 800690a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691a:	b29b      	uxth	r3, r3
 800691c:	8013      	strh	r3, [r2, #0]
 800691e:	e04b      	b.n	80069b8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	82fb      	strh	r3, [r7, #22]
 800692e:	8afb      	ldrh	r3, [r7, #22]
 8006930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01b      	beq.n	8006970 <USB_EPClearStall+0x106>
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	82bb      	strh	r3, [r7, #20]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	441a      	add	r2, r3
 800695a:	8abb      	ldrh	r3, [r7, #20]
 800695c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696c:	b29b      	uxth	r3, r3
 800696e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006986:	827b      	strh	r3, [r7, #18]
 8006988:	8a7b      	ldrh	r3, [r7, #18]
 800698a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800698e:	827b      	strh	r3, [r7, #18]
 8006990:	8a7b      	ldrh	r3, [r7, #18]
 8006992:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006996:	827b      	strh	r3, [r7, #18]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	441a      	add	r2, r3
 80069a2:	8a7b      	ldrh	r3, [r7, #18]
 80069a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr

080069c4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2280      	movs	r2, #128	; 0x80
 80069da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bc80      	pop	{r7}
 80069e8:	4770      	bx	lr

080069ea <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a24:	68fb      	ldr	r3, [r7, #12]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr

08006a30 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr

08006a46 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b08b      	sub	sp, #44	; 0x2c
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	4611      	mov	r1, r2
 8006a52:	461a      	mov	r2, r3
 8006a54:	460b      	mov	r3, r1
 8006a56:	80fb      	strh	r3, [r7, #6]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a5c:	88bb      	ldrh	r3, [r7, #4]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	005a      	lsls	r2, r3, #1
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a78:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7e:	e01e      	b.n	8006abe <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	b21a      	sxth	r2, r3
 8006a90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	b21b      	sxth	r3, r3
 8006a98:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	8a7a      	ldrh	r2, [r7, #18]
 8006a9e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	3302      	adds	r3, #2
 8006aa4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	3302      	adds	r3, #2
 8006aaa:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	3b01      	subs	r3, #1
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1dd      	bne.n	8006a80 <USB_WritePMA+0x3a>
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	372c      	adds	r7, #44	; 0x2c
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr

08006ad0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b08b      	sub	sp, #44	; 0x2c
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4611      	mov	r1, r2
 8006adc:	461a      	mov	r2, r3
 8006ade:	460b      	mov	r3, r1
 8006ae0:	80fb      	strh	r3, [r7, #6]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006ae6:	88bb      	ldrh	r3, [r7, #4]
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	005a      	lsls	r2, r3, #1
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b02:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24
 8006b08:	e01b      	b.n	8006b42 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	3302      	adds	r3, #2
 8006b16:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	3301      	adds	r3, #1
 8006b24:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	0a1b      	lsrs	r3, r3, #8
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	3301      	adds	r3, #1
 8006b34:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	3302      	adds	r3, #2
 8006b3a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e0      	bne.n	8006b0a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b48:	88bb      	ldrh	r3, [r7, #4]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d007      	beq.n	8006b64 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	701a      	strb	r2, [r3, #0]
  }
}
 8006b64:	bf00      	nop
 8006b66:	372c      	adds	r7, #44	; 0x2c
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bc80      	pop	{r7}
 8006b6c:	4770      	bx	lr

08006b6e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	460b      	mov	r3, r1
 8006b78:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	7c1b      	ldrb	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d115      	bne.n	8006bb2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	2181      	movs	r1, #129	; 0x81
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 fe87 	bl	80088a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f001 fe7d 	bl	80088a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006bb0:	e012      	b.n	8006bd8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bb2:	2340      	movs	r3, #64	; 0x40
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	2181      	movs	r1, #129	; 0x81
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 fe72 	bl	80088a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bc4:	2340      	movs	r3, #64	; 0x40
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	2101      	movs	r1, #1
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 fe69 	bl	80088a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006bd8:	2308      	movs	r3, #8
 8006bda:	2203      	movs	r2, #3
 8006bdc:	2182      	movs	r1, #130	; 0x82
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 fe5f 	bl	80088a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bea:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bee:	f001 ff7f 	bl	8008af0 <USBD_static_malloc>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d102      	bne.n	8006c0a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c04:	2301      	movs	r3, #1
 8006c06:	73fb      	strb	r3, [r7, #15]
 8006c08:	e026      	b.n	8006c58 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c10:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	7c1b      	ldrb	r3, [r3, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d109      	bne.n	8006c48 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c3e:	2101      	movs	r1, #1
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 ff1f 	bl	8008a84 <USBD_LL_PrepareReceive>
 8006c46:	e007      	b.n	8006c58 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c4e:	2340      	movs	r3, #64	; 0x40
 8006c50:	2101      	movs	r1, #1
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 ff16 	bl	8008a84 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c72:	2181      	movs	r1, #129	; 0x81
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fe3a 	bl	80088ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c80:	2101      	movs	r1, #1
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fe33 	bl	80088ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c90:	2182      	movs	r1, #130	; 0x82
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fe2b 	bl	80088ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00e      	beq.n	8006cc6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f001 ff25 	bl	8008b08 <USBD_static_free>
    pdev->pClassData = NULL;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d039      	beq.n	8006d6e <USBD_CDC_Setup+0x9e>
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d17f      	bne.n	8006dfe <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	88db      	ldrh	r3, [r3, #6]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d029      	beq.n	8006d5a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	b25b      	sxtb	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	da11      	bge.n	8006d34 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006d1c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	88d2      	ldrh	r2, [r2, #6]
 8006d22:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d24:	6939      	ldr	r1, [r7, #16]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	88db      	ldrh	r3, [r3, #6]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 fa0a 	bl	8008146 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006d32:	e06b      	b.n	8006e0c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	785a      	ldrb	r2, [r3, #1]
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	88db      	ldrh	r3, [r3, #6]
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d4a:	6939      	ldr	r1, [r7, #16]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	88db      	ldrh	r3, [r3, #6]
 8006d50:	461a      	mov	r2, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fa25 	bl	80081a2 <USBD_CtlPrepareRx>
      break;
 8006d58:	e058      	b.n	8006e0c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	7850      	ldrb	r0, [r2, #1]
 8006d66:	2200      	movs	r2, #0
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	4798      	blx	r3
      break;
 8006d6c:	e04e      	b.n	8006e0c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	785b      	ldrb	r3, [r3, #1]
 8006d72:	2b0b      	cmp	r3, #11
 8006d74:	d02e      	beq.n	8006dd4 <USBD_CDC_Setup+0x104>
 8006d76:	2b0b      	cmp	r3, #11
 8006d78:	dc38      	bgt.n	8006dec <USBD_CDC_Setup+0x11c>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <USBD_CDC_Setup+0xb4>
 8006d7e:	2b0a      	cmp	r3, #10
 8006d80:	d014      	beq.n	8006dac <USBD_CDC_Setup+0xdc>
 8006d82:	e033      	b.n	8006dec <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d107      	bne.n	8006d9e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d8e:	f107 030c 	add.w	r3, r7, #12
 8006d92:	2202      	movs	r2, #2
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 f9d5 	bl	8008146 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d9c:	e02e      	b.n	8006dfc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 f966 	bl	8008072 <USBD_CtlError>
            ret = USBD_FAIL;
 8006da6:	2302      	movs	r3, #2
 8006da8:	75fb      	strb	r3, [r7, #23]
          break;
 8006daa:	e027      	b.n	8006dfc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d107      	bne.n	8006dc6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006db6:	f107 030f 	add.w	r3, r7, #15
 8006dba:	2201      	movs	r2, #1
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 f9c1 	bl	8008146 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dc4:	e01a      	b.n	8006dfc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 f952 	bl	8008072 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dce:	2302      	movs	r3, #2
 8006dd0:	75fb      	strb	r3, [r7, #23]
          break;
 8006dd2:	e013      	b.n	8006dfc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d00d      	beq.n	8006dfa <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 f946 	bl	8008072 <USBD_CtlError>
            ret = USBD_FAIL;
 8006de6:	2302      	movs	r3, #2
 8006de8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006dea:	e006      	b.n	8006dfa <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 f93f 	bl	8008072 <USBD_CtlError>
          ret = USBD_FAIL;
 8006df4:	2302      	movs	r3, #2
 8006df6:	75fb      	strb	r3, [r7, #23]
          break;
 8006df8:	e000      	b.n	8006dfc <USBD_CDC_Setup+0x12c>
          break;
 8006dfa:	bf00      	nop
      }
      break;
 8006dfc:	e006      	b.n	8006e0c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 f936 	bl	8008072 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e06:	2302      	movs	r3, #2
 8006e08:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0a:	bf00      	nop
  }

  return ret;
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e28:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e30:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d03a      	beq.n	8006eb2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	331c      	adds	r3, #28
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d029      	beq.n	8006ea6 <USBD_CDC_DataIn+0x90>
 8006e52:	78fa      	ldrb	r2, [r7, #3]
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	331c      	adds	r3, #28
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	78f9      	ldrb	r1, [r7, #3]
 8006e66:	68b8      	ldr	r0, [r7, #8]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	4403      	add	r3, r0
 8006e72:	3338      	adds	r3, #56	; 0x38
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e7a:	fb01 f303 	mul.w	r3, r1, r3
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d110      	bne.n	8006ea6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006e84:	78fa      	ldrb	r2, [r7, #3]
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	331c      	adds	r3, #28
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e98:	78f9      	ldrb	r1, [r7, #3]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 fdcd 	bl	8008a3e <USBD_LL_Transmit>
 8006ea4:	e003      	b.n	8006eae <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e000      	b.n	8006eb4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006eb2:	2302      	movs	r3, #2
  }
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 fdf8 	bl	8008aca <USBD_LL_GetRxDataSize>
 8006eda:	4602      	mov	r2, r0
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00d      	beq.n	8006f08 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f00:	4611      	mov	r1, r2
 8006f02:	4798      	blx	r3

    return USBD_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	e000      	b.n	8006f0a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f08:	2302      	movs	r3, #2
  }
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f20:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d015      	beq.n	8006f58 <USBD_CDC_EP0_RxReady+0x46>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f32:	2bff      	cmp	r3, #255	; 0xff
 8006f34:	d010      	beq.n	8006f58 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f44:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f4c:	b292      	uxth	r2, r2
 8006f4e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	22ff      	movs	r2, #255	; 0xff
 8006f54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2243      	movs	r2, #67	; 0x43
 8006f70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006f72:	4b03      	ldr	r3, [pc, #12]	; (8006f80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bc80      	pop	{r7}
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000094 	.word	0x20000094

08006f84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2243      	movs	r2, #67	; 0x43
 8006f90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006f92:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20000050 	.word	0x20000050

08006fa4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2243      	movs	r2, #67	; 0x43
 8006fb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006fb2:	4b03      	ldr	r3, [pc, #12]	; (8006fc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bc80      	pop	{r7}
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	200000d8 	.word	0x200000d8

08006fc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	220a      	movs	r2, #10
 8006fd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006fd2:	4b03      	ldr	r3, [pc, #12]	; (8006fe0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	2000000c 	.word	0x2000000c

08006fe4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006fee:	2302      	movs	r3, #2
 8006ff0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	bc80      	pop	{r7}
 800700e:	4770      	bx	lr

08007010 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	4613      	mov	r3, r2
 800701c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007024:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800702e:	88fa      	ldrh	r2, [r7, #6]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr

08007042 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007042:	b480      	push	{r7}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007052:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr

08007068 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007076:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707e:	2b00      	cmp	r3, #0
 8007080:	d01c      	beq.n	80070bc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007088:	2b00      	cmp	r3, #0
 800708a:	d115      	bne.n	80070b8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	2181      	movs	r1, #129	; 0x81
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f001 fcc5 	bl	8008a3e <USBD_LL_Transmit>

      return USBD_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	e002      	b.n	80070be <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e000      	b.n	80070be <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80070bc:	2302      	movs	r3, #2
  }
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d017      	beq.n	8007110 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	7c1b      	ldrb	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070f2:	2101      	movs	r1, #1
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 fcc5 	bl	8008a84 <USBD_LL_PrepareReceive>
 80070fa:	e007      	b.n	800710c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007102:	2340      	movs	r3, #64	; 0x40
 8007104:	2101      	movs	r1, #1
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 fcbc 	bl	8008a84 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	e000      	b.n	8007112 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007110:	2302      	movs	r3, #2
  }
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	4613      	mov	r3, r2
 8007126:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800712e:	2302      	movs	r3, #2
 8007130:	e01a      	b.n	8007168 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	79fa      	ldrb	r2, [r7, #7]
 800715e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f001 fb29 	bl	80087b8 <USBD_LL_Init>

  return USBD_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d006      	beq.n	8007192 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	73fb      	strb	r3, [r7, #15]
 8007190:	e001      	b.n	8007196 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007192:	2302      	movs	r3, #2
 8007194:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	bc80      	pop	{r7}
 80071a0:	4770      	bx	lr

080071a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 fb5e 	bl	800886c <USBD_LL_Start>

  return USBD_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc80      	pop	{r7}
 80071cc:	4770      	bx	lr

080071ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	460b      	mov	r3, r1
 80071d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071da:	2302      	movs	r3, #2
 80071dc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00c      	beq.n	8007202 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	78fa      	ldrb	r2, [r7, #3]
 80071f2:	4611      	mov	r1, r2
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	4798      	blx	r3
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	78fa      	ldrb	r2, [r7, #3]
 8007222:	4611      	mov	r1, r2
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3

  return USBD_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fed8 	bl	8007ffa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007258:	461a      	mov	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007266:	f003 031f 	and.w	r3, r3, #31
 800726a:	2b02      	cmp	r3, #2
 800726c:	d016      	beq.n	800729c <USBD_LL_SetupStage+0x6a>
 800726e:	2b02      	cmp	r3, #2
 8007270:	d81c      	bhi.n	80072ac <USBD_LL_SetupStage+0x7a>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <USBD_LL_SetupStage+0x4a>
 8007276:	2b01      	cmp	r3, #1
 8007278:	d008      	beq.n	800728c <USBD_LL_SetupStage+0x5a>
 800727a:	e017      	b.n	80072ac <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f9cb 	bl	8007620 <USBD_StdDevReq>
      break;
 800728a:	e01a      	b.n	80072c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fa2d 	bl	80076f4 <USBD_StdItfReq>
      break;
 800729a:	e012      	b.n	80072c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fa6d 	bl	8007784 <USBD_StdEPReq>
      break;
 80072aa:	e00a      	b.n	80072c2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 fb36 	bl	800892c <USBD_LL_StallEP>
      break;
 80072c0:	bf00      	nop
  }

  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	460b      	mov	r3, r1
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072da:	7afb      	ldrb	r3, [r7, #11]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d14b      	bne.n	8007378 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072e6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d134      	bne.n	800735c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d919      	bls.n	8007332 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	1ad2      	subs	r2, r2, r3
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007314:	429a      	cmp	r2, r3
 8007316:	d203      	bcs.n	8007320 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800731c:	b29b      	uxth	r3, r3
 800731e:	e002      	b.n	8007326 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007324:	b29b      	uxth	r3, r3
 8007326:	461a      	mov	r2, r3
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 ff57 	bl	80081de <USBD_CtlContinueRx>
 8007330:	e038      	b.n	80073a4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007344:	2b03      	cmp	r3, #3
 8007346:	d105      	bne.n	8007354 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 ff54 	bl	8008202 <USBD_CtlSendStatus>
 800735a:	e023      	b.n	80073a4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007362:	2b05      	cmp	r3, #5
 8007364:	d11e      	bne.n	80073a4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800736e:	2100      	movs	r1, #0
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f001 fadb 	bl	800892c <USBD_LL_StallEP>
 8007376:	e015      	b.n	80073a4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00d      	beq.n	80073a0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800738a:	2b03      	cmp	r3, #3
 800738c:	d108      	bne.n	80073a0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	7afa      	ldrb	r2, [r7, #11]
 8007398:	4611      	mov	r1, r2
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	4798      	blx	r3
 800739e:	e001      	b.n	80073a4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073a0:	2302      	movs	r3, #2
 80073a2:	e000      	b.n	80073a6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b086      	sub	sp, #24
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	460b      	mov	r3, r1
 80073b8:	607a      	str	r2, [r7, #4]
 80073ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073bc:	7afb      	ldrb	r3, [r7, #11]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d17f      	bne.n	80074c2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3314      	adds	r3, #20
 80073c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d15c      	bne.n	800748c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d915      	bls.n	800740a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	1ad2      	subs	r2, r2, r3
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	461a      	mov	r2, r3
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 fec1 	bl	800817e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073fc:	2300      	movs	r3, #0
 80073fe:	2200      	movs	r2, #0
 8007400:	2100      	movs	r1, #0
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f001 fb3e 	bl	8008a84 <USBD_LL_PrepareReceive>
 8007408:	e04e      	b.n	80074a8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	6912      	ldr	r2, [r2, #16]
 8007412:	fbb3 f1f2 	udiv	r1, r3, r2
 8007416:	fb01 f202 	mul.w	r2, r1, r2
 800741a:	1a9b      	subs	r3, r3, r2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d11c      	bne.n	800745a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007428:	429a      	cmp	r2, r3
 800742a:	d316      	bcc.n	800745a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007436:	429a      	cmp	r2, r3
 8007438:	d20f      	bcs.n	800745a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800743a:	2200      	movs	r2, #0
 800743c:	2100      	movs	r1, #0
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 fe9d 	bl	800817e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800744c:	2300      	movs	r3, #0
 800744e:	2200      	movs	r2, #0
 8007450:	2100      	movs	r1, #0
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f001 fb16 	bl	8008a84 <USBD_LL_PrepareReceive>
 8007458:	e026      	b.n	80074a8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800746c:	2b03      	cmp	r3, #3
 800746e:	d105      	bne.n	800747c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800747c:	2180      	movs	r1, #128	; 0x80
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f001 fa54 	bl	800892c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fecf 	bl	8008228 <USBD_CtlReceiveStatus>
 800748a:	e00d      	b.n	80074a8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007492:	2b04      	cmp	r3, #4
 8007494:	d004      	beq.n	80074a0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800749c:	2b00      	cmp	r3, #0
 800749e:	d103      	bne.n	80074a8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80074a0:	2180      	movs	r1, #128	; 0x80
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f001 fa42 	bl	800892c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d11d      	bne.n	80074ee <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff fe81 	bl	80071ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074c0:	e015      	b.n	80074ee <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00d      	beq.n	80074ea <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d108      	bne.n	80074ea <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	7afa      	ldrb	r2, [r7, #11]
 80074e2:	4611      	mov	r1, r2
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	4798      	blx	r3
 80074e8:	e001      	b.n	80074ee <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074ea:	2302      	movs	r3, #2
 80074ec:	e000      	b.n	80074f0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007500:	2340      	movs	r3, #64	; 0x40
 8007502:	2200      	movs	r2, #0
 8007504:	2100      	movs	r1, #0
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 f9cb 	bl	80088a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2240      	movs	r2, #64	; 0x40
 8007518:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800751c:	2340      	movs	r3, #64	; 0x40
 800751e:	2200      	movs	r2, #0
 8007520:	2180      	movs	r1, #128	; 0x80
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 f9bd 	bl	80088a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2240      	movs	r2, #64	; 0x40
 8007532:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6852      	ldr	r2, [r2, #4]
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	4611      	mov	r1, r2
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	4798      	blx	r3
  }

  return USBD_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	78fa      	ldrb	r2, [r7, #3]
 800758a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	bc80      	pop	{r7}
 8007596:	4770      	bx	lr

08007598 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2204      	movs	r2, #4
 80075b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bc80      	pop	{r7}
 80075be:	4770      	bx	lr

080075c0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d105      	bne.n	80075de <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bc80      	pop	{r7}
 80075e8:	4770      	bx	lr

080075ea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d10b      	bne.n	8007614 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007636:	2b40      	cmp	r3, #64	; 0x40
 8007638:	d005      	beq.n	8007646 <USBD_StdDevReq+0x26>
 800763a:	2b40      	cmp	r3, #64	; 0x40
 800763c:	d84f      	bhi.n	80076de <USBD_StdDevReq+0xbe>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d009      	beq.n	8007656 <USBD_StdDevReq+0x36>
 8007642:	2b20      	cmp	r3, #32
 8007644:	d14b      	bne.n	80076de <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	4798      	blx	r3
      break;
 8007654:	e048      	b.n	80076e8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	785b      	ldrb	r3, [r3, #1]
 800765a:	2b09      	cmp	r3, #9
 800765c:	d839      	bhi.n	80076d2 <USBD_StdDevReq+0xb2>
 800765e:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <USBD_StdDevReq+0x44>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	080076b5 	.word	0x080076b5
 8007668:	080076c9 	.word	0x080076c9
 800766c:	080076d3 	.word	0x080076d3
 8007670:	080076bf 	.word	0x080076bf
 8007674:	080076d3 	.word	0x080076d3
 8007678:	08007697 	.word	0x08007697
 800767c:	0800768d 	.word	0x0800768d
 8007680:	080076d3 	.word	0x080076d3
 8007684:	080076ab 	.word	0x080076ab
 8007688:	080076a1 	.word	0x080076a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f9dc 	bl	8007a4c <USBD_GetDescriptor>
          break;
 8007694:	e022      	b.n	80076dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fb3f 	bl	8007d1c <USBD_SetAddress>
          break;
 800769e:	e01d      	b.n	80076dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fb7e 	bl	8007da4 <USBD_SetConfig>
          break;
 80076a8:	e018      	b.n	80076dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fc07 	bl	8007ec0 <USBD_GetConfig>
          break;
 80076b2:	e013      	b.n	80076dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fc37 	bl	8007f2a <USBD_GetStatus>
          break;
 80076bc:	e00e      	b.n	80076dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fc65 	bl	8007f90 <USBD_SetFeature>
          break;
 80076c6:	e009      	b.n	80076dc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fc74 	bl	8007fb8 <USBD_ClrFeature>
          break;
 80076d0:	e004      	b.n	80076dc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fccc 	bl	8008072 <USBD_CtlError>
          break;
 80076da:	bf00      	nop
      }
      break;
 80076dc:	e004      	b.n	80076e8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fcc6 	bl	8008072 <USBD_CtlError>
      break;
 80076e6:	bf00      	nop
  }

  return ret;
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop

080076f4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d005      	beq.n	800771a <USBD_StdItfReq+0x26>
 800770e:	2b40      	cmp	r3, #64	; 0x40
 8007710:	d82e      	bhi.n	8007770 <USBD_StdItfReq+0x7c>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <USBD_StdItfReq+0x26>
 8007716:	2b20      	cmp	r3, #32
 8007718:	d12a      	bne.n	8007770 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007720:	3b01      	subs	r3, #1
 8007722:	2b02      	cmp	r3, #2
 8007724:	d81d      	bhi.n	8007762 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	889b      	ldrh	r3, [r3, #4]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d813      	bhi.n	8007758 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	4798      	blx	r3
 800773e:	4603      	mov	r3, r0
 8007740:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	88db      	ldrh	r3, [r3, #6]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d110      	bne.n	800776c <USBD_StdItfReq+0x78>
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10d      	bne.n	800776c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fd56 	bl	8008202 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007756:	e009      	b.n	800776c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fc89 	bl	8008072 <USBD_CtlError>
          break;
 8007760:	e004      	b.n	800776c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fc84 	bl	8008072 <USBD_CtlError>
          break;
 800776a:	e000      	b.n	800776e <USBD_StdItfReq+0x7a>
          break;
 800776c:	bf00      	nop
      }
      break;
 800776e:	e004      	b.n	800777a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fc7d 	bl	8008072 <USBD_CtlError>
      break;
 8007778:	bf00      	nop
  }

  return USBD_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	889b      	ldrh	r3, [r3, #4]
 8007796:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077a0:	2b40      	cmp	r3, #64	; 0x40
 80077a2:	d007      	beq.n	80077b4 <USBD_StdEPReq+0x30>
 80077a4:	2b40      	cmp	r3, #64	; 0x40
 80077a6:	f200 8146 	bhi.w	8007a36 <USBD_StdEPReq+0x2b2>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <USBD_StdEPReq+0x40>
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	f040 8141 	bne.w	8007a36 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	4798      	blx	r3
      break;
 80077c2:	e13d      	b.n	8007a40 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d10a      	bne.n	80077e6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	4798      	blx	r3
 80077de:	4603      	mov	r3, r0
 80077e0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	e12d      	b.n	8007a42 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d007      	beq.n	80077fe <USBD_StdEPReq+0x7a>
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	f300 811b 	bgt.w	8007a2a <USBD_StdEPReq+0x2a6>
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d072      	beq.n	80078de <USBD_StdEPReq+0x15a>
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d03a      	beq.n	8007872 <USBD_StdEPReq+0xee>
 80077fc:	e115      	b.n	8007a2a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007804:	2b02      	cmp	r3, #2
 8007806:	d002      	beq.n	800780e <USBD_StdEPReq+0x8a>
 8007808:	2b03      	cmp	r3, #3
 800780a:	d015      	beq.n	8007838 <USBD_StdEPReq+0xb4>
 800780c:	e02b      	b.n	8007866 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00c      	beq.n	800782e <USBD_StdEPReq+0xaa>
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	2b80      	cmp	r3, #128	; 0x80
 8007818:	d009      	beq.n	800782e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 f884 	bl	800892c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007824:	2180      	movs	r1, #128	; 0x80
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 f880 	bl	800892c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800782c:	e020      	b.n	8007870 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fc1e 	bl	8008072 <USBD_CtlError>
              break;
 8007836:	e01b      	b.n	8007870 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	885b      	ldrh	r3, [r3, #2]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10e      	bne.n	800785e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <USBD_StdEPReq+0xda>
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b80      	cmp	r3, #128	; 0x80
 800784a:	d008      	beq.n	800785e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	88db      	ldrh	r3, [r3, #6]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d104      	bne.n	800785e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 f867 	bl	800892c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fccf 	bl	8008202 <USBD_CtlSendStatus>

              break;
 8007864:	e004      	b.n	8007870 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fc02 	bl	8008072 <USBD_CtlError>
              break;
 800786e:	bf00      	nop
          }
          break;
 8007870:	e0e0      	b.n	8007a34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007878:	2b02      	cmp	r3, #2
 800787a:	d002      	beq.n	8007882 <USBD_StdEPReq+0xfe>
 800787c:	2b03      	cmp	r3, #3
 800787e:	d015      	beq.n	80078ac <USBD_StdEPReq+0x128>
 8007880:	e026      	b.n	80078d0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00c      	beq.n	80078a2 <USBD_StdEPReq+0x11e>
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b80      	cmp	r3, #128	; 0x80
 800788c:	d009      	beq.n	80078a2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	4619      	mov	r1, r3
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 f84a 	bl	800892c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007898:	2180      	movs	r1, #128	; 0x80
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 f846 	bl	800892c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078a0:	e01c      	b.n	80078dc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fbe4 	bl	8008072 <USBD_CtlError>
              break;
 80078aa:	e017      	b.n	80078dc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	885b      	ldrh	r3, [r3, #2]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d112      	bne.n	80078da <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d004      	beq.n	80078c8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 f851 	bl	800896a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fc9a 	bl	8008202 <USBD_CtlSendStatus>
              }
              break;
 80078ce:	e004      	b.n	80078da <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fbcd 	bl	8008072 <USBD_CtlError>
              break;
 80078d8:	e000      	b.n	80078dc <USBD_StdEPReq+0x158>
              break;
 80078da:	bf00      	nop
          }
          break;
 80078dc:	e0aa      	b.n	8007a34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d002      	beq.n	80078ee <USBD_StdEPReq+0x16a>
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d032      	beq.n	8007952 <USBD_StdEPReq+0x1ce>
 80078ec:	e097      	b.n	8007a1e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d007      	beq.n	8007904 <USBD_StdEPReq+0x180>
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b80      	cmp	r3, #128	; 0x80
 80078f8:	d004      	beq.n	8007904 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fbb8 	bl	8008072 <USBD_CtlError>
                break;
 8007902:	e091      	b.n	8007a28 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007908:	2b00      	cmp	r3, #0
 800790a:	da0b      	bge.n	8007924 <USBD_StdEPReq+0x1a0>
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	3310      	adds	r3, #16
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	3304      	adds	r3, #4
 8007922:	e00b      	b.n	800793c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	4413      	add	r3, r2
 800793a:	3304      	adds	r3, #4
 800793c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2202      	movs	r2, #2
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fbfb 	bl	8008146 <USBD_CtlSendData>
              break;
 8007950:	e06a      	b.n	8007a28 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007952:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007956:	2b00      	cmp	r3, #0
 8007958:	da11      	bge.n	800797e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	f003 020f 	and.w	r2, r3, #15
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	3318      	adds	r3, #24
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d117      	bne.n	80079a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fb7b 	bl	8008072 <USBD_CtlError>
                  break;
 800797c:	e054      	b.n	8007a28 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	f003 020f 	and.w	r2, r3, #15
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d104      	bne.n	80079a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb68 	bl	8008072 <USBD_CtlError>
                  break;
 80079a2:	e041      	b.n	8007a28 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	da0b      	bge.n	80079c4 <USBD_StdEPReq+0x240>
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	3310      	adds	r3, #16
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	3304      	adds	r3, #4
 80079c2:	e00b      	b.n	80079dc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4413      	add	r3, r2
 80079da:	3304      	adds	r3, #4
 80079dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <USBD_StdEPReq+0x266>
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b80      	cmp	r3, #128	; 0x80
 80079e8:	d103      	bne.n	80079f2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	e00e      	b.n	8007a10 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 ffd6 	bl	80089a8 <USBD_LL_IsStallEP>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2201      	movs	r2, #1
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	e002      	b.n	8007a10 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2202      	movs	r2, #2
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fb95 	bl	8008146 <USBD_CtlSendData>
              break;
 8007a1c:	e004      	b.n	8007a28 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fb26 	bl	8008072 <USBD_CtlError>
              break;
 8007a26:	bf00      	nop
          }
          break;
 8007a28:	e004      	b.n	8007a34 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fb20 	bl	8008072 <USBD_CtlError>
          break;
 8007a32:	bf00      	nop
      }
      break;
 8007a34:	e004      	b.n	8007a40 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fb1a 	bl	8008072 <USBD_CtlError>
      break;
 8007a3e:	bf00      	nop
  }

  return ret;
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	0a1b      	lsrs	r3, r3, #8
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	2b06      	cmp	r3, #6
 8007a6e:	f200 8128 	bhi.w	8007cc2 <USBD_GetDescriptor+0x276>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <USBD_GetDescriptor+0x2c>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a95 	.word	0x08007a95
 8007a7c:	08007aad 	.word	0x08007aad
 8007a80:	08007aed 	.word	0x08007aed
 8007a84:	08007cc3 	.word	0x08007cc3
 8007a88:	08007cc3 	.word	0x08007cc3
 8007a8c:	08007c63 	.word	0x08007c63
 8007a90:	08007c8f 	.word	0x08007c8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	7c12      	ldrb	r2, [r2, #16]
 8007aa0:	f107 0108 	add.w	r1, r7, #8
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4798      	blx	r3
 8007aa8:	60f8      	str	r0, [r7, #12]
      break;
 8007aaa:	e112      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	7c1b      	ldrb	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10d      	bne.n	8007ad0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abc:	f107 0208 	add.w	r2, r7, #8
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4798      	blx	r3
 8007ac4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	2202      	movs	r2, #2
 8007acc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ace:	e100      	b.n	8007cd2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	f107 0208 	add.w	r2, r7, #8
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	701a      	strb	r2, [r3, #0]
      break;
 8007aea:	e0f2      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	885b      	ldrh	r3, [r3, #2]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b05      	cmp	r3, #5
 8007af4:	f200 80ac 	bhi.w	8007c50 <USBD_GetDescriptor+0x204>
 8007af8:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <USBD_GetDescriptor+0xb4>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007b19 	.word	0x08007b19
 8007b04:	08007b4d 	.word	0x08007b4d
 8007b08:	08007b81 	.word	0x08007b81
 8007b0c:	08007bb5 	.word	0x08007bb5
 8007b10:	08007be9 	.word	0x08007be9
 8007b14:	08007c1d 	.word	0x08007c1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00b      	beq.n	8007b3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	7c12      	ldrb	r2, [r2, #16]
 8007b30:	f107 0108 	add.w	r1, r7, #8
 8007b34:	4610      	mov	r0, r2
 8007b36:	4798      	blx	r3
 8007b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b3a:	e091      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fa97 	bl	8008072 <USBD_CtlError>
            err++;
 8007b44:	7afb      	ldrb	r3, [r7, #11]
 8007b46:	3301      	adds	r3, #1
 8007b48:	72fb      	strb	r3, [r7, #11]
          break;
 8007b4a:	e089      	b.n	8007c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	7c12      	ldrb	r2, [r2, #16]
 8007b64:	f107 0108 	add.w	r1, r7, #8
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
 8007b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b6e:	e077      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa7d 	bl	8008072 <USBD_CtlError>
            err++;
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b7e:	e06f      	b.n	8007c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	7c12      	ldrb	r2, [r2, #16]
 8007b98:	f107 0108 	add.w	r1, r7, #8
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ba2:	e05d      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa63 	bl	8008072 <USBD_CtlError>
            err++;
 8007bac:	7afb      	ldrb	r3, [r7, #11]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bb2:	e055      	b.n	8007c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	7c12      	ldrb	r2, [r2, #16]
 8007bcc:	f107 0108 	add.w	r1, r7, #8
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4798      	blx	r3
 8007bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bd6:	e043      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa49 	bl	8008072 <USBD_CtlError>
            err++;
 8007be0:	7afb      	ldrb	r3, [r7, #11]
 8007be2:	3301      	adds	r3, #1
 8007be4:	72fb      	strb	r3, [r7, #11]
          break;
 8007be6:	e03b      	b.n	8007c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	7c12      	ldrb	r2, [r2, #16]
 8007c00:	f107 0108 	add.w	r1, r7, #8
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
 8007c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c0a:	e029      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa2f 	bl	8008072 <USBD_CtlError>
            err++;
 8007c14:	7afb      	ldrb	r3, [r7, #11]
 8007c16:	3301      	adds	r3, #1
 8007c18:	72fb      	strb	r3, [r7, #11]
          break;
 8007c1a:	e021      	b.n	8007c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7c12      	ldrb	r2, [r2, #16]
 8007c34:	f107 0108 	add.w	r1, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3e:	e00f      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa15 	bl	8008072 <USBD_CtlError>
            err++;
 8007c48:	7afb      	ldrb	r3, [r7, #11]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c4e:	e007      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa0d 	bl	8008072 <USBD_CtlError>
          err++;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c5e:	e038      	b.n	8007cd2 <USBD_GetDescriptor+0x286>
 8007c60:	e037      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	7c1b      	ldrb	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c72:	f107 0208 	add.w	r2, r7, #8
 8007c76:	4610      	mov	r0, r2
 8007c78:	4798      	blx	r3
 8007c7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c7c:	e029      	b.n	8007cd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f9f6 	bl	8008072 <USBD_CtlError>
        err++;
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c8c:	e021      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	7c1b      	ldrb	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10d      	bne.n	8007cb2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	f107 0208 	add.w	r2, r7, #8
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	4798      	blx	r3
 8007ca6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3301      	adds	r3, #1
 8007cac:	2207      	movs	r2, #7
 8007cae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cb0:	e00f      	b.n	8007cd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f9dc 	bl	8008072 <USBD_CtlError>
        err++;
 8007cba:	7afb      	ldrb	r3, [r7, #11]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	72fb      	strb	r3, [r7, #11]
      break;
 8007cc0:	e007      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f9d4 	bl	8008072 <USBD_CtlError>
      err++;
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	72fb      	strb	r3, [r7, #11]
      break;
 8007cd0:	bf00      	nop
  }

  if (err != 0U)
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d11c      	bne.n	8007d12 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007cd8:	893b      	ldrh	r3, [r7, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d011      	beq.n	8007d02 <USBD_GetDescriptor+0x2b6>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	88db      	ldrh	r3, [r3, #6]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00d      	beq.n	8007d02 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	88da      	ldrh	r2, [r3, #6]
 8007cea:	893b      	ldrh	r3, [r7, #8]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	bf28      	it	cs
 8007cf0:	4613      	movcs	r3, r2
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cf6:	893b      	ldrh	r3, [r7, #8]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	68f9      	ldr	r1, [r7, #12]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa22 	bl	8008146 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	88db      	ldrh	r3, [r3, #6]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d104      	bne.n	8007d14 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa79 	bl	8008202 <USBD_CtlSendStatus>
 8007d10:	e000      	b.n	8007d14 <USBD_GetDescriptor+0x2c8>
    return;
 8007d12:	bf00      	nop
    }
  }
}
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop

08007d1c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	889b      	ldrh	r3, [r3, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d130      	bne.n	8007d90 <USBD_SetAddress+0x74>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	88db      	ldrh	r3, [r3, #6]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d12c      	bne.n	8007d90 <USBD_SetAddress+0x74>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	885b      	ldrh	r3, [r3, #2]
 8007d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d3c:	d828      	bhi.n	8007d90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	885b      	ldrh	r3, [r3, #2]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d104      	bne.n	8007d5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f98b 	bl	8008072 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5c:	e01d      	b.n	8007d9a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	7bfa      	ldrb	r2, [r7, #15]
 8007d62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fe48 	bl	8008a00 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fa46 	bl	8008202 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d84:	e009      	b.n	8007d9a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8e:	e004      	b.n	8007d9a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f96d 	bl	8008072 <USBD_CtlError>
  }
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	885b      	ldrh	r3, [r3, #2]
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	4b41      	ldr	r3, [pc, #260]	; (8007ebc <USBD_SetConfig+0x118>)
 8007db6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007db8:	4b40      	ldr	r3, [pc, #256]	; (8007ebc <USBD_SetConfig+0x118>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d904      	bls.n	8007dca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f955 	bl	8008072 <USBD_CtlError>
 8007dc8:	e075      	b.n	8007eb6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d002      	beq.n	8007dda <USBD_SetConfig+0x36>
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d023      	beq.n	8007e20 <USBD_SetConfig+0x7c>
 8007dd8:	e062      	b.n	8007ea0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007dda:	4b38      	ldr	r3, [pc, #224]	; (8007ebc <USBD_SetConfig+0x118>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01a      	beq.n	8007e18 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007de2:	4b36      	ldr	r3, [pc, #216]	; (8007ebc <USBD_SetConfig+0x118>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2203      	movs	r2, #3
 8007df0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007df4:	4b31      	ldr	r3, [pc, #196]	; (8007ebc <USBD_SetConfig+0x118>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff f9e7 	bl	80071ce <USBD_SetClassConfig>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d104      	bne.n	8007e10 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f932 	bl	8008072 <USBD_CtlError>
            return;
 8007e0e:	e052      	b.n	8007eb6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f9f6 	bl	8008202 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e16:	e04e      	b.n	8007eb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f9f2 	bl	8008202 <USBD_CtlSendStatus>
        break;
 8007e1e:	e04a      	b.n	8007eb6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007e20:	4b26      	ldr	r3, [pc, #152]	; (8007ebc <USBD_SetConfig+0x118>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d112      	bne.n	8007e4e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007e30:	4b22      	ldr	r3, [pc, #136]	; (8007ebc <USBD_SetConfig+0x118>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007e3a:	4b20      	ldr	r3, [pc, #128]	; (8007ebc <USBD_SetConfig+0x118>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff f9e3 	bl	800720c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f9db 	bl	8008202 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e4c:	e033      	b.n	8007eb6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e4e:	4b1b      	ldr	r3, [pc, #108]	; (8007ebc <USBD_SetConfig+0x118>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d01d      	beq.n	8007e98 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff f9d1 	bl	800720c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e6a:	4b14      	ldr	r3, [pc, #80]	; (8007ebc <USBD_SetConfig+0x118>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e74:	4b11      	ldr	r3, [pc, #68]	; (8007ebc <USBD_SetConfig+0x118>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff f9a7 	bl	80071ce <USBD_SetClassConfig>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d104      	bne.n	8007e90 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f8f2 	bl	8008072 <USBD_CtlError>
            return;
 8007e8e:	e012      	b.n	8007eb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f9b6 	bl	8008202 <USBD_CtlSendStatus>
        break;
 8007e96:	e00e      	b.n	8007eb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f9b2 	bl	8008202 <USBD_CtlSendStatus>
        break;
 8007e9e:	e00a      	b.n	8007eb6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f8e5 	bl	8008072 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ea8:	4b04      	ldr	r3, [pc, #16]	; (8007ebc <USBD_SetConfig+0x118>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff f9ac 	bl	800720c <USBD_ClrClassConfig>
        break;
 8007eb4:	bf00      	nop
    }
  }
}
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	2000027c 	.word	0x2000027c

08007ec0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	88db      	ldrh	r3, [r3, #6]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d004      	beq.n	8007edc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f8cc 	bl	8008072 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007eda:	e022      	b.n	8007f22 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	dc02      	bgt.n	8007eec <USBD_GetConfig+0x2c>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dc03      	bgt.n	8007ef2 <USBD_GetConfig+0x32>
 8007eea:	e015      	b.n	8007f18 <USBD_GetConfig+0x58>
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d00b      	beq.n	8007f08 <USBD_GetConfig+0x48>
 8007ef0:	e012      	b.n	8007f18 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3308      	adds	r3, #8
 8007efc:	2201      	movs	r2, #1
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f920 	bl	8008146 <USBD_CtlSendData>
        break;
 8007f06:	e00c      	b.n	8007f22 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f918 	bl	8008146 <USBD_CtlSendData>
        break;
 8007f16:	e004      	b.n	8007f22 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f8a9 	bl	8008072 <USBD_CtlError>
        break;
 8007f20:	bf00      	nop
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d81e      	bhi.n	8007f7e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	88db      	ldrh	r3, [r3, #6]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d004      	beq.n	8007f52 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f891 	bl	8008072 <USBD_CtlError>
        break;
 8007f50:	e01a      	b.n	8007f88 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d005      	beq.n	8007f6e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f043 0202 	orr.w	r2, r3, #2
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	330c      	adds	r3, #12
 8007f72:	2202      	movs	r2, #2
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f8e5 	bl	8008146 <USBD_CtlSendData>
      break;
 8007f7c:	e004      	b.n	8007f88 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f876 	bl	8008072 <USBD_CtlError>
      break;
 8007f86:	bf00      	nop
  }
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	885b      	ldrh	r3, [r3, #2]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d106      	bne.n	8007fb0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f929 	bl	8008202 <USBD_CtlSendStatus>
  }
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d80b      	bhi.n	8007fe6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d10c      	bne.n	8007ff0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f90f 	bl	8008202 <USBD_CtlSendStatus>
      }
      break;
 8007fe4:	e004      	b.n	8007ff0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f842 	bl	8008072 <USBD_CtlError>
      break;
 8007fee:	e000      	b.n	8007ff2 <USBD_ClrFeature+0x3a>
      break;
 8007ff0:	bf00      	nop
  }
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781a      	ldrb	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	785a      	ldrb	r2, [r3, #1]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	3302      	adds	r3, #2
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	b29a      	uxth	r2, r3
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	3303      	adds	r3, #3
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	021b      	lsls	r3, r3, #8
 8008026:	b29b      	uxth	r3, r3
 8008028:	4413      	add	r3, r2
 800802a:	b29a      	uxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	3304      	adds	r3, #4
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	b29a      	uxth	r2, r3
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	3305      	adds	r3, #5
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b29b      	uxth	r3, r3
 8008040:	021b      	lsls	r3, r3, #8
 8008042:	b29b      	uxth	r3, r3
 8008044:	4413      	add	r3, r2
 8008046:	b29a      	uxth	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	3306      	adds	r3, #6
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	b29a      	uxth	r2, r3
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	3307      	adds	r3, #7
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	b29b      	uxth	r3, r3
 8008060:	4413      	add	r3, r2
 8008062:	b29a      	uxth	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	80da      	strh	r2, [r3, #6]

}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	bc80      	pop	{r7}
 8008070:	4770      	bx	lr

08008072 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800807c:	2180      	movs	r1, #128	; 0x80
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fc54 	bl	800892c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008084:	2100      	movs	r1, #0
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fc50 	bl	800892c <USBD_LL_StallEP>
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d032      	beq.n	8008110 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f834 	bl	8008118 <USBD_GetLen>
 80080b0:	4603      	mov	r3, r0
 80080b2:	3301      	adds	r3, #1
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	75fa      	strb	r2, [r7, #23]
 80080c4:	461a      	mov	r2, r3
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4413      	add	r3, r2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	7812      	ldrb	r2, [r2, #0]
 80080ce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	75fa      	strb	r2, [r7, #23]
 80080d6:	461a      	mov	r2, r3
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	4413      	add	r3, r2
 80080dc:	2203      	movs	r2, #3
 80080de:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80080e0:	e012      	b.n	8008108 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	60fa      	str	r2, [r7, #12]
 80080e8:	7dfa      	ldrb	r2, [r7, #23]
 80080ea:	1c51      	adds	r1, r2, #1
 80080ec:	75f9      	strb	r1, [r7, #23]
 80080ee:	4611      	mov	r1, r2
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	440a      	add	r2, r1
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	75fa      	strb	r2, [r7, #23]
 80080fe:	461a      	mov	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4413      	add	r3, r2
 8008104:	2200      	movs	r2, #0
 8008106:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e8      	bne.n	80080e2 <USBD_GetString+0x4e>
    }
  }
}
 8008110:	bf00      	nop
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008124:	e005      	b.n	8008132 <USBD_GetLen+0x1a>
  {
    len++;
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	3301      	adds	r3, #1
 800812a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3301      	adds	r3, #1
 8008130:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1f5      	bne.n	8008126 <USBD_GetLen+0xe>
  }

  return len;
 800813a:	7bfb      	ldrb	r3, [r7, #15]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	bc80      	pop	{r7}
 8008144:	4770      	bx	lr

08008146 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	4613      	mov	r3, r2
 8008152:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2202      	movs	r2, #2
 8008158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800815c:	88fa      	ldrh	r2, [r7, #6]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008162:	88fa      	ldrh	r2, [r7, #6]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008168:	88fb      	ldrh	r3, [r7, #6]
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	2100      	movs	r1, #0
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 fc65 	bl	8008a3e <USBD_LL_Transmit>

  return USBD_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	4613      	mov	r3, r2
 800818a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	2100      	movs	r1, #0
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 fc53 	bl	8008a3e <USBD_LL_Transmit>

  return USBD_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	4613      	mov	r3, r2
 80081ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2203      	movs	r2, #3
 80081b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80081b8:	88fa      	ldrh	r2, [r7, #6]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80081c0:	88fa      	ldrh	r2, [r7, #6]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081c8:	88fb      	ldrh	r3, [r7, #6]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	2100      	movs	r1, #0
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 fc58 	bl	8008a84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	4613      	mov	r3, r2
 80081ea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081ec:	88fb      	ldrh	r3, [r7, #6]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	2100      	movs	r1, #0
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 fc46 	bl	8008a84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b082      	sub	sp, #8
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2204      	movs	r2, #4
 800820e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008212:	2300      	movs	r3, #0
 8008214:	2200      	movs	r2, #0
 8008216:	2100      	movs	r1, #0
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fc10 	bl	8008a3e <USBD_LL_Transmit>

  return USBD_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2205      	movs	r2, #5
 8008234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008238:	2300      	movs	r3, #0
 800823a:	2200      	movs	r2, #0
 800823c:	2100      	movs	r1, #0
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fc20 	bl	8008a84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008254:	2200      	movs	r2, #0
 8008256:	4912      	ldr	r1, [pc, #72]	; (80082a0 <MX_USB_DEVICE_Init+0x50>)
 8008258:	4812      	ldr	r0, [pc, #72]	; (80082a4 <MX_USB_DEVICE_Init+0x54>)
 800825a:	f7fe ff5e 	bl	800711a <USBD_Init>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008264:	f7f8 fa76 	bl	8000754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008268:	490f      	ldr	r1, [pc, #60]	; (80082a8 <MX_USB_DEVICE_Init+0x58>)
 800826a:	480e      	ldr	r0, [pc, #56]	; (80082a4 <MX_USB_DEVICE_Init+0x54>)
 800826c:	f7fe ff80 	bl	8007170 <USBD_RegisterClass>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008276:	f7f8 fa6d 	bl	8000754 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800827a:	490c      	ldr	r1, [pc, #48]	; (80082ac <MX_USB_DEVICE_Init+0x5c>)
 800827c:	4809      	ldr	r0, [pc, #36]	; (80082a4 <MX_USB_DEVICE_Init+0x54>)
 800827e:	f7fe feb1 	bl	8006fe4 <USBD_CDC_RegisterInterface>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008288:	f7f8 fa64 	bl	8000754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800828c:	4805      	ldr	r0, [pc, #20]	; (80082a4 <MX_USB_DEVICE_Init+0x54>)
 800828e:	f7fe ff88 	bl	80071a2 <USBD_Start>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008298:	f7f8 fa5c 	bl	8000754 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800829c:	bf00      	nop
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	2000012c 	.word	0x2000012c
 80082a4:	20000280 	.word	0x20000280
 80082a8:	20000018 	.word	0x20000018
 80082ac:	2000011c 	.word	0x2000011c

080082b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082b4:	2200      	movs	r2, #0
 80082b6:	4905      	ldr	r1, [pc, #20]	; (80082cc <CDC_Init_FS+0x1c>)
 80082b8:	4805      	ldr	r0, [pc, #20]	; (80082d0 <CDC_Init_FS+0x20>)
 80082ba:	f7fe fea9 	bl	8007010 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082be:	4905      	ldr	r1, [pc, #20]	; (80082d4 <CDC_Init_FS+0x24>)
 80082c0:	4803      	ldr	r0, [pc, #12]	; (80082d0 <CDC_Init_FS+0x20>)
 80082c2:	f7fe febe 	bl	8007042 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80082c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	2000092c 	.word	0x2000092c
 80082d0:	20000280 	.word	0x20000280
 80082d4:	20000544 	.word	0x20000544

080082d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082de:	4618      	mov	r0, r3
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bc80      	pop	{r7}
 80082e4:	4770      	bx	lr
	...

080082e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
 80082f4:	4613      	mov	r3, r2
 80082f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80082f8:	79fb      	ldrb	r3, [r7, #7]
 80082fa:	2b23      	cmp	r3, #35	; 0x23
 80082fc:	d84a      	bhi.n	8008394 <CDC_Control_FS+0xac>
 80082fe:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <CDC_Control_FS+0x1c>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008395 	.word	0x08008395
 8008308:	08008395 	.word	0x08008395
 800830c:	08008395 	.word	0x08008395
 8008310:	08008395 	.word	0x08008395
 8008314:	08008395 	.word	0x08008395
 8008318:	08008395 	.word	0x08008395
 800831c:	08008395 	.word	0x08008395
 8008320:	08008395 	.word	0x08008395
 8008324:	08008395 	.word	0x08008395
 8008328:	08008395 	.word	0x08008395
 800832c:	08008395 	.word	0x08008395
 8008330:	08008395 	.word	0x08008395
 8008334:	08008395 	.word	0x08008395
 8008338:	08008395 	.word	0x08008395
 800833c:	08008395 	.word	0x08008395
 8008340:	08008395 	.word	0x08008395
 8008344:	08008395 	.word	0x08008395
 8008348:	08008395 	.word	0x08008395
 800834c:	08008395 	.word	0x08008395
 8008350:	08008395 	.word	0x08008395
 8008354:	08008395 	.word	0x08008395
 8008358:	08008395 	.word	0x08008395
 800835c:	08008395 	.word	0x08008395
 8008360:	08008395 	.word	0x08008395
 8008364:	08008395 	.word	0x08008395
 8008368:	08008395 	.word	0x08008395
 800836c:	08008395 	.word	0x08008395
 8008370:	08008395 	.word	0x08008395
 8008374:	08008395 	.word	0x08008395
 8008378:	08008395 	.word	0x08008395
 800837c:	08008395 	.word	0x08008395
 8008380:	08008395 	.word	0x08008395
 8008384:	08008395 	.word	0x08008395
 8008388:	08008395 	.word	0x08008395
 800838c:	08008395 	.word	0x08008395
 8008390:	08008395 	.word	0x08008395
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008394:	bf00      	nop
  }

  return (USBD_OK);
 8008396:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	bc80      	pop	{r7}
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop

080083a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	4805      	ldr	r0, [pc, #20]	; (80083c8 <CDC_Receive_FS+0x24>)
 80083b2:	f7fe fe46 	bl	8007042 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083b6:	4804      	ldr	r0, [pc, #16]	; (80083c8 <CDC_Receive_FS+0x24>)
 80083b8:	f7fe fe85 	bl	80070c6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80083bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20000280 	.word	0x20000280

080083cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80083dc:	4b0d      	ldr	r3, [pc, #52]	; (8008414 <CDC_Transmit_FS+0x48>)
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e00b      	b.n	800840a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80083f2:	887b      	ldrh	r3, [r7, #2]
 80083f4:	461a      	mov	r2, r3
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4806      	ldr	r0, [pc, #24]	; (8008414 <CDC_Transmit_FS+0x48>)
 80083fa:	f7fe fe09 	bl	8007010 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80083fe:	4805      	ldr	r0, [pc, #20]	; (8008414 <CDC_Transmit_FS+0x48>)
 8008400:	f7fe fe32 	bl	8007068 <USBD_CDC_TransmitPacket>
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008408:	7bfb      	ldrb	r3, [r7, #15]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	20000280 	.word	0x20000280

08008418 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	6039      	str	r1, [r7, #0]
 8008422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2212      	movs	r2, #18
 8008428:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800842a:	4b03      	ldr	r3, [pc, #12]	; (8008438 <USBD_FS_DeviceDescriptor+0x20>)
}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	bc80      	pop	{r7}
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	20000148 	.word	0x20000148

0800843c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2204      	movs	r2, #4
 800844c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800844e:	4b03      	ldr	r3, [pc, #12]	; (800845c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	bc80      	pop	{r7}
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	2000015c 	.word	0x2000015c

08008460 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d105      	bne.n	800847e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	4907      	ldr	r1, [pc, #28]	; (8008494 <USBD_FS_ProductStrDescriptor+0x34>)
 8008476:	4808      	ldr	r0, [pc, #32]	; (8008498 <USBD_FS_ProductStrDescriptor+0x38>)
 8008478:	f7ff fe0c 	bl	8008094 <USBD_GetString>
 800847c:	e004      	b.n	8008488 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	4904      	ldr	r1, [pc, #16]	; (8008494 <USBD_FS_ProductStrDescriptor+0x34>)
 8008482:	4805      	ldr	r0, [pc, #20]	; (8008498 <USBD_FS_ProductStrDescriptor+0x38>)
 8008484:	f7ff fe06 	bl	8008094 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008488:	4b02      	ldr	r3, [pc, #8]	; (8008494 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000d14 	.word	0x20000d14
 8008498:	08009f90 	.word	0x08009f90

0800849c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	6039      	str	r1, [r7, #0]
 80084a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	4904      	ldr	r1, [pc, #16]	; (80084bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084ac:	4804      	ldr	r0, [pc, #16]	; (80084c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084ae:	f7ff fdf1 	bl	8008094 <USBD_GetString>
  return USBD_StrDesc;
 80084b2:	4b02      	ldr	r3, [pc, #8]	; (80084bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	20000d14 	.word	0x20000d14
 80084c0:	08009fa8 	.word	0x08009fa8

080084c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	6039      	str	r1, [r7, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	221a      	movs	r2, #26
 80084d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084d6:	f000 f843 	bl	8008560 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084da:	4b02      	ldr	r3, [pc, #8]	; (80084e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20000160 	.word	0x20000160

080084e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084f4:	79fb      	ldrb	r3, [r7, #7]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d105      	bne.n	8008506 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	4907      	ldr	r1, [pc, #28]	; (800851c <USBD_FS_ConfigStrDescriptor+0x34>)
 80084fe:	4808      	ldr	r0, [pc, #32]	; (8008520 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008500:	f7ff fdc8 	bl	8008094 <USBD_GetString>
 8008504:	e004      	b.n	8008510 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	4904      	ldr	r1, [pc, #16]	; (800851c <USBD_FS_ConfigStrDescriptor+0x34>)
 800850a:	4805      	ldr	r0, [pc, #20]	; (8008520 <USBD_FS_ConfigStrDescriptor+0x38>)
 800850c:	f7ff fdc2 	bl	8008094 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008510:	4b02      	ldr	r3, [pc, #8]	; (800851c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000d14 	.word	0x20000d14
 8008520:	08009fbc 	.word	0x08009fbc

08008524 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	4603      	mov	r3, r0
 800852c:	6039      	str	r1, [r7, #0]
 800852e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d105      	bne.n	8008542 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	4907      	ldr	r1, [pc, #28]	; (8008558 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800853a:	4808      	ldr	r0, [pc, #32]	; (800855c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800853c:	f7ff fdaa 	bl	8008094 <USBD_GetString>
 8008540:	e004      	b.n	800854c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	4904      	ldr	r1, [pc, #16]	; (8008558 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008546:	4805      	ldr	r0, [pc, #20]	; (800855c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008548:	f7ff fda4 	bl	8008094 <USBD_GetString>
  }
  return USBD_StrDesc;
 800854c:	4b02      	ldr	r3, [pc, #8]	; (8008558 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	20000d14 	.word	0x20000d14
 800855c:	08009fc8 	.word	0x08009fc8

08008560 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008566:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <Get_SerialNum+0x44>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800856c:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <Get_SerialNum+0x48>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008572:	4b0e      	ldr	r3, [pc, #56]	; (80085ac <Get_SerialNum+0x4c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d009      	beq.n	800859a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008586:	2208      	movs	r2, #8
 8008588:	4909      	ldr	r1, [pc, #36]	; (80085b0 <Get_SerialNum+0x50>)
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 f814 	bl	80085b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008590:	2204      	movs	r2, #4
 8008592:	4908      	ldr	r1, [pc, #32]	; (80085b4 <Get_SerialNum+0x54>)
 8008594:	68b8      	ldr	r0, [r7, #8]
 8008596:	f000 f80f 	bl	80085b8 <IntToUnicode>
  }
}
 800859a:	bf00      	nop
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	1ffff7e8 	.word	0x1ffff7e8
 80085a8:	1ffff7ec 	.word	0x1ffff7ec
 80085ac:	1ffff7f0 	.word	0x1ffff7f0
 80085b0:	20000162 	.word	0x20000162
 80085b4:	20000172 	.word	0x20000172

080085b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085ca:	2300      	movs	r3, #0
 80085cc:	75fb      	strb	r3, [r7, #23]
 80085ce:	e027      	b.n	8008620 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	0f1b      	lsrs	r3, r3, #28
 80085d4:	2b09      	cmp	r3, #9
 80085d6:	d80b      	bhi.n	80085f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	0f1b      	lsrs	r3, r3, #28
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	7dfb      	ldrb	r3, [r7, #23]
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	4619      	mov	r1, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	440b      	add	r3, r1
 80085e8:	3230      	adds	r2, #48	; 0x30
 80085ea:	b2d2      	uxtb	r2, r2
 80085ec:	701a      	strb	r2, [r3, #0]
 80085ee:	e00a      	b.n	8008606 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	0f1b      	lsrs	r3, r3, #28
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	4619      	mov	r1, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	440b      	add	r3, r1
 8008600:	3237      	adds	r2, #55	; 0x37
 8008602:	b2d2      	uxtb	r2, r2
 8008604:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	3301      	adds	r3, #1
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	4413      	add	r3, r2
 8008616:	2200      	movs	r2, #0
 8008618:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800861a:	7dfb      	ldrb	r3, [r7, #23]
 800861c:	3301      	adds	r3, #1
 800861e:	75fb      	strb	r3, [r7, #23]
 8008620:	7dfa      	ldrb	r2, [r7, #23]
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	429a      	cmp	r2, r3
 8008626:	d3d3      	bcc.n	80085d0 <IntToUnicode+0x18>
  }
}
 8008628:	bf00      	nop
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	bc80      	pop	{r7}
 8008632:	4770      	bx	lr

08008634 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a0d      	ldr	r2, [pc, #52]	; (8008678 <HAL_PCD_MspInit+0x44>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d113      	bne.n	800866e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008646:	4b0d      	ldr	r3, [pc, #52]	; (800867c <HAL_PCD_MspInit+0x48>)
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	4a0c      	ldr	r2, [pc, #48]	; (800867c <HAL_PCD_MspInit+0x48>)
 800864c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008650:	61d3      	str	r3, [r2, #28]
 8008652:	4b0a      	ldr	r3, [pc, #40]	; (800867c <HAL_PCD_MspInit+0x48>)
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800865e:	2200      	movs	r2, #0
 8008660:	2100      	movs	r1, #0
 8008662:	2014      	movs	r0, #20
 8008664:	f7f8 fb81 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008668:	2014      	movs	r0, #20
 800866a:	f7f8 fb9a 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	40005c00 	.word	0x40005c00
 800867c:	40021000 	.word	0x40021000

08008680 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f7fe fdcb 	bl	8007232 <USBD_LL_SetupStage>
}
 800869c:	bf00      	nop
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80086b6:	78fa      	ldrb	r2, [r7, #3]
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	440b      	add	r3, r1
 80086c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	78fb      	ldrb	r3, [r7, #3]
 80086cc:	4619      	mov	r1, r3
 80086ce:	f7fe fdfd 	bl	80072cc <USBD_LL_DataOutStage>
}
 80086d2:	bf00      	nop
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	460b      	mov	r3, r1
 80086e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80086ec:	78fa      	ldrb	r2, [r7, #3]
 80086ee:	6879      	ldr	r1, [r7, #4]
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	440b      	add	r3, r1
 80086fa:	333c      	adds	r3, #60	; 0x3c
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	4619      	mov	r1, r3
 8008702:	f7fe fe54 	bl	80073ae <USBD_LL_DataInStage>
}
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe ff64 	bl	80075ea <USBD_LL_SOF>
}
 8008722:	bf00      	nop
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008732:	2301      	movs	r3, #1
 8008734:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	2b02      	cmp	r3, #2
 800873c:	d001      	beq.n	8008742 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800873e:	f7f8 f809 	bl	8000754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008748:	7bfa      	ldrb	r2, [r7, #15]
 800874a:	4611      	mov	r1, r2
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe ff14 	bl	800757a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe fecd 	bl	80074f8 <USBD_LL_Reset>
}
 800875e:	bf00      	nop
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe ff0e 	bl	8007598 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d005      	beq.n	8008790 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008784:	4b04      	ldr	r3, [pc, #16]	; (8008798 <HAL_PCD_SuspendCallback+0x30>)
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	4a03      	ldr	r2, [pc, #12]	; (8008798 <HAL_PCD_SuspendCallback+0x30>)
 800878a:	f043 0306 	orr.w	r3, r3, #6
 800878e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	e000ed00 	.word	0xe000ed00

0800879c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe ff08 	bl	80075c0 <USBD_LL_Resume>
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80087c0:	4a28      	ldr	r2, [pc, #160]	; (8008864 <USBD_LL_Init+0xac>)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a26      	ldr	r2, [pc, #152]	; (8008864 <USBD_LL_Init+0xac>)
 80087cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80087d0:	4b24      	ldr	r3, [pc, #144]	; (8008864 <USBD_LL_Init+0xac>)
 80087d2:	4a25      	ldr	r2, [pc, #148]	; (8008868 <USBD_LL_Init+0xb0>)
 80087d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087d6:	4b23      	ldr	r3, [pc, #140]	; (8008864 <USBD_LL_Init+0xac>)
 80087d8:	2208      	movs	r2, #8
 80087da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087dc:	4b21      	ldr	r3, [pc, #132]	; (8008864 <USBD_LL_Init+0xac>)
 80087de:	2202      	movs	r2, #2
 80087e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087e2:	4b20      	ldr	r3, [pc, #128]	; (8008864 <USBD_LL_Init+0xac>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80087e8:	4b1e      	ldr	r3, [pc, #120]	; (8008864 <USBD_LL_Init+0xac>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087ee:	4b1d      	ldr	r3, [pc, #116]	; (8008864 <USBD_LL_Init+0xac>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087f4:	481b      	ldr	r0, [pc, #108]	; (8008864 <USBD_LL_Init+0xac>)
 80087f6:	f7f8 fd3d 	bl	8001274 <HAL_PCD_Init>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008800:	f7f7 ffa8 	bl	8000754 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800880a:	2318      	movs	r3, #24
 800880c:	2200      	movs	r2, #0
 800880e:	2100      	movs	r1, #0
 8008810:	f7fa fa5c 	bl	8002ccc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800881a:	2358      	movs	r3, #88	; 0x58
 800881c:	2200      	movs	r2, #0
 800881e:	2180      	movs	r1, #128	; 0x80
 8008820:	f7fa fa54 	bl	8002ccc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800882a:	23c0      	movs	r3, #192	; 0xc0
 800882c:	2200      	movs	r2, #0
 800882e:	2181      	movs	r1, #129	; 0x81
 8008830:	f7fa fa4c 	bl	8002ccc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800883a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800883e:	2200      	movs	r2, #0
 8008840:	2101      	movs	r1, #1
 8008842:	f7fa fa43 	bl	8002ccc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800884c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008850:	2200      	movs	r2, #0
 8008852:	2182      	movs	r1, #130	; 0x82
 8008854:	f7fa fa3a 	bl	8002ccc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20000f14 	.word	0x20000f14
 8008868:	40005c00 	.word	0x40005c00

0800886c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008882:	4618      	mov	r0, r3
 8008884:	f7f8 fdf5 	bl	8001472 <HAL_PCD_Start>
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	4618      	mov	r0, r3
 8008890:	f000 f94e 	bl	8008b30 <USBD_Get_USB_Status>
 8008894:	4603      	mov	r3, r0
 8008896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008898:	7bbb      	ldrb	r3, [r7, #14]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	4608      	mov	r0, r1
 80088ac:	4611      	mov	r1, r2
 80088ae:	461a      	mov	r2, r3
 80088b0:	4603      	mov	r3, r0
 80088b2:	70fb      	strb	r3, [r7, #3]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70bb      	strb	r3, [r7, #2]
 80088b8:	4613      	mov	r3, r2
 80088ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088ca:	78bb      	ldrb	r3, [r7, #2]
 80088cc:	883a      	ldrh	r2, [r7, #0]
 80088ce:	78f9      	ldrb	r1, [r7, #3]
 80088d0:	f7f8 ff4a 	bl	8001768 <HAL_PCD_EP_Open>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 f928 	bl	8008b30 <USBD_Get_USB_Status>
 80088e0:	4603      	mov	r3, r0
 80088e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008908:	78fa      	ldrb	r2, [r7, #3]
 800890a:	4611      	mov	r1, r2
 800890c:	4618      	mov	r0, r3
 800890e:	f7f8 ff88 	bl	8001822 <HAL_PCD_EP_Close>
 8008912:	4603      	mov	r3, r0
 8008914:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 f909 	bl	8008b30 <USBD_Get_USB_Status>
 800891e:	4603      	mov	r3, r0
 8008920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008922:	7bbb      	ldrb	r3, [r7, #14]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	4611      	mov	r1, r2
 800894a:	4618      	mov	r0, r3
 800894c:	f7f9 f830 	bl	80019b0 <HAL_PCD_EP_SetStall>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f8ea 	bl	8008b30 <USBD_Get_USB_Status>
 800895c:	4603      	mov	r3, r0
 800895e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008960:	7bbb      	ldrb	r3, [r7, #14]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	460b      	mov	r3, r1
 8008974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008984:	78fa      	ldrb	r2, [r7, #3]
 8008986:	4611      	mov	r1, r2
 8008988:	4618      	mov	r0, r3
 800898a:	f7f9 f871 	bl	8001a70 <HAL_PCD_EP_ClrStall>
 800898e:	4603      	mov	r3, r0
 8008990:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	4618      	mov	r0, r3
 8008996:	f000 f8cb 	bl	8008b30 <USBD_Get_USB_Status>
 800899a:	4603      	mov	r3, r0
 800899c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800899e:	7bbb      	ldrb	r3, [r7, #14]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	da0c      	bge.n	80089de <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089c4:	78fb      	ldrb	r3, [r7, #3]
 80089c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ca:	68f9      	ldr	r1, [r7, #12]
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	4613      	mov	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	00db      	lsls	r3, r3, #3
 80089d6:	440b      	add	r3, r1
 80089d8:	3302      	adds	r3, #2
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	e00b      	b.n	80089f6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089de:	78fb      	ldrb	r3, [r7, #3]
 80089e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089e4:	68f9      	ldr	r1, [r7, #12]
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	00db      	lsls	r3, r3, #3
 80089ee:	440b      	add	r3, r1
 80089f0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80089f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bc80      	pop	{r7}
 80089fe:	4770      	bx	lr

08008a00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7f8 fe7d 	bl	800171e <HAL_PCD_SetAddress>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 f880 	bl	8008b30 <USBD_Get_USB_Status>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b086      	sub	sp, #24
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	607a      	str	r2, [r7, #4]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	72fb      	strb	r3, [r7, #11]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a60:	893b      	ldrh	r3, [r7, #8]
 8008a62:	7af9      	ldrb	r1, [r7, #11]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	f7f8 ff6c 	bl	8001942 <HAL_PCD_EP_Transmit>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 f85d 	bl	8008b30 <USBD_Get_USB_Status>
 8008a76:	4603      	mov	r3, r0
 8008a78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	607a      	str	r2, [r7, #4]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	460b      	mov	r3, r1
 8008a92:	72fb      	strb	r3, [r7, #11]
 8008a94:	4613      	mov	r3, r2
 8008a96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aa6:	893b      	ldrh	r3, [r7, #8]
 8008aa8:	7af9      	ldrb	r1, [r7, #11]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	f7f8 ff01 	bl	80018b2 <HAL_PCD_EP_Receive>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 f83a 	bl	8008b30 <USBD_Get_USB_Status>
 8008abc:	4603      	mov	r3, r0
 8008abe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ac0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008adc:	78fa      	ldrb	r2, [r7, #3]
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7f8 ff17 	bl	8001914 <HAL_PCD_EP_GetRxCount>
 8008ae6:	4603      	mov	r3, r0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008af8:	4b02      	ldr	r3, [pc, #8]	; (8008b04 <USBD_static_malloc+0x14>)
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bc80      	pop	{r7}
 8008b02:	4770      	bx	lr
 8008b04:	20001204 	.word	0x20001204

08008b08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]

}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr

08008b1a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	460b      	mov	r3, r1
 8008b24:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bc80      	pop	{r7}
 8008b2e:	4770      	bx	lr

08008b30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b3e:	79fb      	ldrb	r3, [r7, #7]
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d817      	bhi.n	8008b74 <USBD_Get_USB_Status+0x44>
 8008b44:	a201      	add	r2, pc, #4	; (adr r2, 8008b4c <USBD_Get_USB_Status+0x1c>)
 8008b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4a:	bf00      	nop
 8008b4c:	08008b5d 	.word	0x08008b5d
 8008b50:	08008b63 	.word	0x08008b63
 8008b54:	08008b69 	.word	0x08008b69
 8008b58:	08008b6f 	.word	0x08008b6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b60:	e00b      	b.n	8008b7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b62:	2302      	movs	r3, #2
 8008b64:	73fb      	strb	r3, [r7, #15]
    break;
 8008b66:	e008      	b.n	8008b7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b6c:	e005      	b.n	8008b7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b6e:	2302      	movs	r3, #2
 8008b70:	73fb      	strb	r3, [r7, #15]
    break;
 8008b72:	e002      	b.n	8008b7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b74:	2302      	movs	r3, #2
 8008b76:	73fb      	strb	r3, [r7, #15]
    break;
 8008b78:	bf00      	nop
  }
  return usb_status;
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bc80      	pop	{r7}
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop

08008b88 <__errno>:
 8008b88:	4b01      	ldr	r3, [pc, #4]	; (8008b90 <__errno+0x8>)
 8008b8a:	6818      	ldr	r0, [r3, #0]
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	2000017c 	.word	0x2000017c

08008b94 <__libc_init_array>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	2600      	movs	r6, #0
 8008b98:	4d0c      	ldr	r5, [pc, #48]	; (8008bcc <__libc_init_array+0x38>)
 8008b9a:	4c0d      	ldr	r4, [pc, #52]	; (8008bd0 <__libc_init_array+0x3c>)
 8008b9c:	1b64      	subs	r4, r4, r5
 8008b9e:	10a4      	asrs	r4, r4, #2
 8008ba0:	42a6      	cmp	r6, r4
 8008ba2:	d109      	bne.n	8008bb8 <__libc_init_array+0x24>
 8008ba4:	f001 f9aa 	bl	8009efc <_init>
 8008ba8:	2600      	movs	r6, #0
 8008baa:	4d0a      	ldr	r5, [pc, #40]	; (8008bd4 <__libc_init_array+0x40>)
 8008bac:	4c0a      	ldr	r4, [pc, #40]	; (8008bd8 <__libc_init_array+0x44>)
 8008bae:	1b64      	subs	r4, r4, r5
 8008bb0:	10a4      	asrs	r4, r4, #2
 8008bb2:	42a6      	cmp	r6, r4
 8008bb4:	d105      	bne.n	8008bc2 <__libc_init_array+0x2e>
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bbc:	4798      	blx	r3
 8008bbe:	3601      	adds	r6, #1
 8008bc0:	e7ee      	b.n	8008ba0 <__libc_init_array+0xc>
 8008bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc6:	4798      	blx	r3
 8008bc8:	3601      	adds	r6, #1
 8008bca:	e7f2      	b.n	8008bb2 <__libc_init_array+0x1e>
 8008bcc:	0800a29c 	.word	0x0800a29c
 8008bd0:	0800a29c 	.word	0x0800a29c
 8008bd4:	0800a29c 	.word	0x0800a29c
 8008bd8:	0800a2a0 	.word	0x0800a2a0

08008bdc <malloc>:
 8008bdc:	4b02      	ldr	r3, [pc, #8]	; (8008be8 <malloc+0xc>)
 8008bde:	4601      	mov	r1, r0
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	f000 b87b 	b.w	8008cdc <_malloc_r>
 8008be6:	bf00      	nop
 8008be8:	2000017c 	.word	0x2000017c

08008bec <free>:
 8008bec:	4b02      	ldr	r3, [pc, #8]	; (8008bf8 <free+0xc>)
 8008bee:	4601      	mov	r1, r0
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	f000 b80b 	b.w	8008c0c <_free_r>
 8008bf6:	bf00      	nop
 8008bf8:	2000017c 	.word	0x2000017c

08008bfc <memset>:
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	4402      	add	r2, r0
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d100      	bne.n	8008c06 <memset+0xa>
 8008c04:	4770      	bx	lr
 8008c06:	f803 1b01 	strb.w	r1, [r3], #1
 8008c0a:	e7f9      	b.n	8008c00 <memset+0x4>

08008c0c <_free_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	4605      	mov	r5, r0
 8008c10:	2900      	cmp	r1, #0
 8008c12:	d040      	beq.n	8008c96 <_free_r+0x8a>
 8008c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c18:	1f0c      	subs	r4, r1, #4
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	bfb8      	it	lt
 8008c1e:	18e4      	addlt	r4, r4, r3
 8008c20:	f000 fa18 	bl	8009054 <__malloc_lock>
 8008c24:	4a1c      	ldr	r2, [pc, #112]	; (8008c98 <_free_r+0x8c>)
 8008c26:	6813      	ldr	r3, [r2, #0]
 8008c28:	b933      	cbnz	r3, 8008c38 <_free_r+0x2c>
 8008c2a:	6063      	str	r3, [r4, #4]
 8008c2c:	6014      	str	r4, [r2, #0]
 8008c2e:	4628      	mov	r0, r5
 8008c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c34:	f000 ba14 	b.w	8009060 <__malloc_unlock>
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	d908      	bls.n	8008c4e <_free_r+0x42>
 8008c3c:	6820      	ldr	r0, [r4, #0]
 8008c3e:	1821      	adds	r1, r4, r0
 8008c40:	428b      	cmp	r3, r1
 8008c42:	bf01      	itttt	eq
 8008c44:	6819      	ldreq	r1, [r3, #0]
 8008c46:	685b      	ldreq	r3, [r3, #4]
 8008c48:	1809      	addeq	r1, r1, r0
 8008c4a:	6021      	streq	r1, [r4, #0]
 8008c4c:	e7ed      	b.n	8008c2a <_free_r+0x1e>
 8008c4e:	461a      	mov	r2, r3
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	b10b      	cbz	r3, 8008c58 <_free_r+0x4c>
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d9fa      	bls.n	8008c4e <_free_r+0x42>
 8008c58:	6811      	ldr	r1, [r2, #0]
 8008c5a:	1850      	adds	r0, r2, r1
 8008c5c:	42a0      	cmp	r0, r4
 8008c5e:	d10b      	bne.n	8008c78 <_free_r+0x6c>
 8008c60:	6820      	ldr	r0, [r4, #0]
 8008c62:	4401      	add	r1, r0
 8008c64:	1850      	adds	r0, r2, r1
 8008c66:	4283      	cmp	r3, r0
 8008c68:	6011      	str	r1, [r2, #0]
 8008c6a:	d1e0      	bne.n	8008c2e <_free_r+0x22>
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	4401      	add	r1, r0
 8008c72:	6011      	str	r1, [r2, #0]
 8008c74:	6053      	str	r3, [r2, #4]
 8008c76:	e7da      	b.n	8008c2e <_free_r+0x22>
 8008c78:	d902      	bls.n	8008c80 <_free_r+0x74>
 8008c7a:	230c      	movs	r3, #12
 8008c7c:	602b      	str	r3, [r5, #0]
 8008c7e:	e7d6      	b.n	8008c2e <_free_r+0x22>
 8008c80:	6820      	ldr	r0, [r4, #0]
 8008c82:	1821      	adds	r1, r4, r0
 8008c84:	428b      	cmp	r3, r1
 8008c86:	bf01      	itttt	eq
 8008c88:	6819      	ldreq	r1, [r3, #0]
 8008c8a:	685b      	ldreq	r3, [r3, #4]
 8008c8c:	1809      	addeq	r1, r1, r0
 8008c8e:	6021      	streq	r1, [r4, #0]
 8008c90:	6063      	str	r3, [r4, #4]
 8008c92:	6054      	str	r4, [r2, #4]
 8008c94:	e7cb      	b.n	8008c2e <_free_r+0x22>
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	20001424 	.word	0x20001424

08008c9c <sbrk_aligned>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	4e0e      	ldr	r6, [pc, #56]	; (8008cd8 <sbrk_aligned+0x3c>)
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	6831      	ldr	r1, [r6, #0]
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	b911      	cbnz	r1, 8008cae <sbrk_aligned+0x12>
 8008ca8:	f000 f8a4 	bl	8008df4 <_sbrk_r>
 8008cac:	6030      	str	r0, [r6, #0]
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f000 f89f 	bl	8008df4 <_sbrk_r>
 8008cb6:	1c43      	adds	r3, r0, #1
 8008cb8:	d00a      	beq.n	8008cd0 <sbrk_aligned+0x34>
 8008cba:	1cc4      	adds	r4, r0, #3
 8008cbc:	f024 0403 	bic.w	r4, r4, #3
 8008cc0:	42a0      	cmp	r0, r4
 8008cc2:	d007      	beq.n	8008cd4 <sbrk_aligned+0x38>
 8008cc4:	1a21      	subs	r1, r4, r0
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f000 f894 	bl	8008df4 <_sbrk_r>
 8008ccc:	3001      	adds	r0, #1
 8008cce:	d101      	bne.n	8008cd4 <sbrk_aligned+0x38>
 8008cd0:	f04f 34ff 	mov.w	r4, #4294967295
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
 8008cd8:	20001428 	.word	0x20001428

08008cdc <_malloc_r>:
 8008cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce0:	1ccd      	adds	r5, r1, #3
 8008ce2:	f025 0503 	bic.w	r5, r5, #3
 8008ce6:	3508      	adds	r5, #8
 8008ce8:	2d0c      	cmp	r5, #12
 8008cea:	bf38      	it	cc
 8008cec:	250c      	movcc	r5, #12
 8008cee:	2d00      	cmp	r5, #0
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	db01      	blt.n	8008cf8 <_malloc_r+0x1c>
 8008cf4:	42a9      	cmp	r1, r5
 8008cf6:	d905      	bls.n	8008d04 <_malloc_r+0x28>
 8008cf8:	230c      	movs	r3, #12
 8008cfa:	2600      	movs	r6, #0
 8008cfc:	603b      	str	r3, [r7, #0]
 8008cfe:	4630      	mov	r0, r6
 8008d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d04:	4e2e      	ldr	r6, [pc, #184]	; (8008dc0 <_malloc_r+0xe4>)
 8008d06:	f000 f9a5 	bl	8009054 <__malloc_lock>
 8008d0a:	6833      	ldr	r3, [r6, #0]
 8008d0c:	461c      	mov	r4, r3
 8008d0e:	bb34      	cbnz	r4, 8008d5e <_malloc_r+0x82>
 8008d10:	4629      	mov	r1, r5
 8008d12:	4638      	mov	r0, r7
 8008d14:	f7ff ffc2 	bl	8008c9c <sbrk_aligned>
 8008d18:	1c43      	adds	r3, r0, #1
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	d14d      	bne.n	8008dba <_malloc_r+0xde>
 8008d1e:	6834      	ldr	r4, [r6, #0]
 8008d20:	4626      	mov	r6, r4
 8008d22:	2e00      	cmp	r6, #0
 8008d24:	d140      	bne.n	8008da8 <_malloc_r+0xcc>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	eb04 0803 	add.w	r8, r4, r3
 8008d30:	f000 f860 	bl	8008df4 <_sbrk_r>
 8008d34:	4580      	cmp	r8, r0
 8008d36:	d13a      	bne.n	8008dae <_malloc_r+0xd2>
 8008d38:	6821      	ldr	r1, [r4, #0]
 8008d3a:	3503      	adds	r5, #3
 8008d3c:	1a6d      	subs	r5, r5, r1
 8008d3e:	f025 0503 	bic.w	r5, r5, #3
 8008d42:	3508      	adds	r5, #8
 8008d44:	2d0c      	cmp	r5, #12
 8008d46:	bf38      	it	cc
 8008d48:	250c      	movcc	r5, #12
 8008d4a:	4638      	mov	r0, r7
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	f7ff ffa5 	bl	8008c9c <sbrk_aligned>
 8008d52:	3001      	adds	r0, #1
 8008d54:	d02b      	beq.n	8008dae <_malloc_r+0xd2>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	442b      	add	r3, r5
 8008d5a:	6023      	str	r3, [r4, #0]
 8008d5c:	e00e      	b.n	8008d7c <_malloc_r+0xa0>
 8008d5e:	6822      	ldr	r2, [r4, #0]
 8008d60:	1b52      	subs	r2, r2, r5
 8008d62:	d41e      	bmi.n	8008da2 <_malloc_r+0xc6>
 8008d64:	2a0b      	cmp	r2, #11
 8008d66:	d916      	bls.n	8008d96 <_malloc_r+0xba>
 8008d68:	1961      	adds	r1, r4, r5
 8008d6a:	42a3      	cmp	r3, r4
 8008d6c:	6025      	str	r5, [r4, #0]
 8008d6e:	bf18      	it	ne
 8008d70:	6059      	strne	r1, [r3, #4]
 8008d72:	6863      	ldr	r3, [r4, #4]
 8008d74:	bf08      	it	eq
 8008d76:	6031      	streq	r1, [r6, #0]
 8008d78:	5162      	str	r2, [r4, r5]
 8008d7a:	604b      	str	r3, [r1, #4]
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f104 060b 	add.w	r6, r4, #11
 8008d82:	f000 f96d 	bl	8009060 <__malloc_unlock>
 8008d86:	f026 0607 	bic.w	r6, r6, #7
 8008d8a:	1d23      	adds	r3, r4, #4
 8008d8c:	1af2      	subs	r2, r6, r3
 8008d8e:	d0b6      	beq.n	8008cfe <_malloc_r+0x22>
 8008d90:	1b9b      	subs	r3, r3, r6
 8008d92:	50a3      	str	r3, [r4, r2]
 8008d94:	e7b3      	b.n	8008cfe <_malloc_r+0x22>
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	bf0c      	ite	eq
 8008d9c:	6032      	streq	r2, [r6, #0]
 8008d9e:	605a      	strne	r2, [r3, #4]
 8008da0:	e7ec      	b.n	8008d7c <_malloc_r+0xa0>
 8008da2:	4623      	mov	r3, r4
 8008da4:	6864      	ldr	r4, [r4, #4]
 8008da6:	e7b2      	b.n	8008d0e <_malloc_r+0x32>
 8008da8:	4634      	mov	r4, r6
 8008daa:	6876      	ldr	r6, [r6, #4]
 8008dac:	e7b9      	b.n	8008d22 <_malloc_r+0x46>
 8008dae:	230c      	movs	r3, #12
 8008db0:	4638      	mov	r0, r7
 8008db2:	603b      	str	r3, [r7, #0]
 8008db4:	f000 f954 	bl	8009060 <__malloc_unlock>
 8008db8:	e7a1      	b.n	8008cfe <_malloc_r+0x22>
 8008dba:	6025      	str	r5, [r4, #0]
 8008dbc:	e7de      	b.n	8008d7c <_malloc_r+0xa0>
 8008dbe:	bf00      	nop
 8008dc0:	20001424 	.word	0x20001424

08008dc4 <iprintf>:
 8008dc4:	b40f      	push	{r0, r1, r2, r3}
 8008dc6:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <iprintf+0x2c>)
 8008dc8:	b513      	push	{r0, r1, r4, lr}
 8008dca:	681c      	ldr	r4, [r3, #0]
 8008dcc:	b124      	cbz	r4, 8008dd8 <iprintf+0x14>
 8008dce:	69a3      	ldr	r3, [r4, #24]
 8008dd0:	b913      	cbnz	r3, 8008dd8 <iprintf+0x14>
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 f89e 	bl	8008f14 <__sinit>
 8008dd8:	ab05      	add	r3, sp, #20
 8008dda:	4620      	mov	r0, r4
 8008ddc:	9a04      	ldr	r2, [sp, #16]
 8008dde:	68a1      	ldr	r1, [r4, #8]
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	f000 fac7 	bl	8009374 <_vfiprintf_r>
 8008de6:	b002      	add	sp, #8
 8008de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dec:	b004      	add	sp, #16
 8008dee:	4770      	bx	lr
 8008df0:	2000017c 	.word	0x2000017c

08008df4 <_sbrk_r>:
 8008df4:	b538      	push	{r3, r4, r5, lr}
 8008df6:	2300      	movs	r3, #0
 8008df8:	4d05      	ldr	r5, [pc, #20]	; (8008e10 <_sbrk_r+0x1c>)
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	4608      	mov	r0, r1
 8008dfe:	602b      	str	r3, [r5, #0]
 8008e00:	f7f7 fdf4 	bl	80009ec <_sbrk>
 8008e04:	1c43      	adds	r3, r0, #1
 8008e06:	d102      	bne.n	8008e0e <_sbrk_r+0x1a>
 8008e08:	682b      	ldr	r3, [r5, #0]
 8008e0a:	b103      	cbz	r3, 8008e0e <_sbrk_r+0x1a>
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	bd38      	pop	{r3, r4, r5, pc}
 8008e10:	20001430 	.word	0x20001430

08008e14 <siprintf>:
 8008e14:	b40e      	push	{r1, r2, r3}
 8008e16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e1a:	b500      	push	{lr}
 8008e1c:	b09c      	sub	sp, #112	; 0x70
 8008e1e:	ab1d      	add	r3, sp, #116	; 0x74
 8008e20:	9002      	str	r0, [sp, #8]
 8008e22:	9006      	str	r0, [sp, #24]
 8008e24:	9107      	str	r1, [sp, #28]
 8008e26:	9104      	str	r1, [sp, #16]
 8008e28:	4808      	ldr	r0, [pc, #32]	; (8008e4c <siprintf+0x38>)
 8008e2a:	4909      	ldr	r1, [pc, #36]	; (8008e50 <siprintf+0x3c>)
 8008e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e30:	9105      	str	r1, [sp, #20]
 8008e32:	6800      	ldr	r0, [r0, #0]
 8008e34:	a902      	add	r1, sp, #8
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	f000 f974 	bl	8009124 <_svfiprintf_r>
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	9b02      	ldr	r3, [sp, #8]
 8008e40:	701a      	strb	r2, [r3, #0]
 8008e42:	b01c      	add	sp, #112	; 0x70
 8008e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e48:	b003      	add	sp, #12
 8008e4a:	4770      	bx	lr
 8008e4c:	2000017c 	.word	0x2000017c
 8008e50:	ffff0208 	.word	0xffff0208

08008e54 <strcpy>:
 8008e54:	4603      	mov	r3, r0
 8008e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e5a:	f803 2b01 	strb.w	r2, [r3], #1
 8008e5e:	2a00      	cmp	r2, #0
 8008e60:	d1f9      	bne.n	8008e56 <strcpy+0x2>
 8008e62:	4770      	bx	lr

08008e64 <std>:
 8008e64:	2300      	movs	r3, #0
 8008e66:	b510      	push	{r4, lr}
 8008e68:	4604      	mov	r4, r0
 8008e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8008e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e72:	6083      	str	r3, [r0, #8]
 8008e74:	8181      	strh	r1, [r0, #12]
 8008e76:	6643      	str	r3, [r0, #100]	; 0x64
 8008e78:	81c2      	strh	r2, [r0, #14]
 8008e7a:	6183      	str	r3, [r0, #24]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	2208      	movs	r2, #8
 8008e80:	305c      	adds	r0, #92	; 0x5c
 8008e82:	f7ff febb 	bl	8008bfc <memset>
 8008e86:	4b05      	ldr	r3, [pc, #20]	; (8008e9c <std+0x38>)
 8008e88:	6224      	str	r4, [r4, #32]
 8008e8a:	6263      	str	r3, [r4, #36]	; 0x24
 8008e8c:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <std+0x3c>)
 8008e8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e90:	4b04      	ldr	r3, [pc, #16]	; (8008ea4 <std+0x40>)
 8008e92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e94:	4b04      	ldr	r3, [pc, #16]	; (8008ea8 <std+0x44>)
 8008e96:	6323      	str	r3, [r4, #48]	; 0x30
 8008e98:	bd10      	pop	{r4, pc}
 8008e9a:	bf00      	nop
 8008e9c:	08009901 	.word	0x08009901
 8008ea0:	08009923 	.word	0x08009923
 8008ea4:	0800995b 	.word	0x0800995b
 8008ea8:	0800997f 	.word	0x0800997f

08008eac <_cleanup_r>:
 8008eac:	4901      	ldr	r1, [pc, #4]	; (8008eb4 <_cleanup_r+0x8>)
 8008eae:	f000 b8af 	b.w	8009010 <_fwalk_reent>
 8008eb2:	bf00      	nop
 8008eb4:	08009c51 	.word	0x08009c51

08008eb8 <__sfmoreglue>:
 8008eb8:	2268      	movs	r2, #104	; 0x68
 8008eba:	b570      	push	{r4, r5, r6, lr}
 8008ebc:	1e4d      	subs	r5, r1, #1
 8008ebe:	4355      	muls	r5, r2
 8008ec0:	460e      	mov	r6, r1
 8008ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ec6:	f7ff ff09 	bl	8008cdc <_malloc_r>
 8008eca:	4604      	mov	r4, r0
 8008ecc:	b140      	cbz	r0, 8008ee0 <__sfmoreglue+0x28>
 8008ece:	2100      	movs	r1, #0
 8008ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8008ed4:	300c      	adds	r0, #12
 8008ed6:	60a0      	str	r0, [r4, #8]
 8008ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008edc:	f7ff fe8e 	bl	8008bfc <memset>
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}

08008ee4 <__sfp_lock_acquire>:
 8008ee4:	4801      	ldr	r0, [pc, #4]	; (8008eec <__sfp_lock_acquire+0x8>)
 8008ee6:	f000 b8b3 	b.w	8009050 <__retarget_lock_acquire_recursive>
 8008eea:	bf00      	nop
 8008eec:	2000142d 	.word	0x2000142d

08008ef0 <__sfp_lock_release>:
 8008ef0:	4801      	ldr	r0, [pc, #4]	; (8008ef8 <__sfp_lock_release+0x8>)
 8008ef2:	f000 b8ae 	b.w	8009052 <__retarget_lock_release_recursive>
 8008ef6:	bf00      	nop
 8008ef8:	2000142d 	.word	0x2000142d

08008efc <__sinit_lock_acquire>:
 8008efc:	4801      	ldr	r0, [pc, #4]	; (8008f04 <__sinit_lock_acquire+0x8>)
 8008efe:	f000 b8a7 	b.w	8009050 <__retarget_lock_acquire_recursive>
 8008f02:	bf00      	nop
 8008f04:	2000142e 	.word	0x2000142e

08008f08 <__sinit_lock_release>:
 8008f08:	4801      	ldr	r0, [pc, #4]	; (8008f10 <__sinit_lock_release+0x8>)
 8008f0a:	f000 b8a2 	b.w	8009052 <__retarget_lock_release_recursive>
 8008f0e:	bf00      	nop
 8008f10:	2000142e 	.word	0x2000142e

08008f14 <__sinit>:
 8008f14:	b510      	push	{r4, lr}
 8008f16:	4604      	mov	r4, r0
 8008f18:	f7ff fff0 	bl	8008efc <__sinit_lock_acquire>
 8008f1c:	69a3      	ldr	r3, [r4, #24]
 8008f1e:	b11b      	cbz	r3, 8008f28 <__sinit+0x14>
 8008f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f24:	f7ff bff0 	b.w	8008f08 <__sinit_lock_release>
 8008f28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8008f2e:	4b13      	ldr	r3, [pc, #76]	; (8008f7c <__sinit+0x68>)
 8008f30:	4a13      	ldr	r2, [pc, #76]	; (8008f80 <__sinit+0x6c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f36:	42a3      	cmp	r3, r4
 8008f38:	bf08      	it	eq
 8008f3a:	2301      	moveq	r3, #1
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	bf08      	it	eq
 8008f40:	61a3      	streq	r3, [r4, #24]
 8008f42:	f000 f81f 	bl	8008f84 <__sfp>
 8008f46:	6060      	str	r0, [r4, #4]
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 f81b 	bl	8008f84 <__sfp>
 8008f4e:	60a0      	str	r0, [r4, #8]
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 f817 	bl	8008f84 <__sfp>
 8008f56:	2200      	movs	r2, #0
 8008f58:	2104      	movs	r1, #4
 8008f5a:	60e0      	str	r0, [r4, #12]
 8008f5c:	6860      	ldr	r0, [r4, #4]
 8008f5e:	f7ff ff81 	bl	8008e64 <std>
 8008f62:	2201      	movs	r2, #1
 8008f64:	2109      	movs	r1, #9
 8008f66:	68a0      	ldr	r0, [r4, #8]
 8008f68:	f7ff ff7c 	bl	8008e64 <std>
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	2112      	movs	r1, #18
 8008f70:	68e0      	ldr	r0, [r4, #12]
 8008f72:	f7ff ff77 	bl	8008e64 <std>
 8008f76:	2301      	movs	r3, #1
 8008f78:	61a3      	str	r3, [r4, #24]
 8008f7a:	e7d1      	b.n	8008f20 <__sinit+0xc>
 8008f7c:	0800a204 	.word	0x0800a204
 8008f80:	08008ead 	.word	0x08008ead

08008f84 <__sfp>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	4607      	mov	r7, r0
 8008f88:	f7ff ffac 	bl	8008ee4 <__sfp_lock_acquire>
 8008f8c:	4b1e      	ldr	r3, [pc, #120]	; (8009008 <__sfp+0x84>)
 8008f8e:	681e      	ldr	r6, [r3, #0]
 8008f90:	69b3      	ldr	r3, [r6, #24]
 8008f92:	b913      	cbnz	r3, 8008f9a <__sfp+0x16>
 8008f94:	4630      	mov	r0, r6
 8008f96:	f7ff ffbd 	bl	8008f14 <__sinit>
 8008f9a:	3648      	adds	r6, #72	; 0x48
 8008f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	d503      	bpl.n	8008fac <__sfp+0x28>
 8008fa4:	6833      	ldr	r3, [r6, #0]
 8008fa6:	b30b      	cbz	r3, 8008fec <__sfp+0x68>
 8008fa8:	6836      	ldr	r6, [r6, #0]
 8008faa:	e7f7      	b.n	8008f9c <__sfp+0x18>
 8008fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fb0:	b9d5      	cbnz	r5, 8008fe8 <__sfp+0x64>
 8008fb2:	4b16      	ldr	r3, [pc, #88]	; (800900c <__sfp+0x88>)
 8008fb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fb8:	60e3      	str	r3, [r4, #12]
 8008fba:	6665      	str	r5, [r4, #100]	; 0x64
 8008fbc:	f000 f847 	bl	800904e <__retarget_lock_init_recursive>
 8008fc0:	f7ff ff96 	bl	8008ef0 <__sfp_lock_release>
 8008fc4:	2208      	movs	r2, #8
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008fcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008fd0:	6025      	str	r5, [r4, #0]
 8008fd2:	61a5      	str	r5, [r4, #24]
 8008fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008fd8:	f7ff fe10 	bl	8008bfc <memset>
 8008fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe8:	3468      	adds	r4, #104	; 0x68
 8008fea:	e7d9      	b.n	8008fa0 <__sfp+0x1c>
 8008fec:	2104      	movs	r1, #4
 8008fee:	4638      	mov	r0, r7
 8008ff0:	f7ff ff62 	bl	8008eb8 <__sfmoreglue>
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	6030      	str	r0, [r6, #0]
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d1d5      	bne.n	8008fa8 <__sfp+0x24>
 8008ffc:	f7ff ff78 	bl	8008ef0 <__sfp_lock_release>
 8009000:	230c      	movs	r3, #12
 8009002:	603b      	str	r3, [r7, #0]
 8009004:	e7ee      	b.n	8008fe4 <__sfp+0x60>
 8009006:	bf00      	nop
 8009008:	0800a204 	.word	0x0800a204
 800900c:	ffff0001 	.word	0xffff0001

08009010 <_fwalk_reent>:
 8009010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009014:	4606      	mov	r6, r0
 8009016:	4688      	mov	r8, r1
 8009018:	2700      	movs	r7, #0
 800901a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800901e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009022:	f1b9 0901 	subs.w	r9, r9, #1
 8009026:	d505      	bpl.n	8009034 <_fwalk_reent+0x24>
 8009028:	6824      	ldr	r4, [r4, #0]
 800902a:	2c00      	cmp	r4, #0
 800902c:	d1f7      	bne.n	800901e <_fwalk_reent+0xe>
 800902e:	4638      	mov	r0, r7
 8009030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009034:	89ab      	ldrh	r3, [r5, #12]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d907      	bls.n	800904a <_fwalk_reent+0x3a>
 800903a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800903e:	3301      	adds	r3, #1
 8009040:	d003      	beq.n	800904a <_fwalk_reent+0x3a>
 8009042:	4629      	mov	r1, r5
 8009044:	4630      	mov	r0, r6
 8009046:	47c0      	blx	r8
 8009048:	4307      	orrs	r7, r0
 800904a:	3568      	adds	r5, #104	; 0x68
 800904c:	e7e9      	b.n	8009022 <_fwalk_reent+0x12>

0800904e <__retarget_lock_init_recursive>:
 800904e:	4770      	bx	lr

08009050 <__retarget_lock_acquire_recursive>:
 8009050:	4770      	bx	lr

08009052 <__retarget_lock_release_recursive>:
 8009052:	4770      	bx	lr

08009054 <__malloc_lock>:
 8009054:	4801      	ldr	r0, [pc, #4]	; (800905c <__malloc_lock+0x8>)
 8009056:	f7ff bffb 	b.w	8009050 <__retarget_lock_acquire_recursive>
 800905a:	bf00      	nop
 800905c:	2000142c 	.word	0x2000142c

08009060 <__malloc_unlock>:
 8009060:	4801      	ldr	r0, [pc, #4]	; (8009068 <__malloc_unlock+0x8>)
 8009062:	f7ff bff6 	b.w	8009052 <__retarget_lock_release_recursive>
 8009066:	bf00      	nop
 8009068:	2000142c 	.word	0x2000142c

0800906c <__ssputs_r>:
 800906c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	688e      	ldr	r6, [r1, #8]
 8009072:	4682      	mov	sl, r0
 8009074:	429e      	cmp	r6, r3
 8009076:	460c      	mov	r4, r1
 8009078:	4690      	mov	r8, r2
 800907a:	461f      	mov	r7, r3
 800907c:	d838      	bhi.n	80090f0 <__ssputs_r+0x84>
 800907e:	898a      	ldrh	r2, [r1, #12]
 8009080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009084:	d032      	beq.n	80090ec <__ssputs_r+0x80>
 8009086:	6825      	ldr	r5, [r4, #0]
 8009088:	6909      	ldr	r1, [r1, #16]
 800908a:	3301      	adds	r3, #1
 800908c:	eba5 0901 	sub.w	r9, r5, r1
 8009090:	6965      	ldr	r5, [r4, #20]
 8009092:	444b      	add	r3, r9
 8009094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009098:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800909c:	106d      	asrs	r5, r5, #1
 800909e:	429d      	cmp	r5, r3
 80090a0:	bf38      	it	cc
 80090a2:	461d      	movcc	r5, r3
 80090a4:	0553      	lsls	r3, r2, #21
 80090a6:	d531      	bpl.n	800910c <__ssputs_r+0xa0>
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7ff fe17 	bl	8008cdc <_malloc_r>
 80090ae:	4606      	mov	r6, r0
 80090b0:	b950      	cbnz	r0, 80090c8 <__ssputs_r+0x5c>
 80090b2:	230c      	movs	r3, #12
 80090b4:	f04f 30ff 	mov.w	r0, #4294967295
 80090b8:	f8ca 3000 	str.w	r3, [sl]
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c2:	81a3      	strh	r3, [r4, #12]
 80090c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c8:	464a      	mov	r2, r9
 80090ca:	6921      	ldr	r1, [r4, #16]
 80090cc:	f000 fe82 	bl	8009dd4 <memcpy>
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090da:	81a3      	strh	r3, [r4, #12]
 80090dc:	6126      	str	r6, [r4, #16]
 80090de:	444e      	add	r6, r9
 80090e0:	6026      	str	r6, [r4, #0]
 80090e2:	463e      	mov	r6, r7
 80090e4:	6165      	str	r5, [r4, #20]
 80090e6:	eba5 0509 	sub.w	r5, r5, r9
 80090ea:	60a5      	str	r5, [r4, #8]
 80090ec:	42be      	cmp	r6, r7
 80090ee:	d900      	bls.n	80090f2 <__ssputs_r+0x86>
 80090f0:	463e      	mov	r6, r7
 80090f2:	4632      	mov	r2, r6
 80090f4:	4641      	mov	r1, r8
 80090f6:	6820      	ldr	r0, [r4, #0]
 80090f8:	f000 fe7a 	bl	8009df0 <memmove>
 80090fc:	68a3      	ldr	r3, [r4, #8]
 80090fe:	2000      	movs	r0, #0
 8009100:	1b9b      	subs	r3, r3, r6
 8009102:	60a3      	str	r3, [r4, #8]
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	4433      	add	r3, r6
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	e7db      	b.n	80090c4 <__ssputs_r+0x58>
 800910c:	462a      	mov	r2, r5
 800910e:	f000 fe89 	bl	8009e24 <_realloc_r>
 8009112:	4606      	mov	r6, r0
 8009114:	2800      	cmp	r0, #0
 8009116:	d1e1      	bne.n	80090dc <__ssputs_r+0x70>
 8009118:	4650      	mov	r0, sl
 800911a:	6921      	ldr	r1, [r4, #16]
 800911c:	f7ff fd76 	bl	8008c0c <_free_r>
 8009120:	e7c7      	b.n	80090b2 <__ssputs_r+0x46>
	...

08009124 <_svfiprintf_r>:
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	4698      	mov	r8, r3
 800912a:	898b      	ldrh	r3, [r1, #12]
 800912c:	4607      	mov	r7, r0
 800912e:	061b      	lsls	r3, r3, #24
 8009130:	460d      	mov	r5, r1
 8009132:	4614      	mov	r4, r2
 8009134:	b09d      	sub	sp, #116	; 0x74
 8009136:	d50e      	bpl.n	8009156 <_svfiprintf_r+0x32>
 8009138:	690b      	ldr	r3, [r1, #16]
 800913a:	b963      	cbnz	r3, 8009156 <_svfiprintf_r+0x32>
 800913c:	2140      	movs	r1, #64	; 0x40
 800913e:	f7ff fdcd 	bl	8008cdc <_malloc_r>
 8009142:	6028      	str	r0, [r5, #0]
 8009144:	6128      	str	r0, [r5, #16]
 8009146:	b920      	cbnz	r0, 8009152 <_svfiprintf_r+0x2e>
 8009148:	230c      	movs	r3, #12
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	e0d1      	b.n	80092f6 <_svfiprintf_r+0x1d2>
 8009152:	2340      	movs	r3, #64	; 0x40
 8009154:	616b      	str	r3, [r5, #20]
 8009156:	2300      	movs	r3, #0
 8009158:	9309      	str	r3, [sp, #36]	; 0x24
 800915a:	2320      	movs	r3, #32
 800915c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009160:	2330      	movs	r3, #48	; 0x30
 8009162:	f04f 0901 	mov.w	r9, #1
 8009166:	f8cd 800c 	str.w	r8, [sp, #12]
 800916a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009310 <_svfiprintf_r+0x1ec>
 800916e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009172:	4623      	mov	r3, r4
 8009174:	469a      	mov	sl, r3
 8009176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800917a:	b10a      	cbz	r2, 8009180 <_svfiprintf_r+0x5c>
 800917c:	2a25      	cmp	r2, #37	; 0x25
 800917e:	d1f9      	bne.n	8009174 <_svfiprintf_r+0x50>
 8009180:	ebba 0b04 	subs.w	fp, sl, r4
 8009184:	d00b      	beq.n	800919e <_svfiprintf_r+0x7a>
 8009186:	465b      	mov	r3, fp
 8009188:	4622      	mov	r2, r4
 800918a:	4629      	mov	r1, r5
 800918c:	4638      	mov	r0, r7
 800918e:	f7ff ff6d 	bl	800906c <__ssputs_r>
 8009192:	3001      	adds	r0, #1
 8009194:	f000 80aa 	beq.w	80092ec <_svfiprintf_r+0x1c8>
 8009198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800919a:	445a      	add	r2, fp
 800919c:	9209      	str	r2, [sp, #36]	; 0x24
 800919e:	f89a 3000 	ldrb.w	r3, [sl]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 80a2 	beq.w	80092ec <_svfiprintf_r+0x1c8>
 80091a8:	2300      	movs	r3, #0
 80091aa:	f04f 32ff 	mov.w	r2, #4294967295
 80091ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091b2:	f10a 0a01 	add.w	sl, sl, #1
 80091b6:	9304      	str	r3, [sp, #16]
 80091b8:	9307      	str	r3, [sp, #28]
 80091ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091be:	931a      	str	r3, [sp, #104]	; 0x68
 80091c0:	4654      	mov	r4, sl
 80091c2:	2205      	movs	r2, #5
 80091c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c8:	4851      	ldr	r0, [pc, #324]	; (8009310 <_svfiprintf_r+0x1ec>)
 80091ca:	f000 fdf5 	bl	8009db8 <memchr>
 80091ce:	9a04      	ldr	r2, [sp, #16]
 80091d0:	b9d8      	cbnz	r0, 800920a <_svfiprintf_r+0xe6>
 80091d2:	06d0      	lsls	r0, r2, #27
 80091d4:	bf44      	itt	mi
 80091d6:	2320      	movmi	r3, #32
 80091d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091dc:	0711      	lsls	r1, r2, #28
 80091de:	bf44      	itt	mi
 80091e0:	232b      	movmi	r3, #43	; 0x2b
 80091e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091e6:	f89a 3000 	ldrb.w	r3, [sl]
 80091ea:	2b2a      	cmp	r3, #42	; 0x2a
 80091ec:	d015      	beq.n	800921a <_svfiprintf_r+0xf6>
 80091ee:	4654      	mov	r4, sl
 80091f0:	2000      	movs	r0, #0
 80091f2:	f04f 0c0a 	mov.w	ip, #10
 80091f6:	9a07      	ldr	r2, [sp, #28]
 80091f8:	4621      	mov	r1, r4
 80091fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091fe:	3b30      	subs	r3, #48	; 0x30
 8009200:	2b09      	cmp	r3, #9
 8009202:	d94e      	bls.n	80092a2 <_svfiprintf_r+0x17e>
 8009204:	b1b0      	cbz	r0, 8009234 <_svfiprintf_r+0x110>
 8009206:	9207      	str	r2, [sp, #28]
 8009208:	e014      	b.n	8009234 <_svfiprintf_r+0x110>
 800920a:	eba0 0308 	sub.w	r3, r0, r8
 800920e:	fa09 f303 	lsl.w	r3, r9, r3
 8009212:	4313      	orrs	r3, r2
 8009214:	46a2      	mov	sl, r4
 8009216:	9304      	str	r3, [sp, #16]
 8009218:	e7d2      	b.n	80091c0 <_svfiprintf_r+0x9c>
 800921a:	9b03      	ldr	r3, [sp, #12]
 800921c:	1d19      	adds	r1, r3, #4
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	9103      	str	r1, [sp, #12]
 8009222:	2b00      	cmp	r3, #0
 8009224:	bfbb      	ittet	lt
 8009226:	425b      	neglt	r3, r3
 8009228:	f042 0202 	orrlt.w	r2, r2, #2
 800922c:	9307      	strge	r3, [sp, #28]
 800922e:	9307      	strlt	r3, [sp, #28]
 8009230:	bfb8      	it	lt
 8009232:	9204      	strlt	r2, [sp, #16]
 8009234:	7823      	ldrb	r3, [r4, #0]
 8009236:	2b2e      	cmp	r3, #46	; 0x2e
 8009238:	d10c      	bne.n	8009254 <_svfiprintf_r+0x130>
 800923a:	7863      	ldrb	r3, [r4, #1]
 800923c:	2b2a      	cmp	r3, #42	; 0x2a
 800923e:	d135      	bne.n	80092ac <_svfiprintf_r+0x188>
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	3402      	adds	r4, #2
 8009244:	1d1a      	adds	r2, r3, #4
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	9203      	str	r2, [sp, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	bfb8      	it	lt
 800924e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009252:	9305      	str	r3, [sp, #20]
 8009254:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009314 <_svfiprintf_r+0x1f0>
 8009258:	2203      	movs	r2, #3
 800925a:	4650      	mov	r0, sl
 800925c:	7821      	ldrb	r1, [r4, #0]
 800925e:	f000 fdab 	bl	8009db8 <memchr>
 8009262:	b140      	cbz	r0, 8009276 <_svfiprintf_r+0x152>
 8009264:	2340      	movs	r3, #64	; 0x40
 8009266:	eba0 000a 	sub.w	r0, r0, sl
 800926a:	fa03 f000 	lsl.w	r0, r3, r0
 800926e:	9b04      	ldr	r3, [sp, #16]
 8009270:	3401      	adds	r4, #1
 8009272:	4303      	orrs	r3, r0
 8009274:	9304      	str	r3, [sp, #16]
 8009276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927a:	2206      	movs	r2, #6
 800927c:	4826      	ldr	r0, [pc, #152]	; (8009318 <_svfiprintf_r+0x1f4>)
 800927e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009282:	f000 fd99 	bl	8009db8 <memchr>
 8009286:	2800      	cmp	r0, #0
 8009288:	d038      	beq.n	80092fc <_svfiprintf_r+0x1d8>
 800928a:	4b24      	ldr	r3, [pc, #144]	; (800931c <_svfiprintf_r+0x1f8>)
 800928c:	bb1b      	cbnz	r3, 80092d6 <_svfiprintf_r+0x1b2>
 800928e:	9b03      	ldr	r3, [sp, #12]
 8009290:	3307      	adds	r3, #7
 8009292:	f023 0307 	bic.w	r3, r3, #7
 8009296:	3308      	adds	r3, #8
 8009298:	9303      	str	r3, [sp, #12]
 800929a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800929c:	4433      	add	r3, r6
 800929e:	9309      	str	r3, [sp, #36]	; 0x24
 80092a0:	e767      	b.n	8009172 <_svfiprintf_r+0x4e>
 80092a2:	460c      	mov	r4, r1
 80092a4:	2001      	movs	r0, #1
 80092a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80092aa:	e7a5      	b.n	80091f8 <_svfiprintf_r+0xd4>
 80092ac:	2300      	movs	r3, #0
 80092ae:	f04f 0c0a 	mov.w	ip, #10
 80092b2:	4619      	mov	r1, r3
 80092b4:	3401      	adds	r4, #1
 80092b6:	9305      	str	r3, [sp, #20]
 80092b8:	4620      	mov	r0, r4
 80092ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092be:	3a30      	subs	r2, #48	; 0x30
 80092c0:	2a09      	cmp	r2, #9
 80092c2:	d903      	bls.n	80092cc <_svfiprintf_r+0x1a8>
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d0c5      	beq.n	8009254 <_svfiprintf_r+0x130>
 80092c8:	9105      	str	r1, [sp, #20]
 80092ca:	e7c3      	b.n	8009254 <_svfiprintf_r+0x130>
 80092cc:	4604      	mov	r4, r0
 80092ce:	2301      	movs	r3, #1
 80092d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d4:	e7f0      	b.n	80092b8 <_svfiprintf_r+0x194>
 80092d6:	ab03      	add	r3, sp, #12
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	462a      	mov	r2, r5
 80092dc:	4638      	mov	r0, r7
 80092de:	4b10      	ldr	r3, [pc, #64]	; (8009320 <_svfiprintf_r+0x1fc>)
 80092e0:	a904      	add	r1, sp, #16
 80092e2:	f3af 8000 	nop.w
 80092e6:	1c42      	adds	r2, r0, #1
 80092e8:	4606      	mov	r6, r0
 80092ea:	d1d6      	bne.n	800929a <_svfiprintf_r+0x176>
 80092ec:	89ab      	ldrh	r3, [r5, #12]
 80092ee:	065b      	lsls	r3, r3, #25
 80092f0:	f53f af2c 	bmi.w	800914c <_svfiprintf_r+0x28>
 80092f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092f6:	b01d      	add	sp, #116	; 0x74
 80092f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fc:	ab03      	add	r3, sp, #12
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	462a      	mov	r2, r5
 8009302:	4638      	mov	r0, r7
 8009304:	4b06      	ldr	r3, [pc, #24]	; (8009320 <_svfiprintf_r+0x1fc>)
 8009306:	a904      	add	r1, sp, #16
 8009308:	f000 f9d4 	bl	80096b4 <_printf_i>
 800930c:	e7eb      	b.n	80092e6 <_svfiprintf_r+0x1c2>
 800930e:	bf00      	nop
 8009310:	0800a268 	.word	0x0800a268
 8009314:	0800a26e 	.word	0x0800a26e
 8009318:	0800a272 	.word	0x0800a272
 800931c:	00000000 	.word	0x00000000
 8009320:	0800906d 	.word	0x0800906d

08009324 <__sfputc_r>:
 8009324:	6893      	ldr	r3, [r2, #8]
 8009326:	b410      	push	{r4}
 8009328:	3b01      	subs	r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	6093      	str	r3, [r2, #8]
 800932e:	da07      	bge.n	8009340 <__sfputc_r+0x1c>
 8009330:	6994      	ldr	r4, [r2, #24]
 8009332:	42a3      	cmp	r3, r4
 8009334:	db01      	blt.n	800933a <__sfputc_r+0x16>
 8009336:	290a      	cmp	r1, #10
 8009338:	d102      	bne.n	8009340 <__sfputc_r+0x1c>
 800933a:	bc10      	pop	{r4}
 800933c:	f000 bb24 	b.w	8009988 <__swbuf_r>
 8009340:	6813      	ldr	r3, [r2, #0]
 8009342:	1c58      	adds	r0, r3, #1
 8009344:	6010      	str	r0, [r2, #0]
 8009346:	7019      	strb	r1, [r3, #0]
 8009348:	4608      	mov	r0, r1
 800934a:	bc10      	pop	{r4}
 800934c:	4770      	bx	lr

0800934e <__sfputs_r>:
 800934e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009350:	4606      	mov	r6, r0
 8009352:	460f      	mov	r7, r1
 8009354:	4614      	mov	r4, r2
 8009356:	18d5      	adds	r5, r2, r3
 8009358:	42ac      	cmp	r4, r5
 800935a:	d101      	bne.n	8009360 <__sfputs_r+0x12>
 800935c:	2000      	movs	r0, #0
 800935e:	e007      	b.n	8009370 <__sfputs_r+0x22>
 8009360:	463a      	mov	r2, r7
 8009362:	4630      	mov	r0, r6
 8009364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009368:	f7ff ffdc 	bl	8009324 <__sfputc_r>
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d1f3      	bne.n	8009358 <__sfputs_r+0xa>
 8009370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009374 <_vfiprintf_r>:
 8009374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009378:	460d      	mov	r5, r1
 800937a:	4614      	mov	r4, r2
 800937c:	4698      	mov	r8, r3
 800937e:	4606      	mov	r6, r0
 8009380:	b09d      	sub	sp, #116	; 0x74
 8009382:	b118      	cbz	r0, 800938c <_vfiprintf_r+0x18>
 8009384:	6983      	ldr	r3, [r0, #24]
 8009386:	b90b      	cbnz	r3, 800938c <_vfiprintf_r+0x18>
 8009388:	f7ff fdc4 	bl	8008f14 <__sinit>
 800938c:	4b89      	ldr	r3, [pc, #548]	; (80095b4 <_vfiprintf_r+0x240>)
 800938e:	429d      	cmp	r5, r3
 8009390:	d11b      	bne.n	80093ca <_vfiprintf_r+0x56>
 8009392:	6875      	ldr	r5, [r6, #4]
 8009394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009396:	07d9      	lsls	r1, r3, #31
 8009398:	d405      	bmi.n	80093a6 <_vfiprintf_r+0x32>
 800939a:	89ab      	ldrh	r3, [r5, #12]
 800939c:	059a      	lsls	r2, r3, #22
 800939e:	d402      	bmi.n	80093a6 <_vfiprintf_r+0x32>
 80093a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093a2:	f7ff fe55 	bl	8009050 <__retarget_lock_acquire_recursive>
 80093a6:	89ab      	ldrh	r3, [r5, #12]
 80093a8:	071b      	lsls	r3, r3, #28
 80093aa:	d501      	bpl.n	80093b0 <_vfiprintf_r+0x3c>
 80093ac:	692b      	ldr	r3, [r5, #16]
 80093ae:	b9eb      	cbnz	r3, 80093ec <_vfiprintf_r+0x78>
 80093b0:	4629      	mov	r1, r5
 80093b2:	4630      	mov	r0, r6
 80093b4:	f000 fb4c 	bl	8009a50 <__swsetup_r>
 80093b8:	b1c0      	cbz	r0, 80093ec <_vfiprintf_r+0x78>
 80093ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093bc:	07dc      	lsls	r4, r3, #31
 80093be:	d50e      	bpl.n	80093de <_vfiprintf_r+0x6a>
 80093c0:	f04f 30ff 	mov.w	r0, #4294967295
 80093c4:	b01d      	add	sp, #116	; 0x74
 80093c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ca:	4b7b      	ldr	r3, [pc, #492]	; (80095b8 <_vfiprintf_r+0x244>)
 80093cc:	429d      	cmp	r5, r3
 80093ce:	d101      	bne.n	80093d4 <_vfiprintf_r+0x60>
 80093d0:	68b5      	ldr	r5, [r6, #8]
 80093d2:	e7df      	b.n	8009394 <_vfiprintf_r+0x20>
 80093d4:	4b79      	ldr	r3, [pc, #484]	; (80095bc <_vfiprintf_r+0x248>)
 80093d6:	429d      	cmp	r5, r3
 80093d8:	bf08      	it	eq
 80093da:	68f5      	ldreq	r5, [r6, #12]
 80093dc:	e7da      	b.n	8009394 <_vfiprintf_r+0x20>
 80093de:	89ab      	ldrh	r3, [r5, #12]
 80093e0:	0598      	lsls	r0, r3, #22
 80093e2:	d4ed      	bmi.n	80093c0 <_vfiprintf_r+0x4c>
 80093e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093e6:	f7ff fe34 	bl	8009052 <__retarget_lock_release_recursive>
 80093ea:	e7e9      	b.n	80093c0 <_vfiprintf_r+0x4c>
 80093ec:	2300      	movs	r3, #0
 80093ee:	9309      	str	r3, [sp, #36]	; 0x24
 80093f0:	2320      	movs	r3, #32
 80093f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093f6:	2330      	movs	r3, #48	; 0x30
 80093f8:	f04f 0901 	mov.w	r9, #1
 80093fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009400:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80095c0 <_vfiprintf_r+0x24c>
 8009404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009408:	4623      	mov	r3, r4
 800940a:	469a      	mov	sl, r3
 800940c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009410:	b10a      	cbz	r2, 8009416 <_vfiprintf_r+0xa2>
 8009412:	2a25      	cmp	r2, #37	; 0x25
 8009414:	d1f9      	bne.n	800940a <_vfiprintf_r+0x96>
 8009416:	ebba 0b04 	subs.w	fp, sl, r4
 800941a:	d00b      	beq.n	8009434 <_vfiprintf_r+0xc0>
 800941c:	465b      	mov	r3, fp
 800941e:	4622      	mov	r2, r4
 8009420:	4629      	mov	r1, r5
 8009422:	4630      	mov	r0, r6
 8009424:	f7ff ff93 	bl	800934e <__sfputs_r>
 8009428:	3001      	adds	r0, #1
 800942a:	f000 80aa 	beq.w	8009582 <_vfiprintf_r+0x20e>
 800942e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009430:	445a      	add	r2, fp
 8009432:	9209      	str	r2, [sp, #36]	; 0x24
 8009434:	f89a 3000 	ldrb.w	r3, [sl]
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 80a2 	beq.w	8009582 <_vfiprintf_r+0x20e>
 800943e:	2300      	movs	r3, #0
 8009440:	f04f 32ff 	mov.w	r2, #4294967295
 8009444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009448:	f10a 0a01 	add.w	sl, sl, #1
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	9307      	str	r3, [sp, #28]
 8009450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009454:	931a      	str	r3, [sp, #104]	; 0x68
 8009456:	4654      	mov	r4, sl
 8009458:	2205      	movs	r2, #5
 800945a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800945e:	4858      	ldr	r0, [pc, #352]	; (80095c0 <_vfiprintf_r+0x24c>)
 8009460:	f000 fcaa 	bl	8009db8 <memchr>
 8009464:	9a04      	ldr	r2, [sp, #16]
 8009466:	b9d8      	cbnz	r0, 80094a0 <_vfiprintf_r+0x12c>
 8009468:	06d1      	lsls	r1, r2, #27
 800946a:	bf44      	itt	mi
 800946c:	2320      	movmi	r3, #32
 800946e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009472:	0713      	lsls	r3, r2, #28
 8009474:	bf44      	itt	mi
 8009476:	232b      	movmi	r3, #43	; 0x2b
 8009478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800947c:	f89a 3000 	ldrb.w	r3, [sl]
 8009480:	2b2a      	cmp	r3, #42	; 0x2a
 8009482:	d015      	beq.n	80094b0 <_vfiprintf_r+0x13c>
 8009484:	4654      	mov	r4, sl
 8009486:	2000      	movs	r0, #0
 8009488:	f04f 0c0a 	mov.w	ip, #10
 800948c:	9a07      	ldr	r2, [sp, #28]
 800948e:	4621      	mov	r1, r4
 8009490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009494:	3b30      	subs	r3, #48	; 0x30
 8009496:	2b09      	cmp	r3, #9
 8009498:	d94e      	bls.n	8009538 <_vfiprintf_r+0x1c4>
 800949a:	b1b0      	cbz	r0, 80094ca <_vfiprintf_r+0x156>
 800949c:	9207      	str	r2, [sp, #28]
 800949e:	e014      	b.n	80094ca <_vfiprintf_r+0x156>
 80094a0:	eba0 0308 	sub.w	r3, r0, r8
 80094a4:	fa09 f303 	lsl.w	r3, r9, r3
 80094a8:	4313      	orrs	r3, r2
 80094aa:	46a2      	mov	sl, r4
 80094ac:	9304      	str	r3, [sp, #16]
 80094ae:	e7d2      	b.n	8009456 <_vfiprintf_r+0xe2>
 80094b0:	9b03      	ldr	r3, [sp, #12]
 80094b2:	1d19      	adds	r1, r3, #4
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	9103      	str	r1, [sp, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	bfbb      	ittet	lt
 80094bc:	425b      	neglt	r3, r3
 80094be:	f042 0202 	orrlt.w	r2, r2, #2
 80094c2:	9307      	strge	r3, [sp, #28]
 80094c4:	9307      	strlt	r3, [sp, #28]
 80094c6:	bfb8      	it	lt
 80094c8:	9204      	strlt	r2, [sp, #16]
 80094ca:	7823      	ldrb	r3, [r4, #0]
 80094cc:	2b2e      	cmp	r3, #46	; 0x2e
 80094ce:	d10c      	bne.n	80094ea <_vfiprintf_r+0x176>
 80094d0:	7863      	ldrb	r3, [r4, #1]
 80094d2:	2b2a      	cmp	r3, #42	; 0x2a
 80094d4:	d135      	bne.n	8009542 <_vfiprintf_r+0x1ce>
 80094d6:	9b03      	ldr	r3, [sp, #12]
 80094d8:	3402      	adds	r4, #2
 80094da:	1d1a      	adds	r2, r3, #4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	9203      	str	r2, [sp, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bfb8      	it	lt
 80094e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80094e8:	9305      	str	r3, [sp, #20]
 80094ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80095c4 <_vfiprintf_r+0x250>
 80094ee:	2203      	movs	r2, #3
 80094f0:	4650      	mov	r0, sl
 80094f2:	7821      	ldrb	r1, [r4, #0]
 80094f4:	f000 fc60 	bl	8009db8 <memchr>
 80094f8:	b140      	cbz	r0, 800950c <_vfiprintf_r+0x198>
 80094fa:	2340      	movs	r3, #64	; 0x40
 80094fc:	eba0 000a 	sub.w	r0, r0, sl
 8009500:	fa03 f000 	lsl.w	r0, r3, r0
 8009504:	9b04      	ldr	r3, [sp, #16]
 8009506:	3401      	adds	r4, #1
 8009508:	4303      	orrs	r3, r0
 800950a:	9304      	str	r3, [sp, #16]
 800950c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009510:	2206      	movs	r2, #6
 8009512:	482d      	ldr	r0, [pc, #180]	; (80095c8 <_vfiprintf_r+0x254>)
 8009514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009518:	f000 fc4e 	bl	8009db8 <memchr>
 800951c:	2800      	cmp	r0, #0
 800951e:	d03f      	beq.n	80095a0 <_vfiprintf_r+0x22c>
 8009520:	4b2a      	ldr	r3, [pc, #168]	; (80095cc <_vfiprintf_r+0x258>)
 8009522:	bb1b      	cbnz	r3, 800956c <_vfiprintf_r+0x1f8>
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	3307      	adds	r3, #7
 8009528:	f023 0307 	bic.w	r3, r3, #7
 800952c:	3308      	adds	r3, #8
 800952e:	9303      	str	r3, [sp, #12]
 8009530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009532:	443b      	add	r3, r7
 8009534:	9309      	str	r3, [sp, #36]	; 0x24
 8009536:	e767      	b.n	8009408 <_vfiprintf_r+0x94>
 8009538:	460c      	mov	r4, r1
 800953a:	2001      	movs	r0, #1
 800953c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009540:	e7a5      	b.n	800948e <_vfiprintf_r+0x11a>
 8009542:	2300      	movs	r3, #0
 8009544:	f04f 0c0a 	mov.w	ip, #10
 8009548:	4619      	mov	r1, r3
 800954a:	3401      	adds	r4, #1
 800954c:	9305      	str	r3, [sp, #20]
 800954e:	4620      	mov	r0, r4
 8009550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009554:	3a30      	subs	r2, #48	; 0x30
 8009556:	2a09      	cmp	r2, #9
 8009558:	d903      	bls.n	8009562 <_vfiprintf_r+0x1ee>
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0c5      	beq.n	80094ea <_vfiprintf_r+0x176>
 800955e:	9105      	str	r1, [sp, #20]
 8009560:	e7c3      	b.n	80094ea <_vfiprintf_r+0x176>
 8009562:	4604      	mov	r4, r0
 8009564:	2301      	movs	r3, #1
 8009566:	fb0c 2101 	mla	r1, ip, r1, r2
 800956a:	e7f0      	b.n	800954e <_vfiprintf_r+0x1da>
 800956c:	ab03      	add	r3, sp, #12
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	462a      	mov	r2, r5
 8009572:	4630      	mov	r0, r6
 8009574:	4b16      	ldr	r3, [pc, #88]	; (80095d0 <_vfiprintf_r+0x25c>)
 8009576:	a904      	add	r1, sp, #16
 8009578:	f3af 8000 	nop.w
 800957c:	4607      	mov	r7, r0
 800957e:	1c78      	adds	r0, r7, #1
 8009580:	d1d6      	bne.n	8009530 <_vfiprintf_r+0x1bc>
 8009582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009584:	07d9      	lsls	r1, r3, #31
 8009586:	d405      	bmi.n	8009594 <_vfiprintf_r+0x220>
 8009588:	89ab      	ldrh	r3, [r5, #12]
 800958a:	059a      	lsls	r2, r3, #22
 800958c:	d402      	bmi.n	8009594 <_vfiprintf_r+0x220>
 800958e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009590:	f7ff fd5f 	bl	8009052 <__retarget_lock_release_recursive>
 8009594:	89ab      	ldrh	r3, [r5, #12]
 8009596:	065b      	lsls	r3, r3, #25
 8009598:	f53f af12 	bmi.w	80093c0 <_vfiprintf_r+0x4c>
 800959c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800959e:	e711      	b.n	80093c4 <_vfiprintf_r+0x50>
 80095a0:	ab03      	add	r3, sp, #12
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	462a      	mov	r2, r5
 80095a6:	4630      	mov	r0, r6
 80095a8:	4b09      	ldr	r3, [pc, #36]	; (80095d0 <_vfiprintf_r+0x25c>)
 80095aa:	a904      	add	r1, sp, #16
 80095ac:	f000 f882 	bl	80096b4 <_printf_i>
 80095b0:	e7e4      	b.n	800957c <_vfiprintf_r+0x208>
 80095b2:	bf00      	nop
 80095b4:	0800a228 	.word	0x0800a228
 80095b8:	0800a248 	.word	0x0800a248
 80095bc:	0800a208 	.word	0x0800a208
 80095c0:	0800a268 	.word	0x0800a268
 80095c4:	0800a26e 	.word	0x0800a26e
 80095c8:	0800a272 	.word	0x0800a272
 80095cc:	00000000 	.word	0x00000000
 80095d0:	0800934f 	.word	0x0800934f

080095d4 <_printf_common>:
 80095d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	4616      	mov	r6, r2
 80095da:	4699      	mov	r9, r3
 80095dc:	688a      	ldr	r2, [r1, #8]
 80095de:	690b      	ldr	r3, [r1, #16]
 80095e0:	4607      	mov	r7, r0
 80095e2:	4293      	cmp	r3, r2
 80095e4:	bfb8      	it	lt
 80095e6:	4613      	movlt	r3, r2
 80095e8:	6033      	str	r3, [r6, #0]
 80095ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095ee:	460c      	mov	r4, r1
 80095f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095f4:	b10a      	cbz	r2, 80095fa <_printf_common+0x26>
 80095f6:	3301      	adds	r3, #1
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	0699      	lsls	r1, r3, #26
 80095fe:	bf42      	ittt	mi
 8009600:	6833      	ldrmi	r3, [r6, #0]
 8009602:	3302      	addmi	r3, #2
 8009604:	6033      	strmi	r3, [r6, #0]
 8009606:	6825      	ldr	r5, [r4, #0]
 8009608:	f015 0506 	ands.w	r5, r5, #6
 800960c:	d106      	bne.n	800961c <_printf_common+0x48>
 800960e:	f104 0a19 	add.w	sl, r4, #25
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	6832      	ldr	r2, [r6, #0]
 8009616:	1a9b      	subs	r3, r3, r2
 8009618:	42ab      	cmp	r3, r5
 800961a:	dc28      	bgt.n	800966e <_printf_common+0x9a>
 800961c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009620:	1e13      	subs	r3, r2, #0
 8009622:	6822      	ldr	r2, [r4, #0]
 8009624:	bf18      	it	ne
 8009626:	2301      	movne	r3, #1
 8009628:	0692      	lsls	r2, r2, #26
 800962a:	d42d      	bmi.n	8009688 <_printf_common+0xb4>
 800962c:	4649      	mov	r1, r9
 800962e:	4638      	mov	r0, r7
 8009630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009634:	47c0      	blx	r8
 8009636:	3001      	adds	r0, #1
 8009638:	d020      	beq.n	800967c <_printf_common+0xa8>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	68e5      	ldr	r5, [r4, #12]
 800963e:	f003 0306 	and.w	r3, r3, #6
 8009642:	2b04      	cmp	r3, #4
 8009644:	bf18      	it	ne
 8009646:	2500      	movne	r5, #0
 8009648:	6832      	ldr	r2, [r6, #0]
 800964a:	f04f 0600 	mov.w	r6, #0
 800964e:	68a3      	ldr	r3, [r4, #8]
 8009650:	bf08      	it	eq
 8009652:	1aad      	subeq	r5, r5, r2
 8009654:	6922      	ldr	r2, [r4, #16]
 8009656:	bf08      	it	eq
 8009658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800965c:	4293      	cmp	r3, r2
 800965e:	bfc4      	itt	gt
 8009660:	1a9b      	subgt	r3, r3, r2
 8009662:	18ed      	addgt	r5, r5, r3
 8009664:	341a      	adds	r4, #26
 8009666:	42b5      	cmp	r5, r6
 8009668:	d11a      	bne.n	80096a0 <_printf_common+0xcc>
 800966a:	2000      	movs	r0, #0
 800966c:	e008      	b.n	8009680 <_printf_common+0xac>
 800966e:	2301      	movs	r3, #1
 8009670:	4652      	mov	r2, sl
 8009672:	4649      	mov	r1, r9
 8009674:	4638      	mov	r0, r7
 8009676:	47c0      	blx	r8
 8009678:	3001      	adds	r0, #1
 800967a:	d103      	bne.n	8009684 <_printf_common+0xb0>
 800967c:	f04f 30ff 	mov.w	r0, #4294967295
 8009680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009684:	3501      	adds	r5, #1
 8009686:	e7c4      	b.n	8009612 <_printf_common+0x3e>
 8009688:	2030      	movs	r0, #48	; 0x30
 800968a:	18e1      	adds	r1, r4, r3
 800968c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009696:	4422      	add	r2, r4
 8009698:	3302      	adds	r3, #2
 800969a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800969e:	e7c5      	b.n	800962c <_printf_common+0x58>
 80096a0:	2301      	movs	r3, #1
 80096a2:	4622      	mov	r2, r4
 80096a4:	4649      	mov	r1, r9
 80096a6:	4638      	mov	r0, r7
 80096a8:	47c0      	blx	r8
 80096aa:	3001      	adds	r0, #1
 80096ac:	d0e6      	beq.n	800967c <_printf_common+0xa8>
 80096ae:	3601      	adds	r6, #1
 80096b0:	e7d9      	b.n	8009666 <_printf_common+0x92>
	...

080096b4 <_printf_i>:
 80096b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096b8:	7e0f      	ldrb	r7, [r1, #24]
 80096ba:	4691      	mov	r9, r2
 80096bc:	2f78      	cmp	r7, #120	; 0x78
 80096be:	4680      	mov	r8, r0
 80096c0:	460c      	mov	r4, r1
 80096c2:	469a      	mov	sl, r3
 80096c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096ca:	d807      	bhi.n	80096dc <_printf_i+0x28>
 80096cc:	2f62      	cmp	r7, #98	; 0x62
 80096ce:	d80a      	bhi.n	80096e6 <_printf_i+0x32>
 80096d0:	2f00      	cmp	r7, #0
 80096d2:	f000 80d9 	beq.w	8009888 <_printf_i+0x1d4>
 80096d6:	2f58      	cmp	r7, #88	; 0x58
 80096d8:	f000 80a4 	beq.w	8009824 <_printf_i+0x170>
 80096dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096e4:	e03a      	b.n	800975c <_printf_i+0xa8>
 80096e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096ea:	2b15      	cmp	r3, #21
 80096ec:	d8f6      	bhi.n	80096dc <_printf_i+0x28>
 80096ee:	a101      	add	r1, pc, #4	; (adr r1, 80096f4 <_printf_i+0x40>)
 80096f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096f4:	0800974d 	.word	0x0800974d
 80096f8:	08009761 	.word	0x08009761
 80096fc:	080096dd 	.word	0x080096dd
 8009700:	080096dd 	.word	0x080096dd
 8009704:	080096dd 	.word	0x080096dd
 8009708:	080096dd 	.word	0x080096dd
 800970c:	08009761 	.word	0x08009761
 8009710:	080096dd 	.word	0x080096dd
 8009714:	080096dd 	.word	0x080096dd
 8009718:	080096dd 	.word	0x080096dd
 800971c:	080096dd 	.word	0x080096dd
 8009720:	0800986f 	.word	0x0800986f
 8009724:	08009791 	.word	0x08009791
 8009728:	08009851 	.word	0x08009851
 800972c:	080096dd 	.word	0x080096dd
 8009730:	080096dd 	.word	0x080096dd
 8009734:	08009891 	.word	0x08009891
 8009738:	080096dd 	.word	0x080096dd
 800973c:	08009791 	.word	0x08009791
 8009740:	080096dd 	.word	0x080096dd
 8009744:	080096dd 	.word	0x080096dd
 8009748:	08009859 	.word	0x08009859
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	1d1a      	adds	r2, r3, #4
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	602a      	str	r2, [r5, #0]
 8009754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800975c:	2301      	movs	r3, #1
 800975e:	e0a4      	b.n	80098aa <_printf_i+0x1f6>
 8009760:	6820      	ldr	r0, [r4, #0]
 8009762:	6829      	ldr	r1, [r5, #0]
 8009764:	0606      	lsls	r6, r0, #24
 8009766:	f101 0304 	add.w	r3, r1, #4
 800976a:	d50a      	bpl.n	8009782 <_printf_i+0xce>
 800976c:	680e      	ldr	r6, [r1, #0]
 800976e:	602b      	str	r3, [r5, #0]
 8009770:	2e00      	cmp	r6, #0
 8009772:	da03      	bge.n	800977c <_printf_i+0xc8>
 8009774:	232d      	movs	r3, #45	; 0x2d
 8009776:	4276      	negs	r6, r6
 8009778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800977c:	230a      	movs	r3, #10
 800977e:	485e      	ldr	r0, [pc, #376]	; (80098f8 <_printf_i+0x244>)
 8009780:	e019      	b.n	80097b6 <_printf_i+0x102>
 8009782:	680e      	ldr	r6, [r1, #0]
 8009784:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009788:	602b      	str	r3, [r5, #0]
 800978a:	bf18      	it	ne
 800978c:	b236      	sxthne	r6, r6
 800978e:	e7ef      	b.n	8009770 <_printf_i+0xbc>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	6820      	ldr	r0, [r4, #0]
 8009794:	1d19      	adds	r1, r3, #4
 8009796:	6029      	str	r1, [r5, #0]
 8009798:	0601      	lsls	r1, r0, #24
 800979a:	d501      	bpl.n	80097a0 <_printf_i+0xec>
 800979c:	681e      	ldr	r6, [r3, #0]
 800979e:	e002      	b.n	80097a6 <_printf_i+0xf2>
 80097a0:	0646      	lsls	r6, r0, #25
 80097a2:	d5fb      	bpl.n	800979c <_printf_i+0xe8>
 80097a4:	881e      	ldrh	r6, [r3, #0]
 80097a6:	2f6f      	cmp	r7, #111	; 0x6f
 80097a8:	bf0c      	ite	eq
 80097aa:	2308      	moveq	r3, #8
 80097ac:	230a      	movne	r3, #10
 80097ae:	4852      	ldr	r0, [pc, #328]	; (80098f8 <_printf_i+0x244>)
 80097b0:	2100      	movs	r1, #0
 80097b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097b6:	6865      	ldr	r5, [r4, #4]
 80097b8:	2d00      	cmp	r5, #0
 80097ba:	bfa8      	it	ge
 80097bc:	6821      	ldrge	r1, [r4, #0]
 80097be:	60a5      	str	r5, [r4, #8]
 80097c0:	bfa4      	itt	ge
 80097c2:	f021 0104 	bicge.w	r1, r1, #4
 80097c6:	6021      	strge	r1, [r4, #0]
 80097c8:	b90e      	cbnz	r6, 80097ce <_printf_i+0x11a>
 80097ca:	2d00      	cmp	r5, #0
 80097cc:	d04d      	beq.n	800986a <_printf_i+0x1b6>
 80097ce:	4615      	mov	r5, r2
 80097d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80097d4:	fb03 6711 	mls	r7, r3, r1, r6
 80097d8:	5dc7      	ldrb	r7, [r0, r7]
 80097da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097de:	4637      	mov	r7, r6
 80097e0:	42bb      	cmp	r3, r7
 80097e2:	460e      	mov	r6, r1
 80097e4:	d9f4      	bls.n	80097d0 <_printf_i+0x11c>
 80097e6:	2b08      	cmp	r3, #8
 80097e8:	d10b      	bne.n	8009802 <_printf_i+0x14e>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	07de      	lsls	r6, r3, #31
 80097ee:	d508      	bpl.n	8009802 <_printf_i+0x14e>
 80097f0:	6923      	ldr	r3, [r4, #16]
 80097f2:	6861      	ldr	r1, [r4, #4]
 80097f4:	4299      	cmp	r1, r3
 80097f6:	bfde      	ittt	le
 80097f8:	2330      	movle	r3, #48	; 0x30
 80097fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009802:	1b52      	subs	r2, r2, r5
 8009804:	6122      	str	r2, [r4, #16]
 8009806:	464b      	mov	r3, r9
 8009808:	4621      	mov	r1, r4
 800980a:	4640      	mov	r0, r8
 800980c:	f8cd a000 	str.w	sl, [sp]
 8009810:	aa03      	add	r2, sp, #12
 8009812:	f7ff fedf 	bl	80095d4 <_printf_common>
 8009816:	3001      	adds	r0, #1
 8009818:	d14c      	bne.n	80098b4 <_printf_i+0x200>
 800981a:	f04f 30ff 	mov.w	r0, #4294967295
 800981e:	b004      	add	sp, #16
 8009820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009824:	4834      	ldr	r0, [pc, #208]	; (80098f8 <_printf_i+0x244>)
 8009826:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800982a:	6829      	ldr	r1, [r5, #0]
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009832:	6029      	str	r1, [r5, #0]
 8009834:	061d      	lsls	r5, r3, #24
 8009836:	d514      	bpl.n	8009862 <_printf_i+0x1ae>
 8009838:	07df      	lsls	r7, r3, #31
 800983a:	bf44      	itt	mi
 800983c:	f043 0320 	orrmi.w	r3, r3, #32
 8009840:	6023      	strmi	r3, [r4, #0]
 8009842:	b91e      	cbnz	r6, 800984c <_printf_i+0x198>
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	f023 0320 	bic.w	r3, r3, #32
 800984a:	6023      	str	r3, [r4, #0]
 800984c:	2310      	movs	r3, #16
 800984e:	e7af      	b.n	80097b0 <_printf_i+0xfc>
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	f043 0320 	orr.w	r3, r3, #32
 8009856:	6023      	str	r3, [r4, #0]
 8009858:	2378      	movs	r3, #120	; 0x78
 800985a:	4828      	ldr	r0, [pc, #160]	; (80098fc <_printf_i+0x248>)
 800985c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009860:	e7e3      	b.n	800982a <_printf_i+0x176>
 8009862:	0659      	lsls	r1, r3, #25
 8009864:	bf48      	it	mi
 8009866:	b2b6      	uxthmi	r6, r6
 8009868:	e7e6      	b.n	8009838 <_printf_i+0x184>
 800986a:	4615      	mov	r5, r2
 800986c:	e7bb      	b.n	80097e6 <_printf_i+0x132>
 800986e:	682b      	ldr	r3, [r5, #0]
 8009870:	6826      	ldr	r6, [r4, #0]
 8009872:	1d18      	adds	r0, r3, #4
 8009874:	6961      	ldr	r1, [r4, #20]
 8009876:	6028      	str	r0, [r5, #0]
 8009878:	0635      	lsls	r5, r6, #24
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	d501      	bpl.n	8009882 <_printf_i+0x1ce>
 800987e:	6019      	str	r1, [r3, #0]
 8009880:	e002      	b.n	8009888 <_printf_i+0x1d4>
 8009882:	0670      	lsls	r0, r6, #25
 8009884:	d5fb      	bpl.n	800987e <_printf_i+0x1ca>
 8009886:	8019      	strh	r1, [r3, #0]
 8009888:	2300      	movs	r3, #0
 800988a:	4615      	mov	r5, r2
 800988c:	6123      	str	r3, [r4, #16]
 800988e:	e7ba      	b.n	8009806 <_printf_i+0x152>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	2100      	movs	r1, #0
 8009894:	1d1a      	adds	r2, r3, #4
 8009896:	602a      	str	r2, [r5, #0]
 8009898:	681d      	ldr	r5, [r3, #0]
 800989a:	6862      	ldr	r2, [r4, #4]
 800989c:	4628      	mov	r0, r5
 800989e:	f000 fa8b 	bl	8009db8 <memchr>
 80098a2:	b108      	cbz	r0, 80098a8 <_printf_i+0x1f4>
 80098a4:	1b40      	subs	r0, r0, r5
 80098a6:	6060      	str	r0, [r4, #4]
 80098a8:	6863      	ldr	r3, [r4, #4]
 80098aa:	6123      	str	r3, [r4, #16]
 80098ac:	2300      	movs	r3, #0
 80098ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b2:	e7a8      	b.n	8009806 <_printf_i+0x152>
 80098b4:	462a      	mov	r2, r5
 80098b6:	4649      	mov	r1, r9
 80098b8:	4640      	mov	r0, r8
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	47d0      	blx	sl
 80098be:	3001      	adds	r0, #1
 80098c0:	d0ab      	beq.n	800981a <_printf_i+0x166>
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	079b      	lsls	r3, r3, #30
 80098c6:	d413      	bmi.n	80098f0 <_printf_i+0x23c>
 80098c8:	68e0      	ldr	r0, [r4, #12]
 80098ca:	9b03      	ldr	r3, [sp, #12]
 80098cc:	4298      	cmp	r0, r3
 80098ce:	bfb8      	it	lt
 80098d0:	4618      	movlt	r0, r3
 80098d2:	e7a4      	b.n	800981e <_printf_i+0x16a>
 80098d4:	2301      	movs	r3, #1
 80098d6:	4632      	mov	r2, r6
 80098d8:	4649      	mov	r1, r9
 80098da:	4640      	mov	r0, r8
 80098dc:	47d0      	blx	sl
 80098de:	3001      	adds	r0, #1
 80098e0:	d09b      	beq.n	800981a <_printf_i+0x166>
 80098e2:	3501      	adds	r5, #1
 80098e4:	68e3      	ldr	r3, [r4, #12]
 80098e6:	9903      	ldr	r1, [sp, #12]
 80098e8:	1a5b      	subs	r3, r3, r1
 80098ea:	42ab      	cmp	r3, r5
 80098ec:	dcf2      	bgt.n	80098d4 <_printf_i+0x220>
 80098ee:	e7eb      	b.n	80098c8 <_printf_i+0x214>
 80098f0:	2500      	movs	r5, #0
 80098f2:	f104 0619 	add.w	r6, r4, #25
 80098f6:	e7f5      	b.n	80098e4 <_printf_i+0x230>
 80098f8:	0800a279 	.word	0x0800a279
 80098fc:	0800a28a 	.word	0x0800a28a

08009900 <__sread>:
 8009900:	b510      	push	{r4, lr}
 8009902:	460c      	mov	r4, r1
 8009904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009908:	f000 fabc 	bl	8009e84 <_read_r>
 800990c:	2800      	cmp	r0, #0
 800990e:	bfab      	itete	ge
 8009910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009912:	89a3      	ldrhlt	r3, [r4, #12]
 8009914:	181b      	addge	r3, r3, r0
 8009916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800991a:	bfac      	ite	ge
 800991c:	6563      	strge	r3, [r4, #84]	; 0x54
 800991e:	81a3      	strhlt	r3, [r4, #12]
 8009920:	bd10      	pop	{r4, pc}

08009922 <__swrite>:
 8009922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009926:	461f      	mov	r7, r3
 8009928:	898b      	ldrh	r3, [r1, #12]
 800992a:	4605      	mov	r5, r0
 800992c:	05db      	lsls	r3, r3, #23
 800992e:	460c      	mov	r4, r1
 8009930:	4616      	mov	r6, r2
 8009932:	d505      	bpl.n	8009940 <__swrite+0x1e>
 8009934:	2302      	movs	r3, #2
 8009936:	2200      	movs	r2, #0
 8009938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993c:	f000 f9c4 	bl	8009cc8 <_lseek_r>
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	4632      	mov	r2, r6
 8009944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009948:	81a3      	strh	r3, [r4, #12]
 800994a:	4628      	mov	r0, r5
 800994c:	463b      	mov	r3, r7
 800994e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009956:	f000 b869 	b.w	8009a2c <_write_r>

0800995a <__sseek>:
 800995a:	b510      	push	{r4, lr}
 800995c:	460c      	mov	r4, r1
 800995e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009962:	f000 f9b1 	bl	8009cc8 <_lseek_r>
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	bf15      	itete	ne
 800996c:	6560      	strne	r0, [r4, #84]	; 0x54
 800996e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009976:	81a3      	strheq	r3, [r4, #12]
 8009978:	bf18      	it	ne
 800997a:	81a3      	strhne	r3, [r4, #12]
 800997c:	bd10      	pop	{r4, pc}

0800997e <__sclose>:
 800997e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009982:	f000 b8d3 	b.w	8009b2c <_close_r>
	...

08009988 <__swbuf_r>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	460e      	mov	r6, r1
 800998c:	4614      	mov	r4, r2
 800998e:	4605      	mov	r5, r0
 8009990:	b118      	cbz	r0, 800999a <__swbuf_r+0x12>
 8009992:	6983      	ldr	r3, [r0, #24]
 8009994:	b90b      	cbnz	r3, 800999a <__swbuf_r+0x12>
 8009996:	f7ff fabd 	bl	8008f14 <__sinit>
 800999a:	4b21      	ldr	r3, [pc, #132]	; (8009a20 <__swbuf_r+0x98>)
 800999c:	429c      	cmp	r4, r3
 800999e:	d12b      	bne.n	80099f8 <__swbuf_r+0x70>
 80099a0:	686c      	ldr	r4, [r5, #4]
 80099a2:	69a3      	ldr	r3, [r4, #24]
 80099a4:	60a3      	str	r3, [r4, #8]
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	071a      	lsls	r2, r3, #28
 80099aa:	d52f      	bpl.n	8009a0c <__swbuf_r+0x84>
 80099ac:	6923      	ldr	r3, [r4, #16]
 80099ae:	b36b      	cbz	r3, 8009a0c <__swbuf_r+0x84>
 80099b0:	6923      	ldr	r3, [r4, #16]
 80099b2:	6820      	ldr	r0, [r4, #0]
 80099b4:	b2f6      	uxtb	r6, r6
 80099b6:	1ac0      	subs	r0, r0, r3
 80099b8:	6963      	ldr	r3, [r4, #20]
 80099ba:	4637      	mov	r7, r6
 80099bc:	4283      	cmp	r3, r0
 80099be:	dc04      	bgt.n	80099ca <__swbuf_r+0x42>
 80099c0:	4621      	mov	r1, r4
 80099c2:	4628      	mov	r0, r5
 80099c4:	f000 f944 	bl	8009c50 <_fflush_r>
 80099c8:	bb30      	cbnz	r0, 8009a18 <__swbuf_r+0x90>
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	3001      	adds	r0, #1
 80099ce:	3b01      	subs	r3, #1
 80099d0:	60a3      	str	r3, [r4, #8]
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	1c5a      	adds	r2, r3, #1
 80099d6:	6022      	str	r2, [r4, #0]
 80099d8:	701e      	strb	r6, [r3, #0]
 80099da:	6963      	ldr	r3, [r4, #20]
 80099dc:	4283      	cmp	r3, r0
 80099de:	d004      	beq.n	80099ea <__swbuf_r+0x62>
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	07db      	lsls	r3, r3, #31
 80099e4:	d506      	bpl.n	80099f4 <__swbuf_r+0x6c>
 80099e6:	2e0a      	cmp	r6, #10
 80099e8:	d104      	bne.n	80099f4 <__swbuf_r+0x6c>
 80099ea:	4621      	mov	r1, r4
 80099ec:	4628      	mov	r0, r5
 80099ee:	f000 f92f 	bl	8009c50 <_fflush_r>
 80099f2:	b988      	cbnz	r0, 8009a18 <__swbuf_r+0x90>
 80099f4:	4638      	mov	r0, r7
 80099f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099f8:	4b0a      	ldr	r3, [pc, #40]	; (8009a24 <__swbuf_r+0x9c>)
 80099fa:	429c      	cmp	r4, r3
 80099fc:	d101      	bne.n	8009a02 <__swbuf_r+0x7a>
 80099fe:	68ac      	ldr	r4, [r5, #8]
 8009a00:	e7cf      	b.n	80099a2 <__swbuf_r+0x1a>
 8009a02:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <__swbuf_r+0xa0>)
 8009a04:	429c      	cmp	r4, r3
 8009a06:	bf08      	it	eq
 8009a08:	68ec      	ldreq	r4, [r5, #12]
 8009a0a:	e7ca      	b.n	80099a2 <__swbuf_r+0x1a>
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f000 f81e 	bl	8009a50 <__swsetup_r>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d0cb      	beq.n	80099b0 <__swbuf_r+0x28>
 8009a18:	f04f 37ff 	mov.w	r7, #4294967295
 8009a1c:	e7ea      	b.n	80099f4 <__swbuf_r+0x6c>
 8009a1e:	bf00      	nop
 8009a20:	0800a228 	.word	0x0800a228
 8009a24:	0800a248 	.word	0x0800a248
 8009a28:	0800a208 	.word	0x0800a208

08009a2c <_write_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	4604      	mov	r4, r0
 8009a30:	4608      	mov	r0, r1
 8009a32:	4611      	mov	r1, r2
 8009a34:	2200      	movs	r2, #0
 8009a36:	4d05      	ldr	r5, [pc, #20]	; (8009a4c <_write_r+0x20>)
 8009a38:	602a      	str	r2, [r5, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	f7f6 fbb4 	bl	80001a8 <_write>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d102      	bne.n	8009a4a <_write_r+0x1e>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	b103      	cbz	r3, 8009a4a <_write_r+0x1e>
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	20001430 	.word	0x20001430

08009a50 <__swsetup_r>:
 8009a50:	4b32      	ldr	r3, [pc, #200]	; (8009b1c <__swsetup_r+0xcc>)
 8009a52:	b570      	push	{r4, r5, r6, lr}
 8009a54:	681d      	ldr	r5, [r3, #0]
 8009a56:	4606      	mov	r6, r0
 8009a58:	460c      	mov	r4, r1
 8009a5a:	b125      	cbz	r5, 8009a66 <__swsetup_r+0x16>
 8009a5c:	69ab      	ldr	r3, [r5, #24]
 8009a5e:	b913      	cbnz	r3, 8009a66 <__swsetup_r+0x16>
 8009a60:	4628      	mov	r0, r5
 8009a62:	f7ff fa57 	bl	8008f14 <__sinit>
 8009a66:	4b2e      	ldr	r3, [pc, #184]	; (8009b20 <__swsetup_r+0xd0>)
 8009a68:	429c      	cmp	r4, r3
 8009a6a:	d10f      	bne.n	8009a8c <__swsetup_r+0x3c>
 8009a6c:	686c      	ldr	r4, [r5, #4]
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a74:	0719      	lsls	r1, r3, #28
 8009a76:	d42c      	bmi.n	8009ad2 <__swsetup_r+0x82>
 8009a78:	06dd      	lsls	r5, r3, #27
 8009a7a:	d411      	bmi.n	8009aa0 <__swsetup_r+0x50>
 8009a7c:	2309      	movs	r3, #9
 8009a7e:	6033      	str	r3, [r6, #0]
 8009a80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a84:	f04f 30ff 	mov.w	r0, #4294967295
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	e03e      	b.n	8009b0a <__swsetup_r+0xba>
 8009a8c:	4b25      	ldr	r3, [pc, #148]	; (8009b24 <__swsetup_r+0xd4>)
 8009a8e:	429c      	cmp	r4, r3
 8009a90:	d101      	bne.n	8009a96 <__swsetup_r+0x46>
 8009a92:	68ac      	ldr	r4, [r5, #8]
 8009a94:	e7eb      	b.n	8009a6e <__swsetup_r+0x1e>
 8009a96:	4b24      	ldr	r3, [pc, #144]	; (8009b28 <__swsetup_r+0xd8>)
 8009a98:	429c      	cmp	r4, r3
 8009a9a:	bf08      	it	eq
 8009a9c:	68ec      	ldreq	r4, [r5, #12]
 8009a9e:	e7e6      	b.n	8009a6e <__swsetup_r+0x1e>
 8009aa0:	0758      	lsls	r0, r3, #29
 8009aa2:	d512      	bpl.n	8009aca <__swsetup_r+0x7a>
 8009aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aa6:	b141      	cbz	r1, 8009aba <__swsetup_r+0x6a>
 8009aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aac:	4299      	cmp	r1, r3
 8009aae:	d002      	beq.n	8009ab6 <__swsetup_r+0x66>
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f7ff f8ab 	bl	8008c0c <_free_r>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ac0:	81a3      	strh	r3, [r4, #12]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	6063      	str	r3, [r4, #4]
 8009ac6:	6923      	ldr	r3, [r4, #16]
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	f043 0308 	orr.w	r3, r3, #8
 8009ad0:	81a3      	strh	r3, [r4, #12]
 8009ad2:	6923      	ldr	r3, [r4, #16]
 8009ad4:	b94b      	cbnz	r3, 8009aea <__swsetup_r+0x9a>
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ae0:	d003      	beq.n	8009aea <__swsetup_r+0x9a>
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f000 f927 	bl	8009d38 <__smakebuf_r>
 8009aea:	89a0      	ldrh	r0, [r4, #12]
 8009aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009af0:	f010 0301 	ands.w	r3, r0, #1
 8009af4:	d00a      	beq.n	8009b0c <__swsetup_r+0xbc>
 8009af6:	2300      	movs	r3, #0
 8009af8:	60a3      	str	r3, [r4, #8]
 8009afa:	6963      	ldr	r3, [r4, #20]
 8009afc:	425b      	negs	r3, r3
 8009afe:	61a3      	str	r3, [r4, #24]
 8009b00:	6923      	ldr	r3, [r4, #16]
 8009b02:	b943      	cbnz	r3, 8009b16 <__swsetup_r+0xc6>
 8009b04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b08:	d1ba      	bne.n	8009a80 <__swsetup_r+0x30>
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	0781      	lsls	r1, r0, #30
 8009b0e:	bf58      	it	pl
 8009b10:	6963      	ldrpl	r3, [r4, #20]
 8009b12:	60a3      	str	r3, [r4, #8]
 8009b14:	e7f4      	b.n	8009b00 <__swsetup_r+0xb0>
 8009b16:	2000      	movs	r0, #0
 8009b18:	e7f7      	b.n	8009b0a <__swsetup_r+0xba>
 8009b1a:	bf00      	nop
 8009b1c:	2000017c 	.word	0x2000017c
 8009b20:	0800a228 	.word	0x0800a228
 8009b24:	0800a248 	.word	0x0800a248
 8009b28:	0800a208 	.word	0x0800a208

08009b2c <_close_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	2300      	movs	r3, #0
 8009b30:	4d05      	ldr	r5, [pc, #20]	; (8009b48 <_close_r+0x1c>)
 8009b32:	4604      	mov	r4, r0
 8009b34:	4608      	mov	r0, r1
 8009b36:	602b      	str	r3, [r5, #0]
 8009b38:	f7f6 ff27 	bl	800098a <_close>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d102      	bne.n	8009b46 <_close_r+0x1a>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	b103      	cbz	r3, 8009b46 <_close_r+0x1a>
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	bd38      	pop	{r3, r4, r5, pc}
 8009b48:	20001430 	.word	0x20001430

08009b4c <__sflush_r>:
 8009b4c:	898a      	ldrh	r2, [r1, #12]
 8009b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b50:	4605      	mov	r5, r0
 8009b52:	0710      	lsls	r0, r2, #28
 8009b54:	460c      	mov	r4, r1
 8009b56:	d457      	bmi.n	8009c08 <__sflush_r+0xbc>
 8009b58:	684b      	ldr	r3, [r1, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	dc04      	bgt.n	8009b68 <__sflush_r+0x1c>
 8009b5e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	dc01      	bgt.n	8009b68 <__sflush_r+0x1c>
 8009b64:	2000      	movs	r0, #0
 8009b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b6a:	2e00      	cmp	r6, #0
 8009b6c:	d0fa      	beq.n	8009b64 <__sflush_r+0x18>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b74:	682f      	ldr	r7, [r5, #0]
 8009b76:	602b      	str	r3, [r5, #0]
 8009b78:	d032      	beq.n	8009be0 <__sflush_r+0x94>
 8009b7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	075a      	lsls	r2, r3, #29
 8009b80:	d505      	bpl.n	8009b8e <__sflush_r+0x42>
 8009b82:	6863      	ldr	r3, [r4, #4]
 8009b84:	1ac0      	subs	r0, r0, r3
 8009b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b88:	b10b      	cbz	r3, 8009b8e <__sflush_r+0x42>
 8009b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b8c:	1ac0      	subs	r0, r0, r3
 8009b8e:	2300      	movs	r3, #0
 8009b90:	4602      	mov	r2, r0
 8009b92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b94:	4628      	mov	r0, r5
 8009b96:	6a21      	ldr	r1, [r4, #32]
 8009b98:	47b0      	blx	r6
 8009b9a:	1c43      	adds	r3, r0, #1
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	d106      	bne.n	8009bae <__sflush_r+0x62>
 8009ba0:	6829      	ldr	r1, [r5, #0]
 8009ba2:	291d      	cmp	r1, #29
 8009ba4:	d82c      	bhi.n	8009c00 <__sflush_r+0xb4>
 8009ba6:	4a29      	ldr	r2, [pc, #164]	; (8009c4c <__sflush_r+0x100>)
 8009ba8:	40ca      	lsrs	r2, r1
 8009baa:	07d6      	lsls	r6, r2, #31
 8009bac:	d528      	bpl.n	8009c00 <__sflush_r+0xb4>
 8009bae:	2200      	movs	r2, #0
 8009bb0:	6062      	str	r2, [r4, #4]
 8009bb2:	6922      	ldr	r2, [r4, #16]
 8009bb4:	04d9      	lsls	r1, r3, #19
 8009bb6:	6022      	str	r2, [r4, #0]
 8009bb8:	d504      	bpl.n	8009bc4 <__sflush_r+0x78>
 8009bba:	1c42      	adds	r2, r0, #1
 8009bbc:	d101      	bne.n	8009bc2 <__sflush_r+0x76>
 8009bbe:	682b      	ldr	r3, [r5, #0]
 8009bc0:	b903      	cbnz	r3, 8009bc4 <__sflush_r+0x78>
 8009bc2:	6560      	str	r0, [r4, #84]	; 0x54
 8009bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bc6:	602f      	str	r7, [r5, #0]
 8009bc8:	2900      	cmp	r1, #0
 8009bca:	d0cb      	beq.n	8009b64 <__sflush_r+0x18>
 8009bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bd0:	4299      	cmp	r1, r3
 8009bd2:	d002      	beq.n	8009bda <__sflush_r+0x8e>
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f7ff f819 	bl	8008c0c <_free_r>
 8009bda:	2000      	movs	r0, #0
 8009bdc:	6360      	str	r0, [r4, #52]	; 0x34
 8009bde:	e7c2      	b.n	8009b66 <__sflush_r+0x1a>
 8009be0:	6a21      	ldr	r1, [r4, #32]
 8009be2:	2301      	movs	r3, #1
 8009be4:	4628      	mov	r0, r5
 8009be6:	47b0      	blx	r6
 8009be8:	1c41      	adds	r1, r0, #1
 8009bea:	d1c7      	bne.n	8009b7c <__sflush_r+0x30>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0c4      	beq.n	8009b7c <__sflush_r+0x30>
 8009bf2:	2b1d      	cmp	r3, #29
 8009bf4:	d001      	beq.n	8009bfa <__sflush_r+0xae>
 8009bf6:	2b16      	cmp	r3, #22
 8009bf8:	d101      	bne.n	8009bfe <__sflush_r+0xb2>
 8009bfa:	602f      	str	r7, [r5, #0]
 8009bfc:	e7b2      	b.n	8009b64 <__sflush_r+0x18>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	e7ae      	b.n	8009b66 <__sflush_r+0x1a>
 8009c08:	690f      	ldr	r7, [r1, #16]
 8009c0a:	2f00      	cmp	r7, #0
 8009c0c:	d0aa      	beq.n	8009b64 <__sflush_r+0x18>
 8009c0e:	0793      	lsls	r3, r2, #30
 8009c10:	bf18      	it	ne
 8009c12:	2300      	movne	r3, #0
 8009c14:	680e      	ldr	r6, [r1, #0]
 8009c16:	bf08      	it	eq
 8009c18:	694b      	ldreq	r3, [r1, #20]
 8009c1a:	1bf6      	subs	r6, r6, r7
 8009c1c:	600f      	str	r7, [r1, #0]
 8009c1e:	608b      	str	r3, [r1, #8]
 8009c20:	2e00      	cmp	r6, #0
 8009c22:	dd9f      	ble.n	8009b64 <__sflush_r+0x18>
 8009c24:	4633      	mov	r3, r6
 8009c26:	463a      	mov	r2, r7
 8009c28:	4628      	mov	r0, r5
 8009c2a:	6a21      	ldr	r1, [r4, #32]
 8009c2c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009c30:	47e0      	blx	ip
 8009c32:	2800      	cmp	r0, #0
 8009c34:	dc06      	bgt.n	8009c44 <__sflush_r+0xf8>
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	e790      	b.n	8009b66 <__sflush_r+0x1a>
 8009c44:	4407      	add	r7, r0
 8009c46:	1a36      	subs	r6, r6, r0
 8009c48:	e7ea      	b.n	8009c20 <__sflush_r+0xd4>
 8009c4a:	bf00      	nop
 8009c4c:	20400001 	.word	0x20400001

08009c50 <_fflush_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	690b      	ldr	r3, [r1, #16]
 8009c54:	4605      	mov	r5, r0
 8009c56:	460c      	mov	r4, r1
 8009c58:	b913      	cbnz	r3, 8009c60 <_fflush_r+0x10>
 8009c5a:	2500      	movs	r5, #0
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	b118      	cbz	r0, 8009c6a <_fflush_r+0x1a>
 8009c62:	6983      	ldr	r3, [r0, #24]
 8009c64:	b90b      	cbnz	r3, 8009c6a <_fflush_r+0x1a>
 8009c66:	f7ff f955 	bl	8008f14 <__sinit>
 8009c6a:	4b14      	ldr	r3, [pc, #80]	; (8009cbc <_fflush_r+0x6c>)
 8009c6c:	429c      	cmp	r4, r3
 8009c6e:	d11b      	bne.n	8009ca8 <_fflush_r+0x58>
 8009c70:	686c      	ldr	r4, [r5, #4]
 8009c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d0ef      	beq.n	8009c5a <_fflush_r+0xa>
 8009c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c7c:	07d0      	lsls	r0, r2, #31
 8009c7e:	d404      	bmi.n	8009c8a <_fflush_r+0x3a>
 8009c80:	0599      	lsls	r1, r3, #22
 8009c82:	d402      	bmi.n	8009c8a <_fflush_r+0x3a>
 8009c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c86:	f7ff f9e3 	bl	8009050 <__retarget_lock_acquire_recursive>
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	f7ff ff5d 	bl	8009b4c <__sflush_r>
 8009c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c94:	4605      	mov	r5, r0
 8009c96:	07da      	lsls	r2, r3, #31
 8009c98:	d4e0      	bmi.n	8009c5c <_fflush_r+0xc>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	059b      	lsls	r3, r3, #22
 8009c9e:	d4dd      	bmi.n	8009c5c <_fflush_r+0xc>
 8009ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca2:	f7ff f9d6 	bl	8009052 <__retarget_lock_release_recursive>
 8009ca6:	e7d9      	b.n	8009c5c <_fflush_r+0xc>
 8009ca8:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <_fflush_r+0x70>)
 8009caa:	429c      	cmp	r4, r3
 8009cac:	d101      	bne.n	8009cb2 <_fflush_r+0x62>
 8009cae:	68ac      	ldr	r4, [r5, #8]
 8009cb0:	e7df      	b.n	8009c72 <_fflush_r+0x22>
 8009cb2:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <_fflush_r+0x74>)
 8009cb4:	429c      	cmp	r4, r3
 8009cb6:	bf08      	it	eq
 8009cb8:	68ec      	ldreq	r4, [r5, #12]
 8009cba:	e7da      	b.n	8009c72 <_fflush_r+0x22>
 8009cbc:	0800a228 	.word	0x0800a228
 8009cc0:	0800a248 	.word	0x0800a248
 8009cc4:	0800a208 	.word	0x0800a208

08009cc8 <_lseek_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4604      	mov	r4, r0
 8009ccc:	4608      	mov	r0, r1
 8009cce:	4611      	mov	r1, r2
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	4d05      	ldr	r5, [pc, #20]	; (8009ce8 <_lseek_r+0x20>)
 8009cd4:	602a      	str	r2, [r5, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f7f6 fe7b 	bl	80009d2 <_lseek>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_lseek_r+0x1e>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_lseek_r+0x1e>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20001430 	.word	0x20001430

08009cec <__swhatbuf_r>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	460e      	mov	r6, r1
 8009cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf4:	4614      	mov	r4, r2
 8009cf6:	2900      	cmp	r1, #0
 8009cf8:	461d      	mov	r5, r3
 8009cfa:	b096      	sub	sp, #88	; 0x58
 8009cfc:	da08      	bge.n	8009d10 <__swhatbuf_r+0x24>
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d04:	602a      	str	r2, [r5, #0]
 8009d06:	061a      	lsls	r2, r3, #24
 8009d08:	d410      	bmi.n	8009d2c <__swhatbuf_r+0x40>
 8009d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d0e:	e00e      	b.n	8009d2e <__swhatbuf_r+0x42>
 8009d10:	466a      	mov	r2, sp
 8009d12:	f000 f8c9 	bl	8009ea8 <_fstat_r>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	dbf1      	blt.n	8009cfe <__swhatbuf_r+0x12>
 8009d1a:	9a01      	ldr	r2, [sp, #4]
 8009d1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d24:	425a      	negs	r2, r3
 8009d26:	415a      	adcs	r2, r3
 8009d28:	602a      	str	r2, [r5, #0]
 8009d2a:	e7ee      	b.n	8009d0a <__swhatbuf_r+0x1e>
 8009d2c:	2340      	movs	r3, #64	; 0x40
 8009d2e:	2000      	movs	r0, #0
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	b016      	add	sp, #88	; 0x58
 8009d34:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d38 <__smakebuf_r>:
 8009d38:	898b      	ldrh	r3, [r1, #12]
 8009d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d3c:	079d      	lsls	r5, r3, #30
 8009d3e:	4606      	mov	r6, r0
 8009d40:	460c      	mov	r4, r1
 8009d42:	d507      	bpl.n	8009d54 <__smakebuf_r+0x1c>
 8009d44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	6123      	str	r3, [r4, #16]
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	6163      	str	r3, [r4, #20]
 8009d50:	b002      	add	sp, #8
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	466a      	mov	r2, sp
 8009d56:	ab01      	add	r3, sp, #4
 8009d58:	f7ff ffc8 	bl	8009cec <__swhatbuf_r>
 8009d5c:	9900      	ldr	r1, [sp, #0]
 8009d5e:	4605      	mov	r5, r0
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7fe ffbb 	bl	8008cdc <_malloc_r>
 8009d66:	b948      	cbnz	r0, 8009d7c <__smakebuf_r+0x44>
 8009d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d6c:	059a      	lsls	r2, r3, #22
 8009d6e:	d4ef      	bmi.n	8009d50 <__smakebuf_r+0x18>
 8009d70:	f023 0303 	bic.w	r3, r3, #3
 8009d74:	f043 0302 	orr.w	r3, r3, #2
 8009d78:	81a3      	strh	r3, [r4, #12]
 8009d7a:	e7e3      	b.n	8009d44 <__smakebuf_r+0xc>
 8009d7c:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <__smakebuf_r+0x7c>)
 8009d7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	6020      	str	r0, [r4, #0]
 8009d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d88:	81a3      	strh	r3, [r4, #12]
 8009d8a:	9b00      	ldr	r3, [sp, #0]
 8009d8c:	6120      	str	r0, [r4, #16]
 8009d8e:	6163      	str	r3, [r4, #20]
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	b15b      	cbz	r3, 8009dac <__smakebuf_r+0x74>
 8009d94:	4630      	mov	r0, r6
 8009d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d9a:	f000 f897 	bl	8009ecc <_isatty_r>
 8009d9e:	b128      	cbz	r0, 8009dac <__smakebuf_r+0x74>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f023 0303 	bic.w	r3, r3, #3
 8009da6:	f043 0301 	orr.w	r3, r3, #1
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	89a0      	ldrh	r0, [r4, #12]
 8009dae:	4305      	orrs	r5, r0
 8009db0:	81a5      	strh	r5, [r4, #12]
 8009db2:	e7cd      	b.n	8009d50 <__smakebuf_r+0x18>
 8009db4:	08008ead 	.word	0x08008ead

08009db8 <memchr>:
 8009db8:	4603      	mov	r3, r0
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	b2c9      	uxtb	r1, r1
 8009dbe:	4402      	add	r2, r0
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	d101      	bne.n	8009dca <memchr+0x12>
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	e003      	b.n	8009dd2 <memchr+0x1a>
 8009dca:	7804      	ldrb	r4, [r0, #0]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	428c      	cmp	r4, r1
 8009dd0:	d1f6      	bne.n	8009dc0 <memchr+0x8>
 8009dd2:	bd10      	pop	{r4, pc}

08009dd4 <memcpy>:
 8009dd4:	440a      	add	r2, r1
 8009dd6:	4291      	cmp	r1, r2
 8009dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ddc:	d100      	bne.n	8009de0 <memcpy+0xc>
 8009dde:	4770      	bx	lr
 8009de0:	b510      	push	{r4, lr}
 8009de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009de6:	4291      	cmp	r1, r2
 8009de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dec:	d1f9      	bne.n	8009de2 <memcpy+0xe>
 8009dee:	bd10      	pop	{r4, pc}

08009df0 <memmove>:
 8009df0:	4288      	cmp	r0, r1
 8009df2:	b510      	push	{r4, lr}
 8009df4:	eb01 0402 	add.w	r4, r1, r2
 8009df8:	d902      	bls.n	8009e00 <memmove+0x10>
 8009dfa:	4284      	cmp	r4, r0
 8009dfc:	4623      	mov	r3, r4
 8009dfe:	d807      	bhi.n	8009e10 <memmove+0x20>
 8009e00:	1e43      	subs	r3, r0, #1
 8009e02:	42a1      	cmp	r1, r4
 8009e04:	d008      	beq.n	8009e18 <memmove+0x28>
 8009e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e0e:	e7f8      	b.n	8009e02 <memmove+0x12>
 8009e10:	4601      	mov	r1, r0
 8009e12:	4402      	add	r2, r0
 8009e14:	428a      	cmp	r2, r1
 8009e16:	d100      	bne.n	8009e1a <memmove+0x2a>
 8009e18:	bd10      	pop	{r4, pc}
 8009e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e22:	e7f7      	b.n	8009e14 <memmove+0x24>

08009e24 <_realloc_r>:
 8009e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e28:	4680      	mov	r8, r0
 8009e2a:	4614      	mov	r4, r2
 8009e2c:	460e      	mov	r6, r1
 8009e2e:	b921      	cbnz	r1, 8009e3a <_realloc_r+0x16>
 8009e30:	4611      	mov	r1, r2
 8009e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e36:	f7fe bf51 	b.w	8008cdc <_malloc_r>
 8009e3a:	b92a      	cbnz	r2, 8009e48 <_realloc_r+0x24>
 8009e3c:	f7fe fee6 	bl	8008c0c <_free_r>
 8009e40:	4625      	mov	r5, r4
 8009e42:	4628      	mov	r0, r5
 8009e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e48:	f000 f850 	bl	8009eec <_malloc_usable_size_r>
 8009e4c:	4284      	cmp	r4, r0
 8009e4e:	4607      	mov	r7, r0
 8009e50:	d802      	bhi.n	8009e58 <_realloc_r+0x34>
 8009e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e56:	d812      	bhi.n	8009e7e <_realloc_r+0x5a>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	f7fe ff3e 	bl	8008cdc <_malloc_r>
 8009e60:	4605      	mov	r5, r0
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d0ed      	beq.n	8009e42 <_realloc_r+0x1e>
 8009e66:	42bc      	cmp	r4, r7
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	bf28      	it	cs
 8009e6e:	463a      	movcs	r2, r7
 8009e70:	f7ff ffb0 	bl	8009dd4 <memcpy>
 8009e74:	4631      	mov	r1, r6
 8009e76:	4640      	mov	r0, r8
 8009e78:	f7fe fec8 	bl	8008c0c <_free_r>
 8009e7c:	e7e1      	b.n	8009e42 <_realloc_r+0x1e>
 8009e7e:	4635      	mov	r5, r6
 8009e80:	e7df      	b.n	8009e42 <_realloc_r+0x1e>
	...

08009e84 <_read_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4604      	mov	r4, r0
 8009e88:	4608      	mov	r0, r1
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	4d05      	ldr	r5, [pc, #20]	; (8009ea4 <_read_r+0x20>)
 8009e90:	602a      	str	r2, [r5, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	f7f6 fd5c 	bl	8000950 <_read>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_read_r+0x1e>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_read_r+0x1e>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	20001430 	.word	0x20001430

08009ea8 <_fstat_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	2300      	movs	r3, #0
 8009eac:	4d06      	ldr	r5, [pc, #24]	; (8009ec8 <_fstat_r+0x20>)
 8009eae:	4604      	mov	r4, r0
 8009eb0:	4608      	mov	r0, r1
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	602b      	str	r3, [r5, #0]
 8009eb6:	f7f6 fd73 	bl	80009a0 <_fstat>
 8009eba:	1c43      	adds	r3, r0, #1
 8009ebc:	d102      	bne.n	8009ec4 <_fstat_r+0x1c>
 8009ebe:	682b      	ldr	r3, [r5, #0]
 8009ec0:	b103      	cbz	r3, 8009ec4 <_fstat_r+0x1c>
 8009ec2:	6023      	str	r3, [r4, #0]
 8009ec4:	bd38      	pop	{r3, r4, r5, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20001430 	.word	0x20001430

08009ecc <_isatty_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	2300      	movs	r3, #0
 8009ed0:	4d05      	ldr	r5, [pc, #20]	; (8009ee8 <_isatty_r+0x1c>)
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	4608      	mov	r0, r1
 8009ed6:	602b      	str	r3, [r5, #0]
 8009ed8:	f7f6 fd71 	bl	80009be <_isatty>
 8009edc:	1c43      	adds	r3, r0, #1
 8009ede:	d102      	bne.n	8009ee6 <_isatty_r+0x1a>
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	b103      	cbz	r3, 8009ee6 <_isatty_r+0x1a>
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	20001430 	.word	0x20001430

08009eec <_malloc_usable_size_r>:
 8009eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef0:	1f18      	subs	r0, r3, #4
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	bfbc      	itt	lt
 8009ef6:	580b      	ldrlt	r3, [r1, r0]
 8009ef8:	18c0      	addlt	r0, r0, r3
 8009efa:	4770      	bx	lr

08009efc <_init>:
 8009efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efe:	bf00      	nop
 8009f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f02:	bc08      	pop	{r3}
 8009f04:	469e      	mov	lr, r3
 8009f06:	4770      	bx	lr

08009f08 <_fini>:
 8009f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0a:	bf00      	nop
 8009f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f0e:	bc08      	pop	{r3}
 8009f10:	469e      	mov	lr, r3
 8009f12:	4770      	bx	lr
