
Modbus_RTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dfc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08009f08  08009f08  00019f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a288  0800a288  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a288  0800a288  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a288  0800a288  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a288  0800a288  0001a288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a28c  0800a28c  0001a28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  200001e0  0800a470  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001434  0800a470  00021434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120e9  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b8  00000000  00000000  000322f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  000355b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  000363e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab23  00000000  00000000  000370a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128b3  00000000  00000000  00051bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088af3  00000000  00000000  0006447e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecf71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b8  00000000  00000000  000ecfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009ef0 	.word	0x08009ef0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08009ef0 	.word	0x08009ef0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Serial Wire Debug SWO Pri
int _write(int file, char *ptr, int len){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
     int DataIdx;
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001b4:	2300      	movs	r3, #0
 80001b6:	617b      	str	r3, [r7, #20]
 80001b8:	e009      	b.n	80001ce <_write+0x26>
         ITM_SendChar((*ptr++));
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	1c5a      	adds	r2, r3, #1
 80001be:	60ba      	str	r2, [r7, #8]
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f7ff ffca 	bl	800015c <ITM_SendChar>
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001c8:	697b      	ldr	r3, [r7, #20]
 80001ca:	3301      	adds	r3, #1
 80001cc:	617b      	str	r3, [r7, #20]
 80001ce:	697a      	ldr	r2, [r7, #20]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	dbf1      	blt.n	80001ba <_write+0x12>
     }
     return len;
 80001d6:	687b      	ldr	r3, [r7, #4]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3718      	adds	r7, #24
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}

080001e0 <send_debug_CDC>:

void send_debug_CDC(char *data){
 80001e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001e4:	b087      	sub	sp, #28
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
 80001ea:	466b      	mov	r3, sp
 80001ec:	461e      	mov	r6, r3

	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f4:	482b      	ldr	r0, [pc, #172]	; (80002a4 <send_debug_CDC+0xc4>)
 80001f6:	f001 f81f 	bl	8001238 <HAL_GPIO_WritePin>
	int dataLen = strlen(data);
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f7ff ffa6 	bl	800014c <strlen>
 8000200:	4603      	mov	r3, r0
 8000202:	617b      	str	r3, [r7, #20]
	char dataCDC[dataLen + 1];
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	1c59      	adds	r1, r3, #1
 8000208:	1e4b      	subs	r3, r1, #1
 800020a:	613b      	str	r3, [r7, #16]
 800020c:	460a      	mov	r2, r1
 800020e:	2300      	movs	r3, #0
 8000210:	4690      	mov	r8, r2
 8000212:	4699      	mov	r9, r3
 8000214:	f04f 0200 	mov.w	r2, #0
 8000218:	f04f 0300 	mov.w	r3, #0
 800021c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000220:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000224:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000228:	460a      	mov	r2, r1
 800022a:	2300      	movs	r3, #0
 800022c:	4614      	mov	r4, r2
 800022e:	461d      	mov	r5, r3
 8000230:	f04f 0200 	mov.w	r2, #0
 8000234:	f04f 0300 	mov.w	r3, #0
 8000238:	00eb      	lsls	r3, r5, #3
 800023a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800023e:	00e2      	lsls	r2, r4, #3
 8000240:	460b      	mov	r3, r1
 8000242:	3307      	adds	r3, #7
 8000244:	08db      	lsrs	r3, r3, #3
 8000246:	00db      	lsls	r3, r3, #3
 8000248:	ebad 0d03 	sub.w	sp, sp, r3
 800024c:	466b      	mov	r3, sp
 800024e:	3300      	adds	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
	strcpy(dataCDC, data);
 8000252:	6879      	ldr	r1, [r7, #4]
 8000254:	68f8      	ldr	r0, [r7, #12]
 8000256:	f008 fdf7 	bl	8008e48 <strcpy>
	dataCDC[dataLen] = '\n';
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	4413      	add	r3, r2
 8000260:	220a      	movs	r2, #10
 8000262:	701a      	strb	r2, [r3, #0]
	dataCDC[dataLen + 1] = '\0';
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	3301      	adds	r3, #1
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	2100      	movs	r1, #0
 800026c:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS((uint8_t*)dataCDC, strlen(dataCDC));
 800026e:	68f8      	ldr	r0, [r7, #12]
 8000270:	f7ff ff6c 	bl	800014c <strlen>
 8000274:	4603      	mov	r3, r0
 8000276:	b29b      	uxth	r3, r3
 8000278:	4619      	mov	r1, r3
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f008 f8a0 	bl	80083c0 <CDC_Transmit_FS>
	printf(dataCDC);
 8000280:	68f8      	ldr	r0, [r7, #12]
 8000282:	f008 fd99 	bl	8008db8 <iprintf>
	HAL_Delay(5);
 8000286:	2005      	movs	r0, #5
 8000288:	f000 fc6e 	bl	8000b68 <HAL_Delay>
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 1);
 800028c:	2201      	movs	r2, #1
 800028e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000292:	4804      	ldr	r0, [pc, #16]	; (80002a4 <send_debug_CDC+0xc4>)
 8000294:	f000 ffd0 	bl	8001238 <HAL_GPIO_WritePin>
 8000298:	46b5      	mov	sp, r6

}
 800029a:	bf00      	nop
 800029c:	371c      	adds	r7, #28
 800029e:	46bd      	mov	sp, r7
 80002a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80002a4:	40011000 	.word	0x40011000

080002a8 <modbus>:

void modbus(uint8_t slaveAdd, uint8_t funcCode, uint8_t startAddr1, uint8_t startAddr2, uint8_t qty1, uint8_t qty2){
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b08b      	sub	sp, #44	; 0x2c
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4604      	mov	r4, r0
 80002b0:	4608      	mov	r0, r1
 80002b2:	4611      	mov	r1, r2
 80002b4:	461a      	mov	r2, r3
 80002b6:	4623      	mov	r3, r4
 80002b8:	71fb      	strb	r3, [r7, #7]
 80002ba:	4603      	mov	r3, r0
 80002bc:	71bb      	strb	r3, [r7, #6]
 80002be:	460b      	mov	r3, r1
 80002c0:	717b      	strb	r3, [r7, #5]
 80002c2:	4613      	mov	r3, r2
 80002c4:	713b      	strb	r3, [r7, #4]
	uint8_t* dataFrame[] = {&slaveAdd, &funcCode, &startAddr1, &startAddr2, &qty1, &qty2};
 80002c6:	1dfb      	adds	r3, r7, #7
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	1dbb      	adds	r3, r7, #6
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	1d7b      	adds	r3, r7, #5
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	617b      	str	r3, [r7, #20]
 80002d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002da:	61bb      	str	r3, [r7, #24]
 80002dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002e0:	61fb      	str	r3, [r7, #28]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, Rxdata, 32);
 80002e2:	2220      	movs	r2, #32
 80002e4:	4917      	ldr	r1, [pc, #92]	; (8000344 <modbus+0x9c>)
 80002e6:	4818      	ldr	r0, [pc, #96]	; (8000348 <modbus+0xa0>)
 80002e8:	f003 fac5 	bl	8003876 <HAL_UARTEx_ReceiveToIdle_IT>
	for (int x = 0; x < 6; x++){
 80002ec:	2300      	movs	r3, #0
 80002ee:	627b      	str	r3, [r7, #36]	; 0x24
 80002f0:	e00e      	b.n	8000310 <modbus+0x68>
		Txdata[x] = *dataFrame[x];
 80002f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	3328      	adds	r3, #40	; 0x28
 80002f8:	443b      	add	r3, r7
 80002fa:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80002fe:	7819      	ldrb	r1, [r3, #0]
 8000300:	4a12      	ldr	r2, [pc, #72]	; (800034c <modbus+0xa4>)
 8000302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000304:	4413      	add	r3, r2
 8000306:	460a      	mov	r2, r1
 8000308:	701a      	strb	r2, [r3, #0]
	for (int x = 0; x < 6; x++){
 800030a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030c:	3301      	adds	r3, #1
 800030e:	627b      	str	r3, [r7, #36]	; 0x24
 8000310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000312:	2b05      	cmp	r3, #5
 8000314:	dded      	ble.n	80002f2 <modbus+0x4a>
	}
	uint16_t crc = crc16(Txdata, 6);
 8000316:	2106      	movs	r1, #6
 8000318:	480c      	ldr	r0, [pc, #48]	; (800034c <modbus+0xa4>)
 800031a:	f000 fa1b 	bl	8000754 <crc16>
 800031e:	4603      	mov	r3, r0
 8000320:	847b      	strh	r3, [r7, #34]	; 0x22
    Txdata[6] = crc & 0xFF;         // CRC Low
 8000322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <modbus+0xa4>)
 8000328:	719a      	strb	r2, [r3, #6]
    Txdata[7] = (crc >> 8) & 0xFF;  // CRC High
 800032a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	b29b      	uxth	r3, r3
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <modbus+0xa4>)
 8000334:	71da      	strb	r2, [r3, #7]
    request_modbus(Txdata);
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <modbus+0xa4>)
 8000338:	f000 f80a 	bl	8000350 <request_modbus>
}
 800033c:	bf00      	nop
 800033e:	372c      	adds	r7, #44	; 0x2c
 8000340:	46bd      	mov	sp, r7
 8000342:	bd90      	pop	{r4, r7, pc}
 8000344:	20000244 	.word	0x20000244
 8000348:	200001fc 	.word	0x200001fc
 800034c:	20000264 	.word	0x20000264

08000350 <request_modbus>:

void request_modbus(uint8_t *data){
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	send_debug_CDC("[Modbus Request : ");
 8000358:	485a      	ldr	r0, [pc, #360]	; (80004c4 <request_modbus+0x174>)
 800035a:	f7ff ff41 	bl	80001e0 <send_debug_CDC>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000364:	4858      	ldr	r0, [pc, #352]	; (80004c8 <request_modbus+0x178>)
 8000366:	f000 ff67 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, 8, 1000);
 800036a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800036e:	2208      	movs	r2, #8
 8000370:	6879      	ldr	r1, [r7, #4]
 8000372:	4856      	ldr	r0, [pc, #344]	; (80004cc <request_modbus+0x17c>)
 8000374:	f003 f9fc 	bl	8003770 <HAL_UART_Transmit>
	int offset = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < sizeof(Txdata)/sizeof(Txdata[0]); i++){
 800037c:	2300      	movs	r3, #0
 800037e:	61bb      	str	r3, [r7, #24]
 8000380:	e012      	b.n	80003a8 <request_modbus+0x58>
		offset+= sprintf(text+offset, "%02X", Txdata[i]);
 8000382:	4b53      	ldr	r3, [pc, #332]	; (80004d0 <request_modbus+0x180>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	18d0      	adds	r0, r2, r3
 800038a:	4a52      	ldr	r2, [pc, #328]	; (80004d4 <request_modbus+0x184>)
 800038c:	69bb      	ldr	r3, [r7, #24]
 800038e:	4413      	add	r3, r2
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	461a      	mov	r2, r3
 8000394:	4950      	ldr	r1, [pc, #320]	; (80004d8 <request_modbus+0x188>)
 8000396:	f008 fd37 	bl	8008e08 <siprintf>
 800039a:	4602      	mov	r2, r0
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	4413      	add	r3, r2
 80003a0:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < sizeof(Txdata)/sizeof(Txdata[0]); i++){
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	3301      	adds	r3, #1
 80003a6:	61bb      	str	r3, [r7, #24]
 80003a8:	69bb      	ldr	r3, [r7, #24]
 80003aa:	2b07      	cmp	r3, #7
 80003ac:	d9e9      	bls.n	8000382 <request_modbus+0x32>
	}
	send_debug_CDC(text);
 80003ae:	4b48      	ldr	r3, [pc, #288]	; (80004d0 <request_modbus+0x180>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff14 	bl	80001e0 <send_debug_CDC>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003be:	4842      	ldr	r0, [pc, #264]	; (80004c8 <request_modbus+0x178>)
 80003c0:	f000 ff3a 	bl	8001238 <HAL_GPIO_WritePin>

	if (Rxdata[0] != 0){
 80003c4:	4b45      	ldr	r3, [pc, #276]	; (80004dc <request_modbus+0x18c>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d038      	beq.n	800043e <request_modbus+0xee>
		modbus_stat = 1;
 80003cc:	4b44      	ldr	r3, [pc, #272]	; (80004e0 <request_modbus+0x190>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	701a      	strb	r2, [r3, #0]
		int offset1 = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]
 80003da:	e012      	b.n	8000402 <request_modbus+0xb2>
			offset1+= sprintf(text+offset1, "%02X", Rxdata[x]);
 80003dc:	4b3c      	ldr	r3, [pc, #240]	; (80004d0 <request_modbus+0x180>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	18d0      	adds	r0, r2, r3
 80003e4:	4a3d      	ldr	r2, [pc, #244]	; (80004dc <request_modbus+0x18c>)
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	4413      	add	r3, r2
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	493a      	ldr	r1, [pc, #232]	; (80004d8 <request_modbus+0x188>)
 80003f0:	f008 fd0a 	bl	8008e08 <siprintf>
 80003f4:	4602      	mov	r2, r0
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	4413      	add	r3, r2
 80003fa:	617b      	str	r3, [r7, #20]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	3301      	adds	r3, #1
 8000400:	613b      	str	r3, [r7, #16]
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	2b1f      	cmp	r3, #31
 8000406:	d9e9      	bls.n	80003dc <request_modbus+0x8c>
		}
		send_debug_CDC("Modbus Response :");
 8000408:	4836      	ldr	r0, [pc, #216]	; (80004e4 <request_modbus+0x194>)
 800040a:	f7ff fee9 	bl	80001e0 <send_debug_CDC>
		send_debug_CDC(text);
 800040e:	4b30      	ldr	r3, [pc, #192]	; (80004d0 <request_modbus+0x180>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff fee4 	bl	80001e0 <send_debug_CDC>
		printf(text);
 8000418:	4b2d      	ldr	r3, [pc, #180]	; (80004d0 <request_modbus+0x180>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	f008 fccb 	bl	8008db8 <iprintf>
		HAL_Delay(5);
 8000422:	2005      	movs	r0, #5
 8000424:	f000 fba0 	bl	8000b68 <HAL_Delay>
		memset(Rxdata, 0, sizeof(Rxdata));
 8000428:	2220      	movs	r2, #32
 800042a:	2100      	movs	r1, #0
 800042c:	482b      	ldr	r0, [pc, #172]	; (80004dc <request_modbus+0x18c>)
 800042e:	f008 fbdf 	bl	8008bf0 <memset>
		free(text);
 8000432:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <request_modbus+0x180>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4618      	mov	r0, r3
 8000438:	f008 fbd2 	bl	8008be0 <free>
		printf(text);
		HAL_Delay(5);
		memset(Rxdata, 0, sizeof(Rxdata));
		free(text);
	}
}
 800043c:	e03d      	b.n	80004ba <request_modbus+0x16a>
		modbus_stat = 0;
 800043e:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <request_modbus+0x190>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
		send_debug_CDC("Modbus Response :");
 8000444:	4827      	ldr	r0, [pc, #156]	; (80004e4 <request_modbus+0x194>)
 8000446:	f7ff fecb 	bl	80001e0 <send_debug_CDC>
		int offset1 = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 800044e:	2300      	movs	r3, #0
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	e012      	b.n	800047a <request_modbus+0x12a>
			offset1+= sprintf(text+offset1, "%02X", Rxdata[x]);
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <request_modbus+0x180>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	18d0      	adds	r0, r2, r3
 800045c:	4a1f      	ldr	r2, [pc, #124]	; (80004dc <request_modbus+0x18c>)
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	4413      	add	r3, r2
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	491c      	ldr	r1, [pc, #112]	; (80004d8 <request_modbus+0x188>)
 8000468:	f008 fcce 	bl	8008e08 <siprintf>
 800046c:	4602      	mov	r2, r0
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	4413      	add	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	3301      	adds	r3, #1
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	2b1f      	cmp	r3, #31
 800047e:	d9e9      	bls.n	8000454 <request_modbus+0x104>
		sprintf(text,"No Response from slave!!!");
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <request_modbus+0x180>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4918      	ldr	r1, [pc, #96]	; (80004e8 <request_modbus+0x198>)
 8000486:	4618      	mov	r0, r3
 8000488:	f008 fcbe 	bl	8008e08 <siprintf>
		send_debug_CDC(text);
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <request_modbus+0x180>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fea5 	bl	80001e0 <send_debug_CDC>
		printf(text);
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <request_modbus+0x180>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4618      	mov	r0, r3
 800049c:	f008 fc8c 	bl	8008db8 <iprintf>
		HAL_Delay(5);
 80004a0:	2005      	movs	r0, #5
 80004a2:	f000 fb61 	bl	8000b68 <HAL_Delay>
		memset(Rxdata, 0, sizeof(Rxdata));
 80004a6:	2220      	movs	r2, #32
 80004a8:	2100      	movs	r1, #0
 80004aa:	480c      	ldr	r0, [pc, #48]	; (80004dc <request_modbus+0x18c>)
 80004ac:	f008 fba0 	bl	8008bf0 <memset>
		free(text);
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <request_modbus+0x180>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f008 fb93 	bl	8008be0 <free>
}
 80004ba:	bf00      	nop
 80004bc:	3720      	adds	r7, #32
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	08009f08 	.word	0x08009f08
 80004c8:	40010800 	.word	0x40010800
 80004cc:	200001fc 	.word	0x200001fc
 80004d0:	20000270 	.word	0x20000270
 80004d4:	20000264 	.word	0x20000264
 80004d8:	08009f1c 	.word	0x08009f1c
 80004dc:	20000244 	.word	0x20000244
 80004e0:	2000026c 	.word	0x2000026c
 80004e4:	08009f24 	.word	0x08009f24
 80004e8:	08009f38 	.word	0x08009f38

080004ec <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	807b      	strh	r3, [r7, #2]

}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
	...

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 facb 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f829 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8ab 	bl	800066c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000516:	f007 fe95 	bl	8008244 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800051a:	f000 f87d 	bl	8000618 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_CDC("[MODBUS RTU PROGRAM]");
 800051e:	480e      	ldr	r0, [pc, #56]	; (8000558 <main+0x54>)
 8000520:	f7ff fe5e 	bl	80001e0 <send_debug_CDC>
  text = malloc(512);
 8000524:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000528:	f008 fb52 	bl	8008bd0 <malloc>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <main+0x58>)
 8000532:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  send_debug_CDC("Data Simuasi");
 8000534:	480a      	ldr	r0, [pc, #40]	; (8000560 <main+0x5c>)
 8000536:	f7ff fe53 	bl	80001e0 <send_debug_CDC>
	  modbus(0x02, 0x03, 0x00, 0x02, 0x00, 0x02);
 800053a:	2302      	movs	r3, #2
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2300      	movs	r3, #0
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2302      	movs	r3, #2
 8000544:	2200      	movs	r2, #0
 8000546:	2103      	movs	r1, #3
 8000548:	2002      	movs	r0, #2
 800054a:	f7ff fead 	bl	80002a8 <modbus>

//	  send_debug_CDC("Data Bove");
//	  modbus(0x01, 0x03, 0x00, 0x07, 0x00, 0x02);
//

	  HAL_Delay(1000);
 800054e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000552:	f000 fb09 	bl	8000b68 <HAL_Delay>
	  send_debug_CDC("Data Simuasi");
 8000556:	e7ed      	b.n	8000534 <main+0x30>
 8000558:	08009f54 	.word	0x08009f54
 800055c:	20000270 	.word	0x20000270
 8000560:	08009f6c 	.word	0x08009f6c

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056e:	2228      	movs	r2, #40	; 0x28
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f008 fb3c 	bl	8008bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a2:	2301      	movs	r3, #1
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fbc2 	bl	8002d44 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c6:	f000 f8bf 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2102      	movs	r1, #2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fe2e 	bl	8003248 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005f2:	f000 f8a9 	bl	8000748 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005f6:	2310      	movs	r3, #16
 80005f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f002 ffaf 	bl	8003564 <HAL_RCCEx_PeriphCLKConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800060c:	f000 f89c 	bl	8000748 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	; 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_USART1_UART_Init+0x50>)
 8000620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000650:	f003 f83e 	bl	80036d0 <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800065a:	f000 f875 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200001fc 	.word	0x200001fc
 8000668:	40013800 	.word	0x40013800

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	4b2e      	ldr	r3, [pc, #184]	; (800073c <MX_GPIO_Init+0xd0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a2d      	ldr	r2, [pc, #180]	; (800073c <MX_GPIO_Init+0xd0>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <MX_GPIO_Init+0xd0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0310 	and.w	r3, r3, #16
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <MX_GPIO_Init+0xd0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a27      	ldr	r2, [pc, #156]	; (800073c <MX_GPIO_Init+0xd0>)
 800069e:	f043 0320 	orr.w	r3, r3, #32
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <MX_GPIO_Init+0xd0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0320 	and.w	r3, r3, #32
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_GPIO_Init+0xd0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <MX_GPIO_Init+0xd0>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_GPIO_Init+0xd0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_GPIO_Init+0xd0>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <MX_GPIO_Init+0xd0>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_GPIO_Init+0xd0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0308 	and.w	r3, r3, #8
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4816      	ldr	r0, [pc, #88]	; (8000740 <MX_GPIO_Init+0xd4>)
 80006e8:	f000 fda6 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f2:	4814      	ldr	r0, [pc, #80]	; (8000744 <MX_GPIO_Init+0xd8>)
 80006f4:	f000 fda0 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80006f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2302      	movs	r3, #2
 8000708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <MX_GPIO_Init+0xd4>)
 8000712:	f000 fc0d 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8000716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_GPIO_Init+0xd8>)
 8000730:	f000 fbfe 	bl	8000f30 <HAL_GPIO_Init>

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	40011000 	.word	0x40011000
 8000744:	40010800 	.word	0x40010800

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000760:	23ff      	movs	r3, #255	; 0xff
 8000762:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000764:	23ff      	movs	r3, #255	; 0xff
 8000766:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000768:	e013      	b.n	8000792 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	7bbb      	ldrb	r3, [r7, #14]
 8000774:	4053      	eors	r3, r2
 8000776:	b2db      	uxtb	r3, r3
 8000778:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <crc16+0x64>)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	4413      	add	r3, r2
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	4053      	eors	r3, r2
 8000786:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <crc16+0x68>)
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8000792:	887b      	ldrh	r3, [r7, #2]
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	807a      	strh	r2, [r7, #2]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1e6      	bne.n	800076a <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	b21b      	sxth	r3, r3
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	b29b      	uxth	r3, r3
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	08009fc4 	.word	0x08009fc4
 80007bc:	0800a0c4 	.word	0x0800a0c4

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <HAL_MspInit+0x5c>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <HAL_MspInit+0x5c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_MspInit+0x5c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_MspInit+0x5c>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <HAL_MspInit+0x5c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_MspInit+0x5c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_MspInit+0x60>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_MspInit+0x60>)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	40021000 	.word	0x40021000
 8000820:	40010000 	.word	0x40010000

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a20      	ldr	r2, [pc, #128]	; (80008c0 <HAL_UART_MspInit+0x9c>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d139      	bne.n	80008b8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <HAL_UART_MspInit+0xa0>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <HAL_UART_MspInit+0xa0>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <HAL_UART_MspInit+0xa0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <HAL_UART_MspInit+0xa0>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <HAL_UART_MspInit+0xa0>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <HAL_UART_MspInit+0xa0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000878:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	4619      	mov	r1, r3
 8000888:	480f      	ldr	r0, [pc, #60]	; (80008c8 <HAL_UART_MspInit+0xa4>)
 800088a:	f000 fb51 	bl	8000f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800088e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <HAL_UART_MspInit+0xa4>)
 80008a4:	f000 fb44 	bl	8000f30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2025      	movs	r0, #37	; 0x25
 80008ae:	f000 fa56 	bl	8000d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008b2:	2025      	movs	r0, #37	; 0x25
 80008b4:	f000 fa6f 	bl	8000d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008b8:	bf00      	nop
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40013800 	.word	0x40013800
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40010800 	.word	0x40010800

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000912:	f000 f90d 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000922:	f000 fdc6 	bl	80014b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000f14 	.word	0x20000f14

08000930 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <USART1_IRQHandler+0x10>)
 8000936:	f002 fffb 	bl	8003930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200001fc 	.word	0x200001fc

08000944 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	e00a      	b.n	800096c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000956:	f3af 8000 	nop.w
 800095a:	4601      	mov	r1, r0
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	60ba      	str	r2, [r7, #8]
 8000962:	b2ca      	uxtb	r2, r1
 8000964:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3301      	adds	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	429a      	cmp	r2, r3
 8000972:	dbf0      	blt.n	8000956 <_read+0x12>
	}

return len;
 8000974:	687b      	ldr	r3, [r7, #4]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <_close>:
	}
	return len;
}

int _close(int file)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
	return -1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009a4:	605a      	str	r2, [r3, #4]
	return 0;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <_isatty>:

int _isatty(int file)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
	return 1;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b085      	sub	sp, #20
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
	return 0;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
	...

080009e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <_sbrk+0x5c>)
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <_sbrk+0x60>)
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <_sbrk+0x64>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <_sbrk+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d207      	bcs.n	8000a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a10:	f008 f8b4 	bl	8008b7c <__errno>
 8000a14:	4603      	mov	r3, r0
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	e009      	b.n	8000a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <_sbrk+0x64>)
 8000a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20005000 	.word	0x20005000
 8000a40:	00000400 	.word	0x00000400
 8000a44:	20000274 	.word	0x20000274
 8000a48:	20001438 	.word	0x20001438

08000a4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a58:	f7ff fff8 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a5e:	490c      	ldr	r1, [pc, #48]	; (8000a90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a60:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a74:	4c09      	ldr	r4, [pc, #36]	; (8000a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a82:	f008 f881 	bl	8008b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a86:	f7ff fd3d 	bl	8000504 <main>
  bx lr
 8000a8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000a94:	0800a290 	.word	0x0800a290
  ldr r2, =_sbss
 8000a98:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000a9c:	20001434 	.word	0x20001434

08000aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC1_2_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_Init+0x28>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_Init+0x28>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 f947 	bl	8000d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aba:	200f      	movs	r0, #15
 8000abc:	f000 f808 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac0:	f7ff fe7e 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40022000 	.word	0x40022000

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x54>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x58>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f95f 	bl	8000db2 <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00e      	b.n	8000b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d80a      	bhi.n	8000b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f000 f927 	bl	8000d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_InitTick+0x5c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x20>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a03      	ldr	r2, [pc, #12]	; (8000b50 <HAL_IncTick+0x20>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000278 	.word	0x20000278

08000b54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <HAL_GetTick+0x10>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	20000278 	.word	0x20000278

08000b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff fff0 	bl	8000b54 <HAL_GetTick>
 8000b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b80:	d005      	beq.n	8000b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_Delay+0x44>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b8e:	bf00      	nop
 8000b90:	f7ff ffe0 	bl	8000b54 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8f7      	bhi.n	8000b90 <HAL_Delay+0x28>
  {
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008

08000bb0 <__NVIC_SetPriorityGrouping>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4906      	ldr	r1, [pc, #24]	; (8000c48 <__NVIC_EnableIRQ+0x34>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Config>:
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d14:	d301      	bcc.n	8000d1a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00f      	b.n	8000d3a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <SysTick_Config+0x40>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d22:	210f      	movs	r1, #15
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f7ff ff90 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <SysTick_Config+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SysTick_Config+0x40>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff2d 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d70:	f7ff ff42 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	6978      	ldr	r0, [r7, #20]
 8000d7c:	f7ff ff90 	bl	8000ca0 <NVIC_EncodePriority>
 8000d80:	4602      	mov	r2, r0
 8000d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff5f 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff35 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffa2 	bl	8000d04 <SysTick_Config>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b085      	sub	sp, #20
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d008      	beq.n	8000df4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2204      	movs	r2, #4
 8000de6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e020      	b.n	8000e36 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 020e 	bic.w	r2, r2, #14
 8000e02:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0201 	bic.w	r2, r2, #1
 8000e12:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e22:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d005      	beq.n	8000e64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e051      	b.n	8000f08 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 020e 	bic.w	r2, r2, #14
 8000e72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <HAL_DMA_Abort_IT+0xd4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d029      	beq.n	8000ee2 <HAL_DMA_Abort_IT+0xa2>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <HAL_DMA_Abort_IT+0xd8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d022      	beq.n	8000ede <HAL_DMA_Abort_IT+0x9e>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <HAL_DMA_Abort_IT+0xdc>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d01a      	beq.n	8000ed8 <HAL_DMA_Abort_IT+0x98>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <HAL_DMA_Abort_IT+0xe0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d012      	beq.n	8000ed2 <HAL_DMA_Abort_IT+0x92>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <HAL_DMA_Abort_IT+0xe4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00a      	beq.n	8000ecc <HAL_DMA_Abort_IT+0x8c>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <HAL_DMA_Abort_IT+0xe8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d102      	bne.n	8000ec6 <HAL_DMA_Abort_IT+0x86>
 8000ec0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ec4:	e00e      	b.n	8000ee4 <HAL_DMA_Abort_IT+0xa4>
 8000ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eca:	e00b      	b.n	8000ee4 <HAL_DMA_Abort_IT+0xa4>
 8000ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed0:	e008      	b.n	8000ee4 <HAL_DMA_Abort_IT+0xa4>
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	e005      	b.n	8000ee4 <HAL_DMA_Abort_IT+0xa4>
 8000ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000edc:	e002      	b.n	8000ee4 <HAL_DMA_Abort_IT+0xa4>
 8000ede:	2310      	movs	r3, #16
 8000ee0:	e000      	b.n	8000ee4 <HAL_DMA_Abort_IT+0xa4>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	4a11      	ldr	r2, [pc, #68]	; (8000f2c <HAL_DMA_Abort_IT+0xec>)
 8000ee6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	4798      	blx	r3
    } 
  }
  return status;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40020008 	.word	0x40020008
 8000f18:	4002001c 	.word	0x4002001c
 8000f1c:	40020030 	.word	0x40020030
 8000f20:	40020044 	.word	0x40020044
 8000f24:	40020058 	.word	0x40020058
 8000f28:	4002006c 	.word	0x4002006c
 8000f2c:	40020000 	.word	0x40020000

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b08b      	sub	sp, #44	; 0x2c
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f42:	e169      	b.n	8001218 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f44:	2201      	movs	r2, #1
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	f040 8158 	bne.w	8001212 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4a9a      	ldr	r2, [pc, #616]	; (80011d0 <HAL_GPIO_Init+0x2a0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d05e      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f6c:	4a98      	ldr	r2, [pc, #608]	; (80011d0 <HAL_GPIO_Init+0x2a0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d875      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000f72:	4a98      	ldr	r2, [pc, #608]	; (80011d4 <HAL_GPIO_Init+0x2a4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d058      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f78:	4a96      	ldr	r2, [pc, #600]	; (80011d4 <HAL_GPIO_Init+0x2a4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d86f      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000f7e:	4a96      	ldr	r2, [pc, #600]	; (80011d8 <HAL_GPIO_Init+0x2a8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d052      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f84:	4a94      	ldr	r2, [pc, #592]	; (80011d8 <HAL_GPIO_Init+0x2a8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d869      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000f8a:	4a94      	ldr	r2, [pc, #592]	; (80011dc <HAL_GPIO_Init+0x2ac>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d04c      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f90:	4a92      	ldr	r2, [pc, #584]	; (80011dc <HAL_GPIO_Init+0x2ac>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d863      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000f96:	4a92      	ldr	r2, [pc, #584]	; (80011e0 <HAL_GPIO_Init+0x2b0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d046      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f9c:	4a90      	ldr	r2, [pc, #576]	; (80011e0 <HAL_GPIO_Init+0x2b0>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d85d      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000fa2:	2b12      	cmp	r3, #18
 8000fa4:	d82a      	bhi.n	8000ffc <HAL_GPIO_Init+0xcc>
 8000fa6:	2b12      	cmp	r3, #18
 8000fa8:	d859      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000faa:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <HAL_GPIO_Init+0x80>)
 8000fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb0:	0800102b 	.word	0x0800102b
 8000fb4:	08001005 	.word	0x08001005
 8000fb8:	08001017 	.word	0x08001017
 8000fbc:	08001059 	.word	0x08001059
 8000fc0:	0800105f 	.word	0x0800105f
 8000fc4:	0800105f 	.word	0x0800105f
 8000fc8:	0800105f 	.word	0x0800105f
 8000fcc:	0800105f 	.word	0x0800105f
 8000fd0:	0800105f 	.word	0x0800105f
 8000fd4:	0800105f 	.word	0x0800105f
 8000fd8:	0800105f 	.word	0x0800105f
 8000fdc:	0800105f 	.word	0x0800105f
 8000fe0:	0800105f 	.word	0x0800105f
 8000fe4:	0800105f 	.word	0x0800105f
 8000fe8:	0800105f 	.word	0x0800105f
 8000fec:	0800105f 	.word	0x0800105f
 8000ff0:	0800105f 	.word	0x0800105f
 8000ff4:	0800100d 	.word	0x0800100d
 8000ff8:	08001021 	.word	0x08001021
 8000ffc:	4a79      	ldr	r2, [pc, #484]	; (80011e4 <HAL_GPIO_Init+0x2b4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001002:	e02c      	b.n	800105e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	623b      	str	r3, [r7, #32]
          break;
 800100a:	e029      	b.n	8001060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	3304      	adds	r3, #4
 8001012:	623b      	str	r3, [r7, #32]
          break;
 8001014:	e024      	b.n	8001060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	3308      	adds	r3, #8
 800101c:	623b      	str	r3, [r7, #32]
          break;
 800101e:	e01f      	b.n	8001060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	330c      	adds	r3, #12
 8001026:	623b      	str	r3, [r7, #32]
          break;
 8001028:	e01a      	b.n	8001060 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001032:	2304      	movs	r3, #4
 8001034:	623b      	str	r3, [r7, #32]
          break;
 8001036:	e013      	b.n	8001060 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d105      	bne.n	800104c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001040:	2308      	movs	r3, #8
 8001042:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	611a      	str	r2, [r3, #16]
          break;
 800104a:	e009      	b.n	8001060 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800104c:	2308      	movs	r3, #8
 800104e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	615a      	str	r2, [r3, #20]
          break;
 8001056:	e003      	b.n	8001060 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
          break;
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x130>
          break;
 800105e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2bff      	cmp	r3, #255	; 0xff
 8001064:	d801      	bhi.n	800106a <HAL_GPIO_Init+0x13a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	e001      	b.n	800106e <HAL_GPIO_Init+0x13e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3304      	adds	r3, #4
 800106e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2bff      	cmp	r3, #255	; 0xff
 8001074:	d802      	bhi.n	800107c <HAL_GPIO_Init+0x14c>
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	e002      	b.n	8001082 <HAL_GPIO_Init+0x152>
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	3b08      	subs	r3, #8
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	210f      	movs	r1, #15
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	401a      	ands	r2, r3
 8001094:	6a39      	ldr	r1, [r7, #32]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	431a      	orrs	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 80b1 	beq.w	8001212 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010b0:	4b4d      	ldr	r3, [pc, #308]	; (80011e8 <HAL_GPIO_Init+0x2b8>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	; (80011e8 <HAL_GPIO_Init+0x2b8>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b4a      	ldr	r3, [pc, #296]	; (80011e8 <HAL_GPIO_Init+0x2b8>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010c8:	4a48      	ldr	r2, [pc, #288]	; (80011ec <HAL_GPIO_Init+0x2bc>)
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a40      	ldr	r2, [pc, #256]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d013      	beq.n	800111c <HAL_GPIO_Init+0x1ec>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a3f      	ldr	r2, [pc, #252]	; (80011f4 <HAL_GPIO_Init+0x2c4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d00d      	beq.n	8001118 <HAL_GPIO_Init+0x1e8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a3e      	ldr	r2, [pc, #248]	; (80011f8 <HAL_GPIO_Init+0x2c8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d007      	beq.n	8001114 <HAL_GPIO_Init+0x1e4>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a3d      	ldr	r2, [pc, #244]	; (80011fc <HAL_GPIO_Init+0x2cc>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d101      	bne.n	8001110 <HAL_GPIO_Init+0x1e0>
 800110c:	2303      	movs	r3, #3
 800110e:	e006      	b.n	800111e <HAL_GPIO_Init+0x1ee>
 8001110:	2304      	movs	r3, #4
 8001112:	e004      	b.n	800111e <HAL_GPIO_Init+0x1ee>
 8001114:	2302      	movs	r3, #2
 8001116:	e002      	b.n	800111e <HAL_GPIO_Init+0x1ee>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <HAL_GPIO_Init+0x1ee>
 800111c:	2300      	movs	r3, #0
 800111e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001120:	f002 0203 	and.w	r2, r2, #3
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	4093      	lsls	r3, r2
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800112e:	492f      	ldr	r1, [pc, #188]	; (80011ec <HAL_GPIO_Init+0x2bc>)
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	492c      	ldr	r1, [pc, #176]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	608b      	str	r3, [r1, #8]
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	43db      	mvns	r3, r3
 800115e:	4928      	ldr	r1, [pc, #160]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 8001160:	4013      	ands	r3, r2
 8001162:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	4922      	ldr	r1, [pc, #136]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	60cb      	str	r3, [r1, #12]
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	43db      	mvns	r3, r3
 8001186:	491e      	ldr	r1, [pc, #120]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 8001188:	4013      	ands	r3, r2
 800118a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4918      	ldr	r1, [pc, #96]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4914      	ldr	r1, [pc, #80]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d021      	beq.n	8001204 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	490e      	ldr	r1, [pc, #56]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	600b      	str	r3, [r1, #0]
 80011cc:	e021      	b.n	8001212 <HAL_GPIO_Init+0x2e2>
 80011ce:	bf00      	nop
 80011d0:	10320000 	.word	0x10320000
 80011d4:	10310000 	.word	0x10310000
 80011d8:	10220000 	.word	0x10220000
 80011dc:	10210000 	.word	0x10210000
 80011e0:	10120000 	.word	0x10120000
 80011e4:	10110000 	.word	0x10110000
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010000 	.word	0x40010000
 80011f0:	40010800 	.word	0x40010800
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40011400 	.word	0x40011400
 8001200:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_GPIO_Init+0x304>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	43db      	mvns	r3, r3
 800120c:	4909      	ldr	r1, [pc, #36]	; (8001234 <HAL_GPIO_Init+0x304>)
 800120e:	4013      	ands	r3, r2
 8001210:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	3301      	adds	r3, #1
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	fa22 f303 	lsr.w	r3, r2, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	f47f ae8e 	bne.w	8000f44 <HAL_GPIO_Init+0x14>
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	372c      	adds	r7, #44	; 0x2c
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	611a      	str	r2, [r3, #16]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126a:	b08b      	sub	sp, #44	; 0x2c
 800126c:	af06      	add	r7, sp, #24
 800126e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0f1      	b.n	800145e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d106      	bne.n	8001294 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f007 f9ca 	bl	8008628 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2203      	movs	r2, #3
 8001298:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 f8e9 	bl	8004478 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	687e      	ldr	r6, [r7, #4]
 80012ae:	466d      	mov	r5, sp
 80012b0:	f106 0410 	add.w	r4, r6, #16
 80012b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	602b      	str	r3, [r5, #0]
 80012bc:	1d33      	adds	r3, r6, #4
 80012be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012c0:	6838      	ldr	r0, [r7, #0]
 80012c2:	f003 f8b3 	bl	800442c <USB_CoreInit>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2202      	movs	r2, #2
 80012d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0c2      	b.n	800145e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 f8e4 	bl	80044ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e040      	b.n	800136c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	440b      	add	r3, r1
 80012fa:	3301      	adds	r3, #1
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	440b      	add	r3, r1
 8001324:	3303      	adds	r3, #3
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	440b      	add	r3, r1
 8001338:	3338      	adds	r3, #56	; 0x38
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	440b      	add	r3, r1
 800134c:	333c      	adds	r3, #60	; 0x3c
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	440b      	add	r3, r1
 8001360:	3340      	adds	r3, #64	; 0x40
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	3301      	adds	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	429a      	cmp	r2, r3
 8001374:	d3b9      	bcc.n	80012ea <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e044      	b.n	8001406 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	440b      	add	r3, r1
 80013cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	3301      	adds	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	d3b5      	bcc.n	800137c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	687e      	ldr	r6, [r7, #4]
 8001418:	466d      	mov	r5, sp
 800141a:	f106 0410 	add.w	r4, r6, #16
 800141e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	602b      	str	r3, [r5, #0]
 8001426:	1d33      	adds	r3, r6, #4
 8001428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f003 f84a 	bl	80044c4 <USB_DevInit>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2202      	movs	r2, #2
 800143a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00d      	b.n	800145e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f005 facb 	bl	80069f2 <USB_DevDisconnect>

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001466 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_PCD_Start+0x16>
 8001478:	2302      	movs	r3, #2
 800147a:	e016      	b.n	80014aa <HAL_PCD_Start+0x44>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f002 ffdf 	bl	800444c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800148e:	2101      	movs	r1, #1
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f007 fb3c 	bl	8008b0e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f005 fa9f 	bl	80069de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b088      	sub	sp, #32
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 faa1 	bl	8006a06 <USB_ReadInterrupts>
 80014c4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fb1b 	bl	8001b0c <PCD_EP_ISR_Handler>

    return;
 80014d6:	e119      	b.n	800170c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d013      	beq.n	800150a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f4:	b292      	uxth	r2, r2
 80014f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f007 f90f 	bl	800871e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001500:	2100      	movs	r1, #0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f905 	bl	8001712 <HAL_PCD_SetAddress>

    return;
 8001508:	e100      	b.n	800170c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00c      	beq.n	800152e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800151c:	b29a      	uxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001526:	b292      	uxth	r2, r2
 8001528:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800152c:	e0ee      	b.n	800170c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00c      	beq.n	8001552 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001540:	b29a      	uxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800154a:	b292      	uxth	r2, r2
 800154c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001550:	e0dc      	b.n	800170c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d027      	beq.n	80015ac <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001564:	b29a      	uxth	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0204 	bic.w	r2, r2, #4
 800156e:	b292      	uxth	r2, r2
 8001570:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800157c:	b29a      	uxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0208 	bic.w	r2, r2, #8
 8001586:	b292      	uxth	r2, r2
 8001588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f007 f8ff 	bl	8008790 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015a4:	b292      	uxth	r2, r2
 80015a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015aa:	e0af      	b.n	800170c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8083 	beq.w	80016be <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	77fb      	strb	r3, [r7, #31]
 80015bc:	e010      	b.n	80015e0 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	7ffb      	ldrb	r3, [r7, #31]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	441a      	add	r2, r3
 80015ca:	7ffb      	ldrb	r3, [r7, #31]
 80015cc:	8812      	ldrh	r2, [r2, #0]
 80015ce:	b292      	uxth	r2, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	3320      	adds	r3, #32
 80015d4:	443b      	add	r3, r7
 80015d6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80015da:	7ffb      	ldrb	r3, [r7, #31]
 80015dc:	3301      	adds	r3, #1
 80015de:	77fb      	strb	r3, [r7, #31]
 80015e0:	7ffb      	ldrb	r3, [r7, #31]
 80015e2:	2b07      	cmp	r3, #7
 80015e4:	d9eb      	bls.n	80015be <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 0201 	orr.w	r2, r2, #1
 80015f8:	b292      	uxth	r2, r2
 80015fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001606:	b29a      	uxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0201 	bic.w	r2, r2, #1
 8001610:	b292      	uxth	r2, r2
 8001612:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001616:	bf00      	nop
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001620:	b29b      	uxth	r3, r3
 8001622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f6      	beq.n	8001618 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001632:	b29a      	uxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800163c:	b292      	uxth	r2, r2
 800163e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001642:	2300      	movs	r3, #0
 8001644:	77fb      	strb	r3, [r7, #31]
 8001646:	e00f      	b.n	8001668 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001648:	7ffb      	ldrb	r3, [r7, #31]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	4611      	mov	r1, r2
 8001650:	7ffa      	ldrb	r2, [r7, #31]
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	440a      	add	r2, r1
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	3320      	adds	r3, #32
 800165a:	443b      	add	r3, r7
 800165c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001660:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001662:	7ffb      	ldrb	r3, [r7, #31]
 8001664:	3301      	adds	r3, #1
 8001666:	77fb      	strb	r3, [r7, #31]
 8001668:	7ffb      	ldrb	r3, [r7, #31]
 800166a:	2b07      	cmp	r3, #7
 800166c:	d9ec      	bls.n	8001648 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001676:	b29a      	uxth	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0208 	orr.w	r2, r2, #8
 8001680:	b292      	uxth	r2, r2
 8001682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001698:	b292      	uxth	r2, r2
 800169a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0204 	orr.w	r2, r2, #4
 80016b0:	b292      	uxth	r2, r2
 80016b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f007 f850 	bl	800875c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016bc:	e026      	b.n	800170c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00f      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016da:	b292      	uxth	r2, r2
 80016dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f007 f80e 	bl	8008702 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016e6:	e011      	b.n	800170c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00c      	beq.n	800170c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001704:	b292      	uxth	r2, r2
 8001706:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800170a:	bf00      	nop
  }
}
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_PCD_SetAddress+0x1a>
 8001728:	2302      	movs	r3, #2
 800172a:	e013      	b.n	8001754 <HAL_PCD_SetAddress+0x42>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	78fa      	ldrb	r2, [r7, #3]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f005 f937 	bl	80069b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	4608      	mov	r0, r1
 8001766:	4611      	mov	r1, r2
 8001768:	461a      	mov	r2, r3
 800176a:	4603      	mov	r3, r0
 800176c:	70fb      	strb	r3, [r7, #3]
 800176e:	460b      	mov	r3, r1
 8001770:	803b      	strh	r3, [r7, #0]
 8001772:	4613      	mov	r3, r2
 8001774:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800177a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800177e:	2b00      	cmp	r3, #0
 8001780:	da0e      	bge.n	80017a0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	705a      	strb	r2, [r3, #1]
 800179e:	e00e      	b.n	80017be <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	f003 0207 	and.w	r2, r3, #7
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017ca:	883a      	ldrh	r2, [r7, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	78ba      	ldrb	r2, [r7, #2]
 80017d4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017d6:	78bb      	ldrb	r3, [r7, #2]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d102      	bne.n	80017e2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_PCD_EP_Open+0x94>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e00e      	b.n	800180e <HAL_PCD_EP_Open+0xb2>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68f9      	ldr	r1, [r7, #12]
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fe80 	bl	8004504 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800180c:	7afb      	ldrb	r3, [r7, #11]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001826:	2b00      	cmp	r3, #0
 8001828:	da0e      	bge.n	8001848 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	705a      	strb	r2, [r3, #1]
 8001846:	e00e      	b.n	8001866 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	f003 0207 	and.w	r2, r3, #7
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	b2da      	uxtb	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_PCD_EP_Close+0x6a>
 800187c:	2302      	movs	r3, #2
 800187e:	e00e      	b.n	800189e <HAL_PCD_EP_Close+0x88>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68f9      	ldr	r1, [r7, #12]
 800188e:	4618      	mov	r0, r3
 8001890:	f003 f9f8 	bl	8004c84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	460b      	mov	r3, r1
 80018b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018b6:	7afb      	ldrb	r3, [r7, #11]
 80018b8:	f003 0207 	and.w	r2, r3, #7
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2200      	movs	r2, #0
 80018e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018e6:	7afb      	ldrb	r3, [r7, #11]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6979      	ldr	r1, [r7, #20]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fbaf 	bl	800505c <USB_EPStartXfer>

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	f003 0207 	and.w	r2, r3, #7
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	460b      	mov	r3, r1
 8001944:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4413      	add	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2200      	movs	r2, #0
 800197a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2201      	movs	r2, #1
 8001980:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001982:	7afb      	ldrb	r3, [r7, #11]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	b2da      	uxtb	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6979      	ldr	r1, [r7, #20]
 8001994:	4618      	mov	r0, r3
 8001996:	f003 fb61 	bl	800505c <USB_EPStartXfer>

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	f003 0207 	and.w	r2, r3, #7
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d901      	bls.n	80019c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e04c      	b.n	8001a5c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da0e      	bge.n	80019e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	705a      	strb	r2, [r3, #1]
 80019e6:	e00c      	b.n	8001a02 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_PCD_EP_SetStall+0x7e>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e01c      	b.n	8001a5c <HAL_PCD_EP_SetStall+0xb8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68f9      	ldr	r1, [r7, #12]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 fec4 	bl	80067be <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d108      	bne.n	8001a52 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	f004 ffe9 	bl	8006a24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	f003 020f 	and.w	r2, r3, #15
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d901      	bls.n	8001a82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e040      	b.n	8001b04 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da0e      	bge.n	8001aa8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	705a      	strb	r2, [r3, #1]
 8001aa6:	e00e      	b.n	8001ac6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	f003 0207 	and.w	r2, r3, #7
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_PCD_EP_ClrStall+0x82>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e00e      	b.n	8001b04 <HAL_PCD_EP_ClrStall+0xa0>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 feb2 	bl	800685e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b096      	sub	sp, #88	; 0x58
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b14:	e3bf      	b.n	8002296 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001b30:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 8179 	bne.w	8001e2c <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d152      	bne.n	8001bec <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b56:	81fb      	strh	r3, [r7, #14]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	89fb      	ldrh	r3, [r7, #14]
 8001b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3328      	adds	r3, #40	; 0x28
 8001b6e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	3302      	adds	r3, #2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	441a      	add	r2, r3
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001baa:	2100      	movs	r1, #0
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f006 fd8e 	bl	80086ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 836b 	beq.w	8002296 <PCD_EP_ISR_Handler+0x78a>
 8001bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f040 8366 	bne.w	8002296 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bea:	e354      	b.n	8002296 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bf2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d034      	beq.n	8001c74 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3306      	adds	r3, #6
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c42:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c46:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f004 ff3b 	bl	8006ac4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	823b      	strh	r3, [r7, #16]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	8a3a      	ldrh	r2, [r7, #16]
 8001c64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c68:	b292      	uxth	r2, r2
 8001c6a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f006 fd01 	bl	8008674 <HAL_PCD_SetupStageCallback>
 8001c72:	e310      	b.n	8002296 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c74:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f280 830c 	bge.w	8002296 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	83fb      	strh	r3, [r7, #30]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	8bfa      	ldrh	r2, [r7, #30]
 8001c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	3306      	adds	r3, #6
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d019      	beq.n	8001d04 <PCD_EP_ISR_Handler+0x1f8>
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d015      	beq.n	8001d04 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cde:	6959      	ldr	r1, [r3, #20]
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	f004 feeb 	bl	8006ac4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	441a      	add	r2, r3
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f006 fcca 	bl	8008698 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001d0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 82bd 	bne.w	8002296 <PCD_EP_ISR_Handler+0x78a>
 8001d1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d20:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001d24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d28:	f000 82b5 	beq.w	8002296 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	4413      	add	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	801a      	strh	r2, [r3, #0]
 8001d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b3e      	cmp	r3, #62	; 0x3e
 8001d62:	d91d      	bls.n	8001da0 <PCD_EP_ISR_Handler+0x294>
 8001d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <PCD_EP_ISR_Handler+0x272>
 8001d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	029b      	lsls	r3, r3, #10
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	e026      	b.n	8001dee <PCD_EP_ISR_Handler+0x2e2>
 8001da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10a      	bne.n	8001dbe <PCD_EP_ISR_Handler+0x2b2>
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	801a      	strh	r2, [r3, #0]
 8001dbc:	e017      	b.n	8001dee <PCD_EP_ISR_Handler+0x2e2>
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <PCD_EP_ISR_Handler+0x2cc>
 8001dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	029b      	lsls	r3, r3, #10
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4313      	orrs	r3, r2
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfe:	827b      	strh	r3, [r7, #18]
 8001e00:	8a7b      	ldrh	r3, [r7, #18]
 8001e02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e06:	827b      	strh	r3, [r7, #18]
 8001e08:	8a7b      	ldrh	r3, [r7, #18]
 8001e0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e0e:	827b      	strh	r3, [r7, #18]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	8a7b      	ldrh	r3, [r7, #18]
 8001e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	8013      	strh	r3, [r2, #0]
 8001e2a:	e234      	b.n	8002296 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e40:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f280 80fc 	bge.w	8002042 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e60:	4013      	ands	r3, r2
 8001e62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001e78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e80:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e98:	7b1b      	ldrb	r3, [r3, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d125      	bne.n	8001eea <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3306      	adds	r3, #6
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001eca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8092 	beq.w	8001ff8 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eda:	6959      	ldr	r1, [r3, #20]
 8001edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ede:	88da      	ldrh	r2, [r3, #6]
 8001ee0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ee4:	f004 fdee 	bl	8006ac4 <USB_ReadPMA>
 8001ee8:	e086      	b.n	8001ff8 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eec:	78db      	ldrb	r3, [r3, #3]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d10a      	bne.n	8001f08 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ef2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f9d9 	bl	80022b2 <HAL_PCD_EP_DB_Receive>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001f06:	e077      	b.n	8001ff8 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f22:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	441a      	add	r2, r3
 8001f34:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d024      	beq.n	8001fb0 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f8e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001f92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d02e      	beq.n	8001ff8 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa0:	6959      	ldr	r1, [r3, #20]
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa4:	891a      	ldrh	r2, [r3, #8]
 8001fa6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001faa:	f004 fd8b 	bl	8006ac4 <USB_ReadPMA>
 8001fae:	e023      	b.n	8001ff8 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3306      	adds	r3, #6
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001fdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fea:	6959      	ldr	r1, [r3, #20]
 8001fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fee:	895a      	ldrh	r2, [r3, #10]
 8001ff0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ff4:	f004 fd66 	bl	8006ac4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffa:	69da      	ldr	r2, [r3, #28]
 8001ffc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002000:	441a      	add	r2, r3
 8002002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002004:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800200e:	441a      	add	r2, r3
 8002010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002012:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <PCD_EP_ISR_Handler+0x51c>
 800201c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d206      	bcs.n	8002036 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f006 fb32 	bl	8008698 <HAL_PCD_DataOutStageCallback>
 8002034:	e005      	b.n	8002042 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800203c:	4618      	mov	r0, r3
 800203e:	f003 f80d 	bl	800505c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002042:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8123 	beq.w	8002296 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002050:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800207a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	441a      	add	r2, r3
 8002090:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800209c:	b29b      	uxth	r3, r3
 800209e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80020a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a2:	78db      	ldrb	r3, [r3, #3]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	f040 80a2 	bne.w	80021ee <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80020aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80020b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b2:	7b1b      	ldrb	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8093 	beq.w	80021e0 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d046      	beq.n	8002154 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d126      	bne.n	800211c <PCD_EP_ISR_Handler+0x610>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020dc:	b29b      	uxth	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	4413      	add	r3, r2
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	011a      	lsls	r2, r3, #4
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	4413      	add	r3, r2
 80020f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020f4:	623b      	str	r3, [r7, #32]
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002100:	b29a      	uxth	r2, r3
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002114:	b29a      	uxth	r2, r3
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	e061      	b.n	80021e0 <PCD_EP_ISR_Handler+0x6d4>
 800211c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800211e:	785b      	ldrb	r3, [r3, #1]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d15d      	bne.n	80021e0 <PCD_EP_ISR_Handler+0x6d4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002138:	4413      	add	r3, r2
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800213c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	011a      	lsls	r2, r3, #4
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	4413      	add	r3, r2
 8002146:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
 800214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214e:	2200      	movs	r2, #0
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	e045      	b.n	80021e0 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215c:	785b      	ldrb	r3, [r3, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d126      	bne.n	80021b0 <PCD_EP_ISR_Handler+0x6a4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002170:	b29b      	uxth	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	4413      	add	r3, r2
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
 800217a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	011a      	lsls	r2, r3, #4
 8002180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002182:	4413      	add	r3, r2
 8002184:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002194:	b29a      	uxth	r2, r3
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ac:	801a      	strh	r2, [r3, #0]
 80021ae:	e017      	b.n	80021e0 <PCD_EP_ISR_Handler+0x6d4>
 80021b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b2:	785b      	ldrb	r3, [r3, #1]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d113      	bne.n	80021e0 <PCD_EP_ISR_Handler+0x6d4>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c6:	4413      	add	r3, r2
 80021c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	011a      	lsls	r2, r3, #4
 80021d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d2:	4413      	add	r3, r2
 80021d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	2200      	movs	r2, #0
 80021de:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f006 fa71 	bl	80086ce <HAL_PCD_DataInStageCallback>
 80021ec:	e053      	b.n	8002296 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80021ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d146      	bne.n	8002288 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	3302      	adds	r3, #2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002222:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800222e:	429a      	cmp	r2, r3
 8002230:	d907      	bls.n	8002242 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800223a:	1ad2      	subs	r2, r2, r3
 800223c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223e:	619a      	str	r2, [r3, #24]
 8002240:	e002      	b.n	8002248 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d106      	bne.n	800225e <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f006 fa39 	bl	80086ce <HAL_PCD_DataInStageCallback>
 800225c:	e01b      	b.n	8002296 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800225e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002266:	441a      	add	r2, r3
 8002268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800226c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002274:	441a      	add	r2, r3
 8002276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002278:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002280:	4618      	mov	r0, r3
 8002282:	f002 feeb 	bl	800505c <USB_EPStartXfer>
 8002286:	e006      	b.n	8002296 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002288:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800228c:	461a      	mov	r2, r3
 800228e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f91b 	bl	80024cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800229e:	b29b      	uxth	r3, r3
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f6ff ac37 	blt.w	8001b16 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3758      	adds	r7, #88	; 0x58
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b088      	sub	sp, #32
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	4613      	mov	r3, r2
 80022be:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d07e      	beq.n	80023c8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	3302      	adds	r3, #2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	8b7b      	ldrh	r3, [r7, #26]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d306      	bcc.n	800230c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	8b7b      	ldrh	r3, [r7, #26]
 8002304:	1ad2      	subs	r2, r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	619a      	str	r2, [r3, #24]
 800230a:	e002      	b.n	8002312 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d123      	bne.n	8002362 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002334:	833b      	strh	r3, [r7, #24]
 8002336:	8b3b      	ldrh	r3, [r7, #24]
 8002338:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800233c:	833b      	strh	r3, [r7, #24]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	441a      	add	r2, r3
 800234c:	8b3b      	ldrh	r3, [r7, #24]
 800234e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235e:	b29b      	uxth	r3, r3
 8002360:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01f      	beq.n	80023ac <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002386:	82fb      	strh	r3, [r7, #22]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	441a      	add	r2, r3
 8002396:	8afb      	ldrh	r3, [r7, #22]
 8002398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800239c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023ac:	8b7b      	ldrh	r3, [r7, #26]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8087 	beq.w	80024c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	6959      	ldr	r1, [r3, #20]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	891a      	ldrh	r2, [r3, #8]
 80023c0:	8b7b      	ldrh	r3, [r7, #26]
 80023c2:	f004 fb7f 	bl	8006ac4 <USB_ReadPMA>
 80023c6:	e07c      	b.n	80024c2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	3306      	adds	r3, #6
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	8b7b      	ldrh	r3, [r7, #26]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d306      	bcc.n	800240a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	8b7b      	ldrh	r3, [r7, #26]
 8002402:	1ad2      	subs	r2, r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	619a      	str	r2, [r3, #24]
 8002408:	e002      	b.n	8002410 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d123      	bne.n	8002460 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800242e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002432:	83fb      	strh	r3, [r7, #30]
 8002434:	8bfb      	ldrh	r3, [r7, #30]
 8002436:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800243a:	83fb      	strh	r3, [r7, #30]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	441a      	add	r2, r3
 800244a:	8bfb      	ldrh	r3, [r7, #30]
 800244c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800245c:	b29b      	uxth	r3, r3
 800245e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d11f      	bne.n	80024aa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002484:	83bb      	strh	r3, [r7, #28]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	441a      	add	r2, r3
 8002494:	8bbb      	ldrh	r3, [r7, #28]
 8002496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800249a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800249e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024aa:	8b7b      	ldrh	r3, [r7, #26]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6959      	ldr	r1, [r3, #20]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	895a      	ldrh	r2, [r3, #10]
 80024bc:	8b7b      	ldrh	r3, [r7, #26]
 80024be:	f004 fb01 	bl	8006ac4 <USB_ReadPMA>
    }
  }

  return count;
 80024c2:	8b7b      	ldrh	r3, [r7, #26]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0a4      	sub	sp, #144	; 0x90
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 81dd 	beq.w	80028a0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	3302      	adds	r3, #2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	4413      	add	r3, r2
 8002504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800250e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800251a:	429a      	cmp	r2, r3
 800251c:	d907      	bls.n	800252e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002526:	1ad2      	subs	r2, r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	619a      	str	r2, [r3, #24]
 800252c:	e002      	b.n	8002534 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 80b9 	bne.w	80026b0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d126      	bne.n	8002594 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	4413      	add	r3, r2
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	011a      	lsls	r2, r3, #4
 8002564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002566:	4413      	add	r3, r2
 8002568:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002578:	b29a      	uxth	r2, r3
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258c:	b29a      	uxth	r2, r3
 800258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	e01a      	b.n	80025ca <HAL_PCD_EP_DB_Transmit+0xfe>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d116      	bne.n	80025ca <HAL_PCD_EP_DB_Transmit+0xfe>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	637b      	str	r3, [r7, #52]	; 0x34
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b0:	4413      	add	r3, r2
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	011a      	lsls	r2, r3, #4
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	4413      	add	r3, r2
 80025be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	2200      	movs	r2, #0
 80025c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d126      	bne.n	8002626 <HAL_PCD_EP_DB_Transmit+0x15a>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	011a      	lsls	r2, r3, #4
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	4413      	add	r3, r2
 80025fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260a:	b29a      	uxth	r2, r3
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	801a      	strh	r2, [r3, #0]
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800261a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800261e:	b29a      	uxth	r2, r3
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	801a      	strh	r2, [r3, #0]
 8002624:	e017      	b.n	8002656 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d113      	bne.n	8002656 <HAL_PCD_EP_DB_Transmit+0x18a>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	4413      	add	r3, r2
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	011a      	lsls	r2, r3, #4
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	4413      	add	r3, r2
 800264a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	2200      	movs	r2, #0
 8002654:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f006 f836 	bl	80086ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 82fc 	beq.w	8002c66 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002688:	82fb      	strh	r3, [r7, #22]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	441a      	add	r2, r3
 8002698:	8afb      	ldrh	r3, [r7, #22]
 800269a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800269e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	8013      	strh	r3, [r2, #0]
 80026ae:	e2da      	b.n	8002c66 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d021      	beq.n	80026fe <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	441a      	add	r2, r3
 80026e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80026ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002704:	2b01      	cmp	r3, #1
 8002706:	f040 82ae 	bne.w	8002c66 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002712:	441a      	add	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002720:	441a      	add	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6a1a      	ldr	r2, [r3, #32]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	429a      	cmp	r2, r3
 8002730:	d30b      	bcc.n	800274a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6a1a      	ldr	r2, [r3, #32]
 800273e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002742:	1ad2      	subs	r2, r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	621a      	str	r2, [r3, #32]
 8002748:	e017      	b.n	800277a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d108      	bne.n	8002764 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002752:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002762:	e00a      	b.n	800277a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2200      	movs	r2, #0
 8002778:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	785b      	ldrb	r3, [r3, #1]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d165      	bne.n	800284e <HAL_PCD_EP_DB_Transmit+0x382>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002790:	b29b      	uxth	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002796:	4413      	add	r3, r2
 8002798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	011a      	lsls	r2, r3, #4
 80027a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a2:	4413      	add	r3, r2
 80027a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027be:	2b3e      	cmp	r3, #62	; 0x3e
 80027c0:	d91d      	bls.n	80027fe <HAL_PCD_EP_DB_Transmit+0x332>
 80027c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <HAL_PCD_EP_DB_Transmit+0x310>
 80027d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d8:	3b01      	subs	r3, #1
 80027da:	64bb      	str	r3, [r7, #72]	; 0x48
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	4313      	orrs	r3, r2
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	801a      	strh	r2, [r3, #0]
 80027fc:	e044      	b.n	8002888 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80027fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10a      	bne.n	800281c <HAL_PCD_EP_DB_Transmit+0x350>
 8002806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002814:	b29a      	uxth	r2, r3
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002818:	801a      	strh	r2, [r3, #0]
 800281a:	e035      	b.n	8002888 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800281c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	64bb      	str	r3, [r7, #72]	; 0x48
 8002824:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002832:	3301      	adds	r3, #1
 8002834:	64bb      	str	r3, [r7, #72]	; 0x48
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29a      	uxth	r2, r3
 800283c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283e:	b29b      	uxth	r3, r3
 8002840:	029b      	lsls	r3, r3, #10
 8002842:	b29b      	uxth	r3, r3
 8002844:	4313      	orrs	r3, r2
 8002846:	b29a      	uxth	r2, r3
 8002848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284a:	801a      	strh	r2, [r3, #0]
 800284c:	e01c      	b.n	8002888 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d118      	bne.n	8002888 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	647b      	str	r3, [r7, #68]	; 0x44
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286a:	4413      	add	r3, r2
 800286c:	647b      	str	r3, [r7, #68]	; 0x44
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	011a      	lsls	r2, r3, #4
 8002874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002876:	4413      	add	r3, r2
 8002878:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800287c:	643b      	str	r3, [r7, #64]	; 0x40
 800287e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002882:	b29a      	uxth	r2, r3
 8002884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002886:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	6959      	ldr	r1, [r3, #20]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	891a      	ldrh	r2, [r3, #8]
 8002894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002898:	b29b      	uxth	r3, r3
 800289a:	f004 f8ce 	bl	8006a3a <USB_WritePMA>
 800289e:	e1e2      	b.n	8002c66 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	3306      	adds	r3, #6
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	699a      	ldr	r2, [r3, #24]
 80028d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d307      	bcc.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028e0:	1ad2      	subs	r2, r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	619a      	str	r2, [r3, #24]
 80028e6:	e002      	b.n	80028ee <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 80c0 	bne.w	8002a78 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	785b      	ldrb	r3, [r3, #1]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d126      	bne.n	800294e <HAL_PCD_EP_DB_Transmit+0x482>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290e:	b29b      	uxth	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002914:	4413      	add	r3, r2
 8002916:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	011a      	lsls	r2, r3, #4
 800291e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002920:	4413      	add	r3, r2
 8002922:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002926:	67bb      	str	r3, [r7, #120]	; 0x78
 8002928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002932:	b29a      	uxth	r2, r3
 8002934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002936:	801a      	strh	r2, [r3, #0]
 8002938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002946:	b29a      	uxth	r2, r3
 8002948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800294a:	801a      	strh	r2, [r3, #0]
 800294c:	e01a      	b.n	8002984 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	785b      	ldrb	r3, [r3, #1]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d116      	bne.n	8002984 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	667b      	str	r3, [r7, #100]	; 0x64
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002964:	b29b      	uxth	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800296a:	4413      	add	r3, r2
 800296c:	667b      	str	r3, [r7, #100]	; 0x64
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	011a      	lsls	r2, r3, #4
 8002974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002976:	4413      	add	r3, r2
 8002978:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800297c:	663b      	str	r3, [r7, #96]	; 0x60
 800297e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002980:	2200      	movs	r2, #0
 8002982:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	677b      	str	r3, [r7, #116]	; 0x74
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	785b      	ldrb	r3, [r3, #1]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d12b      	bne.n	80029ea <HAL_PCD_EP_DB_Transmit+0x51e>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a6:	4413      	add	r3, r2
 80029a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	011a      	lsls	r2, r3, #4
 80029b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b2:	4413      	add	r3, r2
 80029b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029ce:	801a      	strh	r2, [r3, #0]
 80029d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029e6:	801a      	strh	r2, [r3, #0]
 80029e8:	e017      	b.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x54e>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	785b      	ldrb	r3, [r3, #1]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d113      	bne.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x54e>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a00:	4413      	add	r3, r2
 8002a02:	677b      	str	r3, [r7, #116]	; 0x74
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	011a      	lsls	r2, r3, #4
 8002a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a12:	673b      	str	r3, [r7, #112]	; 0x70
 8002a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a16:	2200      	movs	r2, #0
 8002a18:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f005 fe54 	bl	80086ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f040 811a 	bne.w	8002c66 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	441a      	add	r2, r3
 8002a5e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	8013      	strh	r3, [r2, #0]
 8002a76:	e0f6      	b.n	8002c66 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d121      	bne.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	f040 80ca 	bne.w	8002c66 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ada:	441a      	add	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ae8:	441a      	add	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	6a1a      	ldr	r2, [r3, #32]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d30b      	bcc.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b0a:	1ad2      	subs	r2, r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	621a      	str	r2, [r3, #32]
 8002b10:	e017      	b.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d108      	bne.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002b1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b2a:	e00a      	b.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2200      	movs	r2, #0
 8002b38:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	657b      	str	r3, [r7, #84]	; 0x54
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d165      	bne.n	8002c1c <HAL_PCD_EP_DB_Transmit+0x750>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b64:	4413      	add	r3, r2
 8002b66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	011a      	lsls	r2, r3, #4
 8002b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b70:	4413      	add	r3, r2
 8002b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b76:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b8e:	d91d      	bls.n	8002bcc <HAL_PCD_EP_DB_Transmit+0x700>
 8002b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <HAL_PCD_EP_DB_Transmit+0x6de>
 8002ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	029b      	lsls	r3, r3, #10
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc8:	801a      	strh	r2, [r3, #0]
 8002bca:	e041      	b.n	8002c50 <HAL_PCD_EP_DB_Transmit+0x784>
 8002bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <HAL_PCD_EP_DB_Transmit+0x71e>
 8002bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be6:	801a      	strh	r2, [r3, #0]
 8002be8:	e032      	b.n	8002c50 <HAL_PCD_EP_DB_Transmit+0x784>
 8002bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_PCD_EP_DB_Transmit+0x738>
 8002bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c00:	3301      	adds	r3, #1
 8002c02:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	029b      	lsls	r3, r3, #10
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	4313      	orrs	r3, r2
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c18:	801a      	strh	r2, [r3, #0]
 8002c1a:	e019      	b.n	8002c50 <HAL_PCD_EP_DB_Transmit+0x784>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	785b      	ldrb	r3, [r3, #1]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d115      	bne.n	8002c50 <HAL_PCD_EP_DB_Transmit+0x784>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c32:	4413      	add	r3, r2
 8002c34:	657b      	str	r3, [r7, #84]	; 0x54
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	011a      	lsls	r2, r3, #4
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3e:	4413      	add	r3, r2
 8002c40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c44:	653b      	str	r3, [r7, #80]	; 0x50
 8002c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c4e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6959      	ldr	r1, [r3, #20]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	895a      	ldrh	r2, [r3, #10]
 8002c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	f003 feea 	bl	8006a3a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c80:	82bb      	strh	r3, [r7, #20]
 8002c82:	8abb      	ldrh	r3, [r7, #20]
 8002c84:	f083 0310 	eor.w	r3, r3, #16
 8002c88:	82bb      	strh	r3, [r7, #20]
 8002c8a:	8abb      	ldrh	r3, [r7, #20]
 8002c8c:	f083 0320 	eor.w	r3, r3, #32
 8002c90:	82bb      	strh	r3, [r7, #20]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	441a      	add	r2, r3
 8002ca0:	8abb      	ldrh	r3, [r7, #20]
 8002ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3790      	adds	r7, #144	; 0x90
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	817b      	strh	r3, [r7, #10]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002cd2:	897b      	ldrh	r3, [r7, #10]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cde:	897b      	ldrh	r3, [r7, #10]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e009      	b.n	8002d0a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cf6:	897a      	ldrh	r2, [r7, #10]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4413      	add	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d0a:	893b      	ldrh	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	80da      	strh	r2, [r3, #6]
 8002d1e:	e00b      	b.n	8002d38 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2201      	movs	r2, #1
 8002d24:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e272      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8087 	beq.w	8002e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d64:	4b92      	ldr	r3, [pc, #584]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d00c      	beq.n	8002d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d70:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d112      	bne.n	8002da2 <HAL_RCC_OscConfig+0x5e>
 8002d7c:	4b8c      	ldr	r3, [pc, #560]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d10b      	bne.n	8002da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8a:	4b89      	ldr	r3, [pc, #548]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d06c      	beq.n	8002e70 <HAL_RCC_OscConfig+0x12c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d168      	bne.n	8002e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e24c      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x76>
 8002dac:	4b80      	ldr	r3, [pc, #512]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a7f      	ldr	r2, [pc, #508]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e02e      	b.n	8002e18 <HAL_RCC_OscConfig+0xd4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x98>
 8002dc2:	4b7b      	ldr	r3, [pc, #492]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a7a      	ldr	r2, [pc, #488]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b78      	ldr	r3, [pc, #480]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a77      	ldr	r2, [pc, #476]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e01d      	b.n	8002e18 <HAL_RCC_OscConfig+0xd4>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0xbc>
 8002de6:	4b72      	ldr	r3, [pc, #456]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a71      	ldr	r2, [pc, #452]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b6f      	ldr	r3, [pc, #444]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6e      	ldr	r2, [pc, #440]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xd4>
 8002e00:	4b6b      	ldr	r3, [pc, #428]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a6a      	ldr	r2, [pc, #424]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a67      	ldr	r2, [pc, #412]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fd fe98 	bl	8000b54 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fd fe94 	bl	8000b54 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e200      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b5d      	ldr	r3, [pc, #372]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xe4>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fd fe84 	bl	8000b54 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fd fe80 	bl	8000b54 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e1ec      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x10c>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d063      	beq.n	8002f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e7e:	4b4c      	ldr	r3, [pc, #304]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e8a:	4b49      	ldr	r3, [pc, #292]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d11c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x18c>
 8002e96:	4b46      	ldr	r3, [pc, #280]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d116      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x176>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e1c0      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4939      	ldr	r1, [pc, #228]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	e03a      	b.n	8002f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed8:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fd fe39 	bl	8000b54 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fd fe35 	bl	8000b54 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1a1      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4927      	ldr	r1, [pc, #156]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
 8002f18:	e015      	b.n	8002f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fd fe18 	bl	8000b54 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fd fe14 	bl	8000b54 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e180      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d03a      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d019      	beq.n	8002f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f60:	f7fd fdf8 	bl	8000b54 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f68:	f7fd fdf4 	bl	8000b54 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e160      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f000 face 	bl	8003528 <RCC_Delay>
 8002f8c:	e01c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f94:	f7fd fdde 	bl	8000b54 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9a:	e00f      	b.n	8002fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9c:	f7fd fdda 	bl	8000b54 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d908      	bls.n	8002fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e146      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	42420000 	.word	0x42420000
 8002fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	4b92      	ldr	r3, [pc, #584]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e9      	bne.n	8002f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a6 	beq.w	8003122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b8b      	ldr	r3, [pc, #556]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4b88      	ldr	r3, [pc, #544]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	4a87      	ldr	r2, [pc, #540]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	61d3      	str	r3, [r2, #28]
 8002ff2:	4b85      	ldr	r3, [pc, #532]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b82      	ldr	r3, [pc, #520]	; (800320c <HAL_RCC_OscConfig+0x4c8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b7f      	ldr	r3, [pc, #508]	; (800320c <HAL_RCC_OscConfig+0x4c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7e      	ldr	r2, [pc, #504]	; (800320c <HAL_RCC_OscConfig+0x4c8>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fd fd9b 	bl	8000b54 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fd fd97 	bl	8000b54 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e103      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b75      	ldr	r3, [pc, #468]	; (800320c <HAL_RCC_OscConfig+0x4c8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x312>
 8003048:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4a6e      	ldr	r2, [pc, #440]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6213      	str	r3, [r2, #32]
 8003054:	e02d      	b.n	80030b2 <HAL_RCC_OscConfig+0x36e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x334>
 800305e:	4b6a      	ldr	r3, [pc, #424]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4a69      	ldr	r2, [pc, #420]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	6213      	str	r3, [r2, #32]
 800306a:	4b67      	ldr	r3, [pc, #412]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4a66      	ldr	r2, [pc, #408]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	6213      	str	r3, [r2, #32]
 8003076:	e01c      	b.n	80030b2 <HAL_RCC_OscConfig+0x36e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b05      	cmp	r3, #5
 800307e:	d10c      	bne.n	800309a <HAL_RCC_OscConfig+0x356>
 8003080:	4b61      	ldr	r3, [pc, #388]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4a60      	ldr	r2, [pc, #384]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6213      	str	r3, [r2, #32]
 800308c:	4b5e      	ldr	r3, [pc, #376]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a5d      	ldr	r2, [pc, #372]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6213      	str	r3, [r2, #32]
 8003098:	e00b      	b.n	80030b2 <HAL_RCC_OscConfig+0x36e>
 800309a:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4a5a      	ldr	r2, [pc, #360]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	6213      	str	r3, [r2, #32]
 80030a6:	4b58      	ldr	r3, [pc, #352]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4a57      	ldr	r2, [pc, #348]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d015      	beq.n	80030e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ba:	f7fd fd4b 	bl	8000b54 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fd fd47 	bl	8000b54 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0b1      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d8:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ee      	beq.n	80030c2 <HAL_RCC_OscConfig+0x37e>
 80030e4:	e014      	b.n	8003110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7fd fd35 	bl	8000b54 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fd fd31 	bl	8000b54 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e09b      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	4b40      	ldr	r3, [pc, #256]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ee      	bne.n	80030ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003116:	4b3c      	ldr	r3, [pc, #240]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4a3b      	ldr	r2, [pc, #236]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8087 	beq.w	800323a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d061      	beq.n	80031fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d146      	bne.n	80031ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003140:	4b33      	ldr	r3, [pc, #204]	; (8003210 <HAL_RCC_OscConfig+0x4cc>)
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fd fd05 	bl	8000b54 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314e:	f7fd fd01 	bl	8000b54 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e06d      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003160:	4b29      	ldr	r3, [pc, #164]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f0      	bne.n	800314e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003174:	d108      	bne.n	8003188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003176:	4b24      	ldr	r3, [pc, #144]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4921      	ldr	r1, [pc, #132]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003188:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a19      	ldr	r1, [r3, #32]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	430b      	orrs	r3, r1
 800319a:	491b      	ldr	r1, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_RCC_OscConfig+0x4cc>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fd fcd5 	bl	8000b54 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fd fcd1 	bl	8000b54 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e03d      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c0:	4b11      	ldr	r3, [pc, #68]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x46a>
 80031cc:	e035      	b.n	800323a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_RCC_OscConfig+0x4cc>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fd fcbe 	bl	8000b54 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fd fcba 	bl	8000b54 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e026      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x498>
 80031fa:	e01e      	b.n	800323a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d107      	bne.n	8003214 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e019      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
 8003208:	40021000 	.word	0x40021000
 800320c:	40007000 	.word	0x40007000
 8003210:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_OscConfig+0x500>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	429a      	cmp	r2, r3
 8003226:	d106      	bne.n	8003236 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d001      	beq.n	800323a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40021000 	.word	0x40021000

08003248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0d0      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b6a      	ldr	r3, [pc, #424]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d910      	bls.n	800328c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b67      	ldr	r3, [pc, #412]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 0207 	bic.w	r2, r3, #7
 8003272:	4965      	ldr	r1, [pc, #404]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b63      	ldr	r3, [pc, #396]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b8      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b59      	ldr	r3, [pc, #356]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4a58      	ldr	r2, [pc, #352]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4b53      	ldr	r3, [pc, #332]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a52      	ldr	r2, [pc, #328]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b50      	ldr	r3, [pc, #320]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	494d      	ldr	r1, [pc, #308]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d040      	beq.n	8003368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d115      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e073      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003316:	4b3d      	ldr	r3, [pc, #244]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06b      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003326:	4b39      	ldr	r3, [pc, #228]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4936      	ldr	r1, [pc, #216]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003338:	f7fd fc0c 	bl	8000b54 <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7fd fc08 	bl	8000b54 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e053      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	4b2d      	ldr	r3, [pc, #180]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 020c 	and.w	r2, r3, #12
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	429a      	cmp	r2, r3
 8003366:	d1eb      	bne.n	8003340 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d210      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 0207 	bic.w	r2, r3, #7
 800337e:	4922      	ldr	r1, [pc, #136]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e032      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4916      	ldr	r1, [pc, #88]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	490e      	ldr	r1, [pc, #56]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f821 	bl	800341c <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490a      	ldr	r1, [pc, #40]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	4a09      	ldr	r2, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1cc>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1d0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fb6a 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40022000 	.word	0x40022000
 800340c:	40021000 	.word	0x40021000
 8003410:	0800a1c4 	.word	0x0800a1c4
 8003414:	20000000 	.word	0x20000000
 8003418:	20000004 	.word	0x20000004

0800341c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003436:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b04      	cmp	r3, #4
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x30>
 8003446:	2b08      	cmp	r3, #8
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x36>
 800344a:	e027      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800344e:	613b      	str	r3, [r7, #16]
      break;
 8003450:	e027      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	0c9b      	lsrs	r3, r3, #18
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	4a17      	ldr	r2, [pc, #92]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800345c:	5cd3      	ldrb	r3, [r2, r3]
 800345e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d010      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	0c5b      	lsrs	r3, r3, #17
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	4a11      	ldr	r2, [pc, #68]	; (80034bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003476:	5cd3      	ldrb	r3, [r2, r3]
 8003478:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800347e:	fb03 f202 	mul.w	r2, r3, r2
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e004      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	613b      	str	r3, [r7, #16]
      break;
 800349a:	e002      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800349e:	613b      	str	r3, [r7, #16]
      break;
 80034a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a2:	693b      	ldr	r3, [r7, #16]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
 80034b4:	007a1200 	.word	0x007a1200
 80034b8:	0800a1dc 	.word	0x0800a1dc
 80034bc:	0800a1ec 	.word	0x0800a1ec
 80034c0:	003d0900 	.word	0x003d0900

080034c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c8:	4b02      	ldr	r3, [pc, #8]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	20000000 	.word	0x20000000

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034dc:	f7ff fff2 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4903      	ldr	r1, [pc, #12]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	0800a1d4 	.word	0x0800a1d4

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003504:	f7ff ffde 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	0adb      	lsrs	r3, r3, #11
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4903      	ldr	r1, [pc, #12]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	0800a1d4 	.word	0x0800a1d4

08003528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <RCC_Delay+0x34>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <RCC_Delay+0x38>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0a5b      	lsrs	r3, r3, #9
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003544:	bf00      	nop
  }
  while (Delay --);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1e5a      	subs	r2, r3, #1
 800354a:	60fa      	str	r2, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f9      	bne.n	8003544 <RCC_Delay+0x1c>
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	20000000 	.word	0x20000000
 8003560:	10624dd3 	.word	0x10624dd3

08003564 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d07d      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003580:	2300      	movs	r3, #0
 8003582:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003584:	4b4f      	ldr	r3, [pc, #316]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10d      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003590:	4b4c      	ldr	r3, [pc, #304]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4a4b      	ldr	r2, [pc, #300]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359a:	61d3      	str	r3, [r2, #28]
 800359c:	4b49      	ldr	r3, [pc, #292]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a8:	2301      	movs	r3, #1
 80035aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	4b46      	ldr	r3, [pc, #280]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d118      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b8:	4b43      	ldr	r3, [pc, #268]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a42      	ldr	r2, [pc, #264]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c4:	f7fd fac6 	bl	8000b54 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ca:	e008      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035cc:	f7fd fac2 	bl	8000b54 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e06d      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02e      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	429a      	cmp	r2, r3
 8003606:	d027      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003608:	4b2e      	ldr	r3, [pc, #184]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003610:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003612:	4b2e      	ldr	r3, [pc, #184]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003614:	2201      	movs	r2, #1
 8003616:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003618:	4b2c      	ldr	r3, [pc, #176]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800361e:	4a29      	ldr	r2, [pc, #164]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d014      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fd fa91 	bl	8000b54 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003634:	e00a      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fd fa8d 	bl	8000b54 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e036      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0ee      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4917      	ldr	r1, [pc, #92]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	4313      	orrs	r3, r2
 8003668:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d105      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	4a13      	ldr	r2, [pc, #76]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	490b      	ldr	r1, [pc, #44]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a6:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	4904      	ldr	r1, [pc, #16]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40007000 	.word	0x40007000
 80036cc:	42420440 	.word	0x42420440

080036d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e042      	b.n	8003768 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fd f894 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2224      	movs	r2, #36	; 0x24
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fdfb 	bl	8004310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	; 0x28
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b20      	cmp	r3, #32
 800378e:	d16d      	bne.n	800386c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_UART_Transmit+0x2c>
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e066      	b.n	800386e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2221      	movs	r2, #33	; 0x21
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ae:	f7fd f9d1 	bl	8000b54 <HAL_GetTick>
 80037b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	88fa      	ldrh	r2, [r7, #6]
 80037b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	88fa      	ldrh	r2, [r7, #6]
 80037be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c8:	d108      	bne.n	80037dc <HAL_UART_Transmit+0x6c>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d104      	bne.n	80037dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	e003      	b.n	80037e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037e4:	e02a      	b.n	800383c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2200      	movs	r2, #0
 80037ee:	2180      	movs	r1, #128	; 0x80
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fb4a 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e036      	b.n	800386e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003814:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	3302      	adds	r3, #2
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	e007      	b.n	800382e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	3301      	adds	r3, #1
 800382c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1cf      	bne.n	80037e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	2140      	movs	r1, #64	; 0x40
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fb1a 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e006      	b.n	800386e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e000      	b.n	800386e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b08c      	sub	sp, #48	; 0x30
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	4613      	mov	r3, r2
 8003882:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b20      	cmp	r3, #32
 800388e:	d14a      	bne.n	8003926 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e043      	b.n	8003928 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2201      	movs	r2, #1
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	461a      	mov	r2, r3
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fb57 	bl	8003f66 <UART_Start_Receive_IT>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80038be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d12c      	bne.n	8003920 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d125      	bne.n	800391a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	617b      	str	r3, [r7, #20]
   return(result);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f043 0310 	orr.w	r3, r3, #16
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003904:	627a      	str	r2, [r7, #36]	; 0x24
 8003906:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6a39      	ldr	r1, [r7, #32]
 800390a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	61fb      	str	r3, [r7, #28]
   return(result);
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e5      	bne.n	80038e4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8003918:	e002      	b.n	8003920 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003924:	e000      	b.n	8003928 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003926:	2302      	movs	r3, #2
  }
}
 8003928:	4618      	mov	r0, r3
 800392a:	3730      	adds	r7, #48	; 0x30
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b0ba      	sub	sp, #232	; 0xe8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800396e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10f      	bne.n	8003996 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_UART_IRQHandler+0x66>
 8003982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fbff 	bl	8004192 <UART_Receive_IT>
      return;
 8003994:	e25b      	b.n	8003e4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80de 	beq.w	8003b5c <HAL_UART_IRQHandler+0x22c>
 80039a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80d1 	beq.w	8003b5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_UART_IRQHandler+0xae>
 80039c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f043 0201 	orr.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_UART_IRQHandler+0xd2>
 80039ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f043 0202 	orr.w	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_UART_IRQHandler+0xf6>
 8003a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f043 0204 	orr.w	r2, r3, #4
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d011      	beq.n	8003a56 <HAL_UART_IRQHandler+0x126>
 8003a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f043 0208 	orr.w	r2, r3, #8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 81f2 	beq.w	8003e44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_UART_IRQHandler+0x14e>
 8003a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fb8a 	bl	8004192 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <HAL_UART_IRQHandler+0x17a>
 8003aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d04f      	beq.n	8003b4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fa94 	bl	8003fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d041      	beq.n	8003b42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3314      	adds	r3, #20
 8003ae6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003aea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003af6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1d9      	bne.n	8003abe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d013      	beq.n	8003b3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	4a7e      	ldr	r2, [pc, #504]	; (8003d10 <HAL_UART_IRQHandler+0x3e0>)
 8003b18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fd f98e 	bl	8000e40 <HAL_DMA_Abort_IT>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d016      	beq.n	8003b58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b34:	4610      	mov	r0, r2
 8003b36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	e00e      	b.n	8003b58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f99c 	bl	8003e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b40:	e00a      	b.n	8003b58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f998 	bl	8003e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	e006      	b.n	8003b58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f994 	bl	8003e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b56:	e175      	b.n	8003e44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b58:	bf00      	nop
    return;
 8003b5a:	e173      	b.n	8003e44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	f040 814f 	bne.w	8003e04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8148 	beq.w	8003e04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8141 	beq.w	8003e04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80b6 	beq.w	8003d14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8145 	beq.w	8003e48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	f080 813e 	bcs.w	8003e48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	f000 8088 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	330c      	adds	r3, #12
 8003c08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c0c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c1c:	e841 2300 	strex	r3, r2, [r1]
 8003c20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1d9      	bne.n	8003be0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3314      	adds	r3, #20
 8003c32:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e1      	bne.n	8003c2c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3314      	adds	r3, #20
 8003c6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3314      	adds	r3, #20
 8003c88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e3      	bne.n	8003c68 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	330c      	adds	r3, #12
 8003cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc0:	f023 0310 	bic.w	r3, r3, #16
 8003cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cd4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e3      	bne.n	8003cae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd f86d 	bl	8000dca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	4619      	mov	r1, r3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fc fbf0 	bl	80004ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d0c:	e09c      	b.n	8003e48 <HAL_UART_IRQHandler+0x518>
 8003d0e:	bf00      	nop
 8003d10:	0800409d 	.word	0x0800409d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 808e 	beq.w	8003e4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8089 	beq.w	8003e4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d5e:	647a      	str	r2, [r7, #68]	; 0x44
 8003d60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e3      	bne.n	8003d3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	623b      	str	r3, [r7, #32]
   return(result);
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3314      	adds	r3, #20
 8003d92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d96:	633a      	str	r2, [r7, #48]	; 0x30
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e3      	bne.n	8003d72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0310 	bic.w	r3, r3, #16
 8003dce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ddc:	61fa      	str	r2, [r7, #28]
 8003dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	69b9      	ldr	r1, [r7, #24]
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e3      	bne.n	8003db8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003df6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fc fb75 	bl	80004ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e02:	e023      	b.n	8003e4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <HAL_UART_IRQHandler+0x4f4>
 8003e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f951 	bl	80040c4 <UART_Transmit_IT>
    return;
 8003e22:	e014      	b.n	8003e4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00e      	beq.n	8003e4e <HAL_UART_IRQHandler+0x51e>
 8003e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f990 	bl	8004162 <UART_EndTransmit_IT>
    return;
 8003e42:	e004      	b.n	8003e4e <HAL_UART_IRQHandler+0x51e>
    return;
 8003e44:	bf00      	nop
 8003e46:	e002      	b.n	8003e4e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e48:	bf00      	nop
 8003e4a:	e000      	b.n	8003e4e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e4c:	bf00      	nop
  }
}
 8003e4e:	37e8      	adds	r7, #232	; 0xe8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr

08003e8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b090      	sub	sp, #64	; 0x40
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9a:	e050      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	d04c      	beq.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <UART_WaitOnFlagUntilTimeout+0x30>
 8003eaa:	f7fc fe53 	bl	8000b54 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d241      	bcs.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eda:	637a      	str	r2, [r7, #52]	; 0x34
 8003edc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e5      	bne.n	8003eba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3314      	adds	r3, #20
 8003ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	613b      	str	r3, [r7, #16]
   return(result);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3314      	adds	r3, #20
 8003f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f0e:	623a      	str	r2, [r7, #32]
 8003f10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	69f9      	ldr	r1, [r7, #28]
 8003f14:	6a3a      	ldr	r2, [r7, #32]
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e5      	bne.n	8003eee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e00f      	b.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4013      	ands	r3, r2
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	bf0c      	ite	eq
 8003f4e:	2301      	moveq	r3, #1
 8003f50:	2300      	movne	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d09f      	beq.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3740      	adds	r7, #64	; 0x40
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	4613      	mov	r3, r2
 8003f72:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	88fa      	ldrh	r2, [r7, #6]
 8003f7e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	88fa      	ldrh	r2, [r7, #6]
 8003f84:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2222      	movs	r2, #34	; 0x22
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003faa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0220 	orr.w	r2, r2, #32
 8003fca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b095      	sub	sp, #84	; 0x54
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004000:	643a      	str	r2, [r7, #64]	; 0x40
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e5      	bne.n	8003fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3314      	adds	r3, #20
 800401a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	61fb      	str	r3, [r7, #28]
   return(result);
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	64bb      	str	r3, [r7, #72]	; 0x48
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3314      	adds	r3, #20
 8004032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004034:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800403a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	2b01      	cmp	r3, #1
 800404e:	d119      	bne.n	8004084 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f023 0310 	bic.w	r3, r3, #16
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004070:	61ba      	str	r2, [r7, #24]
 8004072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6979      	ldr	r1, [r7, #20]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	613b      	str	r3, [r7, #16]
   return(result);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004092:	bf00      	nop
 8004094:	3754      	adds	r7, #84	; 0x54
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff fede 	bl	8003e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b21      	cmp	r3, #33	; 0x21
 80040d6:	d13e      	bne.n	8004156 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e0:	d114      	bne.n	800410c <UART_Transmit_IT+0x48>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d110      	bne.n	800410c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	1c9a      	adds	r2, r3, #2
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]
 800410a:	e008      	b.n	800411e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	1c59      	adds	r1, r3, #1
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6211      	str	r1, [r2, #32]
 8004116:	781a      	ldrb	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29b      	uxth	r3, r3
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	4619      	mov	r1, r3
 800412c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004140:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004150:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e000      	b.n	8004158 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004156:	2302      	movs	r3, #2
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004178:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff fe66 	bl	8003e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b08c      	sub	sp, #48	; 0x30
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b22      	cmp	r3, #34	; 0x22
 80041a4:	f040 80ae 	bne.w	8004304 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	d117      	bne.n	80041e2 <UART_Receive_IT+0x50>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d113      	bne.n	80041e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	1c9a      	adds	r2, r3, #2
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	629a      	str	r2, [r3, #40]	; 0x28
 80041e0:	e026      	b.n	8004230 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f4:	d007      	beq.n	8004206 <UART_Receive_IT+0x74>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <UART_Receive_IT+0x82>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	701a      	strb	r2, [r3, #0]
 8004212:	e008      	b.n	8004226 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004220:	b2da      	uxtb	r2, r3
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004224:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29b      	uxth	r3, r3
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4619      	mov	r1, r3
 800423e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004240:	2b00      	cmp	r3, #0
 8004242:	d15d      	bne.n	8004300 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0220 	bic.w	r2, r2, #32
 8004252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004262:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	2b01      	cmp	r3, #1
 8004288:	d135      	bne.n	80042f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	613b      	str	r3, [r7, #16]
   return(result);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f023 0310 	bic.w	r3, r3, #16
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b0:	623a      	str	r2, [r7, #32]
 80042b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	69f9      	ldr	r1, [r7, #28]
 80042b6:	6a3a      	ldr	r2, [r7, #32]
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d10a      	bne.n	80042e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ec:	4619      	mov	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fc f8fc 	bl	80004ec <HAL_UARTEx_RxEventCallback>
 80042f4:	e002      	b.n	80042fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fdb5 	bl	8003e66 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e002      	b.n	8004306 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	e000      	b.n	8004306 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3730      	adds	r7, #48	; 0x30
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800434a:	f023 030c 	bic.w	r3, r3, #12
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	430b      	orrs	r3, r1
 8004356:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2c      	ldr	r2, [pc, #176]	; (8004424 <UART_SetConfig+0x114>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d103      	bne.n	8004380 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004378:	f7ff f8c2 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	e002      	b.n	8004386 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004380:	f7ff f8aa 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8004384:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009a      	lsls	r2, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	4a22      	ldr	r2, [pc, #136]	; (8004428 <UART_SetConfig+0x118>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	0119      	lsls	r1, r3, #4
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009a      	lsls	r2, r3, #2
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043bc:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <UART_SetConfig+0x118>)
 80043be:	fba3 0302 	umull	r0, r3, r3, r2
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2064      	movs	r0, #100	; 0x64
 80043c6:	fb00 f303 	mul.w	r3, r0, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	3332      	adds	r3, #50	; 0x32
 80043d0:	4a15      	ldr	r2, [pc, #84]	; (8004428 <UART_SetConfig+0x118>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043dc:	4419      	add	r1, r3
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009a      	lsls	r2, r3, #2
 80043e8:	441a      	add	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <UART_SetConfig+0x118>)
 80043f6:	fba3 0302 	umull	r0, r3, r3, r2
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2064      	movs	r0, #100	; 0x64
 80043fe:	fb00 f303 	mul.w	r3, r0, r3
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	3332      	adds	r3, #50	; 0x32
 8004408:	4a07      	ldr	r2, [pc, #28]	; (8004428 <UART_SetConfig+0x118>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	440a      	add	r2, r1
 800441a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40013800 	.word	0x40013800
 8004428:	51eb851f 	.word	0x51eb851f

0800442c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800442c:	b084      	sub	sp, #16
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	f107 0014 	add.w	r0, r7, #20
 800443a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	b004      	add	sp, #16
 800444a:	4770      	bx	lr

0800444c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800445c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004460:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004480:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004484:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	b29b      	uxth	r3, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	b29b      	uxth	r3, r3
 8004496:	4013      	ands	r3, r2
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr

080044c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044c4:	b084      	sub	sp, #16
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	f107 0014 	add.w	r0, r7, #20
 80044d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	b004      	add	sp, #16
 8004502:	4770      	bx	lr

08004504 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004504:	b480      	push	{r7}
 8004506:	b09d      	sub	sp, #116	; 0x74
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	b29b      	uxth	r3, r3
 8004522:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	78db      	ldrb	r3, [r3, #3]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d81f      	bhi.n	8004576 <USB_ActivateEndpoint+0x72>
 8004536:	a201      	add	r2, pc, #4	; (adr r2, 800453c <USB_ActivateEndpoint+0x38>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	0800454d 	.word	0x0800454d
 8004540:	08004569 	.word	0x08004569
 8004544:	0800457f 	.word	0x0800457f
 8004548:	0800455b 	.word	0x0800455b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800454c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004554:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004558:	e012      	b.n	8004580 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800455a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800455e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004562:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004566:	e00b      	b.n	8004580 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004568:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800456c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004570:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004574:	e004      	b.n	8004580 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800457c:	e000      	b.n	8004580 <USB_ActivateEndpoint+0x7c>
      break;
 800457e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	441a      	add	r2, r3
 800458a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800458e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459e:	b29b      	uxth	r3, r3
 80045a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	441a      	add	r2, r3
 80045d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80045d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	7b1b      	ldrb	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f040 8178 	bne.w	80048e2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	785b      	ldrb	r3, [r3, #1]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8084 	beq.w	8004704 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	61bb      	str	r3, [r7, #24]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004606:	b29b      	uxth	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4413      	add	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	011a      	lsls	r2, r3, #4
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	88db      	ldrh	r3, [r3, #6]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	b29b      	uxth	r3, r3
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	827b      	strh	r3, [r7, #18]
 800463e:	8a7b      	ldrh	r3, [r7, #18]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01b      	beq.n	8004680 <USB_ActivateEndpoint+0x17c>
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465e:	823b      	strh	r3, [r7, #16]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	441a      	add	r2, r3
 800466a:	8a3b      	ldrh	r3, [r7, #16]
 800466c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004678:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800467c:	b29b      	uxth	r3, r3
 800467e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	78db      	ldrb	r3, [r3, #3]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d020      	beq.n	80046ca <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469e:	81bb      	strh	r3, [r7, #12]
 80046a0:	89bb      	ldrh	r3, [r7, #12]
 80046a2:	f083 0320 	eor.w	r3, r3, #32
 80046a6:	81bb      	strh	r3, [r7, #12]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	89bb      	ldrh	r3, [r7, #12]
 80046b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	8013      	strh	r3, [r2, #0]
 80046c8:	e2d5      	b.n	8004c76 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e0:	81fb      	strh	r3, [r7, #14]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	441a      	add	r2, r3
 80046ec:	89fb      	ldrh	r3, [r7, #14]
 80046ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fe:	b29b      	uxth	r3, r3
 8004700:	8013      	strh	r3, [r2, #0]
 8004702:	e2b8      	b.n	8004c76 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	633b      	str	r3, [r7, #48]	; 0x30
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470e:	b29b      	uxth	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	4413      	add	r3, r2
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	011a      	lsls	r2, r3, #4
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	4413      	add	r3, r2
 8004722:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	88db      	ldrh	r3, [r3, #6]
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	b29b      	uxth	r3, r3
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004742:	b29b      	uxth	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	4413      	add	r3, r2
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	011a      	lsls	r2, r3, #4
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	4413      	add	r3, r2
 8004756:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004766:	b29a      	uxth	r2, r3
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b3e      	cmp	r3, #62	; 0x3e
 8004772:	d91d      	bls.n	80047b0 <USB_ActivateEndpoint+0x2ac>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	66bb      	str	r3, [r7, #104]	; 0x68
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <USB_ActivateEndpoint+0x28a>
 8004788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800478a:	3b01      	subs	r3, #1
 800478c:	66bb      	str	r3, [r7, #104]	; 0x68
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29a      	uxth	r2, r3
 8004794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004796:	b29b      	uxth	r3, r3
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	b29b      	uxth	r3, r3
 800479c:	4313      	orrs	r3, r2
 800479e:	b29b      	uxth	r3, r3
 80047a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	801a      	strh	r2, [r3, #0]
 80047ae:	e026      	b.n	80047fe <USB_ActivateEndpoint+0x2fa>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <USB_ActivateEndpoint+0x2ca>
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	e017      	b.n	80047fe <USB_ActivateEndpoint+0x2fa>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <USB_ActivateEndpoint+0x2e4>
 80047e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047e4:	3301      	adds	r3, #1
 80047e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	029b      	lsls	r3, r3, #10
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	4313      	orrs	r3, r2
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	847b      	strh	r3, [r7, #34]	; 0x22
 800480c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800480e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01b      	beq.n	800484e <USB_ActivateEndpoint+0x34a>
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	b29b      	uxth	r3, r3
 8004824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482c:	843b      	strh	r3, [r7, #32]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	441a      	add	r2, r3
 8004838:	8c3b      	ldrh	r3, [r7, #32]
 800483a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800483e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484a:	b29b      	uxth	r3, r3
 800484c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d124      	bne.n	80048a0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486c:	83bb      	strh	r3, [r7, #28]
 800486e:	8bbb      	ldrh	r3, [r7, #28]
 8004870:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004874:	83bb      	strh	r3, [r7, #28]
 8004876:	8bbb      	ldrh	r3, [r7, #28]
 8004878:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800487c:	83bb      	strh	r3, [r7, #28]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	8bbb      	ldrh	r3, [r7, #28]
 800488a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800488e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489a:	b29b      	uxth	r3, r3
 800489c:	8013      	strh	r3, [r2, #0]
 800489e:	e1ea      	b.n	8004c76 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	83fb      	strh	r3, [r7, #30]
 80048b8:	8bfb      	ldrh	r3, [r7, #30]
 80048ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048be:	83fb      	strh	r3, [r7, #30]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	8bfb      	ldrh	r3, [r7, #30]
 80048cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048dc:	b29b      	uxth	r3, r3
 80048de:	8013      	strh	r3, [r2, #0]
 80048e0:	e1c9      	b.n	8004c76 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	78db      	ldrb	r3, [r3, #3]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d11e      	bne.n	8004928 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004900:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800491a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800491e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004922:	b29b      	uxth	r3, r3
 8004924:	8013      	strh	r3, [r2, #0]
 8004926:	e01d      	b.n	8004964 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004960:	b29b      	uxth	r3, r3
 8004962:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800496e:	b29b      	uxth	r3, r3
 8004970:	461a      	mov	r2, r3
 8004972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004974:	4413      	add	r3, r2
 8004976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	011a      	lsls	r2, r3, #4
 800497e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004980:	4413      	add	r3, r2
 8004982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004986:	65bb      	str	r3, [r7, #88]	; 0x58
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	891b      	ldrh	r3, [r3, #8]
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	b29b      	uxth	r3, r3
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004996:	801a      	strh	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	657b      	str	r3, [r7, #84]	; 0x54
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a8:	4413      	add	r3, r2
 80049aa:	657b      	str	r3, [r7, #84]	; 0x54
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	011a      	lsls	r2, r3, #4
 80049b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049ba:	653b      	str	r3, [r7, #80]	; 0x50
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	895b      	ldrh	r3, [r3, #10]
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f040 8093 	bne.w	8004afc <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80049e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01b      	beq.n	8004a2a <USB_ActivateEndpoint+0x526>
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a08:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	441a      	add	r2, r3
 8004a14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d01b      	beq.n	8004a7a <USB_ActivateEndpoint+0x576>
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a58:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	441a      	add	r2, r3
 8004a64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a90:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a98:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004aa0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	441a      	add	r2, r3
 8004aac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	441a      	add	r2, r3
 8004ae4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	8013      	strh	r3, [r2, #0]
 8004afa:	e0bc      	b.n	8004c76 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01d      	beq.n	8004b54 <USB_ActivateEndpoint+0x650>
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	441a      	add	r2, r3
 8004b3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01d      	beq.n	8004bac <USB_ActivateEndpoint+0x6a8>
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	441a      	add	r2, r3
 8004b94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	78db      	ldrb	r3, [r3, #3]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d024      	beq.n	8004bfe <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bd2:	f083 0320 	eor.w	r3, r3, #32
 8004bd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	441a      	add	r2, r3
 8004be4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	8013      	strh	r3, [r2, #0]
 8004bfc:	e01d      	b.n	8004c3a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	441a      	add	r2, r3
 8004c5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004c76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3774      	adds	r7, #116	; 0x74
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b08d      	sub	sp, #52	; 0x34
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	7b1b      	ldrb	r3, [r3, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f040 808e 	bne.w	8004db4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	785b      	ldrb	r3, [r3, #1]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d044      	beq.n	8004d2a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	81bb      	strh	r3, [r7, #12]
 8004cae:	89bb      	ldrh	r3, [r7, #12]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01b      	beq.n	8004cf0 <USB_DeactivateEndpoint+0x6c>
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cce:	817b      	strh	r3, [r7, #10]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	441a      	add	r2, r3
 8004cda:	897b      	ldrh	r3, [r7, #10]
 8004cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d06:	813b      	strh	r3, [r7, #8]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	893b      	ldrh	r3, [r7, #8]
 8004d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8013      	strh	r3, [r2, #0]
 8004d28:	e192      	b.n	8005050 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	827b      	strh	r3, [r7, #18]
 8004d38:	8a7b      	ldrh	r3, [r7, #18]
 8004d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01b      	beq.n	8004d7a <USB_DeactivateEndpoint+0xf6>
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d58:	823b      	strh	r3, [r7, #16]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	441a      	add	r2, r3
 8004d64:	8a3b      	ldrh	r3, [r7, #16]
 8004d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	81fb      	strh	r3, [r7, #14]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	441a      	add	r2, r3
 8004d9c:	89fb      	ldrh	r3, [r7, #14]
 8004d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	8013      	strh	r3, [r2, #0]
 8004db2:	e14d      	b.n	8005050 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	785b      	ldrb	r3, [r3, #1]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 80a5 	bne.w	8004f08 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	843b      	strh	r3, [r7, #32]
 8004dcc:	8c3b      	ldrh	r3, [r7, #32]
 8004dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01b      	beq.n	8004e0e <USB_DeactivateEndpoint+0x18a>
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dec:	83fb      	strh	r3, [r7, #30]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	8bfb      	ldrh	r3, [r7, #30]
 8004dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	83bb      	strh	r3, [r7, #28]
 8004e1c:	8bbb      	ldrh	r3, [r7, #28]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01b      	beq.n	8004e5e <USB_DeactivateEndpoint+0x1da>
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3c:	837b      	strh	r3, [r7, #26]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	8b7b      	ldrh	r3, [r7, #26]
 8004e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e74:	833b      	strh	r3, [r7, #24]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	8b3b      	ldrh	r3, [r7, #24]
 8004e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eac:	82fb      	strh	r3, [r7, #22]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	441a      	add	r2, r3
 8004eb8:	8afb      	ldrh	r3, [r7, #22]
 8004eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee4:	82bb      	strh	r3, [r7, #20]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	441a      	add	r2, r3
 8004ef0:	8abb      	ldrh	r3, [r7, #20]
 8004ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	8013      	strh	r3, [r2, #0]
 8004f06:	e0a3      	b.n	8005050 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01b      	beq.n	8004f58 <USB_DeactivateEndpoint+0x2d4>
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	441a      	add	r2, r3
 8004f42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01b      	beq.n	8004fa8 <USB_DeactivateEndpoint+0x324>
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	441a      	add	r2, r3
 8004f92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	441a      	add	r2, r3
 8004fca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	441a      	add	r2, r3
 8005002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005014:	b29b      	uxth	r3, r3
 8005016:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	441a      	add	r2, r3
 800503a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800503c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504c:	b29b      	uxth	r3, r3
 800504e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3734      	adds	r7, #52	; 0x34
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr

0800505c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b0c2      	sub	sp, #264	; 0x108
 8005060:	af00      	add	r7, sp, #0
 8005062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005066:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800506a:	6018      	str	r0, [r3, #0]
 800506c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005074:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800507a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	785b      	ldrb	r3, [r3, #1]
 8005082:	2b01      	cmp	r3, #1
 8005084:	f040 86b7 	bne.w	8005df6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800508c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d908      	bls.n	80050b6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80050a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050b4:	e007      	b.n	80050c6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80050b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80050c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	7b1b      	ldrb	r3, [r3, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d13a      	bne.n	800514c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6959      	ldr	r1, [r3, #20]
 80050e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	88da      	ldrh	r2, [r3, #6]
 80050ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80050f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80050fc:	6800      	ldr	r0, [r0, #0]
 80050fe:	f001 fc9c 	bl	8006a3a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005112:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800511c:	b29b      	uxth	r3, r3
 800511e:	461a      	mov	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	4413      	add	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800512a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	011a      	lsls	r2, r3, #4
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4413      	add	r3, r2
 8005138:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	f000 be1f 	b.w	8005d8a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800514c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	78db      	ldrb	r3, [r3, #3]
 8005158:	2b02      	cmp	r3, #2
 800515a:	f040 8462 	bne.w	8005a22 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800515e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6a1a      	ldr	r2, [r3, #32]
 800516a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	429a      	cmp	r2, r3
 8005178:	f240 83df 	bls.w	800593a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800517c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80051a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	441a      	add	r2, r3
 80051c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80051d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80051d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6a1a      	ldr	r2, [r3, #32]
 80051e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e8:	1ad2      	subs	r2, r2, r3
 80051ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 81c7 	beq.w	80055ac <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800521e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	633b      	str	r3, [r7, #48]	; 0x30
 800522a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d177      	bne.n	800532a <USB_EPStartXfer+0x2ce>
 800523a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
 8005246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005254:	b29b      	uxth	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	4413      	add	r3, r2
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
 800525e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	011a      	lsls	r2, r3, #4
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	4413      	add	r3, r2
 8005270:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005280:	b29a      	uxth	r2, r3
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	801a      	strh	r2, [r3, #0]
 8005286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800528a:	2b3e      	cmp	r3, #62	; 0x3e
 800528c:	d921      	bls.n	80052d2 <USB_EPStartXfer+0x276>
 800528e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <USB_EPStartXfer+0x252>
 80052a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052a8:	3b01      	subs	r3, #1
 80052aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	029b      	lsls	r3, r3, #10
 80052bc:	b29b      	uxth	r3, r3
 80052be:	4313      	orrs	r3, r2
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	801a      	strh	r2, [r3, #0]
 80052d0:	e050      	b.n	8005374 <USB_EPStartXfer+0x318>
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10a      	bne.n	80052f0 <USB_EPStartXfer+0x294>
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	e041      	b.n	8005374 <USB_EPStartXfer+0x318>
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <USB_EPStartXfer+0x2b4>
 8005306:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800530a:	3301      	adds	r3, #1
 800530c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29a      	uxth	r2, r3
 8005316:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800531a:	b29b      	uxth	r3, r3
 800531c:	029b      	lsls	r3, r3, #10
 800531e:	b29b      	uxth	r3, r3
 8005320:	4313      	orrs	r3, r2
 8005322:	b29a      	uxth	r2, r3
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	801a      	strh	r2, [r3, #0]
 8005328:	e024      	b.n	8005374 <USB_EPStartXfer+0x318>
 800532a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d11c      	bne.n	8005374 <USB_EPStartXfer+0x318>
 800533a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800533e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005348:	b29b      	uxth	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	4413      	add	r3, r2
 8005350:	633b      	str	r3, [r7, #48]	; 0x30
 8005352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	011a      	lsls	r2, r3, #4
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	4413      	add	r3, r2
 8005364:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536e:	b29a      	uxth	r2, r3
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	895b      	ldrh	r3, [r3, #10]
 8005380:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6959      	ldr	r1, [r3, #20]
 8005390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005394:	b29b      	uxth	r3, r3
 8005396:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800539a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800539e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80053a2:	6800      	ldr	r0, [r0, #0]
 80053a4:	f001 fb49 	bl	8006a3a <USB_WritePMA>
            ep->xfer_buff += len;
 80053a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695a      	ldr	r2, [r3, #20]
 80053b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b8:	441a      	add	r2, r3
 80053ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d90f      	bls.n	8005402 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80053e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6a1a      	ldr	r2, [r3, #32]
 80053ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	621a      	str	r2, [r3, #32]
 8005400:	e00e      	b.n	8005420 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2200      	movs	r2, #0
 800541e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d177      	bne.n	8005520 <USB_EPStartXfer+0x4c4>
 8005430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544a:	b29b      	uxth	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	4413      	add	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	011a      	lsls	r2, r3, #4
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	4413      	add	r3, r2
 8005466:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005476:	b29a      	uxth	r2, r3
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005480:	2b3e      	cmp	r3, #62	; 0x3e
 8005482:	d921      	bls.n	80054c8 <USB_EPStartXfer+0x46c>
 8005484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800548e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	2b00      	cmp	r3, #0
 8005498:	d104      	bne.n	80054a4 <USB_EPStartXfer+0x448>
 800549a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800549e:	3b01      	subs	r3, #1
 80054a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	029b      	lsls	r3, r3, #10
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	e056      	b.n	8005576 <USB_EPStartXfer+0x51a>
 80054c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <USB_EPStartXfer+0x48a>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054de:	b29a      	uxth	r2, r3
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	e047      	b.n	8005576 <USB_EPStartXfer+0x51a>
 80054e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <USB_EPStartXfer+0x4aa>
 80054fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005500:	3301      	adds	r3, #1
 8005502:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29a      	uxth	r2, r3
 800550c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005510:	b29b      	uxth	r3, r3
 8005512:	029b      	lsls	r3, r3, #10
 8005514:	b29b      	uxth	r3, r3
 8005516:	4313      	orrs	r3, r2
 8005518:	b29a      	uxth	r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	e02a      	b.n	8005576 <USB_EPStartXfer+0x51a>
 8005520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d122      	bne.n	8005576 <USB_EPStartXfer+0x51a>
 8005530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	623b      	str	r3, [r7, #32]
 800553c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	4413      	add	r3, r2
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	011a      	lsls	r2, r3, #4
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	4413      	add	r3, r2
 8005566:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005570:	b29a      	uxth	r2, r3
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	891b      	ldrh	r3, [r3, #8]
 8005582:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6959      	ldr	r1, [r3, #20]
 8005592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005596:	b29b      	uxth	r3, r3
 8005598:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800559c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055a0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055a4:	6800      	ldr	r0, [r0, #0]
 80055a6:	f001 fa48 	bl	8006a3a <USB_WritePMA>
 80055aa:	e3ee      	b.n	8005d8a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	785b      	ldrb	r3, [r3, #1]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d177      	bne.n	80056ac <USB_EPStartXfer+0x650>
 80055bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80055c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055dc:	4413      	add	r3, r2
 80055de:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	011a      	lsls	r2, r3, #4
 80055ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055f0:	4413      	add	r3, r2
 80055f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055f6:	647b      	str	r3, [r7, #68]	; 0x44
 80055f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005602:	b29a      	uxth	r2, r3
 8005604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005606:	801a      	strh	r2, [r3, #0]
 8005608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560c:	2b3e      	cmp	r3, #62	; 0x3e
 800560e:	d921      	bls.n	8005654 <USB_EPStartXfer+0x5f8>
 8005610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800561a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <USB_EPStartXfer+0x5d4>
 8005626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800562a:	3b01      	subs	r3, #1
 800562c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29a      	uxth	r2, r3
 8005636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800563a:	b29b      	uxth	r3, r3
 800563c:	029b      	lsls	r3, r3, #10
 800563e:	b29b      	uxth	r3, r3
 8005640:	4313      	orrs	r3, r2
 8005642:	b29b      	uxth	r3, r3
 8005644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800564c:	b29a      	uxth	r2, r3
 800564e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005650:	801a      	strh	r2, [r3, #0]
 8005652:	e056      	b.n	8005702 <USB_EPStartXfer+0x6a6>
 8005654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <USB_EPStartXfer+0x616>
 800565c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800566a:	b29a      	uxth	r2, r3
 800566c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	e047      	b.n	8005702 <USB_EPStartXfer+0x6a6>
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005676:	085b      	lsrs	r3, r3, #1
 8005678:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800567c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <USB_EPStartXfer+0x636>
 8005688:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800568c:	3301      	adds	r3, #1
 800568e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29a      	uxth	r2, r3
 8005698:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800569c:	b29b      	uxth	r3, r3
 800569e:	029b      	lsls	r3, r3, #10
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	4313      	orrs	r3, r2
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a8:	801a      	strh	r2, [r3, #0]
 80056aa:	e02a      	b.n	8005702 <USB_EPStartXfer+0x6a6>
 80056ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	785b      	ldrb	r3, [r3, #1]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d122      	bne.n	8005702 <USB_EPStartXfer+0x6a6>
 80056bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	653b      	str	r3, [r7, #80]	; 0x50
 80056c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056dc:	4413      	add	r3, r2
 80056de:	653b      	str	r3, [r7, #80]	; 0x50
 80056e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	011a      	lsls	r2, r3, #4
 80056ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f0:	4413      	add	r3, r2
 80056f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005700:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	891b      	ldrh	r3, [r3, #8]
 800570e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6959      	ldr	r1, [r3, #20]
 800571e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005722:	b29b      	uxth	r3, r3
 8005724:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005728:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800572c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005730:	6800      	ldr	r0, [r0, #0]
 8005732:	f001 f982 	bl	8006a3a <USB_WritePMA>
            ep->xfer_buff += len;
 8005736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005746:	441a      	add	r2, r3
 8005748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6a1a      	ldr	r2, [r3, #32]
 8005760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	429a      	cmp	r2, r3
 800576e:	d90f      	bls.n	8005790 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a1a      	ldr	r2, [r3, #32]
 800577c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005780:	1ad2      	subs	r2, r2, r3
 8005782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	621a      	str	r2, [r3, #32]
 800578e:	e00e      	b.n	80057ae <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80057a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2200      	movs	r2, #0
 80057ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	643b      	str	r3, [r7, #64]	; 0x40
 80057ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d177      	bne.n	80058ba <USB_EPStartXfer+0x85e>
 80057ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	4413      	add	r3, r2
 80057ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	011a      	lsls	r2, r3, #4
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	4413      	add	r3, r2
 8005800:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005804:	637b      	str	r3, [r7, #52]	; 0x34
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005810:	b29a      	uxth	r2, r3
 8005812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005814:	801a      	strh	r2, [r3, #0]
 8005816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581a:	2b3e      	cmp	r3, #62	; 0x3e
 800581c:	d921      	bls.n	8005862 <USB_EPStartXfer+0x806>
 800581e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <USB_EPStartXfer+0x7e2>
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	3b01      	subs	r3, #1
 800583a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29a      	uxth	r2, r3
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005848:	b29b      	uxth	r3, r3
 800584a:	029b      	lsls	r3, r3, #10
 800584c:	b29b      	uxth	r3, r3
 800584e:	4313      	orrs	r3, r2
 8005850:	b29b      	uxth	r3, r3
 8005852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585a:	b29a      	uxth	r2, r3
 800585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	e050      	b.n	8005904 <USB_EPStartXfer+0x8a8>
 8005862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <USB_EPStartXfer+0x824>
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005878:	b29a      	uxth	r2, r3
 800587a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587c:	801a      	strh	r2, [r3, #0]
 800587e:	e041      	b.n	8005904 <USB_EPStartXfer+0x8a8>
 8005880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800588a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d004      	beq.n	80058a0 <USB_EPStartXfer+0x844>
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589a:	3301      	adds	r3, #1
 800589c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	029b      	lsls	r3, r3, #10
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	4313      	orrs	r3, r2
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	e024      	b.n	8005904 <USB_EPStartXfer+0x8a8>
 80058ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	785b      	ldrb	r3, [r3, #1]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d11c      	bne.n	8005904 <USB_EPStartXfer+0x8a8>
 80058ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d8:	b29b      	uxth	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058de:	4413      	add	r3, r2
 80058e0:	643b      	str	r3, [r7, #64]	; 0x40
 80058e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	011a      	lsls	r2, r3, #4
 80058f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f2:	4413      	add	r3, r2
 80058f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005902:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	895b      	ldrh	r3, [r3, #10]
 8005910:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6959      	ldr	r1, [r3, #20]
 8005920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005924:	b29b      	uxth	r3, r3
 8005926:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800592a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800592e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005932:	6800      	ldr	r0, [r0, #0]
 8005934:	f001 f881 	bl	8006a3a <USB_WritePMA>
 8005938:	e227      	b.n	8005d8a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800593a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800594a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800596c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005970:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c6:	4413      	add	r3, r2
 80059c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	011a      	lsls	r2, r3, #4
 80059d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059da:	4413      	add	r3, r2
 80059dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80059e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	891b      	ldrh	r3, [r3, #8]
 80059f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6959      	ldr	r1, [r3, #20]
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a1a:	6800      	ldr	r0, [r0, #0]
 8005a1c:	f001 f80d 	bl	8006a3a <USB_WritePMA>
 8005a20:	e1b3      	b.n	8005d8a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6a1a      	ldr	r2, [r3, #32]
 8005a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80c6 	beq.w	8005bf4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	673b      	str	r3, [r7, #112]	; 0x70
 8005a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d177      	bne.n	8005b74 <USB_EPStartXfer+0xb18>
 8005a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aa4:	4413      	add	r3, r2
 8005aa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	011a      	lsls	r2, r3, #4
 8005ab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ab8:	4413      	add	r3, r2
 8005aba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005abe:	667b      	str	r3, [r7, #100]	; 0x64
 8005ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ad6:	d921      	bls.n	8005b1c <USB_EPStartXfer+0xac0>
 8005ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae6:	f003 031f 	and.w	r3, r3, #31
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <USB_EPStartXfer+0xa9c>
 8005aee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005af2:	3b01      	subs	r3, #1
 8005af4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	029b      	lsls	r3, r3, #10
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	e050      	b.n	8005bbe <USB_EPStartXfer+0xb62>
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <USB_EPStartXfer+0xade>
 8005b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	e041      	b.n	8005bbe <USB_EPStartXfer+0xb62>
 8005b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3e:	085b      	lsrs	r3, r3, #1
 8005b40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <USB_EPStartXfer+0xafe>
 8005b50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b54:	3301      	adds	r3, #1
 8005b56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	029b      	lsls	r3, r3, #10
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	e024      	b.n	8005bbe <USB_EPStartXfer+0xb62>
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d11c      	bne.n	8005bbe <USB_EPStartXfer+0xb62>
 8005b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b98:	4413      	add	r3, r2
 8005b9a:	673b      	str	r3, [r7, #112]	; 0x70
 8005b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	011a      	lsls	r2, r3, #4
 8005baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bac:	4413      	add	r3, r2
 8005bae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bbc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	895b      	ldrh	r3, [r3, #10]
 8005bca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6959      	ldr	r1, [r3, #20]
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005be4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005be8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bec:	6800      	ldr	r0, [r0, #0]
 8005bee:	f000 ff24 	bl	8006a3a <USB_WritePMA>
 8005bf2:	e0ca      	b.n	8005d8a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d177      	bne.n	8005cf4 <USB_EPStartXfer+0xc98>
 8005c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c24:	4413      	add	r3, r2
 8005c26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	011a      	lsls	r2, r3, #4
 8005c36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c38:	4413      	add	r3, r2
 8005c3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c54:	2b3e      	cmp	r3, #62	; 0x3e
 8005c56:	d921      	bls.n	8005c9c <USB_EPStartXfer+0xc40>
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <USB_EPStartXfer+0xc1c>
 8005c6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c72:	3b01      	subs	r3, #1
 8005c74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	029b      	lsls	r3, r3, #10
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c98:	801a      	strh	r2, [r3, #0]
 8005c9a:	e05c      	b.n	8005d56 <USB_EPStartXfer+0xcfa>
 8005c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <USB_EPStartXfer+0xc5e>
 8005ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	e04d      	b.n	8005d56 <USB_EPStartXfer+0xcfa>
 8005cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cbe:	085b      	lsrs	r3, r3, #1
 8005cc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d004      	beq.n	8005cda <USB_EPStartXfer+0xc7e>
 8005cd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	029b      	lsls	r3, r3, #10
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	4313      	orrs	r3, r2
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	e030      	b.n	8005d56 <USB_EPStartXfer+0xcfa>
 8005cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d128      	bne.n	8005d56 <USB_EPStartXfer+0xcfa>
 8005d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d28:	4413      	add	r3, r2
 8005d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	011a      	lsls	r2, r3, #4
 8005d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d40:	4413      	add	r3, r2
 8005d42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	891b      	ldrh	r3, [r3, #8]
 8005d62:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6959      	ldr	r1, [r3, #20]
 8005d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d7c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d80:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d84:	6800      	ldr	r0, [r0, #0]
 8005d86:	f000 fe58 	bl	8006a3a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db0:	817b      	strh	r3, [r7, #10]
 8005db2:	897b      	ldrh	r3, [r7, #10]
 8005db4:	f083 0310 	eor.w	r3, r3, #16
 8005db8:	817b      	strh	r3, [r7, #10]
 8005dba:	897b      	ldrh	r3, [r7, #10]
 8005dbc:	f083 0320 	eor.w	r3, r3, #32
 8005dc0:	817b      	strh	r3, [r7, #10]
 8005dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	441a      	add	r2, r3
 8005ddc:	897b      	ldrh	r3, [r7, #10]
 8005dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8013      	strh	r3, [r2, #0]
 8005df2:	f000 bcde 	b.w	80067b2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	7b1b      	ldrb	r3, [r3, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f040 80bb 	bne.w	8005f7e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699a      	ldr	r2, [r3, #24]
 8005e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d917      	bls.n	8005e54 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e44:	1ad2      	subs	r2, r2, r3
 8005e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	619a      	str	r2, [r3, #24]
 8005e52:	e00e      	b.n	8005e72 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e96:	4413      	add	r3, r2
 8005e98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	011a      	lsls	r2, r3, #4
 8005eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eae:	4413      	add	r3, r2
 8005eb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ed2:	d924      	bls.n	8005f1e <USB_EPStartXfer+0xec2>
 8005ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed8:	095b      	lsrs	r3, r3, #5
 8005eda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee2:	f003 031f 	and.w	r3, r3, #31
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <USB_EPStartXfer+0xe98>
 8005eea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	029b      	lsls	r3, r3, #10
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4313      	orrs	r3, r2
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f18:	801a      	strh	r2, [r3, #0]
 8005f1a:	f000 bc10 	b.w	800673e <USB_EPStartXfer+0x16e2>
 8005f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10c      	bne.n	8005f40 <USB_EPStartXfer+0xee4>
 8005f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	e3fe      	b.n	800673e <USB_EPStartXfer+0x16e2>
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <USB_EPStartXfer+0xf04>
 8005f56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	029b      	lsls	r3, r3, #10
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	4313      	orrs	r3, r2
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f7a:	801a      	strh	r2, [r3, #0]
 8005f7c:	e3df      	b.n	800673e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	78db      	ldrb	r3, [r3, #3]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	f040 8218 	bne.w	80063c0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f040 809d 	bne.w	80060dc <USB_EPStartXfer+0x1080>
 8005fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	011a      	lsls	r2, r3, #4
 8005fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fde:	4413      	add	r3, r2
 8005fe0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b3e      	cmp	r3, #62	; 0x3e
 800600a:	d92b      	bls.n	8006064 <USB_EPStartXfer+0x1008>
 800600c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800601e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 031f 	and.w	r3, r3, #31
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <USB_EPStartXfer+0xfe0>
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006036:	3b01      	subs	r3, #1
 8006038:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800603c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29a      	uxth	r2, r3
 8006044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006048:	b29b      	uxth	r3, r3
 800604a:	029b      	lsls	r3, r3, #10
 800604c:	b29b      	uxth	r3, r3
 800604e:	4313      	orrs	r3, r2
 8006050:	b29b      	uxth	r3, r3
 8006052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605a:	b29a      	uxth	r2, r3
 800605c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	e070      	b.n	8006146 <USB_EPStartXfer+0x10ea>
 8006064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10c      	bne.n	800608e <USB_EPStartXfer+0x1032>
 8006074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006084:	b29a      	uxth	r2, r3
 8006086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	e05b      	b.n	8006146 <USB_EPStartXfer+0x10ea>
 800608e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	085b      	lsrs	r3, r3, #1
 800609c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d004      	beq.n	80060be <USB_EPStartXfer+0x1062>
 80060b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b8:	3301      	adds	r3, #1
 80060ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	029b      	lsls	r3, r3, #10
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	4313      	orrs	r3, r2
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060d8:	801a      	strh	r2, [r3, #0]
 80060da:	e034      	b.n	8006146 <USB_EPStartXfer+0x10ea>
 80060dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	785b      	ldrb	r3, [r3, #1]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d12c      	bne.n	8006146 <USB_EPStartXfer+0x10ea>
 80060ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006108:	b29b      	uxth	r3, r3
 800610a:	461a      	mov	r2, r3
 800610c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006110:	4413      	add	r3, r2
 8006112:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	011a      	lsls	r2, r3, #4
 8006124:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006128:	4413      	add	r3, r2
 800612a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800612e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	b29a      	uxth	r2, r3
 8006140:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	785b      	ldrb	r3, [r3, #1]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f040 809d 	bne.w	80062a0 <USB_EPStartXfer+0x1244>
 8006166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006182:	b29b      	uxth	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800618a:	4413      	add	r3, r2
 800618c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	011a      	lsls	r2, r3, #4
 800619e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061a2:	4413      	add	r3, r2
 80061a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b3e      	cmp	r3, #62	; 0x3e
 80061ce:	d92b      	bls.n	8006228 <USB_EPStartXfer+0x11cc>
 80061d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <USB_EPStartXfer+0x11a4>
 80061f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061fa:	3b01      	subs	r3, #1
 80061fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006200:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29a      	uxth	r2, r3
 8006208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620c:	b29b      	uxth	r3, r3
 800620e:	029b      	lsls	r3, r3, #10
 8006210:	b29b      	uxth	r3, r3
 8006212:	4313      	orrs	r3, r2
 8006214:	b29b      	uxth	r3, r3
 8006216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800621a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800621e:	b29a      	uxth	r2, r3
 8006220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006224:	801a      	strh	r2, [r3, #0]
 8006226:	e069      	b.n	80062fc <USB_EPStartXfer+0x12a0>
 8006228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10c      	bne.n	8006252 <USB_EPStartXfer+0x11f6>
 8006238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006248:	b29a      	uxth	r2, r3
 800624a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	e054      	b.n	80062fc <USB_EPStartXfer+0x12a0>
 8006252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d004      	beq.n	8006282 <USB_EPStartXfer+0x1226>
 8006278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800627c:	3301      	adds	r3, #1
 800627e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006282:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29a      	uxth	r2, r3
 800628a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800628e:	b29b      	uxth	r3, r3
 8006290:	029b      	lsls	r3, r3, #10
 8006292:	b29b      	uxth	r3, r3
 8006294:	4313      	orrs	r3, r2
 8006296:	b29a      	uxth	r2, r3
 8006298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800629c:	801a      	strh	r2, [r3, #0]
 800629e:	e02d      	b.n	80062fc <USB_EPStartXfer+0x12a0>
 80062a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d125      	bne.n	80062fc <USB_EPStartXfer+0x12a0>
 80062b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062be:	b29b      	uxth	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062c6:	4413      	add	r3, r2
 80062c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	011a      	lsls	r2, r3, #4
 80062da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062de:	4413      	add	r3, r2
 80062e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062fa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80062fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 8218 	beq.w	800673e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800630e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006312:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800632e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <USB_EPStartXfer+0x12ea>
 800633a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10d      	bne.n	8006362 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006346:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800634a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 81f5 	bne.w	800673e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006354:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	f040 81ee 	bne.w	800673e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006388:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800638c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006390:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80063aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	8013      	strh	r3, [r2, #0]
 80063be:	e1be      	b.n	800673e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80063c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	78db      	ldrb	r3, [r3, #3]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	f040 81b4 	bne.w	800673a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80063d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d917      	bls.n	800641e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80063fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640e:	1ad2      	subs	r2, r2, r3
 8006410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	619a      	str	r2, [r3, #24]
 800641c:	e00e      	b.n	800643c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800641e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800642e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2200      	movs	r2, #0
 800643a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	785b      	ldrb	r3, [r3, #1]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f040 8085 	bne.w	8006558 <USB_EPStartXfer+0x14fc>
 800644e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800645c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800646a:	b29b      	uxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006472:	4413      	add	r3, r2
 8006474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	011a      	lsls	r2, r3, #4
 8006486:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800648a:	4413      	add	r3, r2
 800648c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006490:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006494:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ac:	2b3e      	cmp	r3, #62	; 0x3e
 80064ae:	d923      	bls.n	80064f8 <USB_EPStartXfer+0x149c>
 80064b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b4:	095b      	lsrs	r3, r3, #5
 80064b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d104      	bne.n	80064d0 <USB_EPStartXfer+0x1474>
 80064c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ca:	3b01      	subs	r3, #1
 80064cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064dc:	b29b      	uxth	r3, r3
 80064de:	029b      	lsls	r3, r3, #10
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	4313      	orrs	r3, r2
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064f4:	801a      	strh	r2, [r3, #0]
 80064f6:	e060      	b.n	80065ba <USB_EPStartXfer+0x155e>
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10c      	bne.n	800651a <USB_EPStartXfer+0x14be>
 8006500:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006510:	b29a      	uxth	r2, r3
 8006512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	e04f      	b.n	80065ba <USB_EPStartXfer+0x155e>
 800651a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d004      	beq.n	800653a <USB_EPStartXfer+0x14de>
 8006530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006534:	3301      	adds	r3, #1
 8006536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800653a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29a      	uxth	r2, r3
 8006542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006546:	b29b      	uxth	r3, r3
 8006548:	029b      	lsls	r3, r3, #10
 800654a:	b29b      	uxth	r3, r3
 800654c:	4313      	orrs	r3, r2
 800654e:	b29a      	uxth	r2, r3
 8006550:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	e030      	b.n	80065ba <USB_EPStartXfer+0x155e>
 8006558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	785b      	ldrb	r3, [r3, #1]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d128      	bne.n	80065ba <USB_EPStartXfer+0x155e>
 8006568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006584:	b29b      	uxth	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800658c:	4413      	add	r3, r2
 800658e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	011a      	lsls	r2, r3, #4
 80065a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065a4:	4413      	add	r3, r2
 80065a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	785b      	ldrb	r3, [r3, #1]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f040 8085 	bne.w	80066e4 <USB_EPStartXfer+0x1688>
 80065da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065fe:	4413      	add	r3, r2
 8006600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	011a      	lsls	r2, r3, #4
 8006612:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006616:	4413      	add	r3, r2
 8006618:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800661c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006620:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800662c:	b29a      	uxth	r2, r3
 800662e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006632:	801a      	strh	r2, [r3, #0]
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006638:	2b3e      	cmp	r3, #62	; 0x3e
 800663a:	d923      	bls.n	8006684 <USB_EPStartXfer+0x1628>
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006640:	095b      	lsrs	r3, r3, #5
 8006642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	2b00      	cmp	r3, #0
 8006650:	d104      	bne.n	800665c <USB_EPStartXfer+0x1600>
 8006652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006656:	3b01      	subs	r3, #1
 8006658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800665c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29a      	uxth	r2, r3
 8006664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006668:	b29b      	uxth	r3, r3
 800666a:	029b      	lsls	r3, r3, #10
 800666c:	b29b      	uxth	r3, r3
 800666e:	4313      	orrs	r3, r2
 8006670:	b29b      	uxth	r3, r3
 8006672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667a:	b29a      	uxth	r2, r3
 800667c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	e05c      	b.n	800673e <USB_EPStartXfer+0x16e2>
 8006684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10c      	bne.n	80066a6 <USB_EPStartXfer+0x164a>
 800668c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669c:	b29a      	uxth	r2, r3
 800669e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	e04b      	b.n	800673e <USB_EPStartXfer+0x16e2>
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066aa:	085b      	lsrs	r3, r3, #1
 80066ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <USB_EPStartXfer+0x166a>
 80066bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066c0:	3301      	adds	r3, #1
 80066c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	029b      	lsls	r3, r3, #10
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	4313      	orrs	r3, r2
 80066da:	b29a      	uxth	r2, r3
 80066dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066e0:	801a      	strh	r2, [r3, #0]
 80066e2:	e02c      	b.n	800673e <USB_EPStartXfer+0x16e2>
 80066e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d124      	bne.n	800673e <USB_EPStartXfer+0x16e2>
 80066f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006702:	b29b      	uxth	r3, r3
 8006704:	461a      	mov	r2, r3
 8006706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800670a:	4413      	add	r3, r2
 800670c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	011a      	lsls	r2, r3, #4
 800671e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006722:	4413      	add	r3, r2
 8006724:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006728:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800672c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006730:	b29a      	uxth	r2, r3
 8006732:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006736:	801a      	strh	r2, [r3, #0]
 8006738:	e001      	b.n	800673e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e03a      	b.n	80067b4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800673e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006742:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006764:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006768:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800676c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006770:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006774:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006778:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800677c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	441a      	add	r2, r3
 800679a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800679e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d020      	beq.n	8006812 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e6:	81bb      	strh	r3, [r7, #12]
 80067e8:	89bb      	ldrh	r3, [r7, #12]
 80067ea:	f083 0310 	eor.w	r3, r3, #16
 80067ee:	81bb      	strh	r3, [r7, #12]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	441a      	add	r2, r3
 80067fa:	89bb      	ldrh	r3, [r7, #12]
 80067fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680c:	b29b      	uxth	r3, r3
 800680e:	8013      	strh	r3, [r2, #0]
 8006810:	e01f      	b.n	8006852 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006828:	81fb      	strh	r3, [r7, #14]
 800682a:	89fb      	ldrh	r3, [r7, #14]
 800682c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006830:	81fb      	strh	r3, [r7, #14]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	89fb      	ldrh	r3, [r7, #14]
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr

0800685e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800685e:	b480      	push	{r7}
 8006860:	b087      	sub	sp, #28
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	7b1b      	ldrb	r3, [r3, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	f040 809d 	bne.w	80069ac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d04c      	beq.n	8006914 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	823b      	strh	r3, [r7, #16]
 8006888:	8a3b      	ldrh	r3, [r7, #16]
 800688a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	d01b      	beq.n	80068ca <USB_EPClearStall+0x6c>
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a8:	81fb      	strh	r3, [r7, #14]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	441a      	add	r2, r3
 80068b4:	89fb      	ldrh	r3, [r7, #14]
 80068b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	78db      	ldrb	r3, [r3, #3]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d06c      	beq.n	80069ac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e8:	81bb      	strh	r3, [r7, #12]
 80068ea:	89bb      	ldrh	r3, [r7, #12]
 80068ec:	f083 0320 	eor.w	r3, r3, #32
 80068f0:	81bb      	strh	r3, [r7, #12]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	441a      	add	r2, r3
 80068fc:	89bb      	ldrh	r3, [r7, #12]
 80068fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690e:	b29b      	uxth	r3, r3
 8006910:	8013      	strh	r3, [r2, #0]
 8006912:	e04b      	b.n	80069ac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	82fb      	strh	r3, [r7, #22]
 8006922:	8afb      	ldrh	r3, [r7, #22]
 8006924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01b      	beq.n	8006964 <USB_EPClearStall+0x106>
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	82bb      	strh	r3, [r7, #20]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	441a      	add	r2, r3
 800694e:	8abb      	ldrh	r3, [r7, #20]
 8006950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800695c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006960:	b29b      	uxth	r3, r3
 8006962:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	b29b      	uxth	r3, r3
 8006972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697a:	827b      	strh	r3, [r7, #18]
 800697c:	8a7b      	ldrh	r3, [r7, #18]
 800697e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006982:	827b      	strh	r3, [r7, #18]
 8006984:	8a7b      	ldrh	r3, [r7, #18]
 8006986:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800698a:	827b      	strh	r3, [r7, #18]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	8a7b      	ldrh	r3, [r7, #18]
 8006998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr

080069b8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d103      	bne.n	80069d2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2280      	movs	r2, #128	; 0x80
 80069ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr

080069de <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc80      	pop	{r7}
 80069f0:	4770      	bx	lr

080069f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr

08006a06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a18:	68fb      	ldr	r3, [r7, #12]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr

08006a24 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr

08006a3a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b08b      	sub	sp, #44	; 0x2c
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	4611      	mov	r1, r2
 8006a46:	461a      	mov	r2, r3
 8006a48:	460b      	mov	r3, r1
 8006a4a:	80fb      	strh	r3, [r7, #6]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a50:	88bb      	ldrh	r3, [r7, #4]
 8006a52:	3301      	adds	r3, #1
 8006a54:	085b      	lsrs	r3, r3, #1
 8006a56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	005a      	lsls	r2, r3, #1
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a6c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
 8006a72:	e01e      	b.n	8006ab2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	b21a      	sxth	r2, r3
 8006a84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	b21b      	sxth	r3, r3
 8006a8c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	8a7a      	ldrh	r2, [r7, #18]
 8006a92:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	3302      	adds	r3, #2
 8006a98:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1dd      	bne.n	8006a74 <USB_WritePMA+0x3a>
  }
}
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
 8006abc:	372c      	adds	r7, #44	; 0x2c
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr

08006ac4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b08b      	sub	sp, #44	; 0x2c
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	4611      	mov	r1, r2
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	80fb      	strh	r3, [r7, #6]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006ada:	88bb      	ldrh	r3, [r7, #4]
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	005a      	lsls	r2, r3, #1
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
 8006afc:	e01b      	b.n	8006b36 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	3302      	adds	r3, #2
 8006b0a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	3301      	adds	r3, #1
 8006b18:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	0a1b      	lsrs	r3, r3, #8
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	3301      	adds	r3, #1
 8006b28:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	3302      	adds	r3, #2
 8006b2e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	3b01      	subs	r3, #1
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e0      	bne.n	8006afe <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b3c:	88bb      	ldrh	r3, [r7, #4]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d007      	beq.n	8006b58 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	701a      	strb	r2, [r3, #0]
  }
}
 8006b58:	bf00      	nop
 8006b5a:	372c      	adds	r7, #44	; 0x2c
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr

08006b62 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	7c1b      	ldrb	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d115      	bne.n	8006ba6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b7e:	2202      	movs	r2, #2
 8006b80:	2181      	movs	r1, #129	; 0x81
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fe87 	bl	8008896 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b92:	2202      	movs	r2, #2
 8006b94:	2101      	movs	r1, #1
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 fe7d 	bl	8008896 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006ba4:	e012      	b.n	8006bcc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ba6:	2340      	movs	r3, #64	; 0x40
 8006ba8:	2202      	movs	r2, #2
 8006baa:	2181      	movs	r1, #129	; 0x81
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 fe72 	bl	8008896 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bb8:	2340      	movs	r3, #64	; 0x40
 8006bba:	2202      	movs	r2, #2
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 fe69 	bl	8008896 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006bcc:	2308      	movs	r3, #8
 8006bce:	2203      	movs	r2, #3
 8006bd0:	2182      	movs	r1, #130	; 0x82
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 fe5f 	bl	8008896 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bde:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006be2:	f001 ff7f 	bl	8008ae4 <USBD_static_malloc>
 8006be6:	4602      	mov	r2, r0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d102      	bne.n	8006bfe <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	73fb      	strb	r3, [r7, #15]
 8006bfc:	e026      	b.n	8006c4c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c04:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	7c1b      	ldrb	r3, [r3, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c32:	2101      	movs	r1, #1
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 ff1f 	bl	8008a78 <USBD_LL_PrepareReceive>
 8006c3a:	e007      	b.n	8006c4c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c42:	2340      	movs	r3, #64	; 0x40
 8006c44:	2101      	movs	r1, #1
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f001 ff16 	bl	8008a78 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c66:	2181      	movs	r1, #129	; 0x81
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 fe3a 	bl	80088e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c74:	2101      	movs	r1, #1
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 fe33 	bl	80088e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c84:	2182      	movs	r1, #130	; 0x82
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 fe2b 	bl	80088e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00e      	beq.n	8006cba <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 ff25 	bl	8008afc <USBD_static_free>
    pdev->pClassData = NULL;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d039      	beq.n	8006d62 <USBD_CDC_Setup+0x9e>
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	d17f      	bne.n	8006df2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	88db      	ldrh	r3, [r3, #6]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d029      	beq.n	8006d4e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	b25b      	sxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	da11      	bge.n	8006d28 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006d10:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	88d2      	ldrh	r2, [r2, #6]
 8006d16:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d18:	6939      	ldr	r1, [r7, #16]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	88db      	ldrh	r3, [r3, #6]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fa0a 	bl	800813a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006d26:	e06b      	b.n	8006e00 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	785a      	ldrb	r2, [r3, #1]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	88db      	ldrh	r3, [r3, #6]
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d3e:	6939      	ldr	r1, [r7, #16]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	88db      	ldrh	r3, [r3, #6]
 8006d44:	461a      	mov	r2, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fa25 	bl	8008196 <USBD_CtlPrepareRx>
      break;
 8006d4c:	e058      	b.n	8006e00 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	7850      	ldrb	r0, [r2, #1]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	4798      	blx	r3
      break;
 8006d60:	e04e      	b.n	8006e00 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b0b      	cmp	r3, #11
 8006d68:	d02e      	beq.n	8006dc8 <USBD_CDC_Setup+0x104>
 8006d6a:	2b0b      	cmp	r3, #11
 8006d6c:	dc38      	bgt.n	8006de0 <USBD_CDC_Setup+0x11c>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <USBD_CDC_Setup+0xb4>
 8006d72:	2b0a      	cmp	r3, #10
 8006d74:	d014      	beq.n	8006da0 <USBD_CDC_Setup+0xdc>
 8006d76:	e033      	b.n	8006de0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d107      	bne.n	8006d92 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d82:	f107 030c 	add.w	r3, r7, #12
 8006d86:	2202      	movs	r2, #2
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 f9d5 	bl	800813a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d90:	e02e      	b.n	8006df0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 f966 	bl	8008066 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d9e:	e027      	b.n	8006df0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d107      	bne.n	8006dba <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006daa:	f107 030f 	add.w	r3, r7, #15
 8006dae:	2201      	movs	r2, #1
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f001 f9c1 	bl	800813a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006db8:	e01a      	b.n	8006df0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 f952 	bl	8008066 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	75fb      	strb	r3, [r7, #23]
          break;
 8006dc6:	e013      	b.n	8006df0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d00d      	beq.n	8006dee <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 f946 	bl	8008066 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dda:	2302      	movs	r3, #2
 8006ddc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006dde:	e006      	b.n	8006dee <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 f93f 	bl	8008066 <USBD_CtlError>
          ret = USBD_FAIL;
 8006de8:	2302      	movs	r3, #2
 8006dea:	75fb      	strb	r3, [r7, #23]
          break;
 8006dec:	e000      	b.n	8006df0 <USBD_CDC_Setup+0x12c>
          break;
 8006dee:	bf00      	nop
      }
      break;
 8006df0:	e006      	b.n	8006e00 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f936 	bl	8008066 <USBD_CtlError>
      ret = USBD_FAIL;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfe:	bf00      	nop
  }

  return ret;
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e24:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d03a      	beq.n	8006ea6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e30:	78fa      	ldrb	r2, [r7, #3]
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	331c      	adds	r3, #28
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d029      	beq.n	8006e9a <USBD_CDC_DataIn+0x90>
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	331c      	adds	r3, #28
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	78f9      	ldrb	r1, [r7, #3]
 8006e5a:	68b8      	ldr	r0, [r7, #8]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	4403      	add	r3, r0
 8006e66:	3338      	adds	r3, #56	; 0x38
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d110      	bne.n	8006e9a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006e78:	78fa      	ldrb	r2, [r7, #3]
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	331c      	adds	r3, #28
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e8c:	78f9      	ldrb	r1, [r7, #3]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2200      	movs	r2, #0
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fdcd 	bl	8008a32 <USBD_LL_Transmit>
 8006e98:	e003      	b.n	8006ea2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e000      	b.n	8006ea8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006ea6:	2302      	movs	r3, #2
  }
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 fdf8 	bl	8008abe <USBD_LL_GetRxDataSize>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00d      	beq.n	8006efc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	4798      	blx	r3

    return USBD_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e000      	b.n	8006efe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006efc:	2302      	movs	r3, #2
  }
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f14:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d015      	beq.n	8006f4c <USBD_CDC_EP0_RxReady+0x46>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f26:	2bff      	cmp	r3, #255	; 0xff
 8006f28:	d010      	beq.n	8006f4c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f38:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f40:	b292      	uxth	r2, r2
 8006f42:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	22ff      	movs	r2, #255	; 0xff
 8006f48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2243      	movs	r2, #67	; 0x43
 8006f64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006f66:	4b03      	ldr	r3, [pc, #12]	; (8006f74 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20000094 	.word	0x20000094

08006f78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2243      	movs	r2, #67	; 0x43
 8006f84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006f86:	4b03      	ldr	r3, [pc, #12]	; (8006f94 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20000050 	.word	0x20000050

08006f98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2243      	movs	r2, #67	; 0x43
 8006fa4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006fa6:	4b03      	ldr	r3, [pc, #12]	; (8006fb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bc80      	pop	{r7}
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	200000d8 	.word	0x200000d8

08006fb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	220a      	movs	r2, #10
 8006fc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006fc6:	4b03      	ldr	r3, [pc, #12]	; (8006fd4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bc80      	pop	{r7}
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	2000000c 	.word	0x2000000c

08006fd8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bc80      	pop	{r7}
 8007002:	4770      	bx	lr

08007004 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	4613      	mov	r3, r2
 8007010:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007018:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007022:	88fa      	ldrh	r2, [r7, #6]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr

08007036 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007046:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	bc80      	pop	{r7}
 800705a:	4770      	bx	lr

0800705c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007072:	2b00      	cmp	r3, #0
 8007074:	d01c      	beq.n	80070b0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800707c:	2b00      	cmp	r3, #0
 800707e:	d115      	bne.n	80070ac <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800709e:	b29b      	uxth	r3, r3
 80070a0:	2181      	movs	r1, #129	; 0x81
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 fcc5 	bl	8008a32 <USBD_LL_Transmit>

      return USBD_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	e002      	b.n	80070b2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80070b0:	2302      	movs	r3, #2
  }
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d017      	beq.n	8007104 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	7c1b      	ldrb	r3, [r3, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d109      	bne.n	80070f0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070e6:	2101      	movs	r1, #1
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fcc5 	bl	8008a78 <USBD_LL_PrepareReceive>
 80070ee:	e007      	b.n	8007100 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070f6:	2340      	movs	r3, #64	; 0x40
 80070f8:	2101      	movs	r1, #1
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fcbc 	bl	8008a78 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e000      	b.n	8007106 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007104:	2302      	movs	r3, #2
  }
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	4613      	mov	r3, r2
 800711a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007122:	2302      	movs	r3, #2
 8007124:	e01a      	b.n	800715c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	79fa      	ldrb	r2, [r7, #7]
 8007152:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f001 fb29 	bl	80087ac <USBD_LL_Init>

  return USBD_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d006      	beq.n	8007186 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]
 8007184:	e001      	b.n	800718a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007186:	2302      	movs	r3, #2
 8007188:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800718a:	7bfb      	ldrb	r3, [r7, #15]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3714      	adds	r7, #20
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr

08007196 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fb5e 	bl	8008860 <USBD_LL_Start>

  return USBD_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	bc80      	pop	{r7}
 80071c0:	4770      	bx	lr

080071c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071ce:	2302      	movs	r3, #2
 80071d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00c      	beq.n	80071f6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	78fa      	ldrb	r2, [r7, #3]
 80071e6:	4611      	mov	r1, r2
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	4798      	blx	r3
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	78fa      	ldrb	r2, [r7, #3]
 8007216:	4611      	mov	r1, r2
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	4798      	blx	r3

  return USBD_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b082      	sub	sp, #8
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f000 fed8 	bl	8007fee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800724c:	461a      	mov	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800725a:	f003 031f 	and.w	r3, r3, #31
 800725e:	2b02      	cmp	r3, #2
 8007260:	d016      	beq.n	8007290 <USBD_LL_SetupStage+0x6a>
 8007262:	2b02      	cmp	r3, #2
 8007264:	d81c      	bhi.n	80072a0 <USBD_LL_SetupStage+0x7a>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <USBD_LL_SetupStage+0x4a>
 800726a:	2b01      	cmp	r3, #1
 800726c:	d008      	beq.n	8007280 <USBD_LL_SetupStage+0x5a>
 800726e:	e017      	b.n	80072a0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f9cb 	bl	8007614 <USBD_StdDevReq>
      break;
 800727e:	e01a      	b.n	80072b6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fa2d 	bl	80076e8 <USBD_StdItfReq>
      break;
 800728e:	e012      	b.n	80072b6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fa6d 	bl	8007778 <USBD_StdEPReq>
      break;
 800729e:	e00a      	b.n	80072b6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f001 fb36 	bl	8008920 <USBD_LL_StallEP>
      break;
 80072b4:	bf00      	nop
  }

  return USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	460b      	mov	r3, r1
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072ce:	7afb      	ldrb	r3, [r7, #11]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d14b      	bne.n	800736c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072da:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d134      	bne.n	8007350 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d919      	bls.n	8007326 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	1ad2      	subs	r2, r2, r3
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007308:	429a      	cmp	r2, r3
 800730a:	d203      	bcs.n	8007314 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007310:	b29b      	uxth	r3, r3
 8007312:	e002      	b.n	800731a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007318:	b29b      	uxth	r3, r3
 800731a:	461a      	mov	r2, r3
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 ff57 	bl	80081d2 <USBD_CtlContinueRx>
 8007324:	e038      	b.n	8007398 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007338:	2b03      	cmp	r3, #3
 800733a:	d105      	bne.n	8007348 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 ff54 	bl	80081f6 <USBD_CtlSendStatus>
 800734e:	e023      	b.n	8007398 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007356:	2b05      	cmp	r3, #5
 8007358:	d11e      	bne.n	8007398 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007362:	2100      	movs	r1, #0
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f001 fadb 	bl	8008920 <USBD_LL_StallEP>
 800736a:	e015      	b.n	8007398 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00d      	beq.n	8007394 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800737e:	2b03      	cmp	r3, #3
 8007380:	d108      	bne.n	8007394 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	7afa      	ldrb	r2, [r7, #11]
 800738c:	4611      	mov	r1, r2
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	4798      	blx	r3
 8007392:	e001      	b.n	8007398 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007394:	2302      	movs	r3, #2
 8007396:	e000      	b.n	800739a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b086      	sub	sp, #24
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	460b      	mov	r3, r1
 80073ac:	607a      	str	r2, [r7, #4]
 80073ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d17f      	bne.n	80074b6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3314      	adds	r3, #20
 80073ba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d15c      	bne.n	8007480 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d915      	bls.n	80073fe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	1ad2      	subs	r2, r2, r3
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	461a      	mov	r2, r3
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 fec1 	bl	8008172 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073f0:	2300      	movs	r3, #0
 80073f2:	2200      	movs	r2, #0
 80073f4:	2100      	movs	r1, #0
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f001 fb3e 	bl	8008a78 <USBD_LL_PrepareReceive>
 80073fc:	e04e      	b.n	800749c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	6912      	ldr	r2, [r2, #16]
 8007406:	fbb3 f1f2 	udiv	r1, r3, r2
 800740a:	fb01 f202 	mul.w	r2, r1, r2
 800740e:	1a9b      	subs	r3, r3, r2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d11c      	bne.n	800744e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800741c:	429a      	cmp	r2, r3
 800741e:	d316      	bcc.n	800744e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800742a:	429a      	cmp	r2, r3
 800742c:	d20f      	bcs.n	800744e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800742e:	2200      	movs	r2, #0
 8007430:	2100      	movs	r1, #0
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 fe9d 	bl	8008172 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007440:	2300      	movs	r3, #0
 8007442:	2200      	movs	r2, #0
 8007444:	2100      	movs	r1, #0
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f001 fb16 	bl	8008a78 <USBD_LL_PrepareReceive>
 800744c:	e026      	b.n	800749c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007460:	2b03      	cmp	r3, #3
 8007462:	d105      	bne.n	8007470 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007470:	2180      	movs	r1, #128	; 0x80
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f001 fa54 	bl	8008920 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fecf 	bl	800821c <USBD_CtlReceiveStatus>
 800747e:	e00d      	b.n	800749c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007486:	2b04      	cmp	r3, #4
 8007488:	d004      	beq.n	8007494 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007490:	2b00      	cmp	r3, #0
 8007492:	d103      	bne.n	800749c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007494:	2180      	movs	r1, #128	; 0x80
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f001 fa42 	bl	8008920 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d11d      	bne.n	80074e2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f7ff fe81 	bl	80071ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074b4:	e015      	b.n	80074e2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00d      	beq.n	80074de <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d108      	bne.n	80074de <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	7afa      	ldrb	r2, [r7, #11]
 80074d6:	4611      	mov	r1, r2
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	4798      	blx	r3
 80074dc:	e001      	b.n	80074e2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074de:	2302      	movs	r3, #2
 80074e0:	e000      	b.n	80074e4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074f4:	2340      	movs	r3, #64	; 0x40
 80074f6:	2200      	movs	r2, #0
 80074f8:	2100      	movs	r1, #0
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 f9cb 	bl	8008896 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2240      	movs	r2, #64	; 0x40
 800750c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007510:	2340      	movs	r3, #64	; 0x40
 8007512:	2200      	movs	r2, #0
 8007514:	2180      	movs	r1, #128	; 0x80
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 f9bd 	bl	8008896 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2240      	movs	r2, #64	; 0x40
 8007526:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d009      	beq.n	8007564 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6852      	ldr	r2, [r2, #4]
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	4611      	mov	r1, r2
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	4798      	blx	r3
  }

  return USBD_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	460b      	mov	r3, r1
 8007578:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	78fa      	ldrb	r2, [r7, #3]
 800757e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	bc80      	pop	{r7}
 800758a:	4770      	bx	lr

0800758c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2204      	movs	r2, #4
 80075a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bc80      	pop	{r7}
 80075b2:	4770      	bx	lr

080075b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d105      	bne.n	80075d2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr

080075de <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d10b      	bne.n	8007608 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800762a:	2b40      	cmp	r3, #64	; 0x40
 800762c:	d005      	beq.n	800763a <USBD_StdDevReq+0x26>
 800762e:	2b40      	cmp	r3, #64	; 0x40
 8007630:	d84f      	bhi.n	80076d2 <USBD_StdDevReq+0xbe>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <USBD_StdDevReq+0x36>
 8007636:	2b20      	cmp	r3, #32
 8007638:	d14b      	bne.n	80076d2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	4798      	blx	r3
      break;
 8007648:	e048      	b.n	80076dc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	785b      	ldrb	r3, [r3, #1]
 800764e:	2b09      	cmp	r3, #9
 8007650:	d839      	bhi.n	80076c6 <USBD_StdDevReq+0xb2>
 8007652:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <USBD_StdDevReq+0x44>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	080076a9 	.word	0x080076a9
 800765c:	080076bd 	.word	0x080076bd
 8007660:	080076c7 	.word	0x080076c7
 8007664:	080076b3 	.word	0x080076b3
 8007668:	080076c7 	.word	0x080076c7
 800766c:	0800768b 	.word	0x0800768b
 8007670:	08007681 	.word	0x08007681
 8007674:	080076c7 	.word	0x080076c7
 8007678:	0800769f 	.word	0x0800769f
 800767c:	08007695 	.word	0x08007695
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f9dc 	bl	8007a40 <USBD_GetDescriptor>
          break;
 8007688:	e022      	b.n	80076d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fb3f 	bl	8007d10 <USBD_SetAddress>
          break;
 8007692:	e01d      	b.n	80076d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fb7e 	bl	8007d98 <USBD_SetConfig>
          break;
 800769c:	e018      	b.n	80076d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fc07 	bl	8007eb4 <USBD_GetConfig>
          break;
 80076a6:	e013      	b.n	80076d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fc37 	bl	8007f1e <USBD_GetStatus>
          break;
 80076b0:	e00e      	b.n	80076d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fc65 	bl	8007f84 <USBD_SetFeature>
          break;
 80076ba:	e009      	b.n	80076d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fc74 	bl	8007fac <USBD_ClrFeature>
          break;
 80076c4:	e004      	b.n	80076d0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fccc 	bl	8008066 <USBD_CtlError>
          break;
 80076ce:	bf00      	nop
      }
      break;
 80076d0:	e004      	b.n	80076dc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fcc6 	bl	8008066 <USBD_CtlError>
      break;
 80076da:	bf00      	nop
  }

  return ret;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop

080076e8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076fe:	2b40      	cmp	r3, #64	; 0x40
 8007700:	d005      	beq.n	800770e <USBD_StdItfReq+0x26>
 8007702:	2b40      	cmp	r3, #64	; 0x40
 8007704:	d82e      	bhi.n	8007764 <USBD_StdItfReq+0x7c>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <USBD_StdItfReq+0x26>
 800770a:	2b20      	cmp	r3, #32
 800770c:	d12a      	bne.n	8007764 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007714:	3b01      	subs	r3, #1
 8007716:	2b02      	cmp	r3, #2
 8007718:	d81d      	bhi.n	8007756 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	889b      	ldrh	r3, [r3, #4]
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b01      	cmp	r3, #1
 8007722:	d813      	bhi.n	800774c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	4798      	blx	r3
 8007732:	4603      	mov	r3, r0
 8007734:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	88db      	ldrh	r3, [r3, #6]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d110      	bne.n	8007760 <USBD_StdItfReq+0x78>
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10d      	bne.n	8007760 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fd56 	bl	80081f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800774a:	e009      	b.n	8007760 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fc89 	bl	8008066 <USBD_CtlError>
          break;
 8007754:	e004      	b.n	8007760 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fc84 	bl	8008066 <USBD_CtlError>
          break;
 800775e:	e000      	b.n	8007762 <USBD_StdItfReq+0x7a>
          break;
 8007760:	bf00      	nop
      }
      break;
 8007762:	e004      	b.n	800776e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fc7d 	bl	8008066 <USBD_CtlError>
      break;
 800776c:	bf00      	nop
  }

  return USBD_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	889b      	ldrh	r3, [r3, #4]
 800778a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007794:	2b40      	cmp	r3, #64	; 0x40
 8007796:	d007      	beq.n	80077a8 <USBD_StdEPReq+0x30>
 8007798:	2b40      	cmp	r3, #64	; 0x40
 800779a:	f200 8146 	bhi.w	8007a2a <USBD_StdEPReq+0x2b2>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <USBD_StdEPReq+0x40>
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	f040 8141 	bne.w	8007a2a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
      break;
 80077b6:	e13d      	b.n	8007a34 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077c0:	2b20      	cmp	r3, #32
 80077c2:	d10a      	bne.n	80077da <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
 80077d2:	4603      	mov	r3, r0
 80077d4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
 80077d8:	e12d      	b.n	8007a36 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	785b      	ldrb	r3, [r3, #1]
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d007      	beq.n	80077f2 <USBD_StdEPReq+0x7a>
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	f300 811b 	bgt.w	8007a1e <USBD_StdEPReq+0x2a6>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d072      	beq.n	80078d2 <USBD_StdEPReq+0x15a>
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d03a      	beq.n	8007866 <USBD_StdEPReq+0xee>
 80077f0:	e115      	b.n	8007a1e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d002      	beq.n	8007802 <USBD_StdEPReq+0x8a>
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d015      	beq.n	800782c <USBD_StdEPReq+0xb4>
 8007800:	e02b      	b.n	800785a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00c      	beq.n	8007822 <USBD_StdEPReq+0xaa>
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	2b80      	cmp	r3, #128	; 0x80
 800780c:	d009      	beq.n	8007822 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f001 f884 	bl	8008920 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007818:	2180      	movs	r1, #128	; 0x80
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 f880 	bl	8008920 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007820:	e020      	b.n	8007864 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fc1e 	bl	8008066 <USBD_CtlError>
              break;
 800782a:	e01b      	b.n	8007864 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	885b      	ldrh	r3, [r3, #2]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10e      	bne.n	8007852 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00b      	beq.n	8007852 <USBD_StdEPReq+0xda>
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	2b80      	cmp	r3, #128	; 0x80
 800783e:	d008      	beq.n	8007852 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	88db      	ldrh	r3, [r3, #6]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d104      	bne.n	8007852 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 f867 	bl	8008920 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fccf 	bl	80081f6 <USBD_CtlSendStatus>

              break;
 8007858:	e004      	b.n	8007864 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fc02 	bl	8008066 <USBD_CtlError>
              break;
 8007862:	bf00      	nop
          }
          break;
 8007864:	e0e0      	b.n	8007a28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786c:	2b02      	cmp	r3, #2
 800786e:	d002      	beq.n	8007876 <USBD_StdEPReq+0xfe>
 8007870:	2b03      	cmp	r3, #3
 8007872:	d015      	beq.n	80078a0 <USBD_StdEPReq+0x128>
 8007874:	e026      	b.n	80078c4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00c      	beq.n	8007896 <USBD_StdEPReq+0x11e>
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b80      	cmp	r3, #128	; 0x80
 8007880:	d009      	beq.n	8007896 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 f84a 	bl	8008920 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800788c:	2180      	movs	r1, #128	; 0x80
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 f846 	bl	8008920 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007894:	e01c      	b.n	80078d0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fbe4 	bl	8008066 <USBD_CtlError>
              break;
 800789e:	e017      	b.n	80078d0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	885b      	ldrh	r3, [r3, #2]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d112      	bne.n	80078ce <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 f851 	bl	800895e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc9a 	bl	80081f6 <USBD_CtlSendStatus>
              }
              break;
 80078c2:	e004      	b.n	80078ce <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fbcd 	bl	8008066 <USBD_CtlError>
              break;
 80078cc:	e000      	b.n	80078d0 <USBD_StdEPReq+0x158>
              break;
 80078ce:	bf00      	nop
          }
          break;
 80078d0:	e0aa      	b.n	8007a28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d002      	beq.n	80078e2 <USBD_StdEPReq+0x16a>
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d032      	beq.n	8007946 <USBD_StdEPReq+0x1ce>
 80078e0:	e097      	b.n	8007a12 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d007      	beq.n	80078f8 <USBD_StdEPReq+0x180>
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	2b80      	cmp	r3, #128	; 0x80
 80078ec:	d004      	beq.n	80078f8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fbb8 	bl	8008066 <USBD_CtlError>
                break;
 80078f6:	e091      	b.n	8007a1c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	da0b      	bge.n	8007918 <USBD_StdEPReq+0x1a0>
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007906:	4613      	mov	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	3310      	adds	r3, #16
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	4413      	add	r3, r2
 8007914:	3304      	adds	r3, #4
 8007916:	e00b      	b.n	8007930 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	4413      	add	r3, r2
 800792e:	3304      	adds	r3, #4
 8007930:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2202      	movs	r2, #2
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fbfb 	bl	800813a <USBD_CtlSendData>
              break;
 8007944:	e06a      	b.n	8007a1c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800794a:	2b00      	cmp	r3, #0
 800794c:	da11      	bge.n	8007972 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	f003 020f 	and.w	r2, r3, #15
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	440b      	add	r3, r1
 8007960:	3318      	adds	r3, #24
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d117      	bne.n	8007998 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fb7b 	bl	8008066 <USBD_CtlError>
                  break;
 8007970:	e054      	b.n	8007a1c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	f003 020f 	and.w	r2, r3, #15
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	440b      	add	r3, r1
 8007984:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d104      	bne.n	8007998 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fb68 	bl	8008066 <USBD_CtlError>
                  break;
 8007996:	e041      	b.n	8007a1c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800799c:	2b00      	cmp	r3, #0
 800799e:	da0b      	bge.n	80079b8 <USBD_StdEPReq+0x240>
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079a6:	4613      	mov	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	3310      	adds	r3, #16
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	4413      	add	r3, r2
 80079b4:	3304      	adds	r3, #4
 80079b6:	e00b      	b.n	80079d0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079be:	4613      	mov	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	4413      	add	r3, r2
 80079ce:	3304      	adds	r3, #4
 80079d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <USBD_StdEPReq+0x266>
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b80      	cmp	r3, #128	; 0x80
 80079dc:	d103      	bne.n	80079e6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	e00e      	b.n	8007a04 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 ffd6 	bl	800899c <USBD_LL_IsStallEP>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2201      	movs	r2, #1
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	e002      	b.n	8007a04 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2200      	movs	r2, #0
 8007a02:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2202      	movs	r2, #2
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fb95 	bl	800813a <USBD_CtlSendData>
              break;
 8007a10:	e004      	b.n	8007a1c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fb26 	bl	8008066 <USBD_CtlError>
              break;
 8007a1a:	bf00      	nop
          }
          break;
 8007a1c:	e004      	b.n	8007a28 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fb20 	bl	8008066 <USBD_CtlError>
          break;
 8007a26:	bf00      	nop
      }
      break;
 8007a28:	e004      	b.n	8007a34 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fb1a 	bl	8008066 <USBD_CtlError>
      break;
 8007a32:	bf00      	nop
  }

  return ret;
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	885b      	ldrh	r3, [r3, #2]
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	2b06      	cmp	r3, #6
 8007a62:	f200 8128 	bhi.w	8007cb6 <USBD_GetDescriptor+0x276>
 8007a66:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <USBD_GetDescriptor+0x2c>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007a89 	.word	0x08007a89
 8007a70:	08007aa1 	.word	0x08007aa1
 8007a74:	08007ae1 	.word	0x08007ae1
 8007a78:	08007cb7 	.word	0x08007cb7
 8007a7c:	08007cb7 	.word	0x08007cb7
 8007a80:	08007c57 	.word	0x08007c57
 8007a84:	08007c83 	.word	0x08007c83
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	7c12      	ldrb	r2, [r2, #16]
 8007a94:	f107 0108 	add.w	r1, r7, #8
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4798      	blx	r3
 8007a9c:	60f8      	str	r0, [r7, #12]
      break;
 8007a9e:	e112      	b.n	8007cc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7c1b      	ldrb	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10d      	bne.n	8007ac4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	f107 0208 	add.w	r2, r7, #8
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4798      	blx	r3
 8007ab8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3301      	adds	r3, #1
 8007abe:	2202      	movs	r2, #2
 8007ac0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ac2:	e100      	b.n	8007cc6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	f107 0208 	add.w	r2, r7, #8
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
 8007ad4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	2202      	movs	r2, #2
 8007adc:	701a      	strb	r2, [r3, #0]
      break;
 8007ade:	e0f2      	b.n	8007cc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	885b      	ldrh	r3, [r3, #2]
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b05      	cmp	r3, #5
 8007ae8:	f200 80ac 	bhi.w	8007c44 <USBD_GetDescriptor+0x204>
 8007aec:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <USBD_GetDescriptor+0xb4>)
 8007aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af2:	bf00      	nop
 8007af4:	08007b0d 	.word	0x08007b0d
 8007af8:	08007b41 	.word	0x08007b41
 8007afc:	08007b75 	.word	0x08007b75
 8007b00:	08007ba9 	.word	0x08007ba9
 8007b04:	08007bdd 	.word	0x08007bdd
 8007b08:	08007c11 	.word	0x08007c11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	7c12      	ldrb	r2, [r2, #16]
 8007b24:	f107 0108 	add.w	r1, r7, #8
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b2e:	e091      	b.n	8007c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fa97 	bl	8008066 <USBD_CtlError>
            err++;
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b3e:	e089      	b.n	8007c54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	7c12      	ldrb	r2, [r2, #16]
 8007b58:	f107 0108 	add.w	r1, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b62:	e077      	b.n	8007c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fa7d 	bl	8008066 <USBD_CtlError>
            err++;
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	72fb      	strb	r3, [r7, #11]
          break;
 8007b72:	e06f      	b.n	8007c54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	7c12      	ldrb	r2, [r2, #16]
 8007b8c:	f107 0108 	add.w	r1, r7, #8
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
 8007b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b96:	e05d      	b.n	8007c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa63 	bl	8008066 <USBD_CtlError>
            err++;
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ba6:	e055      	b.n	8007c54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7c12      	ldrb	r2, [r2, #16]
 8007bc0:	f107 0108 	add.w	r1, r7, #8
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bca:	e043      	b.n	8007c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa49 	bl	8008066 <USBD_CtlError>
            err++;
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bda:	e03b      	b.n	8007c54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00b      	beq.n	8007c00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	7c12      	ldrb	r2, [r2, #16]
 8007bf4:	f107 0108 	add.w	r1, r7, #8
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4798      	blx	r3
 8007bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bfe:	e029      	b.n	8007c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fa2f 	bl	8008066 <USBD_CtlError>
            err++;
 8007c08:	7afb      	ldrb	r3, [r7, #11]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c0e:	e021      	b.n	8007c54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00b      	beq.n	8007c34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	7c12      	ldrb	r2, [r2, #16]
 8007c28:	f107 0108 	add.w	r1, r7, #8
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	4798      	blx	r3
 8007c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c32:	e00f      	b.n	8007c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa15 	bl	8008066 <USBD_CtlError>
            err++;
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	72fb      	strb	r3, [r7, #11]
          break;
 8007c42:	e007      	b.n	8007c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa0d 	bl	8008066 <USBD_CtlError>
          err++;
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c52:	e038      	b.n	8007cc6 <USBD_GetDescriptor+0x286>
 8007c54:	e037      	b.n	8007cc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	7c1b      	ldrb	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	f107 0208 	add.w	r2, r7, #8
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	4798      	blx	r3
 8007c6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c70:	e029      	b.n	8007cc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f9f6 	bl	8008066 <USBD_CtlError>
        err++;
 8007c7a:	7afb      	ldrb	r3, [r7, #11]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c80:	e021      	b.n	8007cc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	7c1b      	ldrb	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10d      	bne.n	8007ca6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	f107 0208 	add.w	r2, r7, #8
 8007c96:	4610      	mov	r0, r2
 8007c98:	4798      	blx	r3
 8007c9a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	2207      	movs	r2, #7
 8007ca2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ca4:	e00f      	b.n	8007cc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f9dc 	bl	8008066 <USBD_CtlError>
        err++;
 8007cae:	7afb      	ldrb	r3, [r7, #11]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	72fb      	strb	r3, [r7, #11]
      break;
 8007cb4:	e007      	b.n	8007cc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f9d4 	bl	8008066 <USBD_CtlError>
      err++;
 8007cbe:	7afb      	ldrb	r3, [r7, #11]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	72fb      	strb	r3, [r7, #11]
      break;
 8007cc4:	bf00      	nop
  }

  if (err != 0U)
 8007cc6:	7afb      	ldrb	r3, [r7, #11]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d11c      	bne.n	8007d06 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ccc:	893b      	ldrh	r3, [r7, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d011      	beq.n	8007cf6 <USBD_GetDescriptor+0x2b6>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	88db      	ldrh	r3, [r3, #6]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00d      	beq.n	8007cf6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	88da      	ldrh	r2, [r3, #6]
 8007cde:	893b      	ldrh	r3, [r7, #8]
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	bf28      	it	cs
 8007ce4:	4613      	movcs	r3, r2
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cea:	893b      	ldrh	r3, [r7, #8]
 8007cec:	461a      	mov	r2, r3
 8007cee:	68f9      	ldr	r1, [r7, #12]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fa22 	bl	800813a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	88db      	ldrh	r3, [r3, #6]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d104      	bne.n	8007d08 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fa79 	bl	80081f6 <USBD_CtlSendStatus>
 8007d04:	e000      	b.n	8007d08 <USBD_GetDescriptor+0x2c8>
    return;
 8007d06:	bf00      	nop
    }
  }
}
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop

08007d10 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	889b      	ldrh	r3, [r3, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d130      	bne.n	8007d84 <USBD_SetAddress+0x74>
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	88db      	ldrh	r3, [r3, #6]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d12c      	bne.n	8007d84 <USBD_SetAddress+0x74>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	885b      	ldrh	r3, [r3, #2]
 8007d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d30:	d828      	bhi.n	8007d84 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	885b      	ldrh	r3, [r3, #2]
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d104      	bne.n	8007d52 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f98b 	bl	8008066 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d50:	e01d      	b.n	8007d8e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	7bfa      	ldrb	r2, [r7, #15]
 8007d56:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fe48 	bl	80089f4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fa46 	bl	80081f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d004      	beq.n	8007d7a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d78:	e009      	b.n	8007d8e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d82:	e004      	b.n	8007d8e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f96d 	bl	8008066 <USBD_CtlError>
  }
}
 8007d8c:	bf00      	nop
 8007d8e:	bf00      	nop
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	885b      	ldrh	r3, [r3, #2]
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	4b41      	ldr	r3, [pc, #260]	; (8007eb0 <USBD_SetConfig+0x118>)
 8007daa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007dac:	4b40      	ldr	r3, [pc, #256]	; (8007eb0 <USBD_SetConfig+0x118>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d904      	bls.n	8007dbe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f955 	bl	8008066 <USBD_CtlError>
 8007dbc:	e075      	b.n	8007eaa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d002      	beq.n	8007dce <USBD_SetConfig+0x36>
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d023      	beq.n	8007e14 <USBD_SetConfig+0x7c>
 8007dcc:	e062      	b.n	8007e94 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007dce:	4b38      	ldr	r3, [pc, #224]	; (8007eb0 <USBD_SetConfig+0x118>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d01a      	beq.n	8007e0c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007dd6:	4b36      	ldr	r3, [pc, #216]	; (8007eb0 <USBD_SetConfig+0x118>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2203      	movs	r2, #3
 8007de4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007de8:	4b31      	ldr	r3, [pc, #196]	; (8007eb0 <USBD_SetConfig+0x118>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff f9e7 	bl	80071c2 <USBD_SetClassConfig>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d104      	bne.n	8007e04 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f932 	bl	8008066 <USBD_CtlError>
            return;
 8007e02:	e052      	b.n	8007eaa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f9f6 	bl	80081f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e0a:	e04e      	b.n	8007eaa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f9f2 	bl	80081f6 <USBD_CtlSendStatus>
        break;
 8007e12:	e04a      	b.n	8007eaa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007e14:	4b26      	ldr	r3, [pc, #152]	; (8007eb0 <USBD_SetConfig+0x118>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d112      	bne.n	8007e42 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007e24:	4b22      	ldr	r3, [pc, #136]	; (8007eb0 <USBD_SetConfig+0x118>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007e2e:	4b20      	ldr	r3, [pc, #128]	; (8007eb0 <USBD_SetConfig+0x118>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff f9e3 	bl	8007200 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f9db 	bl	80081f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e40:	e033      	b.n	8007eaa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e42:	4b1b      	ldr	r3, [pc, #108]	; (8007eb0 <USBD_SetConfig+0x118>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d01d      	beq.n	8007e8c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7ff f9d1 	bl	8007200 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e5e:	4b14      	ldr	r3, [pc, #80]	; (8007eb0 <USBD_SetConfig+0x118>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e68:	4b11      	ldr	r3, [pc, #68]	; (8007eb0 <USBD_SetConfig+0x118>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7ff f9a7 	bl	80071c2 <USBD_SetClassConfig>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d104      	bne.n	8007e84 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f8f2 	bl	8008066 <USBD_CtlError>
            return;
 8007e82:	e012      	b.n	8007eaa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f9b6 	bl	80081f6 <USBD_CtlSendStatus>
        break;
 8007e8a:	e00e      	b.n	8007eaa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f9b2 	bl	80081f6 <USBD_CtlSendStatus>
        break;
 8007e92:	e00a      	b.n	8007eaa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f8e5 	bl	8008066 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e9c:	4b04      	ldr	r3, [pc, #16]	; (8007eb0 <USBD_SetConfig+0x118>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff f9ac 	bl	8007200 <USBD_ClrClassConfig>
        break;
 8007ea8:	bf00      	nop
    }
  }
}
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	2000027c 	.word	0x2000027c

08007eb4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	88db      	ldrh	r3, [r3, #6]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d004      	beq.n	8007ed0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f8cc 	bl	8008066 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ece:	e022      	b.n	8007f16 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	dc02      	bgt.n	8007ee0 <USBD_GetConfig+0x2c>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	dc03      	bgt.n	8007ee6 <USBD_GetConfig+0x32>
 8007ede:	e015      	b.n	8007f0c <USBD_GetConfig+0x58>
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d00b      	beq.n	8007efc <USBD_GetConfig+0x48>
 8007ee4:	e012      	b.n	8007f0c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f920 	bl	800813a <USBD_CtlSendData>
        break;
 8007efa:	e00c      	b.n	8007f16 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3304      	adds	r3, #4
 8007f00:	2201      	movs	r2, #1
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f918 	bl	800813a <USBD_CtlSendData>
        break;
 8007f0a:	e004      	b.n	8007f16 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f8a9 	bl	8008066 <USBD_CtlError>
        break;
 8007f14:	bf00      	nop
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d81e      	bhi.n	8007f72 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	88db      	ldrh	r3, [r3, #6]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d004      	beq.n	8007f46 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f891 	bl	8008066 <USBD_CtlError>
        break;
 8007f44:	e01a      	b.n	8007f7c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f043 0202 	orr.w	r2, r3, #2
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	330c      	adds	r3, #12
 8007f66:	2202      	movs	r2, #2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f8e5 	bl	800813a <USBD_CtlSendData>
      break;
 8007f70:	e004      	b.n	8007f7c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f876 	bl	8008066 <USBD_CtlError>
      break;
 8007f7a:	bf00      	nop
  }
}
 8007f7c:	bf00      	nop
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	885b      	ldrh	r3, [r3, #2]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d106      	bne.n	8007fa4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f929 	bl	80081f6 <USBD_CtlSendStatus>
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d80b      	bhi.n	8007fda <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	885b      	ldrh	r3, [r3, #2]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d10c      	bne.n	8007fe4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f90f 	bl	80081f6 <USBD_CtlSendStatus>
      }
      break;
 8007fd8:	e004      	b.n	8007fe4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f842 	bl	8008066 <USBD_CtlError>
      break;
 8007fe2:	e000      	b.n	8007fe6 <USBD_ClrFeature+0x3a>
      break;
 8007fe4:	bf00      	nop
  }
}
 8007fe6:	bf00      	nop
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	785a      	ldrb	r2, [r3, #1]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	3302      	adds	r3, #2
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	b29a      	uxth	r2, r3
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	3303      	adds	r3, #3
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	b29b      	uxth	r3, r3
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	b29b      	uxth	r3, r3
 800801c:	4413      	add	r3, r2
 800801e:	b29a      	uxth	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	3304      	adds	r3, #4
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	b29a      	uxth	r2, r3
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	3305      	adds	r3, #5
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	021b      	lsls	r3, r3, #8
 8008036:	b29b      	uxth	r3, r3
 8008038:	4413      	add	r3, r2
 800803a:	b29a      	uxth	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	3306      	adds	r3, #6
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	b29a      	uxth	r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	3307      	adds	r3, #7
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	b29b      	uxth	r3, r3
 8008054:	4413      	add	r3, r2
 8008056:	b29a      	uxth	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	80da      	strh	r2, [r3, #6]

}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	bc80      	pop	{r7}
 8008064:	4770      	bx	lr

08008066 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b082      	sub	sp, #8
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008070:	2180      	movs	r1, #128	; 0x80
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fc54 	bl	8008920 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008078:	2100      	movs	r1, #0
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fc50 	bl	8008920 <USBD_LL_StallEP>
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d032      	beq.n	8008104 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 f834 	bl	800810c <USBD_GetLen>
 80080a4:	4603      	mov	r3, r0
 80080a6:	3301      	adds	r3, #1
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
 80080b4:	1c5a      	adds	r2, r3, #1
 80080b6:	75fa      	strb	r2, [r7, #23]
 80080b8:	461a      	mov	r2, r3
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	4413      	add	r3, r2
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	7812      	ldrb	r2, [r2, #0]
 80080c2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	1c5a      	adds	r2, r3, #1
 80080c8:	75fa      	strb	r2, [r7, #23]
 80080ca:	461a      	mov	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4413      	add	r3, r2
 80080d0:	2203      	movs	r2, #3
 80080d2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80080d4:	e012      	b.n	80080fc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	60fa      	str	r2, [r7, #12]
 80080dc:	7dfa      	ldrb	r2, [r7, #23]
 80080de:	1c51      	adds	r1, r2, #1
 80080e0:	75f9      	strb	r1, [r7, #23]
 80080e2:	4611      	mov	r1, r2
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	440a      	add	r2, r1
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	75fa      	strb	r2, [r7, #23]
 80080f2:	461a      	mov	r2, r3
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4413      	add	r3, r2
 80080f8:	2200      	movs	r2, #0
 80080fa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e8      	bne.n	80080d6 <USBD_GetString+0x4e>
    }
  }
}
 8008104:	bf00      	nop
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008118:	e005      	b.n	8008126 <USBD_GetLen+0x1a>
  {
    len++;
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	3301      	adds	r3, #1
 800811e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3301      	adds	r3, #1
 8008124:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1f5      	bne.n	800811a <USBD_GetLen+0xe>
  }

  return len;
 800812e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	bc80      	pop	{r7}
 8008138:	4770      	bx	lr

0800813a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	4613      	mov	r3, r2
 8008146:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2202      	movs	r2, #2
 800814c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008150:	88fa      	ldrh	r2, [r7, #6]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008156:	88fa      	ldrh	r2, [r7, #6]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800815c:	88fb      	ldrh	r3, [r7, #6]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	2100      	movs	r1, #0
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 fc65 	bl	8008a32 <USBD_LL_Transmit>

  return USBD_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	4613      	mov	r3, r2
 800817e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008180:	88fb      	ldrh	r3, [r7, #6]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	2100      	movs	r1, #0
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fc53 	bl	8008a32 <USBD_LL_Transmit>

  return USBD_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	4613      	mov	r3, r2
 80081a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2203      	movs	r2, #3
 80081a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80081ac:	88fa      	ldrh	r2, [r7, #6]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80081b4:	88fa      	ldrh	r2, [r7, #6]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	2100      	movs	r1, #0
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fc58 	bl	8008a78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	4613      	mov	r3, r2
 80081de:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081e0:	88fb      	ldrh	r3, [r7, #6]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	2100      	movs	r1, #0
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 fc46 	bl	8008a78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2204      	movs	r2, #4
 8008202:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008206:	2300      	movs	r3, #0
 8008208:	2200      	movs	r2, #0
 800820a:	2100      	movs	r1, #0
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fc10 	bl	8008a32 <USBD_LL_Transmit>

  return USBD_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2205      	movs	r2, #5
 8008228:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800822c:	2300      	movs	r3, #0
 800822e:	2200      	movs	r2, #0
 8008230:	2100      	movs	r1, #0
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fc20 	bl	8008a78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008248:	2200      	movs	r2, #0
 800824a:	4912      	ldr	r1, [pc, #72]	; (8008294 <MX_USB_DEVICE_Init+0x50>)
 800824c:	4812      	ldr	r0, [pc, #72]	; (8008298 <MX_USB_DEVICE_Init+0x54>)
 800824e:	f7fe ff5e 	bl	800710e <USBD_Init>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008258:	f7f8 fa76 	bl	8000748 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800825c:	490f      	ldr	r1, [pc, #60]	; (800829c <MX_USB_DEVICE_Init+0x58>)
 800825e:	480e      	ldr	r0, [pc, #56]	; (8008298 <MX_USB_DEVICE_Init+0x54>)
 8008260:	f7fe ff80 	bl	8007164 <USBD_RegisterClass>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800826a:	f7f8 fa6d 	bl	8000748 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800826e:	490c      	ldr	r1, [pc, #48]	; (80082a0 <MX_USB_DEVICE_Init+0x5c>)
 8008270:	4809      	ldr	r0, [pc, #36]	; (8008298 <MX_USB_DEVICE_Init+0x54>)
 8008272:	f7fe feb1 	bl	8006fd8 <USBD_CDC_RegisterInterface>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800827c:	f7f8 fa64 	bl	8000748 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008280:	4805      	ldr	r0, [pc, #20]	; (8008298 <MX_USB_DEVICE_Init+0x54>)
 8008282:	f7fe ff88 	bl	8007196 <USBD_Start>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800828c:	f7f8 fa5c 	bl	8000748 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008290:	bf00      	nop
 8008292:	bd80      	pop	{r7, pc}
 8008294:	2000012c 	.word	0x2000012c
 8008298:	20000280 	.word	0x20000280
 800829c:	20000018 	.word	0x20000018
 80082a0:	2000011c 	.word	0x2000011c

080082a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082a8:	2200      	movs	r2, #0
 80082aa:	4905      	ldr	r1, [pc, #20]	; (80082c0 <CDC_Init_FS+0x1c>)
 80082ac:	4805      	ldr	r0, [pc, #20]	; (80082c4 <CDC_Init_FS+0x20>)
 80082ae:	f7fe fea9 	bl	8007004 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082b2:	4905      	ldr	r1, [pc, #20]	; (80082c8 <CDC_Init_FS+0x24>)
 80082b4:	4803      	ldr	r0, [pc, #12]	; (80082c4 <CDC_Init_FS+0x20>)
 80082b6:	f7fe febe 	bl	8007036 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80082ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082bc:	4618      	mov	r0, r3
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	2000092c 	.word	0x2000092c
 80082c4:	20000280 	.word	0x20000280
 80082c8:	20000544 	.word	0x20000544

080082cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bc80      	pop	{r7}
 80082d8:	4770      	bx	lr
	...

080082dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	6039      	str	r1, [r7, #0]
 80082e6:	71fb      	strb	r3, [r7, #7]
 80082e8:	4613      	mov	r3, r2
 80082ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	2b23      	cmp	r3, #35	; 0x23
 80082f0:	d84a      	bhi.n	8008388 <CDC_Control_FS+0xac>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <CDC_Control_FS+0x1c>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008389 	.word	0x08008389
 80082fc:	08008389 	.word	0x08008389
 8008300:	08008389 	.word	0x08008389
 8008304:	08008389 	.word	0x08008389
 8008308:	08008389 	.word	0x08008389
 800830c:	08008389 	.word	0x08008389
 8008310:	08008389 	.word	0x08008389
 8008314:	08008389 	.word	0x08008389
 8008318:	08008389 	.word	0x08008389
 800831c:	08008389 	.word	0x08008389
 8008320:	08008389 	.word	0x08008389
 8008324:	08008389 	.word	0x08008389
 8008328:	08008389 	.word	0x08008389
 800832c:	08008389 	.word	0x08008389
 8008330:	08008389 	.word	0x08008389
 8008334:	08008389 	.word	0x08008389
 8008338:	08008389 	.word	0x08008389
 800833c:	08008389 	.word	0x08008389
 8008340:	08008389 	.word	0x08008389
 8008344:	08008389 	.word	0x08008389
 8008348:	08008389 	.word	0x08008389
 800834c:	08008389 	.word	0x08008389
 8008350:	08008389 	.word	0x08008389
 8008354:	08008389 	.word	0x08008389
 8008358:	08008389 	.word	0x08008389
 800835c:	08008389 	.word	0x08008389
 8008360:	08008389 	.word	0x08008389
 8008364:	08008389 	.word	0x08008389
 8008368:	08008389 	.word	0x08008389
 800836c:	08008389 	.word	0x08008389
 8008370:	08008389 	.word	0x08008389
 8008374:	08008389 	.word	0x08008389
 8008378:	08008389 	.word	0x08008389
 800837c:	08008389 	.word	0x08008389
 8008380:	08008389 	.word	0x08008389
 8008384:	08008389 	.word	0x08008389
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008388:	bf00      	nop
  }

  return (USBD_OK);
 800838a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop

08008398 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	4805      	ldr	r0, [pc, #20]	; (80083bc <CDC_Receive_FS+0x24>)
 80083a6:	f7fe fe46 	bl	8007036 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083aa:	4804      	ldr	r0, [pc, #16]	; (80083bc <CDC_Receive_FS+0x24>)
 80083ac:	f7fe fe85 	bl	80070ba <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80083b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20000280 	.word	0x20000280

080083c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80083d0:	4b0d      	ldr	r3, [pc, #52]	; (8008408 <CDC_Transmit_FS+0x48>)
 80083d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e00b      	b.n	80083fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80083e6:	887b      	ldrh	r3, [r7, #2]
 80083e8:	461a      	mov	r2, r3
 80083ea:	6879      	ldr	r1, [r7, #4]
 80083ec:	4806      	ldr	r0, [pc, #24]	; (8008408 <CDC_Transmit_FS+0x48>)
 80083ee:	f7fe fe09 	bl	8007004 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80083f2:	4805      	ldr	r0, [pc, #20]	; (8008408 <CDC_Transmit_FS+0x48>)
 80083f4:	f7fe fe32 	bl	800705c <USBD_CDC_TransmitPacket>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000280 	.word	0x20000280

0800840c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2212      	movs	r2, #18
 800841c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800841e:	4b03      	ldr	r3, [pc, #12]	; (800842c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008420:	4618      	mov	r0, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	bc80      	pop	{r7}
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	20000148 	.word	0x20000148

08008430 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	6039      	str	r1, [r7, #0]
 800843a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2204      	movs	r2, #4
 8008440:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008442:	4b03      	ldr	r3, [pc, #12]	; (8008450 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008444:	4618      	mov	r0, r3
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	2000015c 	.word	0x2000015c

08008454 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	6039      	str	r1, [r7, #0]
 800845e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d105      	bne.n	8008472 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	4907      	ldr	r1, [pc, #28]	; (8008488 <USBD_FS_ProductStrDescriptor+0x34>)
 800846a:	4808      	ldr	r0, [pc, #32]	; (800848c <USBD_FS_ProductStrDescriptor+0x38>)
 800846c:	f7ff fe0c 	bl	8008088 <USBD_GetString>
 8008470:	e004      	b.n	800847c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	4904      	ldr	r1, [pc, #16]	; (8008488 <USBD_FS_ProductStrDescriptor+0x34>)
 8008476:	4805      	ldr	r0, [pc, #20]	; (800848c <USBD_FS_ProductStrDescriptor+0x38>)
 8008478:	f7ff fe06 	bl	8008088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800847c:	4b02      	ldr	r3, [pc, #8]	; (8008488 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000d14 	.word	0x20000d14
 800848c:	08009f7c 	.word	0x08009f7c

08008490 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	6039      	str	r1, [r7, #0]
 800849a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	4904      	ldr	r1, [pc, #16]	; (80084b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084a0:	4804      	ldr	r0, [pc, #16]	; (80084b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084a2:	f7ff fdf1 	bl	8008088 <USBD_GetString>
  return USBD_StrDesc;
 80084a6:	4b02      	ldr	r3, [pc, #8]	; (80084b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000d14 	.word	0x20000d14
 80084b4:	08009f94 	.word	0x08009f94

080084b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	221a      	movs	r2, #26
 80084c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084ca:	f000 f843 	bl	8008554 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084ce:	4b02      	ldr	r3, [pc, #8]	; (80084d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	20000160 	.word	0x20000160

080084dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	6039      	str	r1, [r7, #0]
 80084e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d105      	bne.n	80084fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	4907      	ldr	r1, [pc, #28]	; (8008510 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084f2:	4808      	ldr	r0, [pc, #32]	; (8008514 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084f4:	f7ff fdc8 	bl	8008088 <USBD_GetString>
 80084f8:	e004      	b.n	8008504 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	4904      	ldr	r1, [pc, #16]	; (8008510 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084fe:	4805      	ldr	r0, [pc, #20]	; (8008514 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008500:	f7ff fdc2 	bl	8008088 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008504:	4b02      	ldr	r3, [pc, #8]	; (8008510 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000d14 	.word	0x20000d14
 8008514:	08009fa8 	.word	0x08009fa8

08008518 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	4603      	mov	r3, r0
 8008520:	6039      	str	r1, [r7, #0]
 8008522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d105      	bne.n	8008536 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	4907      	ldr	r1, [pc, #28]	; (800854c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800852e:	4808      	ldr	r0, [pc, #32]	; (8008550 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008530:	f7ff fdaa 	bl	8008088 <USBD_GetString>
 8008534:	e004      	b.n	8008540 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	4904      	ldr	r1, [pc, #16]	; (800854c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800853a:	4805      	ldr	r0, [pc, #20]	; (8008550 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800853c:	f7ff fda4 	bl	8008088 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008540:	4b02      	ldr	r3, [pc, #8]	; (800854c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20000d14 	.word	0x20000d14
 8008550:	08009fb4 	.word	0x08009fb4

08008554 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800855a:	4b0f      	ldr	r3, [pc, #60]	; (8008598 <Get_SerialNum+0x44>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008560:	4b0e      	ldr	r3, [pc, #56]	; (800859c <Get_SerialNum+0x48>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008566:	4b0e      	ldr	r3, [pc, #56]	; (80085a0 <Get_SerialNum+0x4c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4413      	add	r3, r2
 8008572:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d009      	beq.n	800858e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800857a:	2208      	movs	r2, #8
 800857c:	4909      	ldr	r1, [pc, #36]	; (80085a4 <Get_SerialNum+0x50>)
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 f814 	bl	80085ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008584:	2204      	movs	r2, #4
 8008586:	4908      	ldr	r1, [pc, #32]	; (80085a8 <Get_SerialNum+0x54>)
 8008588:	68b8      	ldr	r0, [r7, #8]
 800858a:	f000 f80f 	bl	80085ac <IntToUnicode>
  }
}
 800858e:	bf00      	nop
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	1ffff7e8 	.word	0x1ffff7e8
 800859c:	1ffff7ec 	.word	0x1ffff7ec
 80085a0:	1ffff7f0 	.word	0x1ffff7f0
 80085a4:	20000162 	.word	0x20000162
 80085a8:	20000172 	.word	0x20000172

080085ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	4613      	mov	r3, r2
 80085b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085be:	2300      	movs	r3, #0
 80085c0:	75fb      	strb	r3, [r7, #23]
 80085c2:	e027      	b.n	8008614 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	0f1b      	lsrs	r3, r3, #28
 80085c8:	2b09      	cmp	r3, #9
 80085ca:	d80b      	bhi.n	80085e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	0f1b      	lsrs	r3, r3, #28
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	4619      	mov	r1, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	440b      	add	r3, r1
 80085dc:	3230      	adds	r2, #48	; 0x30
 80085de:	b2d2      	uxtb	r2, r2
 80085e0:	701a      	strb	r2, [r3, #0]
 80085e2:	e00a      	b.n	80085fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	0f1b      	lsrs	r3, r3, #28
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	005b      	lsls	r3, r3, #1
 80085ee:	4619      	mov	r1, r3
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	440b      	add	r3, r1
 80085f4:	3237      	adds	r2, #55	; 0x37
 80085f6:	b2d2      	uxtb	r2, r2
 80085f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	011b      	lsls	r3, r3, #4
 80085fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	3301      	adds	r3, #1
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	4413      	add	r3, r2
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	3301      	adds	r3, #1
 8008612:	75fb      	strb	r3, [r7, #23]
 8008614:	7dfa      	ldrb	r2, [r7, #23]
 8008616:	79fb      	ldrb	r3, [r7, #7]
 8008618:	429a      	cmp	r2, r3
 800861a:	d3d3      	bcc.n	80085c4 <IntToUnicode+0x18>
  }
}
 800861c:	bf00      	nop
 800861e:	bf00      	nop
 8008620:	371c      	adds	r7, #28
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr

08008628 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a0d      	ldr	r2, [pc, #52]	; (800866c <HAL_PCD_MspInit+0x44>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d113      	bne.n	8008662 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800863a:	4b0d      	ldr	r3, [pc, #52]	; (8008670 <HAL_PCD_MspInit+0x48>)
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	4a0c      	ldr	r2, [pc, #48]	; (8008670 <HAL_PCD_MspInit+0x48>)
 8008640:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008644:	61d3      	str	r3, [r2, #28]
 8008646:	4b0a      	ldr	r3, [pc, #40]	; (8008670 <HAL_PCD_MspInit+0x48>)
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008652:	2200      	movs	r2, #0
 8008654:	2100      	movs	r1, #0
 8008656:	2014      	movs	r0, #20
 8008658:	f7f8 fb81 	bl	8000d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800865c:	2014      	movs	r0, #20
 800865e:	f7f8 fb9a 	bl	8000d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	40005c00 	.word	0x40005c00
 8008670:	40021000 	.word	0x40021000

08008674 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008688:	4619      	mov	r1, r3
 800868a:	4610      	mov	r0, r2
 800868c:	f7fe fdcb 	bl	8007226 <USBD_LL_SetupStage>
}
 8008690:	bf00      	nop
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	6879      	ldr	r1, [r7, #4]
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	00db      	lsls	r3, r3, #3
 80086b6:	440b      	add	r3, r1
 80086b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	4619      	mov	r1, r3
 80086c2:	f7fe fdfd 	bl	80072c0 <USBD_LL_DataOutStage>
}
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b082      	sub	sp, #8
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80086e0:	78fa      	ldrb	r2, [r7, #3]
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	440b      	add	r3, r1
 80086ee:	333c      	adds	r3, #60	; 0x3c
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	4619      	mov	r1, r3
 80086f6:	f7fe fe54 	bl	80073a2 <USBD_LL_DataInStage>
}
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe ff64 	bl	80075de <USBD_LL_SOF>
}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008726:	2301      	movs	r3, #1
 8008728:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d001      	beq.n	8008736 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008732:	f7f8 f809 	bl	8000748 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800873c:	7bfa      	ldrb	r2, [r7, #15]
 800873e:	4611      	mov	r1, r2
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe ff14 	bl	800756e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe fecd 	bl	80074ec <USBD_LL_Reset>
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800876a:	4618      	mov	r0, r3
 800876c:	f7fe ff0e 	bl	800758c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008778:	4b04      	ldr	r3, [pc, #16]	; (800878c <HAL_PCD_SuspendCallback+0x30>)
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	4a03      	ldr	r2, [pc, #12]	; (800878c <HAL_PCD_SuspendCallback+0x30>)
 800877e:	f043 0306 	orr.w	r3, r3, #6
 8008782:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	e000ed00 	.word	0xe000ed00

08008790 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe ff08 	bl	80075b4 <USBD_LL_Resume>
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80087b4:	4a28      	ldr	r2, [pc, #160]	; (8008858 <USBD_LL_Init+0xac>)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a26      	ldr	r2, [pc, #152]	; (8008858 <USBD_LL_Init+0xac>)
 80087c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80087c4:	4b24      	ldr	r3, [pc, #144]	; (8008858 <USBD_LL_Init+0xac>)
 80087c6:	4a25      	ldr	r2, [pc, #148]	; (800885c <USBD_LL_Init+0xb0>)
 80087c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087ca:	4b23      	ldr	r3, [pc, #140]	; (8008858 <USBD_LL_Init+0xac>)
 80087cc:	2208      	movs	r2, #8
 80087ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087d0:	4b21      	ldr	r3, [pc, #132]	; (8008858 <USBD_LL_Init+0xac>)
 80087d2:	2202      	movs	r2, #2
 80087d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087d6:	4b20      	ldr	r3, [pc, #128]	; (8008858 <USBD_LL_Init+0xac>)
 80087d8:	2200      	movs	r2, #0
 80087da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80087dc:	4b1e      	ldr	r3, [pc, #120]	; (8008858 <USBD_LL_Init+0xac>)
 80087de:	2200      	movs	r2, #0
 80087e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087e2:	4b1d      	ldr	r3, [pc, #116]	; (8008858 <USBD_LL_Init+0xac>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087e8:	481b      	ldr	r0, [pc, #108]	; (8008858 <USBD_LL_Init+0xac>)
 80087ea:	f7f8 fd3d 	bl	8001268 <HAL_PCD_Init>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087f4:	f7f7 ffa8 	bl	8000748 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087fe:	2318      	movs	r3, #24
 8008800:	2200      	movs	r2, #0
 8008802:	2100      	movs	r1, #0
 8008804:	f7fa fa5c 	bl	8002cc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800880e:	2358      	movs	r3, #88	; 0x58
 8008810:	2200      	movs	r2, #0
 8008812:	2180      	movs	r1, #128	; 0x80
 8008814:	f7fa fa54 	bl	8002cc0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800881e:	23c0      	movs	r3, #192	; 0xc0
 8008820:	2200      	movs	r2, #0
 8008822:	2181      	movs	r1, #129	; 0x81
 8008824:	f7fa fa4c 	bl	8002cc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800882e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008832:	2200      	movs	r2, #0
 8008834:	2101      	movs	r1, #1
 8008836:	f7fa fa43 	bl	8002cc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008844:	2200      	movs	r2, #0
 8008846:	2182      	movs	r1, #130	; 0x82
 8008848:	f7fa fa3a 	bl	8002cc0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	20000f14 	.word	0x20000f14
 800885c:	40005c00 	.word	0x40005c00

08008860 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008876:	4618      	mov	r0, r3
 8008878:	f7f8 fdf5 	bl	8001466 <HAL_PCD_Start>
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	4618      	mov	r0, r3
 8008884:	f000 f94e 	bl	8008b24 <USBD_Get_USB_Status>
 8008888:	4603      	mov	r3, r0
 800888a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800888c:	7bbb      	ldrb	r3, [r7, #14]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	4608      	mov	r0, r1
 80088a0:	4611      	mov	r1, r2
 80088a2:	461a      	mov	r2, r3
 80088a4:	4603      	mov	r3, r0
 80088a6:	70fb      	strb	r3, [r7, #3]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70bb      	strb	r3, [r7, #2]
 80088ac:	4613      	mov	r3, r2
 80088ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088be:	78bb      	ldrb	r3, [r7, #2]
 80088c0:	883a      	ldrh	r2, [r7, #0]
 80088c2:	78f9      	ldrb	r1, [r7, #3]
 80088c4:	f7f8 ff4a 	bl	800175c <HAL_PCD_EP_Open>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f928 	bl	8008b24 <USBD_Get_USB_Status>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f7f8 ff88 	bl	8001816 <HAL_PCD_EP_Close>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f909 	bl	8008b24 <USBD_Get_USB_Status>
 8008912:	4603      	mov	r3, r0
 8008914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008916:	7bbb      	ldrb	r3, [r7, #14]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800893a:	78fa      	ldrb	r2, [r7, #3]
 800893c:	4611      	mov	r1, r2
 800893e:	4618      	mov	r0, r3
 8008940:	f7f9 f830 	bl	80019a4 <HAL_PCD_EP_SetStall>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	4618      	mov	r0, r3
 800894c:	f000 f8ea 	bl	8008b24 <USBD_Get_USB_Status>
 8008950:	4603      	mov	r3, r0
 8008952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008954:	7bbb      	ldrb	r3, [r7, #14]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	4611      	mov	r1, r2
 800897c:	4618      	mov	r0, r3
 800897e:	f7f9 f871 	bl	8001a64 <HAL_PCD_EP_ClrStall>
 8008982:	4603      	mov	r3, r0
 8008984:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 f8cb 	bl	8008b24 <USBD_Get_USB_Status>
 800898e:	4603      	mov	r3, r0
 8008990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008992:	7bbb      	ldrb	r3, [r7, #14]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da0c      	bge.n	80089d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089be:	68f9      	ldr	r1, [r7, #12]
 80089c0:	1c5a      	adds	r2, r3, #1
 80089c2:	4613      	mov	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	440b      	add	r3, r1
 80089cc:	3302      	adds	r3, #2
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	e00b      	b.n	80089ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089d8:	68f9      	ldr	r1, [r7, #12]
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	440b      	add	r3, r1
 80089e4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80089e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bc80      	pop	{r7}
 80089f2:	4770      	bx	lr

080089f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a0e:	78fa      	ldrb	r2, [r7, #3]
 8008a10:	4611      	mov	r1, r2
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7f8 fe7d 	bl	8001712 <HAL_PCD_SetAddress>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f880 	bl	8008b24 <USBD_Get_USB_Status>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b086      	sub	sp, #24
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	607a      	str	r2, [r7, #4]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	460b      	mov	r3, r1
 8008a40:	72fb      	strb	r3, [r7, #11]
 8008a42:	4613      	mov	r3, r2
 8008a44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a54:	893b      	ldrh	r3, [r7, #8]
 8008a56:	7af9      	ldrb	r1, [r7, #11]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	f7f8 ff6c 	bl	8001936 <HAL_PCD_EP_Transmit>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 f85d 	bl	8008b24 <USBD_Get_USB_Status>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	607a      	str	r2, [r7, #4]
 8008a82:	461a      	mov	r2, r3
 8008a84:	460b      	mov	r3, r1
 8008a86:	72fb      	strb	r3, [r7, #11]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a9a:	893b      	ldrh	r3, [r7, #8]
 8008a9c:	7af9      	ldrb	r1, [r7, #11]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	f7f8 ff01 	bl	80018a6 <HAL_PCD_EP_Receive>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f83a 	bl	8008b24 <USBD_Get_USB_Status>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ab4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ad0:	78fa      	ldrb	r2, [r7, #3]
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7f8 ff17 	bl	8001908 <HAL_PCD_EP_GetRxCount>
 8008ada:	4603      	mov	r3, r0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008aec:	4b02      	ldr	r3, [pc, #8]	; (8008af8 <USBD_static_malloc+0x14>)
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	370c      	adds	r7, #12
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bc80      	pop	{r7}
 8008af6:	4770      	bx	lr
 8008af8:	20001204 	.word	0x20001204

08008afc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]

}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bc80      	pop	{r7}
 8008b0c:	4770      	bx	lr

08008b0e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b083      	sub	sp, #12
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b1a:	bf00      	nop
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bc80      	pop	{r7}
 8008b22:	4770      	bx	lr

08008b24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	d817      	bhi.n	8008b68 <USBD_Get_USB_Status+0x44>
 8008b38:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <USBD_Get_USB_Status+0x1c>)
 8008b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3e:	bf00      	nop
 8008b40:	08008b51 	.word	0x08008b51
 8008b44:	08008b57 	.word	0x08008b57
 8008b48:	08008b5d 	.word	0x08008b5d
 8008b4c:	08008b63 	.word	0x08008b63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73fb      	strb	r3, [r7, #15]
    break;
 8008b54:	e00b      	b.n	8008b6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b56:	2302      	movs	r3, #2
 8008b58:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5a:	e008      	b.n	8008b6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b60:	e005      	b.n	8008b6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b62:	2302      	movs	r3, #2
 8008b64:	73fb      	strb	r3, [r7, #15]
    break;
 8008b66:	e002      	b.n	8008b6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b68:	2302      	movs	r3, #2
 8008b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b6c:	bf00      	nop
  }
  return usb_status;
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop

08008b7c <__errno>:
 8008b7c:	4b01      	ldr	r3, [pc, #4]	; (8008b84 <__errno+0x8>)
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	2000017c 	.word	0x2000017c

08008b88 <__libc_init_array>:
 8008b88:	b570      	push	{r4, r5, r6, lr}
 8008b8a:	2600      	movs	r6, #0
 8008b8c:	4d0c      	ldr	r5, [pc, #48]	; (8008bc0 <__libc_init_array+0x38>)
 8008b8e:	4c0d      	ldr	r4, [pc, #52]	; (8008bc4 <__libc_init_array+0x3c>)
 8008b90:	1b64      	subs	r4, r4, r5
 8008b92:	10a4      	asrs	r4, r4, #2
 8008b94:	42a6      	cmp	r6, r4
 8008b96:	d109      	bne.n	8008bac <__libc_init_array+0x24>
 8008b98:	f001 f9aa 	bl	8009ef0 <_init>
 8008b9c:	2600      	movs	r6, #0
 8008b9e:	4d0a      	ldr	r5, [pc, #40]	; (8008bc8 <__libc_init_array+0x40>)
 8008ba0:	4c0a      	ldr	r4, [pc, #40]	; (8008bcc <__libc_init_array+0x44>)
 8008ba2:	1b64      	subs	r4, r4, r5
 8008ba4:	10a4      	asrs	r4, r4, #2
 8008ba6:	42a6      	cmp	r6, r4
 8008ba8:	d105      	bne.n	8008bb6 <__libc_init_array+0x2e>
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bb0:	4798      	blx	r3
 8008bb2:	3601      	adds	r6, #1
 8008bb4:	e7ee      	b.n	8008b94 <__libc_init_array+0xc>
 8008bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bba:	4798      	blx	r3
 8008bbc:	3601      	adds	r6, #1
 8008bbe:	e7f2      	b.n	8008ba6 <__libc_init_array+0x1e>
 8008bc0:	0800a288 	.word	0x0800a288
 8008bc4:	0800a288 	.word	0x0800a288
 8008bc8:	0800a288 	.word	0x0800a288
 8008bcc:	0800a28c 	.word	0x0800a28c

08008bd0 <malloc>:
 8008bd0:	4b02      	ldr	r3, [pc, #8]	; (8008bdc <malloc+0xc>)
 8008bd2:	4601      	mov	r1, r0
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	f000 b87b 	b.w	8008cd0 <_malloc_r>
 8008bda:	bf00      	nop
 8008bdc:	2000017c 	.word	0x2000017c

08008be0 <free>:
 8008be0:	4b02      	ldr	r3, [pc, #8]	; (8008bec <free+0xc>)
 8008be2:	4601      	mov	r1, r0
 8008be4:	6818      	ldr	r0, [r3, #0]
 8008be6:	f000 b80b 	b.w	8008c00 <_free_r>
 8008bea:	bf00      	nop
 8008bec:	2000017c 	.word	0x2000017c

08008bf0 <memset>:
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	4402      	add	r2, r0
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d100      	bne.n	8008bfa <memset+0xa>
 8008bf8:	4770      	bx	lr
 8008bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8008bfe:	e7f9      	b.n	8008bf4 <memset+0x4>

08008c00 <_free_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4605      	mov	r5, r0
 8008c04:	2900      	cmp	r1, #0
 8008c06:	d040      	beq.n	8008c8a <_free_r+0x8a>
 8008c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c0c:	1f0c      	subs	r4, r1, #4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	bfb8      	it	lt
 8008c12:	18e4      	addlt	r4, r4, r3
 8008c14:	f000 fa18 	bl	8009048 <__malloc_lock>
 8008c18:	4a1c      	ldr	r2, [pc, #112]	; (8008c8c <_free_r+0x8c>)
 8008c1a:	6813      	ldr	r3, [r2, #0]
 8008c1c:	b933      	cbnz	r3, 8008c2c <_free_r+0x2c>
 8008c1e:	6063      	str	r3, [r4, #4]
 8008c20:	6014      	str	r4, [r2, #0]
 8008c22:	4628      	mov	r0, r5
 8008c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c28:	f000 ba14 	b.w	8009054 <__malloc_unlock>
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	d908      	bls.n	8008c42 <_free_r+0x42>
 8008c30:	6820      	ldr	r0, [r4, #0]
 8008c32:	1821      	adds	r1, r4, r0
 8008c34:	428b      	cmp	r3, r1
 8008c36:	bf01      	itttt	eq
 8008c38:	6819      	ldreq	r1, [r3, #0]
 8008c3a:	685b      	ldreq	r3, [r3, #4]
 8008c3c:	1809      	addeq	r1, r1, r0
 8008c3e:	6021      	streq	r1, [r4, #0]
 8008c40:	e7ed      	b.n	8008c1e <_free_r+0x1e>
 8008c42:	461a      	mov	r2, r3
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	b10b      	cbz	r3, 8008c4c <_free_r+0x4c>
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	d9fa      	bls.n	8008c42 <_free_r+0x42>
 8008c4c:	6811      	ldr	r1, [r2, #0]
 8008c4e:	1850      	adds	r0, r2, r1
 8008c50:	42a0      	cmp	r0, r4
 8008c52:	d10b      	bne.n	8008c6c <_free_r+0x6c>
 8008c54:	6820      	ldr	r0, [r4, #0]
 8008c56:	4401      	add	r1, r0
 8008c58:	1850      	adds	r0, r2, r1
 8008c5a:	4283      	cmp	r3, r0
 8008c5c:	6011      	str	r1, [r2, #0]
 8008c5e:	d1e0      	bne.n	8008c22 <_free_r+0x22>
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	4401      	add	r1, r0
 8008c66:	6011      	str	r1, [r2, #0]
 8008c68:	6053      	str	r3, [r2, #4]
 8008c6a:	e7da      	b.n	8008c22 <_free_r+0x22>
 8008c6c:	d902      	bls.n	8008c74 <_free_r+0x74>
 8008c6e:	230c      	movs	r3, #12
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	e7d6      	b.n	8008c22 <_free_r+0x22>
 8008c74:	6820      	ldr	r0, [r4, #0]
 8008c76:	1821      	adds	r1, r4, r0
 8008c78:	428b      	cmp	r3, r1
 8008c7a:	bf01      	itttt	eq
 8008c7c:	6819      	ldreq	r1, [r3, #0]
 8008c7e:	685b      	ldreq	r3, [r3, #4]
 8008c80:	1809      	addeq	r1, r1, r0
 8008c82:	6021      	streq	r1, [r4, #0]
 8008c84:	6063      	str	r3, [r4, #4]
 8008c86:	6054      	str	r4, [r2, #4]
 8008c88:	e7cb      	b.n	8008c22 <_free_r+0x22>
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	20001424 	.word	0x20001424

08008c90 <sbrk_aligned>:
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	4e0e      	ldr	r6, [pc, #56]	; (8008ccc <sbrk_aligned+0x3c>)
 8008c94:	460c      	mov	r4, r1
 8008c96:	6831      	ldr	r1, [r6, #0]
 8008c98:	4605      	mov	r5, r0
 8008c9a:	b911      	cbnz	r1, 8008ca2 <sbrk_aligned+0x12>
 8008c9c:	f000 f8a4 	bl	8008de8 <_sbrk_r>
 8008ca0:	6030      	str	r0, [r6, #0]
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f000 f89f 	bl	8008de8 <_sbrk_r>
 8008caa:	1c43      	adds	r3, r0, #1
 8008cac:	d00a      	beq.n	8008cc4 <sbrk_aligned+0x34>
 8008cae:	1cc4      	adds	r4, r0, #3
 8008cb0:	f024 0403 	bic.w	r4, r4, #3
 8008cb4:	42a0      	cmp	r0, r4
 8008cb6:	d007      	beq.n	8008cc8 <sbrk_aligned+0x38>
 8008cb8:	1a21      	subs	r1, r4, r0
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f000 f894 	bl	8008de8 <_sbrk_r>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d101      	bne.n	8008cc8 <sbrk_aligned+0x38>
 8008cc4:	f04f 34ff 	mov.w	r4, #4294967295
 8008cc8:	4620      	mov	r0, r4
 8008cca:	bd70      	pop	{r4, r5, r6, pc}
 8008ccc:	20001428 	.word	0x20001428

08008cd0 <_malloc_r>:
 8008cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd4:	1ccd      	adds	r5, r1, #3
 8008cd6:	f025 0503 	bic.w	r5, r5, #3
 8008cda:	3508      	adds	r5, #8
 8008cdc:	2d0c      	cmp	r5, #12
 8008cde:	bf38      	it	cc
 8008ce0:	250c      	movcc	r5, #12
 8008ce2:	2d00      	cmp	r5, #0
 8008ce4:	4607      	mov	r7, r0
 8008ce6:	db01      	blt.n	8008cec <_malloc_r+0x1c>
 8008ce8:	42a9      	cmp	r1, r5
 8008cea:	d905      	bls.n	8008cf8 <_malloc_r+0x28>
 8008cec:	230c      	movs	r3, #12
 8008cee:	2600      	movs	r6, #0
 8008cf0:	603b      	str	r3, [r7, #0]
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf8:	4e2e      	ldr	r6, [pc, #184]	; (8008db4 <_malloc_r+0xe4>)
 8008cfa:	f000 f9a5 	bl	8009048 <__malloc_lock>
 8008cfe:	6833      	ldr	r3, [r6, #0]
 8008d00:	461c      	mov	r4, r3
 8008d02:	bb34      	cbnz	r4, 8008d52 <_malloc_r+0x82>
 8008d04:	4629      	mov	r1, r5
 8008d06:	4638      	mov	r0, r7
 8008d08:	f7ff ffc2 	bl	8008c90 <sbrk_aligned>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	4604      	mov	r4, r0
 8008d10:	d14d      	bne.n	8008dae <_malloc_r+0xde>
 8008d12:	6834      	ldr	r4, [r6, #0]
 8008d14:	4626      	mov	r6, r4
 8008d16:	2e00      	cmp	r6, #0
 8008d18:	d140      	bne.n	8008d9c <_malloc_r+0xcc>
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4638      	mov	r0, r7
 8008d20:	eb04 0803 	add.w	r8, r4, r3
 8008d24:	f000 f860 	bl	8008de8 <_sbrk_r>
 8008d28:	4580      	cmp	r8, r0
 8008d2a:	d13a      	bne.n	8008da2 <_malloc_r+0xd2>
 8008d2c:	6821      	ldr	r1, [r4, #0]
 8008d2e:	3503      	adds	r5, #3
 8008d30:	1a6d      	subs	r5, r5, r1
 8008d32:	f025 0503 	bic.w	r5, r5, #3
 8008d36:	3508      	adds	r5, #8
 8008d38:	2d0c      	cmp	r5, #12
 8008d3a:	bf38      	it	cc
 8008d3c:	250c      	movcc	r5, #12
 8008d3e:	4638      	mov	r0, r7
 8008d40:	4629      	mov	r1, r5
 8008d42:	f7ff ffa5 	bl	8008c90 <sbrk_aligned>
 8008d46:	3001      	adds	r0, #1
 8008d48:	d02b      	beq.n	8008da2 <_malloc_r+0xd2>
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	442b      	add	r3, r5
 8008d4e:	6023      	str	r3, [r4, #0]
 8008d50:	e00e      	b.n	8008d70 <_malloc_r+0xa0>
 8008d52:	6822      	ldr	r2, [r4, #0]
 8008d54:	1b52      	subs	r2, r2, r5
 8008d56:	d41e      	bmi.n	8008d96 <_malloc_r+0xc6>
 8008d58:	2a0b      	cmp	r2, #11
 8008d5a:	d916      	bls.n	8008d8a <_malloc_r+0xba>
 8008d5c:	1961      	adds	r1, r4, r5
 8008d5e:	42a3      	cmp	r3, r4
 8008d60:	6025      	str	r5, [r4, #0]
 8008d62:	bf18      	it	ne
 8008d64:	6059      	strne	r1, [r3, #4]
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	bf08      	it	eq
 8008d6a:	6031      	streq	r1, [r6, #0]
 8008d6c:	5162      	str	r2, [r4, r5]
 8008d6e:	604b      	str	r3, [r1, #4]
 8008d70:	4638      	mov	r0, r7
 8008d72:	f104 060b 	add.w	r6, r4, #11
 8008d76:	f000 f96d 	bl	8009054 <__malloc_unlock>
 8008d7a:	f026 0607 	bic.w	r6, r6, #7
 8008d7e:	1d23      	adds	r3, r4, #4
 8008d80:	1af2      	subs	r2, r6, r3
 8008d82:	d0b6      	beq.n	8008cf2 <_malloc_r+0x22>
 8008d84:	1b9b      	subs	r3, r3, r6
 8008d86:	50a3      	str	r3, [r4, r2]
 8008d88:	e7b3      	b.n	8008cf2 <_malloc_r+0x22>
 8008d8a:	6862      	ldr	r2, [r4, #4]
 8008d8c:	42a3      	cmp	r3, r4
 8008d8e:	bf0c      	ite	eq
 8008d90:	6032      	streq	r2, [r6, #0]
 8008d92:	605a      	strne	r2, [r3, #4]
 8008d94:	e7ec      	b.n	8008d70 <_malloc_r+0xa0>
 8008d96:	4623      	mov	r3, r4
 8008d98:	6864      	ldr	r4, [r4, #4]
 8008d9a:	e7b2      	b.n	8008d02 <_malloc_r+0x32>
 8008d9c:	4634      	mov	r4, r6
 8008d9e:	6876      	ldr	r6, [r6, #4]
 8008da0:	e7b9      	b.n	8008d16 <_malloc_r+0x46>
 8008da2:	230c      	movs	r3, #12
 8008da4:	4638      	mov	r0, r7
 8008da6:	603b      	str	r3, [r7, #0]
 8008da8:	f000 f954 	bl	8009054 <__malloc_unlock>
 8008dac:	e7a1      	b.n	8008cf2 <_malloc_r+0x22>
 8008dae:	6025      	str	r5, [r4, #0]
 8008db0:	e7de      	b.n	8008d70 <_malloc_r+0xa0>
 8008db2:	bf00      	nop
 8008db4:	20001424 	.word	0x20001424

08008db8 <iprintf>:
 8008db8:	b40f      	push	{r0, r1, r2, r3}
 8008dba:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <iprintf+0x2c>)
 8008dbc:	b513      	push	{r0, r1, r4, lr}
 8008dbe:	681c      	ldr	r4, [r3, #0]
 8008dc0:	b124      	cbz	r4, 8008dcc <iprintf+0x14>
 8008dc2:	69a3      	ldr	r3, [r4, #24]
 8008dc4:	b913      	cbnz	r3, 8008dcc <iprintf+0x14>
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 f89e 	bl	8008f08 <__sinit>
 8008dcc:	ab05      	add	r3, sp, #20
 8008dce:	4620      	mov	r0, r4
 8008dd0:	9a04      	ldr	r2, [sp, #16]
 8008dd2:	68a1      	ldr	r1, [r4, #8]
 8008dd4:	9301      	str	r3, [sp, #4]
 8008dd6:	f000 fac7 	bl	8009368 <_vfiprintf_r>
 8008dda:	b002      	add	sp, #8
 8008ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de0:	b004      	add	sp, #16
 8008de2:	4770      	bx	lr
 8008de4:	2000017c 	.word	0x2000017c

08008de8 <_sbrk_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	2300      	movs	r3, #0
 8008dec:	4d05      	ldr	r5, [pc, #20]	; (8008e04 <_sbrk_r+0x1c>)
 8008dee:	4604      	mov	r4, r0
 8008df0:	4608      	mov	r0, r1
 8008df2:	602b      	str	r3, [r5, #0]
 8008df4:	f7f7 fdf4 	bl	80009e0 <_sbrk>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d102      	bne.n	8008e02 <_sbrk_r+0x1a>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	b103      	cbz	r3, 8008e02 <_sbrk_r+0x1a>
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	bd38      	pop	{r3, r4, r5, pc}
 8008e04:	20001430 	.word	0x20001430

08008e08 <siprintf>:
 8008e08:	b40e      	push	{r1, r2, r3}
 8008e0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e0e:	b500      	push	{lr}
 8008e10:	b09c      	sub	sp, #112	; 0x70
 8008e12:	ab1d      	add	r3, sp, #116	; 0x74
 8008e14:	9002      	str	r0, [sp, #8]
 8008e16:	9006      	str	r0, [sp, #24]
 8008e18:	9107      	str	r1, [sp, #28]
 8008e1a:	9104      	str	r1, [sp, #16]
 8008e1c:	4808      	ldr	r0, [pc, #32]	; (8008e40 <siprintf+0x38>)
 8008e1e:	4909      	ldr	r1, [pc, #36]	; (8008e44 <siprintf+0x3c>)
 8008e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e24:	9105      	str	r1, [sp, #20]
 8008e26:	6800      	ldr	r0, [r0, #0]
 8008e28:	a902      	add	r1, sp, #8
 8008e2a:	9301      	str	r3, [sp, #4]
 8008e2c:	f000 f974 	bl	8009118 <_svfiprintf_r>
 8008e30:	2200      	movs	r2, #0
 8008e32:	9b02      	ldr	r3, [sp, #8]
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	b01c      	add	sp, #112	; 0x70
 8008e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e3c:	b003      	add	sp, #12
 8008e3e:	4770      	bx	lr
 8008e40:	2000017c 	.word	0x2000017c
 8008e44:	ffff0208 	.word	0xffff0208

08008e48 <strcpy>:
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e4e:	f803 2b01 	strb.w	r2, [r3], #1
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	d1f9      	bne.n	8008e4a <strcpy+0x2>
 8008e56:	4770      	bx	lr

08008e58 <std>:
 8008e58:	2300      	movs	r3, #0
 8008e5a:	b510      	push	{r4, lr}
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e66:	6083      	str	r3, [r0, #8]
 8008e68:	8181      	strh	r1, [r0, #12]
 8008e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8008e6c:	81c2      	strh	r2, [r0, #14]
 8008e6e:	6183      	str	r3, [r0, #24]
 8008e70:	4619      	mov	r1, r3
 8008e72:	2208      	movs	r2, #8
 8008e74:	305c      	adds	r0, #92	; 0x5c
 8008e76:	f7ff febb 	bl	8008bf0 <memset>
 8008e7a:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <std+0x38>)
 8008e7c:	6224      	str	r4, [r4, #32]
 8008e7e:	6263      	str	r3, [r4, #36]	; 0x24
 8008e80:	4b04      	ldr	r3, [pc, #16]	; (8008e94 <std+0x3c>)
 8008e82:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e84:	4b04      	ldr	r3, [pc, #16]	; (8008e98 <std+0x40>)
 8008e86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e88:	4b04      	ldr	r3, [pc, #16]	; (8008e9c <std+0x44>)
 8008e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8008e8c:	bd10      	pop	{r4, pc}
 8008e8e:	bf00      	nop
 8008e90:	080098f5 	.word	0x080098f5
 8008e94:	08009917 	.word	0x08009917
 8008e98:	0800994f 	.word	0x0800994f
 8008e9c:	08009973 	.word	0x08009973

08008ea0 <_cleanup_r>:
 8008ea0:	4901      	ldr	r1, [pc, #4]	; (8008ea8 <_cleanup_r+0x8>)
 8008ea2:	f000 b8af 	b.w	8009004 <_fwalk_reent>
 8008ea6:	bf00      	nop
 8008ea8:	08009c45 	.word	0x08009c45

08008eac <__sfmoreglue>:
 8008eac:	2268      	movs	r2, #104	; 0x68
 8008eae:	b570      	push	{r4, r5, r6, lr}
 8008eb0:	1e4d      	subs	r5, r1, #1
 8008eb2:	4355      	muls	r5, r2
 8008eb4:	460e      	mov	r6, r1
 8008eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008eba:	f7ff ff09 	bl	8008cd0 <_malloc_r>
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	b140      	cbz	r0, 8008ed4 <__sfmoreglue+0x28>
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ec8:	300c      	adds	r0, #12
 8008eca:	60a0      	str	r0, [r4, #8]
 8008ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ed0:	f7ff fe8e 	bl	8008bf0 <memset>
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}

08008ed8 <__sfp_lock_acquire>:
 8008ed8:	4801      	ldr	r0, [pc, #4]	; (8008ee0 <__sfp_lock_acquire+0x8>)
 8008eda:	f000 b8b3 	b.w	8009044 <__retarget_lock_acquire_recursive>
 8008ede:	bf00      	nop
 8008ee0:	2000142d 	.word	0x2000142d

08008ee4 <__sfp_lock_release>:
 8008ee4:	4801      	ldr	r0, [pc, #4]	; (8008eec <__sfp_lock_release+0x8>)
 8008ee6:	f000 b8ae 	b.w	8009046 <__retarget_lock_release_recursive>
 8008eea:	bf00      	nop
 8008eec:	2000142d 	.word	0x2000142d

08008ef0 <__sinit_lock_acquire>:
 8008ef0:	4801      	ldr	r0, [pc, #4]	; (8008ef8 <__sinit_lock_acquire+0x8>)
 8008ef2:	f000 b8a7 	b.w	8009044 <__retarget_lock_acquire_recursive>
 8008ef6:	bf00      	nop
 8008ef8:	2000142e 	.word	0x2000142e

08008efc <__sinit_lock_release>:
 8008efc:	4801      	ldr	r0, [pc, #4]	; (8008f04 <__sinit_lock_release+0x8>)
 8008efe:	f000 b8a2 	b.w	8009046 <__retarget_lock_release_recursive>
 8008f02:	bf00      	nop
 8008f04:	2000142e 	.word	0x2000142e

08008f08 <__sinit>:
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	f7ff fff0 	bl	8008ef0 <__sinit_lock_acquire>
 8008f10:	69a3      	ldr	r3, [r4, #24]
 8008f12:	b11b      	cbz	r3, 8008f1c <__sinit+0x14>
 8008f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f18:	f7ff bff0 	b.w	8008efc <__sinit_lock_release>
 8008f1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f20:	6523      	str	r3, [r4, #80]	; 0x50
 8008f22:	4b13      	ldr	r3, [pc, #76]	; (8008f70 <__sinit+0x68>)
 8008f24:	4a13      	ldr	r2, [pc, #76]	; (8008f74 <__sinit+0x6c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	bf08      	it	eq
 8008f2e:	2301      	moveq	r3, #1
 8008f30:	4620      	mov	r0, r4
 8008f32:	bf08      	it	eq
 8008f34:	61a3      	streq	r3, [r4, #24]
 8008f36:	f000 f81f 	bl	8008f78 <__sfp>
 8008f3a:	6060      	str	r0, [r4, #4]
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 f81b 	bl	8008f78 <__sfp>
 8008f42:	60a0      	str	r0, [r4, #8]
 8008f44:	4620      	mov	r0, r4
 8008f46:	f000 f817 	bl	8008f78 <__sfp>
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2104      	movs	r1, #4
 8008f4e:	60e0      	str	r0, [r4, #12]
 8008f50:	6860      	ldr	r0, [r4, #4]
 8008f52:	f7ff ff81 	bl	8008e58 <std>
 8008f56:	2201      	movs	r2, #1
 8008f58:	2109      	movs	r1, #9
 8008f5a:	68a0      	ldr	r0, [r4, #8]
 8008f5c:	f7ff ff7c 	bl	8008e58 <std>
 8008f60:	2202      	movs	r2, #2
 8008f62:	2112      	movs	r1, #18
 8008f64:	68e0      	ldr	r0, [r4, #12]
 8008f66:	f7ff ff77 	bl	8008e58 <std>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	61a3      	str	r3, [r4, #24]
 8008f6e:	e7d1      	b.n	8008f14 <__sinit+0xc>
 8008f70:	0800a1f0 	.word	0x0800a1f0
 8008f74:	08008ea1 	.word	0x08008ea1

08008f78 <__sfp>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	4607      	mov	r7, r0
 8008f7c:	f7ff ffac 	bl	8008ed8 <__sfp_lock_acquire>
 8008f80:	4b1e      	ldr	r3, [pc, #120]	; (8008ffc <__sfp+0x84>)
 8008f82:	681e      	ldr	r6, [r3, #0]
 8008f84:	69b3      	ldr	r3, [r6, #24]
 8008f86:	b913      	cbnz	r3, 8008f8e <__sfp+0x16>
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7ff ffbd 	bl	8008f08 <__sinit>
 8008f8e:	3648      	adds	r6, #72	; 0x48
 8008f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	d503      	bpl.n	8008fa0 <__sfp+0x28>
 8008f98:	6833      	ldr	r3, [r6, #0]
 8008f9a:	b30b      	cbz	r3, 8008fe0 <__sfp+0x68>
 8008f9c:	6836      	ldr	r6, [r6, #0]
 8008f9e:	e7f7      	b.n	8008f90 <__sfp+0x18>
 8008fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fa4:	b9d5      	cbnz	r5, 8008fdc <__sfp+0x64>
 8008fa6:	4b16      	ldr	r3, [pc, #88]	; (8009000 <__sfp+0x88>)
 8008fa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fac:	60e3      	str	r3, [r4, #12]
 8008fae:	6665      	str	r5, [r4, #100]	; 0x64
 8008fb0:	f000 f847 	bl	8009042 <__retarget_lock_init_recursive>
 8008fb4:	f7ff ff96 	bl	8008ee4 <__sfp_lock_release>
 8008fb8:	2208      	movs	r2, #8
 8008fba:	4629      	mov	r1, r5
 8008fbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008fc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008fc4:	6025      	str	r5, [r4, #0]
 8008fc6:	61a5      	str	r5, [r4, #24]
 8008fc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008fcc:	f7ff fe10 	bl	8008bf0 <memset>
 8008fd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008fd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008fd8:	4620      	mov	r0, r4
 8008fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fdc:	3468      	adds	r4, #104	; 0x68
 8008fde:	e7d9      	b.n	8008f94 <__sfp+0x1c>
 8008fe0:	2104      	movs	r1, #4
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	f7ff ff62 	bl	8008eac <__sfmoreglue>
 8008fe8:	4604      	mov	r4, r0
 8008fea:	6030      	str	r0, [r6, #0]
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d1d5      	bne.n	8008f9c <__sfp+0x24>
 8008ff0:	f7ff ff78 	bl	8008ee4 <__sfp_lock_release>
 8008ff4:	230c      	movs	r3, #12
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	e7ee      	b.n	8008fd8 <__sfp+0x60>
 8008ffa:	bf00      	nop
 8008ffc:	0800a1f0 	.word	0x0800a1f0
 8009000:	ffff0001 	.word	0xffff0001

08009004 <_fwalk_reent>:
 8009004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009008:	4606      	mov	r6, r0
 800900a:	4688      	mov	r8, r1
 800900c:	2700      	movs	r7, #0
 800900e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009016:	f1b9 0901 	subs.w	r9, r9, #1
 800901a:	d505      	bpl.n	8009028 <_fwalk_reent+0x24>
 800901c:	6824      	ldr	r4, [r4, #0]
 800901e:	2c00      	cmp	r4, #0
 8009020:	d1f7      	bne.n	8009012 <_fwalk_reent+0xe>
 8009022:	4638      	mov	r0, r7
 8009024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009028:	89ab      	ldrh	r3, [r5, #12]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d907      	bls.n	800903e <_fwalk_reent+0x3a>
 800902e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009032:	3301      	adds	r3, #1
 8009034:	d003      	beq.n	800903e <_fwalk_reent+0x3a>
 8009036:	4629      	mov	r1, r5
 8009038:	4630      	mov	r0, r6
 800903a:	47c0      	blx	r8
 800903c:	4307      	orrs	r7, r0
 800903e:	3568      	adds	r5, #104	; 0x68
 8009040:	e7e9      	b.n	8009016 <_fwalk_reent+0x12>

08009042 <__retarget_lock_init_recursive>:
 8009042:	4770      	bx	lr

08009044 <__retarget_lock_acquire_recursive>:
 8009044:	4770      	bx	lr

08009046 <__retarget_lock_release_recursive>:
 8009046:	4770      	bx	lr

08009048 <__malloc_lock>:
 8009048:	4801      	ldr	r0, [pc, #4]	; (8009050 <__malloc_lock+0x8>)
 800904a:	f7ff bffb 	b.w	8009044 <__retarget_lock_acquire_recursive>
 800904e:	bf00      	nop
 8009050:	2000142c 	.word	0x2000142c

08009054 <__malloc_unlock>:
 8009054:	4801      	ldr	r0, [pc, #4]	; (800905c <__malloc_unlock+0x8>)
 8009056:	f7ff bff6 	b.w	8009046 <__retarget_lock_release_recursive>
 800905a:	bf00      	nop
 800905c:	2000142c 	.word	0x2000142c

08009060 <__ssputs_r>:
 8009060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009064:	688e      	ldr	r6, [r1, #8]
 8009066:	4682      	mov	sl, r0
 8009068:	429e      	cmp	r6, r3
 800906a:	460c      	mov	r4, r1
 800906c:	4690      	mov	r8, r2
 800906e:	461f      	mov	r7, r3
 8009070:	d838      	bhi.n	80090e4 <__ssputs_r+0x84>
 8009072:	898a      	ldrh	r2, [r1, #12]
 8009074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009078:	d032      	beq.n	80090e0 <__ssputs_r+0x80>
 800907a:	6825      	ldr	r5, [r4, #0]
 800907c:	6909      	ldr	r1, [r1, #16]
 800907e:	3301      	adds	r3, #1
 8009080:	eba5 0901 	sub.w	r9, r5, r1
 8009084:	6965      	ldr	r5, [r4, #20]
 8009086:	444b      	add	r3, r9
 8009088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800908c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009090:	106d      	asrs	r5, r5, #1
 8009092:	429d      	cmp	r5, r3
 8009094:	bf38      	it	cc
 8009096:	461d      	movcc	r5, r3
 8009098:	0553      	lsls	r3, r2, #21
 800909a:	d531      	bpl.n	8009100 <__ssputs_r+0xa0>
 800909c:	4629      	mov	r1, r5
 800909e:	f7ff fe17 	bl	8008cd0 <_malloc_r>
 80090a2:	4606      	mov	r6, r0
 80090a4:	b950      	cbnz	r0, 80090bc <__ssputs_r+0x5c>
 80090a6:	230c      	movs	r3, #12
 80090a8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ac:	f8ca 3000 	str.w	r3, [sl]
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090bc:	464a      	mov	r2, r9
 80090be:	6921      	ldr	r1, [r4, #16]
 80090c0:	f000 fe82 	bl	8009dc8 <memcpy>
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ce:	81a3      	strh	r3, [r4, #12]
 80090d0:	6126      	str	r6, [r4, #16]
 80090d2:	444e      	add	r6, r9
 80090d4:	6026      	str	r6, [r4, #0]
 80090d6:	463e      	mov	r6, r7
 80090d8:	6165      	str	r5, [r4, #20]
 80090da:	eba5 0509 	sub.w	r5, r5, r9
 80090de:	60a5      	str	r5, [r4, #8]
 80090e0:	42be      	cmp	r6, r7
 80090e2:	d900      	bls.n	80090e6 <__ssputs_r+0x86>
 80090e4:	463e      	mov	r6, r7
 80090e6:	4632      	mov	r2, r6
 80090e8:	4641      	mov	r1, r8
 80090ea:	6820      	ldr	r0, [r4, #0]
 80090ec:	f000 fe7a 	bl	8009de4 <memmove>
 80090f0:	68a3      	ldr	r3, [r4, #8]
 80090f2:	2000      	movs	r0, #0
 80090f4:	1b9b      	subs	r3, r3, r6
 80090f6:	60a3      	str	r3, [r4, #8]
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	4433      	add	r3, r6
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	e7db      	b.n	80090b8 <__ssputs_r+0x58>
 8009100:	462a      	mov	r2, r5
 8009102:	f000 fe89 	bl	8009e18 <_realloc_r>
 8009106:	4606      	mov	r6, r0
 8009108:	2800      	cmp	r0, #0
 800910a:	d1e1      	bne.n	80090d0 <__ssputs_r+0x70>
 800910c:	4650      	mov	r0, sl
 800910e:	6921      	ldr	r1, [r4, #16]
 8009110:	f7ff fd76 	bl	8008c00 <_free_r>
 8009114:	e7c7      	b.n	80090a6 <__ssputs_r+0x46>
	...

08009118 <_svfiprintf_r>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	4698      	mov	r8, r3
 800911e:	898b      	ldrh	r3, [r1, #12]
 8009120:	4607      	mov	r7, r0
 8009122:	061b      	lsls	r3, r3, #24
 8009124:	460d      	mov	r5, r1
 8009126:	4614      	mov	r4, r2
 8009128:	b09d      	sub	sp, #116	; 0x74
 800912a:	d50e      	bpl.n	800914a <_svfiprintf_r+0x32>
 800912c:	690b      	ldr	r3, [r1, #16]
 800912e:	b963      	cbnz	r3, 800914a <_svfiprintf_r+0x32>
 8009130:	2140      	movs	r1, #64	; 0x40
 8009132:	f7ff fdcd 	bl	8008cd0 <_malloc_r>
 8009136:	6028      	str	r0, [r5, #0]
 8009138:	6128      	str	r0, [r5, #16]
 800913a:	b920      	cbnz	r0, 8009146 <_svfiprintf_r+0x2e>
 800913c:	230c      	movs	r3, #12
 800913e:	603b      	str	r3, [r7, #0]
 8009140:	f04f 30ff 	mov.w	r0, #4294967295
 8009144:	e0d1      	b.n	80092ea <_svfiprintf_r+0x1d2>
 8009146:	2340      	movs	r3, #64	; 0x40
 8009148:	616b      	str	r3, [r5, #20]
 800914a:	2300      	movs	r3, #0
 800914c:	9309      	str	r3, [sp, #36]	; 0x24
 800914e:	2320      	movs	r3, #32
 8009150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009154:	2330      	movs	r3, #48	; 0x30
 8009156:	f04f 0901 	mov.w	r9, #1
 800915a:	f8cd 800c 	str.w	r8, [sp, #12]
 800915e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009304 <_svfiprintf_r+0x1ec>
 8009162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009166:	4623      	mov	r3, r4
 8009168:	469a      	mov	sl, r3
 800916a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800916e:	b10a      	cbz	r2, 8009174 <_svfiprintf_r+0x5c>
 8009170:	2a25      	cmp	r2, #37	; 0x25
 8009172:	d1f9      	bne.n	8009168 <_svfiprintf_r+0x50>
 8009174:	ebba 0b04 	subs.w	fp, sl, r4
 8009178:	d00b      	beq.n	8009192 <_svfiprintf_r+0x7a>
 800917a:	465b      	mov	r3, fp
 800917c:	4622      	mov	r2, r4
 800917e:	4629      	mov	r1, r5
 8009180:	4638      	mov	r0, r7
 8009182:	f7ff ff6d 	bl	8009060 <__ssputs_r>
 8009186:	3001      	adds	r0, #1
 8009188:	f000 80aa 	beq.w	80092e0 <_svfiprintf_r+0x1c8>
 800918c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800918e:	445a      	add	r2, fp
 8009190:	9209      	str	r2, [sp, #36]	; 0x24
 8009192:	f89a 3000 	ldrb.w	r3, [sl]
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 80a2 	beq.w	80092e0 <_svfiprintf_r+0x1c8>
 800919c:	2300      	movs	r3, #0
 800919e:	f04f 32ff 	mov.w	r2, #4294967295
 80091a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091a6:	f10a 0a01 	add.w	sl, sl, #1
 80091aa:	9304      	str	r3, [sp, #16]
 80091ac:	9307      	str	r3, [sp, #28]
 80091ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091b2:	931a      	str	r3, [sp, #104]	; 0x68
 80091b4:	4654      	mov	r4, sl
 80091b6:	2205      	movs	r2, #5
 80091b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091bc:	4851      	ldr	r0, [pc, #324]	; (8009304 <_svfiprintf_r+0x1ec>)
 80091be:	f000 fdf5 	bl	8009dac <memchr>
 80091c2:	9a04      	ldr	r2, [sp, #16]
 80091c4:	b9d8      	cbnz	r0, 80091fe <_svfiprintf_r+0xe6>
 80091c6:	06d0      	lsls	r0, r2, #27
 80091c8:	bf44      	itt	mi
 80091ca:	2320      	movmi	r3, #32
 80091cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091d0:	0711      	lsls	r1, r2, #28
 80091d2:	bf44      	itt	mi
 80091d4:	232b      	movmi	r3, #43	; 0x2b
 80091d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091da:	f89a 3000 	ldrb.w	r3, [sl]
 80091de:	2b2a      	cmp	r3, #42	; 0x2a
 80091e0:	d015      	beq.n	800920e <_svfiprintf_r+0xf6>
 80091e2:	4654      	mov	r4, sl
 80091e4:	2000      	movs	r0, #0
 80091e6:	f04f 0c0a 	mov.w	ip, #10
 80091ea:	9a07      	ldr	r2, [sp, #28]
 80091ec:	4621      	mov	r1, r4
 80091ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f2:	3b30      	subs	r3, #48	; 0x30
 80091f4:	2b09      	cmp	r3, #9
 80091f6:	d94e      	bls.n	8009296 <_svfiprintf_r+0x17e>
 80091f8:	b1b0      	cbz	r0, 8009228 <_svfiprintf_r+0x110>
 80091fa:	9207      	str	r2, [sp, #28]
 80091fc:	e014      	b.n	8009228 <_svfiprintf_r+0x110>
 80091fe:	eba0 0308 	sub.w	r3, r0, r8
 8009202:	fa09 f303 	lsl.w	r3, r9, r3
 8009206:	4313      	orrs	r3, r2
 8009208:	46a2      	mov	sl, r4
 800920a:	9304      	str	r3, [sp, #16]
 800920c:	e7d2      	b.n	80091b4 <_svfiprintf_r+0x9c>
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	1d19      	adds	r1, r3, #4
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	9103      	str	r1, [sp, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	bfbb      	ittet	lt
 800921a:	425b      	neglt	r3, r3
 800921c:	f042 0202 	orrlt.w	r2, r2, #2
 8009220:	9307      	strge	r3, [sp, #28]
 8009222:	9307      	strlt	r3, [sp, #28]
 8009224:	bfb8      	it	lt
 8009226:	9204      	strlt	r2, [sp, #16]
 8009228:	7823      	ldrb	r3, [r4, #0]
 800922a:	2b2e      	cmp	r3, #46	; 0x2e
 800922c:	d10c      	bne.n	8009248 <_svfiprintf_r+0x130>
 800922e:	7863      	ldrb	r3, [r4, #1]
 8009230:	2b2a      	cmp	r3, #42	; 0x2a
 8009232:	d135      	bne.n	80092a0 <_svfiprintf_r+0x188>
 8009234:	9b03      	ldr	r3, [sp, #12]
 8009236:	3402      	adds	r4, #2
 8009238:	1d1a      	adds	r2, r3, #4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	9203      	str	r2, [sp, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	bfb8      	it	lt
 8009242:	f04f 33ff 	movlt.w	r3, #4294967295
 8009246:	9305      	str	r3, [sp, #20]
 8009248:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009308 <_svfiprintf_r+0x1f0>
 800924c:	2203      	movs	r2, #3
 800924e:	4650      	mov	r0, sl
 8009250:	7821      	ldrb	r1, [r4, #0]
 8009252:	f000 fdab 	bl	8009dac <memchr>
 8009256:	b140      	cbz	r0, 800926a <_svfiprintf_r+0x152>
 8009258:	2340      	movs	r3, #64	; 0x40
 800925a:	eba0 000a 	sub.w	r0, r0, sl
 800925e:	fa03 f000 	lsl.w	r0, r3, r0
 8009262:	9b04      	ldr	r3, [sp, #16]
 8009264:	3401      	adds	r4, #1
 8009266:	4303      	orrs	r3, r0
 8009268:	9304      	str	r3, [sp, #16]
 800926a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926e:	2206      	movs	r2, #6
 8009270:	4826      	ldr	r0, [pc, #152]	; (800930c <_svfiprintf_r+0x1f4>)
 8009272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009276:	f000 fd99 	bl	8009dac <memchr>
 800927a:	2800      	cmp	r0, #0
 800927c:	d038      	beq.n	80092f0 <_svfiprintf_r+0x1d8>
 800927e:	4b24      	ldr	r3, [pc, #144]	; (8009310 <_svfiprintf_r+0x1f8>)
 8009280:	bb1b      	cbnz	r3, 80092ca <_svfiprintf_r+0x1b2>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	3307      	adds	r3, #7
 8009286:	f023 0307 	bic.w	r3, r3, #7
 800928a:	3308      	adds	r3, #8
 800928c:	9303      	str	r3, [sp, #12]
 800928e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009290:	4433      	add	r3, r6
 8009292:	9309      	str	r3, [sp, #36]	; 0x24
 8009294:	e767      	b.n	8009166 <_svfiprintf_r+0x4e>
 8009296:	460c      	mov	r4, r1
 8009298:	2001      	movs	r0, #1
 800929a:	fb0c 3202 	mla	r2, ip, r2, r3
 800929e:	e7a5      	b.n	80091ec <_svfiprintf_r+0xd4>
 80092a0:	2300      	movs	r3, #0
 80092a2:	f04f 0c0a 	mov.w	ip, #10
 80092a6:	4619      	mov	r1, r3
 80092a8:	3401      	adds	r4, #1
 80092aa:	9305      	str	r3, [sp, #20]
 80092ac:	4620      	mov	r0, r4
 80092ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b2:	3a30      	subs	r2, #48	; 0x30
 80092b4:	2a09      	cmp	r2, #9
 80092b6:	d903      	bls.n	80092c0 <_svfiprintf_r+0x1a8>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0c5      	beq.n	8009248 <_svfiprintf_r+0x130>
 80092bc:	9105      	str	r1, [sp, #20]
 80092be:	e7c3      	b.n	8009248 <_svfiprintf_r+0x130>
 80092c0:	4604      	mov	r4, r0
 80092c2:	2301      	movs	r3, #1
 80092c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80092c8:	e7f0      	b.n	80092ac <_svfiprintf_r+0x194>
 80092ca:	ab03      	add	r3, sp, #12
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	462a      	mov	r2, r5
 80092d0:	4638      	mov	r0, r7
 80092d2:	4b10      	ldr	r3, [pc, #64]	; (8009314 <_svfiprintf_r+0x1fc>)
 80092d4:	a904      	add	r1, sp, #16
 80092d6:	f3af 8000 	nop.w
 80092da:	1c42      	adds	r2, r0, #1
 80092dc:	4606      	mov	r6, r0
 80092de:	d1d6      	bne.n	800928e <_svfiprintf_r+0x176>
 80092e0:	89ab      	ldrh	r3, [r5, #12]
 80092e2:	065b      	lsls	r3, r3, #25
 80092e4:	f53f af2c 	bmi.w	8009140 <_svfiprintf_r+0x28>
 80092e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092ea:	b01d      	add	sp, #116	; 0x74
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f0:	ab03      	add	r3, sp, #12
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	462a      	mov	r2, r5
 80092f6:	4638      	mov	r0, r7
 80092f8:	4b06      	ldr	r3, [pc, #24]	; (8009314 <_svfiprintf_r+0x1fc>)
 80092fa:	a904      	add	r1, sp, #16
 80092fc:	f000 f9d4 	bl	80096a8 <_printf_i>
 8009300:	e7eb      	b.n	80092da <_svfiprintf_r+0x1c2>
 8009302:	bf00      	nop
 8009304:	0800a254 	.word	0x0800a254
 8009308:	0800a25a 	.word	0x0800a25a
 800930c:	0800a25e 	.word	0x0800a25e
 8009310:	00000000 	.word	0x00000000
 8009314:	08009061 	.word	0x08009061

08009318 <__sfputc_r>:
 8009318:	6893      	ldr	r3, [r2, #8]
 800931a:	b410      	push	{r4}
 800931c:	3b01      	subs	r3, #1
 800931e:	2b00      	cmp	r3, #0
 8009320:	6093      	str	r3, [r2, #8]
 8009322:	da07      	bge.n	8009334 <__sfputc_r+0x1c>
 8009324:	6994      	ldr	r4, [r2, #24]
 8009326:	42a3      	cmp	r3, r4
 8009328:	db01      	blt.n	800932e <__sfputc_r+0x16>
 800932a:	290a      	cmp	r1, #10
 800932c:	d102      	bne.n	8009334 <__sfputc_r+0x1c>
 800932e:	bc10      	pop	{r4}
 8009330:	f000 bb24 	b.w	800997c <__swbuf_r>
 8009334:	6813      	ldr	r3, [r2, #0]
 8009336:	1c58      	adds	r0, r3, #1
 8009338:	6010      	str	r0, [r2, #0]
 800933a:	7019      	strb	r1, [r3, #0]
 800933c:	4608      	mov	r0, r1
 800933e:	bc10      	pop	{r4}
 8009340:	4770      	bx	lr

08009342 <__sfputs_r>:
 8009342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009344:	4606      	mov	r6, r0
 8009346:	460f      	mov	r7, r1
 8009348:	4614      	mov	r4, r2
 800934a:	18d5      	adds	r5, r2, r3
 800934c:	42ac      	cmp	r4, r5
 800934e:	d101      	bne.n	8009354 <__sfputs_r+0x12>
 8009350:	2000      	movs	r0, #0
 8009352:	e007      	b.n	8009364 <__sfputs_r+0x22>
 8009354:	463a      	mov	r2, r7
 8009356:	4630      	mov	r0, r6
 8009358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935c:	f7ff ffdc 	bl	8009318 <__sfputc_r>
 8009360:	1c43      	adds	r3, r0, #1
 8009362:	d1f3      	bne.n	800934c <__sfputs_r+0xa>
 8009364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009368 <_vfiprintf_r>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	460d      	mov	r5, r1
 800936e:	4614      	mov	r4, r2
 8009370:	4698      	mov	r8, r3
 8009372:	4606      	mov	r6, r0
 8009374:	b09d      	sub	sp, #116	; 0x74
 8009376:	b118      	cbz	r0, 8009380 <_vfiprintf_r+0x18>
 8009378:	6983      	ldr	r3, [r0, #24]
 800937a:	b90b      	cbnz	r3, 8009380 <_vfiprintf_r+0x18>
 800937c:	f7ff fdc4 	bl	8008f08 <__sinit>
 8009380:	4b89      	ldr	r3, [pc, #548]	; (80095a8 <_vfiprintf_r+0x240>)
 8009382:	429d      	cmp	r5, r3
 8009384:	d11b      	bne.n	80093be <_vfiprintf_r+0x56>
 8009386:	6875      	ldr	r5, [r6, #4]
 8009388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800938a:	07d9      	lsls	r1, r3, #31
 800938c:	d405      	bmi.n	800939a <_vfiprintf_r+0x32>
 800938e:	89ab      	ldrh	r3, [r5, #12]
 8009390:	059a      	lsls	r2, r3, #22
 8009392:	d402      	bmi.n	800939a <_vfiprintf_r+0x32>
 8009394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009396:	f7ff fe55 	bl	8009044 <__retarget_lock_acquire_recursive>
 800939a:	89ab      	ldrh	r3, [r5, #12]
 800939c:	071b      	lsls	r3, r3, #28
 800939e:	d501      	bpl.n	80093a4 <_vfiprintf_r+0x3c>
 80093a0:	692b      	ldr	r3, [r5, #16]
 80093a2:	b9eb      	cbnz	r3, 80093e0 <_vfiprintf_r+0x78>
 80093a4:	4629      	mov	r1, r5
 80093a6:	4630      	mov	r0, r6
 80093a8:	f000 fb4c 	bl	8009a44 <__swsetup_r>
 80093ac:	b1c0      	cbz	r0, 80093e0 <_vfiprintf_r+0x78>
 80093ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093b0:	07dc      	lsls	r4, r3, #31
 80093b2:	d50e      	bpl.n	80093d2 <_vfiprintf_r+0x6a>
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295
 80093b8:	b01d      	add	sp, #116	; 0x74
 80093ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093be:	4b7b      	ldr	r3, [pc, #492]	; (80095ac <_vfiprintf_r+0x244>)
 80093c0:	429d      	cmp	r5, r3
 80093c2:	d101      	bne.n	80093c8 <_vfiprintf_r+0x60>
 80093c4:	68b5      	ldr	r5, [r6, #8]
 80093c6:	e7df      	b.n	8009388 <_vfiprintf_r+0x20>
 80093c8:	4b79      	ldr	r3, [pc, #484]	; (80095b0 <_vfiprintf_r+0x248>)
 80093ca:	429d      	cmp	r5, r3
 80093cc:	bf08      	it	eq
 80093ce:	68f5      	ldreq	r5, [r6, #12]
 80093d0:	e7da      	b.n	8009388 <_vfiprintf_r+0x20>
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	0598      	lsls	r0, r3, #22
 80093d6:	d4ed      	bmi.n	80093b4 <_vfiprintf_r+0x4c>
 80093d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093da:	f7ff fe34 	bl	8009046 <__retarget_lock_release_recursive>
 80093de:	e7e9      	b.n	80093b4 <_vfiprintf_r+0x4c>
 80093e0:	2300      	movs	r3, #0
 80093e2:	9309      	str	r3, [sp, #36]	; 0x24
 80093e4:	2320      	movs	r3, #32
 80093e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093ea:	2330      	movs	r3, #48	; 0x30
 80093ec:	f04f 0901 	mov.w	r9, #1
 80093f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80093f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80095b4 <_vfiprintf_r+0x24c>
 80093f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093fc:	4623      	mov	r3, r4
 80093fe:	469a      	mov	sl, r3
 8009400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009404:	b10a      	cbz	r2, 800940a <_vfiprintf_r+0xa2>
 8009406:	2a25      	cmp	r2, #37	; 0x25
 8009408:	d1f9      	bne.n	80093fe <_vfiprintf_r+0x96>
 800940a:	ebba 0b04 	subs.w	fp, sl, r4
 800940e:	d00b      	beq.n	8009428 <_vfiprintf_r+0xc0>
 8009410:	465b      	mov	r3, fp
 8009412:	4622      	mov	r2, r4
 8009414:	4629      	mov	r1, r5
 8009416:	4630      	mov	r0, r6
 8009418:	f7ff ff93 	bl	8009342 <__sfputs_r>
 800941c:	3001      	adds	r0, #1
 800941e:	f000 80aa 	beq.w	8009576 <_vfiprintf_r+0x20e>
 8009422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009424:	445a      	add	r2, fp
 8009426:	9209      	str	r2, [sp, #36]	; 0x24
 8009428:	f89a 3000 	ldrb.w	r3, [sl]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80a2 	beq.w	8009576 <_vfiprintf_r+0x20e>
 8009432:	2300      	movs	r3, #0
 8009434:	f04f 32ff 	mov.w	r2, #4294967295
 8009438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800943c:	f10a 0a01 	add.w	sl, sl, #1
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	9307      	str	r3, [sp, #28]
 8009444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009448:	931a      	str	r3, [sp, #104]	; 0x68
 800944a:	4654      	mov	r4, sl
 800944c:	2205      	movs	r2, #5
 800944e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009452:	4858      	ldr	r0, [pc, #352]	; (80095b4 <_vfiprintf_r+0x24c>)
 8009454:	f000 fcaa 	bl	8009dac <memchr>
 8009458:	9a04      	ldr	r2, [sp, #16]
 800945a:	b9d8      	cbnz	r0, 8009494 <_vfiprintf_r+0x12c>
 800945c:	06d1      	lsls	r1, r2, #27
 800945e:	bf44      	itt	mi
 8009460:	2320      	movmi	r3, #32
 8009462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009466:	0713      	lsls	r3, r2, #28
 8009468:	bf44      	itt	mi
 800946a:	232b      	movmi	r3, #43	; 0x2b
 800946c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009470:	f89a 3000 	ldrb.w	r3, [sl]
 8009474:	2b2a      	cmp	r3, #42	; 0x2a
 8009476:	d015      	beq.n	80094a4 <_vfiprintf_r+0x13c>
 8009478:	4654      	mov	r4, sl
 800947a:	2000      	movs	r0, #0
 800947c:	f04f 0c0a 	mov.w	ip, #10
 8009480:	9a07      	ldr	r2, [sp, #28]
 8009482:	4621      	mov	r1, r4
 8009484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009488:	3b30      	subs	r3, #48	; 0x30
 800948a:	2b09      	cmp	r3, #9
 800948c:	d94e      	bls.n	800952c <_vfiprintf_r+0x1c4>
 800948e:	b1b0      	cbz	r0, 80094be <_vfiprintf_r+0x156>
 8009490:	9207      	str	r2, [sp, #28]
 8009492:	e014      	b.n	80094be <_vfiprintf_r+0x156>
 8009494:	eba0 0308 	sub.w	r3, r0, r8
 8009498:	fa09 f303 	lsl.w	r3, r9, r3
 800949c:	4313      	orrs	r3, r2
 800949e:	46a2      	mov	sl, r4
 80094a0:	9304      	str	r3, [sp, #16]
 80094a2:	e7d2      	b.n	800944a <_vfiprintf_r+0xe2>
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	1d19      	adds	r1, r3, #4
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	9103      	str	r1, [sp, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bfbb      	ittet	lt
 80094b0:	425b      	neglt	r3, r3
 80094b2:	f042 0202 	orrlt.w	r2, r2, #2
 80094b6:	9307      	strge	r3, [sp, #28]
 80094b8:	9307      	strlt	r3, [sp, #28]
 80094ba:	bfb8      	it	lt
 80094bc:	9204      	strlt	r2, [sp, #16]
 80094be:	7823      	ldrb	r3, [r4, #0]
 80094c0:	2b2e      	cmp	r3, #46	; 0x2e
 80094c2:	d10c      	bne.n	80094de <_vfiprintf_r+0x176>
 80094c4:	7863      	ldrb	r3, [r4, #1]
 80094c6:	2b2a      	cmp	r3, #42	; 0x2a
 80094c8:	d135      	bne.n	8009536 <_vfiprintf_r+0x1ce>
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	3402      	adds	r4, #2
 80094ce:	1d1a      	adds	r2, r3, #4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	9203      	str	r2, [sp, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	bfb8      	it	lt
 80094d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80095b8 <_vfiprintf_r+0x250>
 80094e2:	2203      	movs	r2, #3
 80094e4:	4650      	mov	r0, sl
 80094e6:	7821      	ldrb	r1, [r4, #0]
 80094e8:	f000 fc60 	bl	8009dac <memchr>
 80094ec:	b140      	cbz	r0, 8009500 <_vfiprintf_r+0x198>
 80094ee:	2340      	movs	r3, #64	; 0x40
 80094f0:	eba0 000a 	sub.w	r0, r0, sl
 80094f4:	fa03 f000 	lsl.w	r0, r3, r0
 80094f8:	9b04      	ldr	r3, [sp, #16]
 80094fa:	3401      	adds	r4, #1
 80094fc:	4303      	orrs	r3, r0
 80094fe:	9304      	str	r3, [sp, #16]
 8009500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009504:	2206      	movs	r2, #6
 8009506:	482d      	ldr	r0, [pc, #180]	; (80095bc <_vfiprintf_r+0x254>)
 8009508:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800950c:	f000 fc4e 	bl	8009dac <memchr>
 8009510:	2800      	cmp	r0, #0
 8009512:	d03f      	beq.n	8009594 <_vfiprintf_r+0x22c>
 8009514:	4b2a      	ldr	r3, [pc, #168]	; (80095c0 <_vfiprintf_r+0x258>)
 8009516:	bb1b      	cbnz	r3, 8009560 <_vfiprintf_r+0x1f8>
 8009518:	9b03      	ldr	r3, [sp, #12]
 800951a:	3307      	adds	r3, #7
 800951c:	f023 0307 	bic.w	r3, r3, #7
 8009520:	3308      	adds	r3, #8
 8009522:	9303      	str	r3, [sp, #12]
 8009524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009526:	443b      	add	r3, r7
 8009528:	9309      	str	r3, [sp, #36]	; 0x24
 800952a:	e767      	b.n	80093fc <_vfiprintf_r+0x94>
 800952c:	460c      	mov	r4, r1
 800952e:	2001      	movs	r0, #1
 8009530:	fb0c 3202 	mla	r2, ip, r2, r3
 8009534:	e7a5      	b.n	8009482 <_vfiprintf_r+0x11a>
 8009536:	2300      	movs	r3, #0
 8009538:	f04f 0c0a 	mov.w	ip, #10
 800953c:	4619      	mov	r1, r3
 800953e:	3401      	adds	r4, #1
 8009540:	9305      	str	r3, [sp, #20]
 8009542:	4620      	mov	r0, r4
 8009544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009548:	3a30      	subs	r2, #48	; 0x30
 800954a:	2a09      	cmp	r2, #9
 800954c:	d903      	bls.n	8009556 <_vfiprintf_r+0x1ee>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0c5      	beq.n	80094de <_vfiprintf_r+0x176>
 8009552:	9105      	str	r1, [sp, #20]
 8009554:	e7c3      	b.n	80094de <_vfiprintf_r+0x176>
 8009556:	4604      	mov	r4, r0
 8009558:	2301      	movs	r3, #1
 800955a:	fb0c 2101 	mla	r1, ip, r1, r2
 800955e:	e7f0      	b.n	8009542 <_vfiprintf_r+0x1da>
 8009560:	ab03      	add	r3, sp, #12
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	462a      	mov	r2, r5
 8009566:	4630      	mov	r0, r6
 8009568:	4b16      	ldr	r3, [pc, #88]	; (80095c4 <_vfiprintf_r+0x25c>)
 800956a:	a904      	add	r1, sp, #16
 800956c:	f3af 8000 	nop.w
 8009570:	4607      	mov	r7, r0
 8009572:	1c78      	adds	r0, r7, #1
 8009574:	d1d6      	bne.n	8009524 <_vfiprintf_r+0x1bc>
 8009576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009578:	07d9      	lsls	r1, r3, #31
 800957a:	d405      	bmi.n	8009588 <_vfiprintf_r+0x220>
 800957c:	89ab      	ldrh	r3, [r5, #12]
 800957e:	059a      	lsls	r2, r3, #22
 8009580:	d402      	bmi.n	8009588 <_vfiprintf_r+0x220>
 8009582:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009584:	f7ff fd5f 	bl	8009046 <__retarget_lock_release_recursive>
 8009588:	89ab      	ldrh	r3, [r5, #12]
 800958a:	065b      	lsls	r3, r3, #25
 800958c:	f53f af12 	bmi.w	80093b4 <_vfiprintf_r+0x4c>
 8009590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009592:	e711      	b.n	80093b8 <_vfiprintf_r+0x50>
 8009594:	ab03      	add	r3, sp, #12
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	462a      	mov	r2, r5
 800959a:	4630      	mov	r0, r6
 800959c:	4b09      	ldr	r3, [pc, #36]	; (80095c4 <_vfiprintf_r+0x25c>)
 800959e:	a904      	add	r1, sp, #16
 80095a0:	f000 f882 	bl	80096a8 <_printf_i>
 80095a4:	e7e4      	b.n	8009570 <_vfiprintf_r+0x208>
 80095a6:	bf00      	nop
 80095a8:	0800a214 	.word	0x0800a214
 80095ac:	0800a234 	.word	0x0800a234
 80095b0:	0800a1f4 	.word	0x0800a1f4
 80095b4:	0800a254 	.word	0x0800a254
 80095b8:	0800a25a 	.word	0x0800a25a
 80095bc:	0800a25e 	.word	0x0800a25e
 80095c0:	00000000 	.word	0x00000000
 80095c4:	08009343 	.word	0x08009343

080095c8 <_printf_common>:
 80095c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095cc:	4616      	mov	r6, r2
 80095ce:	4699      	mov	r9, r3
 80095d0:	688a      	ldr	r2, [r1, #8]
 80095d2:	690b      	ldr	r3, [r1, #16]
 80095d4:	4607      	mov	r7, r0
 80095d6:	4293      	cmp	r3, r2
 80095d8:	bfb8      	it	lt
 80095da:	4613      	movlt	r3, r2
 80095dc:	6033      	str	r3, [r6, #0]
 80095de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095e2:	460c      	mov	r4, r1
 80095e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095e8:	b10a      	cbz	r2, 80095ee <_printf_common+0x26>
 80095ea:	3301      	adds	r3, #1
 80095ec:	6033      	str	r3, [r6, #0]
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	0699      	lsls	r1, r3, #26
 80095f2:	bf42      	ittt	mi
 80095f4:	6833      	ldrmi	r3, [r6, #0]
 80095f6:	3302      	addmi	r3, #2
 80095f8:	6033      	strmi	r3, [r6, #0]
 80095fa:	6825      	ldr	r5, [r4, #0]
 80095fc:	f015 0506 	ands.w	r5, r5, #6
 8009600:	d106      	bne.n	8009610 <_printf_common+0x48>
 8009602:	f104 0a19 	add.w	sl, r4, #25
 8009606:	68e3      	ldr	r3, [r4, #12]
 8009608:	6832      	ldr	r2, [r6, #0]
 800960a:	1a9b      	subs	r3, r3, r2
 800960c:	42ab      	cmp	r3, r5
 800960e:	dc28      	bgt.n	8009662 <_printf_common+0x9a>
 8009610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009614:	1e13      	subs	r3, r2, #0
 8009616:	6822      	ldr	r2, [r4, #0]
 8009618:	bf18      	it	ne
 800961a:	2301      	movne	r3, #1
 800961c:	0692      	lsls	r2, r2, #26
 800961e:	d42d      	bmi.n	800967c <_printf_common+0xb4>
 8009620:	4649      	mov	r1, r9
 8009622:	4638      	mov	r0, r7
 8009624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009628:	47c0      	blx	r8
 800962a:	3001      	adds	r0, #1
 800962c:	d020      	beq.n	8009670 <_printf_common+0xa8>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	68e5      	ldr	r5, [r4, #12]
 8009632:	f003 0306 	and.w	r3, r3, #6
 8009636:	2b04      	cmp	r3, #4
 8009638:	bf18      	it	ne
 800963a:	2500      	movne	r5, #0
 800963c:	6832      	ldr	r2, [r6, #0]
 800963e:	f04f 0600 	mov.w	r6, #0
 8009642:	68a3      	ldr	r3, [r4, #8]
 8009644:	bf08      	it	eq
 8009646:	1aad      	subeq	r5, r5, r2
 8009648:	6922      	ldr	r2, [r4, #16]
 800964a:	bf08      	it	eq
 800964c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009650:	4293      	cmp	r3, r2
 8009652:	bfc4      	itt	gt
 8009654:	1a9b      	subgt	r3, r3, r2
 8009656:	18ed      	addgt	r5, r5, r3
 8009658:	341a      	adds	r4, #26
 800965a:	42b5      	cmp	r5, r6
 800965c:	d11a      	bne.n	8009694 <_printf_common+0xcc>
 800965e:	2000      	movs	r0, #0
 8009660:	e008      	b.n	8009674 <_printf_common+0xac>
 8009662:	2301      	movs	r3, #1
 8009664:	4652      	mov	r2, sl
 8009666:	4649      	mov	r1, r9
 8009668:	4638      	mov	r0, r7
 800966a:	47c0      	blx	r8
 800966c:	3001      	adds	r0, #1
 800966e:	d103      	bne.n	8009678 <_printf_common+0xb0>
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009678:	3501      	adds	r5, #1
 800967a:	e7c4      	b.n	8009606 <_printf_common+0x3e>
 800967c:	2030      	movs	r0, #48	; 0x30
 800967e:	18e1      	adds	r1, r4, r3
 8009680:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800968a:	4422      	add	r2, r4
 800968c:	3302      	adds	r3, #2
 800968e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009692:	e7c5      	b.n	8009620 <_printf_common+0x58>
 8009694:	2301      	movs	r3, #1
 8009696:	4622      	mov	r2, r4
 8009698:	4649      	mov	r1, r9
 800969a:	4638      	mov	r0, r7
 800969c:	47c0      	blx	r8
 800969e:	3001      	adds	r0, #1
 80096a0:	d0e6      	beq.n	8009670 <_printf_common+0xa8>
 80096a2:	3601      	adds	r6, #1
 80096a4:	e7d9      	b.n	800965a <_printf_common+0x92>
	...

080096a8 <_printf_i>:
 80096a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096ac:	7e0f      	ldrb	r7, [r1, #24]
 80096ae:	4691      	mov	r9, r2
 80096b0:	2f78      	cmp	r7, #120	; 0x78
 80096b2:	4680      	mov	r8, r0
 80096b4:	460c      	mov	r4, r1
 80096b6:	469a      	mov	sl, r3
 80096b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096be:	d807      	bhi.n	80096d0 <_printf_i+0x28>
 80096c0:	2f62      	cmp	r7, #98	; 0x62
 80096c2:	d80a      	bhi.n	80096da <_printf_i+0x32>
 80096c4:	2f00      	cmp	r7, #0
 80096c6:	f000 80d9 	beq.w	800987c <_printf_i+0x1d4>
 80096ca:	2f58      	cmp	r7, #88	; 0x58
 80096cc:	f000 80a4 	beq.w	8009818 <_printf_i+0x170>
 80096d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096d8:	e03a      	b.n	8009750 <_printf_i+0xa8>
 80096da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096de:	2b15      	cmp	r3, #21
 80096e0:	d8f6      	bhi.n	80096d0 <_printf_i+0x28>
 80096e2:	a101      	add	r1, pc, #4	; (adr r1, 80096e8 <_printf_i+0x40>)
 80096e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096e8:	08009741 	.word	0x08009741
 80096ec:	08009755 	.word	0x08009755
 80096f0:	080096d1 	.word	0x080096d1
 80096f4:	080096d1 	.word	0x080096d1
 80096f8:	080096d1 	.word	0x080096d1
 80096fc:	080096d1 	.word	0x080096d1
 8009700:	08009755 	.word	0x08009755
 8009704:	080096d1 	.word	0x080096d1
 8009708:	080096d1 	.word	0x080096d1
 800970c:	080096d1 	.word	0x080096d1
 8009710:	080096d1 	.word	0x080096d1
 8009714:	08009863 	.word	0x08009863
 8009718:	08009785 	.word	0x08009785
 800971c:	08009845 	.word	0x08009845
 8009720:	080096d1 	.word	0x080096d1
 8009724:	080096d1 	.word	0x080096d1
 8009728:	08009885 	.word	0x08009885
 800972c:	080096d1 	.word	0x080096d1
 8009730:	08009785 	.word	0x08009785
 8009734:	080096d1 	.word	0x080096d1
 8009738:	080096d1 	.word	0x080096d1
 800973c:	0800984d 	.word	0x0800984d
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	1d1a      	adds	r2, r3, #4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	602a      	str	r2, [r5, #0]
 8009748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800974c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009750:	2301      	movs	r3, #1
 8009752:	e0a4      	b.n	800989e <_printf_i+0x1f6>
 8009754:	6820      	ldr	r0, [r4, #0]
 8009756:	6829      	ldr	r1, [r5, #0]
 8009758:	0606      	lsls	r6, r0, #24
 800975a:	f101 0304 	add.w	r3, r1, #4
 800975e:	d50a      	bpl.n	8009776 <_printf_i+0xce>
 8009760:	680e      	ldr	r6, [r1, #0]
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	2e00      	cmp	r6, #0
 8009766:	da03      	bge.n	8009770 <_printf_i+0xc8>
 8009768:	232d      	movs	r3, #45	; 0x2d
 800976a:	4276      	negs	r6, r6
 800976c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009770:	230a      	movs	r3, #10
 8009772:	485e      	ldr	r0, [pc, #376]	; (80098ec <_printf_i+0x244>)
 8009774:	e019      	b.n	80097aa <_printf_i+0x102>
 8009776:	680e      	ldr	r6, [r1, #0]
 8009778:	f010 0f40 	tst.w	r0, #64	; 0x40
 800977c:	602b      	str	r3, [r5, #0]
 800977e:	bf18      	it	ne
 8009780:	b236      	sxthne	r6, r6
 8009782:	e7ef      	b.n	8009764 <_printf_i+0xbc>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	6820      	ldr	r0, [r4, #0]
 8009788:	1d19      	adds	r1, r3, #4
 800978a:	6029      	str	r1, [r5, #0]
 800978c:	0601      	lsls	r1, r0, #24
 800978e:	d501      	bpl.n	8009794 <_printf_i+0xec>
 8009790:	681e      	ldr	r6, [r3, #0]
 8009792:	e002      	b.n	800979a <_printf_i+0xf2>
 8009794:	0646      	lsls	r6, r0, #25
 8009796:	d5fb      	bpl.n	8009790 <_printf_i+0xe8>
 8009798:	881e      	ldrh	r6, [r3, #0]
 800979a:	2f6f      	cmp	r7, #111	; 0x6f
 800979c:	bf0c      	ite	eq
 800979e:	2308      	moveq	r3, #8
 80097a0:	230a      	movne	r3, #10
 80097a2:	4852      	ldr	r0, [pc, #328]	; (80098ec <_printf_i+0x244>)
 80097a4:	2100      	movs	r1, #0
 80097a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097aa:	6865      	ldr	r5, [r4, #4]
 80097ac:	2d00      	cmp	r5, #0
 80097ae:	bfa8      	it	ge
 80097b0:	6821      	ldrge	r1, [r4, #0]
 80097b2:	60a5      	str	r5, [r4, #8]
 80097b4:	bfa4      	itt	ge
 80097b6:	f021 0104 	bicge.w	r1, r1, #4
 80097ba:	6021      	strge	r1, [r4, #0]
 80097bc:	b90e      	cbnz	r6, 80097c2 <_printf_i+0x11a>
 80097be:	2d00      	cmp	r5, #0
 80097c0:	d04d      	beq.n	800985e <_printf_i+0x1b6>
 80097c2:	4615      	mov	r5, r2
 80097c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80097c8:	fb03 6711 	mls	r7, r3, r1, r6
 80097cc:	5dc7      	ldrb	r7, [r0, r7]
 80097ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097d2:	4637      	mov	r7, r6
 80097d4:	42bb      	cmp	r3, r7
 80097d6:	460e      	mov	r6, r1
 80097d8:	d9f4      	bls.n	80097c4 <_printf_i+0x11c>
 80097da:	2b08      	cmp	r3, #8
 80097dc:	d10b      	bne.n	80097f6 <_printf_i+0x14e>
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	07de      	lsls	r6, r3, #31
 80097e2:	d508      	bpl.n	80097f6 <_printf_i+0x14e>
 80097e4:	6923      	ldr	r3, [r4, #16]
 80097e6:	6861      	ldr	r1, [r4, #4]
 80097e8:	4299      	cmp	r1, r3
 80097ea:	bfde      	ittt	le
 80097ec:	2330      	movle	r3, #48	; 0x30
 80097ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097f6:	1b52      	subs	r2, r2, r5
 80097f8:	6122      	str	r2, [r4, #16]
 80097fa:	464b      	mov	r3, r9
 80097fc:	4621      	mov	r1, r4
 80097fe:	4640      	mov	r0, r8
 8009800:	f8cd a000 	str.w	sl, [sp]
 8009804:	aa03      	add	r2, sp, #12
 8009806:	f7ff fedf 	bl	80095c8 <_printf_common>
 800980a:	3001      	adds	r0, #1
 800980c:	d14c      	bne.n	80098a8 <_printf_i+0x200>
 800980e:	f04f 30ff 	mov.w	r0, #4294967295
 8009812:	b004      	add	sp, #16
 8009814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009818:	4834      	ldr	r0, [pc, #208]	; (80098ec <_printf_i+0x244>)
 800981a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800981e:	6829      	ldr	r1, [r5, #0]
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	f851 6b04 	ldr.w	r6, [r1], #4
 8009826:	6029      	str	r1, [r5, #0]
 8009828:	061d      	lsls	r5, r3, #24
 800982a:	d514      	bpl.n	8009856 <_printf_i+0x1ae>
 800982c:	07df      	lsls	r7, r3, #31
 800982e:	bf44      	itt	mi
 8009830:	f043 0320 	orrmi.w	r3, r3, #32
 8009834:	6023      	strmi	r3, [r4, #0]
 8009836:	b91e      	cbnz	r6, 8009840 <_printf_i+0x198>
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	f023 0320 	bic.w	r3, r3, #32
 800983e:	6023      	str	r3, [r4, #0]
 8009840:	2310      	movs	r3, #16
 8009842:	e7af      	b.n	80097a4 <_printf_i+0xfc>
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	f043 0320 	orr.w	r3, r3, #32
 800984a:	6023      	str	r3, [r4, #0]
 800984c:	2378      	movs	r3, #120	; 0x78
 800984e:	4828      	ldr	r0, [pc, #160]	; (80098f0 <_printf_i+0x248>)
 8009850:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009854:	e7e3      	b.n	800981e <_printf_i+0x176>
 8009856:	0659      	lsls	r1, r3, #25
 8009858:	bf48      	it	mi
 800985a:	b2b6      	uxthmi	r6, r6
 800985c:	e7e6      	b.n	800982c <_printf_i+0x184>
 800985e:	4615      	mov	r5, r2
 8009860:	e7bb      	b.n	80097da <_printf_i+0x132>
 8009862:	682b      	ldr	r3, [r5, #0]
 8009864:	6826      	ldr	r6, [r4, #0]
 8009866:	1d18      	adds	r0, r3, #4
 8009868:	6961      	ldr	r1, [r4, #20]
 800986a:	6028      	str	r0, [r5, #0]
 800986c:	0635      	lsls	r5, r6, #24
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	d501      	bpl.n	8009876 <_printf_i+0x1ce>
 8009872:	6019      	str	r1, [r3, #0]
 8009874:	e002      	b.n	800987c <_printf_i+0x1d4>
 8009876:	0670      	lsls	r0, r6, #25
 8009878:	d5fb      	bpl.n	8009872 <_printf_i+0x1ca>
 800987a:	8019      	strh	r1, [r3, #0]
 800987c:	2300      	movs	r3, #0
 800987e:	4615      	mov	r5, r2
 8009880:	6123      	str	r3, [r4, #16]
 8009882:	e7ba      	b.n	80097fa <_printf_i+0x152>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	2100      	movs	r1, #0
 8009888:	1d1a      	adds	r2, r3, #4
 800988a:	602a      	str	r2, [r5, #0]
 800988c:	681d      	ldr	r5, [r3, #0]
 800988e:	6862      	ldr	r2, [r4, #4]
 8009890:	4628      	mov	r0, r5
 8009892:	f000 fa8b 	bl	8009dac <memchr>
 8009896:	b108      	cbz	r0, 800989c <_printf_i+0x1f4>
 8009898:	1b40      	subs	r0, r0, r5
 800989a:	6060      	str	r0, [r4, #4]
 800989c:	6863      	ldr	r3, [r4, #4]
 800989e:	6123      	str	r3, [r4, #16]
 80098a0:	2300      	movs	r3, #0
 80098a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098a6:	e7a8      	b.n	80097fa <_printf_i+0x152>
 80098a8:	462a      	mov	r2, r5
 80098aa:	4649      	mov	r1, r9
 80098ac:	4640      	mov	r0, r8
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	47d0      	blx	sl
 80098b2:	3001      	adds	r0, #1
 80098b4:	d0ab      	beq.n	800980e <_printf_i+0x166>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	079b      	lsls	r3, r3, #30
 80098ba:	d413      	bmi.n	80098e4 <_printf_i+0x23c>
 80098bc:	68e0      	ldr	r0, [r4, #12]
 80098be:	9b03      	ldr	r3, [sp, #12]
 80098c0:	4298      	cmp	r0, r3
 80098c2:	bfb8      	it	lt
 80098c4:	4618      	movlt	r0, r3
 80098c6:	e7a4      	b.n	8009812 <_printf_i+0x16a>
 80098c8:	2301      	movs	r3, #1
 80098ca:	4632      	mov	r2, r6
 80098cc:	4649      	mov	r1, r9
 80098ce:	4640      	mov	r0, r8
 80098d0:	47d0      	blx	sl
 80098d2:	3001      	adds	r0, #1
 80098d4:	d09b      	beq.n	800980e <_printf_i+0x166>
 80098d6:	3501      	adds	r5, #1
 80098d8:	68e3      	ldr	r3, [r4, #12]
 80098da:	9903      	ldr	r1, [sp, #12]
 80098dc:	1a5b      	subs	r3, r3, r1
 80098de:	42ab      	cmp	r3, r5
 80098e0:	dcf2      	bgt.n	80098c8 <_printf_i+0x220>
 80098e2:	e7eb      	b.n	80098bc <_printf_i+0x214>
 80098e4:	2500      	movs	r5, #0
 80098e6:	f104 0619 	add.w	r6, r4, #25
 80098ea:	e7f5      	b.n	80098d8 <_printf_i+0x230>
 80098ec:	0800a265 	.word	0x0800a265
 80098f0:	0800a276 	.word	0x0800a276

080098f4 <__sread>:
 80098f4:	b510      	push	{r4, lr}
 80098f6:	460c      	mov	r4, r1
 80098f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fc:	f000 fabc 	bl	8009e78 <_read_r>
 8009900:	2800      	cmp	r0, #0
 8009902:	bfab      	itete	ge
 8009904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009906:	89a3      	ldrhlt	r3, [r4, #12]
 8009908:	181b      	addge	r3, r3, r0
 800990a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800990e:	bfac      	ite	ge
 8009910:	6563      	strge	r3, [r4, #84]	; 0x54
 8009912:	81a3      	strhlt	r3, [r4, #12]
 8009914:	bd10      	pop	{r4, pc}

08009916 <__swrite>:
 8009916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991a:	461f      	mov	r7, r3
 800991c:	898b      	ldrh	r3, [r1, #12]
 800991e:	4605      	mov	r5, r0
 8009920:	05db      	lsls	r3, r3, #23
 8009922:	460c      	mov	r4, r1
 8009924:	4616      	mov	r6, r2
 8009926:	d505      	bpl.n	8009934 <__swrite+0x1e>
 8009928:	2302      	movs	r3, #2
 800992a:	2200      	movs	r2, #0
 800992c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009930:	f000 f9c4 	bl	8009cbc <_lseek_r>
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	4632      	mov	r2, r6
 8009938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	4628      	mov	r0, r5
 8009940:	463b      	mov	r3, r7
 8009942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800994a:	f000 b869 	b.w	8009a20 <_write_r>

0800994e <__sseek>:
 800994e:	b510      	push	{r4, lr}
 8009950:	460c      	mov	r4, r1
 8009952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009956:	f000 f9b1 	bl	8009cbc <_lseek_r>
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	bf15      	itete	ne
 8009960:	6560      	strne	r0, [r4, #84]	; 0x54
 8009962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800996a:	81a3      	strheq	r3, [r4, #12]
 800996c:	bf18      	it	ne
 800996e:	81a3      	strhne	r3, [r4, #12]
 8009970:	bd10      	pop	{r4, pc}

08009972 <__sclose>:
 8009972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009976:	f000 b8d3 	b.w	8009b20 <_close_r>
	...

0800997c <__swbuf_r>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	460e      	mov	r6, r1
 8009980:	4614      	mov	r4, r2
 8009982:	4605      	mov	r5, r0
 8009984:	b118      	cbz	r0, 800998e <__swbuf_r+0x12>
 8009986:	6983      	ldr	r3, [r0, #24]
 8009988:	b90b      	cbnz	r3, 800998e <__swbuf_r+0x12>
 800998a:	f7ff fabd 	bl	8008f08 <__sinit>
 800998e:	4b21      	ldr	r3, [pc, #132]	; (8009a14 <__swbuf_r+0x98>)
 8009990:	429c      	cmp	r4, r3
 8009992:	d12b      	bne.n	80099ec <__swbuf_r+0x70>
 8009994:	686c      	ldr	r4, [r5, #4]
 8009996:	69a3      	ldr	r3, [r4, #24]
 8009998:	60a3      	str	r3, [r4, #8]
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	071a      	lsls	r2, r3, #28
 800999e:	d52f      	bpl.n	8009a00 <__swbuf_r+0x84>
 80099a0:	6923      	ldr	r3, [r4, #16]
 80099a2:	b36b      	cbz	r3, 8009a00 <__swbuf_r+0x84>
 80099a4:	6923      	ldr	r3, [r4, #16]
 80099a6:	6820      	ldr	r0, [r4, #0]
 80099a8:	b2f6      	uxtb	r6, r6
 80099aa:	1ac0      	subs	r0, r0, r3
 80099ac:	6963      	ldr	r3, [r4, #20]
 80099ae:	4637      	mov	r7, r6
 80099b0:	4283      	cmp	r3, r0
 80099b2:	dc04      	bgt.n	80099be <__swbuf_r+0x42>
 80099b4:	4621      	mov	r1, r4
 80099b6:	4628      	mov	r0, r5
 80099b8:	f000 f944 	bl	8009c44 <_fflush_r>
 80099bc:	bb30      	cbnz	r0, 8009a0c <__swbuf_r+0x90>
 80099be:	68a3      	ldr	r3, [r4, #8]
 80099c0:	3001      	adds	r0, #1
 80099c2:	3b01      	subs	r3, #1
 80099c4:	60a3      	str	r3, [r4, #8]
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	1c5a      	adds	r2, r3, #1
 80099ca:	6022      	str	r2, [r4, #0]
 80099cc:	701e      	strb	r6, [r3, #0]
 80099ce:	6963      	ldr	r3, [r4, #20]
 80099d0:	4283      	cmp	r3, r0
 80099d2:	d004      	beq.n	80099de <__swbuf_r+0x62>
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	07db      	lsls	r3, r3, #31
 80099d8:	d506      	bpl.n	80099e8 <__swbuf_r+0x6c>
 80099da:	2e0a      	cmp	r6, #10
 80099dc:	d104      	bne.n	80099e8 <__swbuf_r+0x6c>
 80099de:	4621      	mov	r1, r4
 80099e0:	4628      	mov	r0, r5
 80099e2:	f000 f92f 	bl	8009c44 <_fflush_r>
 80099e6:	b988      	cbnz	r0, 8009a0c <__swbuf_r+0x90>
 80099e8:	4638      	mov	r0, r7
 80099ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ec:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <__swbuf_r+0x9c>)
 80099ee:	429c      	cmp	r4, r3
 80099f0:	d101      	bne.n	80099f6 <__swbuf_r+0x7a>
 80099f2:	68ac      	ldr	r4, [r5, #8]
 80099f4:	e7cf      	b.n	8009996 <__swbuf_r+0x1a>
 80099f6:	4b09      	ldr	r3, [pc, #36]	; (8009a1c <__swbuf_r+0xa0>)
 80099f8:	429c      	cmp	r4, r3
 80099fa:	bf08      	it	eq
 80099fc:	68ec      	ldreq	r4, [r5, #12]
 80099fe:	e7ca      	b.n	8009996 <__swbuf_r+0x1a>
 8009a00:	4621      	mov	r1, r4
 8009a02:	4628      	mov	r0, r5
 8009a04:	f000 f81e 	bl	8009a44 <__swsetup_r>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d0cb      	beq.n	80099a4 <__swbuf_r+0x28>
 8009a0c:	f04f 37ff 	mov.w	r7, #4294967295
 8009a10:	e7ea      	b.n	80099e8 <__swbuf_r+0x6c>
 8009a12:	bf00      	nop
 8009a14:	0800a214 	.word	0x0800a214
 8009a18:	0800a234 	.word	0x0800a234
 8009a1c:	0800a1f4 	.word	0x0800a1f4

08009a20 <_write_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	4611      	mov	r1, r2
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4d05      	ldr	r5, [pc, #20]	; (8009a40 <_write_r+0x20>)
 8009a2c:	602a      	str	r2, [r5, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f7f6 fbba 	bl	80001a8 <_write>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d102      	bne.n	8009a3e <_write_r+0x1e>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	b103      	cbz	r3, 8009a3e <_write_r+0x1e>
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	20001430 	.word	0x20001430

08009a44 <__swsetup_r>:
 8009a44:	4b32      	ldr	r3, [pc, #200]	; (8009b10 <__swsetup_r+0xcc>)
 8009a46:	b570      	push	{r4, r5, r6, lr}
 8009a48:	681d      	ldr	r5, [r3, #0]
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	b125      	cbz	r5, 8009a5a <__swsetup_r+0x16>
 8009a50:	69ab      	ldr	r3, [r5, #24]
 8009a52:	b913      	cbnz	r3, 8009a5a <__swsetup_r+0x16>
 8009a54:	4628      	mov	r0, r5
 8009a56:	f7ff fa57 	bl	8008f08 <__sinit>
 8009a5a:	4b2e      	ldr	r3, [pc, #184]	; (8009b14 <__swsetup_r+0xd0>)
 8009a5c:	429c      	cmp	r4, r3
 8009a5e:	d10f      	bne.n	8009a80 <__swsetup_r+0x3c>
 8009a60:	686c      	ldr	r4, [r5, #4]
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a68:	0719      	lsls	r1, r3, #28
 8009a6a:	d42c      	bmi.n	8009ac6 <__swsetup_r+0x82>
 8009a6c:	06dd      	lsls	r5, r3, #27
 8009a6e:	d411      	bmi.n	8009a94 <__swsetup_r+0x50>
 8009a70:	2309      	movs	r3, #9
 8009a72:	6033      	str	r3, [r6, #0]
 8009a74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a78:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7c:	81a3      	strh	r3, [r4, #12]
 8009a7e:	e03e      	b.n	8009afe <__swsetup_r+0xba>
 8009a80:	4b25      	ldr	r3, [pc, #148]	; (8009b18 <__swsetup_r+0xd4>)
 8009a82:	429c      	cmp	r4, r3
 8009a84:	d101      	bne.n	8009a8a <__swsetup_r+0x46>
 8009a86:	68ac      	ldr	r4, [r5, #8]
 8009a88:	e7eb      	b.n	8009a62 <__swsetup_r+0x1e>
 8009a8a:	4b24      	ldr	r3, [pc, #144]	; (8009b1c <__swsetup_r+0xd8>)
 8009a8c:	429c      	cmp	r4, r3
 8009a8e:	bf08      	it	eq
 8009a90:	68ec      	ldreq	r4, [r5, #12]
 8009a92:	e7e6      	b.n	8009a62 <__swsetup_r+0x1e>
 8009a94:	0758      	lsls	r0, r3, #29
 8009a96:	d512      	bpl.n	8009abe <__swsetup_r+0x7a>
 8009a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a9a:	b141      	cbz	r1, 8009aae <__swsetup_r+0x6a>
 8009a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	d002      	beq.n	8009aaa <__swsetup_r+0x66>
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f7ff f8ab 	bl	8008c00 <_free_r>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	6363      	str	r3, [r4, #52]	; 0x34
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ab4:	81a3      	strh	r3, [r4, #12]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	6063      	str	r3, [r4, #4]
 8009aba:	6923      	ldr	r3, [r4, #16]
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	89a3      	ldrh	r3, [r4, #12]
 8009ac0:	f043 0308 	orr.w	r3, r3, #8
 8009ac4:	81a3      	strh	r3, [r4, #12]
 8009ac6:	6923      	ldr	r3, [r4, #16]
 8009ac8:	b94b      	cbnz	r3, 8009ade <__swsetup_r+0x9a>
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad4:	d003      	beq.n	8009ade <__swsetup_r+0x9a>
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f000 f927 	bl	8009d2c <__smakebuf_r>
 8009ade:	89a0      	ldrh	r0, [r4, #12]
 8009ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ae4:	f010 0301 	ands.w	r3, r0, #1
 8009ae8:	d00a      	beq.n	8009b00 <__swsetup_r+0xbc>
 8009aea:	2300      	movs	r3, #0
 8009aec:	60a3      	str	r3, [r4, #8]
 8009aee:	6963      	ldr	r3, [r4, #20]
 8009af0:	425b      	negs	r3, r3
 8009af2:	61a3      	str	r3, [r4, #24]
 8009af4:	6923      	ldr	r3, [r4, #16]
 8009af6:	b943      	cbnz	r3, 8009b0a <__swsetup_r+0xc6>
 8009af8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009afc:	d1ba      	bne.n	8009a74 <__swsetup_r+0x30>
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	0781      	lsls	r1, r0, #30
 8009b02:	bf58      	it	pl
 8009b04:	6963      	ldrpl	r3, [r4, #20]
 8009b06:	60a3      	str	r3, [r4, #8]
 8009b08:	e7f4      	b.n	8009af4 <__swsetup_r+0xb0>
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	e7f7      	b.n	8009afe <__swsetup_r+0xba>
 8009b0e:	bf00      	nop
 8009b10:	2000017c 	.word	0x2000017c
 8009b14:	0800a214 	.word	0x0800a214
 8009b18:	0800a234 	.word	0x0800a234
 8009b1c:	0800a1f4 	.word	0x0800a1f4

08009b20 <_close_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	2300      	movs	r3, #0
 8009b24:	4d05      	ldr	r5, [pc, #20]	; (8009b3c <_close_r+0x1c>)
 8009b26:	4604      	mov	r4, r0
 8009b28:	4608      	mov	r0, r1
 8009b2a:	602b      	str	r3, [r5, #0]
 8009b2c:	f7f6 ff27 	bl	800097e <_close>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_close_r+0x1a>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_close_r+0x1a>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20001430 	.word	0x20001430

08009b40 <__sflush_r>:
 8009b40:	898a      	ldrh	r2, [r1, #12]
 8009b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b44:	4605      	mov	r5, r0
 8009b46:	0710      	lsls	r0, r2, #28
 8009b48:	460c      	mov	r4, r1
 8009b4a:	d457      	bmi.n	8009bfc <__sflush_r+0xbc>
 8009b4c:	684b      	ldr	r3, [r1, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	dc04      	bgt.n	8009b5c <__sflush_r+0x1c>
 8009b52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	dc01      	bgt.n	8009b5c <__sflush_r+0x1c>
 8009b58:	2000      	movs	r0, #0
 8009b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b5e:	2e00      	cmp	r6, #0
 8009b60:	d0fa      	beq.n	8009b58 <__sflush_r+0x18>
 8009b62:	2300      	movs	r3, #0
 8009b64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b68:	682f      	ldr	r7, [r5, #0]
 8009b6a:	602b      	str	r3, [r5, #0]
 8009b6c:	d032      	beq.n	8009bd4 <__sflush_r+0x94>
 8009b6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	075a      	lsls	r2, r3, #29
 8009b74:	d505      	bpl.n	8009b82 <__sflush_r+0x42>
 8009b76:	6863      	ldr	r3, [r4, #4]
 8009b78:	1ac0      	subs	r0, r0, r3
 8009b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b7c:	b10b      	cbz	r3, 8009b82 <__sflush_r+0x42>
 8009b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b80:	1ac0      	subs	r0, r0, r3
 8009b82:	2300      	movs	r3, #0
 8009b84:	4602      	mov	r2, r0
 8009b86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b88:	4628      	mov	r0, r5
 8009b8a:	6a21      	ldr	r1, [r4, #32]
 8009b8c:	47b0      	blx	r6
 8009b8e:	1c43      	adds	r3, r0, #1
 8009b90:	89a3      	ldrh	r3, [r4, #12]
 8009b92:	d106      	bne.n	8009ba2 <__sflush_r+0x62>
 8009b94:	6829      	ldr	r1, [r5, #0]
 8009b96:	291d      	cmp	r1, #29
 8009b98:	d82c      	bhi.n	8009bf4 <__sflush_r+0xb4>
 8009b9a:	4a29      	ldr	r2, [pc, #164]	; (8009c40 <__sflush_r+0x100>)
 8009b9c:	40ca      	lsrs	r2, r1
 8009b9e:	07d6      	lsls	r6, r2, #31
 8009ba0:	d528      	bpl.n	8009bf4 <__sflush_r+0xb4>
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	6062      	str	r2, [r4, #4]
 8009ba6:	6922      	ldr	r2, [r4, #16]
 8009ba8:	04d9      	lsls	r1, r3, #19
 8009baa:	6022      	str	r2, [r4, #0]
 8009bac:	d504      	bpl.n	8009bb8 <__sflush_r+0x78>
 8009bae:	1c42      	adds	r2, r0, #1
 8009bb0:	d101      	bne.n	8009bb6 <__sflush_r+0x76>
 8009bb2:	682b      	ldr	r3, [r5, #0]
 8009bb4:	b903      	cbnz	r3, 8009bb8 <__sflush_r+0x78>
 8009bb6:	6560      	str	r0, [r4, #84]	; 0x54
 8009bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bba:	602f      	str	r7, [r5, #0]
 8009bbc:	2900      	cmp	r1, #0
 8009bbe:	d0cb      	beq.n	8009b58 <__sflush_r+0x18>
 8009bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bc4:	4299      	cmp	r1, r3
 8009bc6:	d002      	beq.n	8009bce <__sflush_r+0x8e>
 8009bc8:	4628      	mov	r0, r5
 8009bca:	f7ff f819 	bl	8008c00 <_free_r>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	6360      	str	r0, [r4, #52]	; 0x34
 8009bd2:	e7c2      	b.n	8009b5a <__sflush_r+0x1a>
 8009bd4:	6a21      	ldr	r1, [r4, #32]
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	4628      	mov	r0, r5
 8009bda:	47b0      	blx	r6
 8009bdc:	1c41      	adds	r1, r0, #1
 8009bde:	d1c7      	bne.n	8009b70 <__sflush_r+0x30>
 8009be0:	682b      	ldr	r3, [r5, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0c4      	beq.n	8009b70 <__sflush_r+0x30>
 8009be6:	2b1d      	cmp	r3, #29
 8009be8:	d001      	beq.n	8009bee <__sflush_r+0xae>
 8009bea:	2b16      	cmp	r3, #22
 8009bec:	d101      	bne.n	8009bf2 <__sflush_r+0xb2>
 8009bee:	602f      	str	r7, [r5, #0]
 8009bf0:	e7b2      	b.n	8009b58 <__sflush_r+0x18>
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf8:	81a3      	strh	r3, [r4, #12]
 8009bfa:	e7ae      	b.n	8009b5a <__sflush_r+0x1a>
 8009bfc:	690f      	ldr	r7, [r1, #16]
 8009bfe:	2f00      	cmp	r7, #0
 8009c00:	d0aa      	beq.n	8009b58 <__sflush_r+0x18>
 8009c02:	0793      	lsls	r3, r2, #30
 8009c04:	bf18      	it	ne
 8009c06:	2300      	movne	r3, #0
 8009c08:	680e      	ldr	r6, [r1, #0]
 8009c0a:	bf08      	it	eq
 8009c0c:	694b      	ldreq	r3, [r1, #20]
 8009c0e:	1bf6      	subs	r6, r6, r7
 8009c10:	600f      	str	r7, [r1, #0]
 8009c12:	608b      	str	r3, [r1, #8]
 8009c14:	2e00      	cmp	r6, #0
 8009c16:	dd9f      	ble.n	8009b58 <__sflush_r+0x18>
 8009c18:	4633      	mov	r3, r6
 8009c1a:	463a      	mov	r2, r7
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	6a21      	ldr	r1, [r4, #32]
 8009c20:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009c24:	47e0      	blx	ip
 8009c26:	2800      	cmp	r0, #0
 8009c28:	dc06      	bgt.n	8009c38 <__sflush_r+0xf8>
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c34:	81a3      	strh	r3, [r4, #12]
 8009c36:	e790      	b.n	8009b5a <__sflush_r+0x1a>
 8009c38:	4407      	add	r7, r0
 8009c3a:	1a36      	subs	r6, r6, r0
 8009c3c:	e7ea      	b.n	8009c14 <__sflush_r+0xd4>
 8009c3e:	bf00      	nop
 8009c40:	20400001 	.word	0x20400001

08009c44 <_fflush_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	690b      	ldr	r3, [r1, #16]
 8009c48:	4605      	mov	r5, r0
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	b913      	cbnz	r3, 8009c54 <_fflush_r+0x10>
 8009c4e:	2500      	movs	r5, #0
 8009c50:	4628      	mov	r0, r5
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
 8009c54:	b118      	cbz	r0, 8009c5e <_fflush_r+0x1a>
 8009c56:	6983      	ldr	r3, [r0, #24]
 8009c58:	b90b      	cbnz	r3, 8009c5e <_fflush_r+0x1a>
 8009c5a:	f7ff f955 	bl	8008f08 <__sinit>
 8009c5e:	4b14      	ldr	r3, [pc, #80]	; (8009cb0 <_fflush_r+0x6c>)
 8009c60:	429c      	cmp	r4, r3
 8009c62:	d11b      	bne.n	8009c9c <_fflush_r+0x58>
 8009c64:	686c      	ldr	r4, [r5, #4]
 8009c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d0ef      	beq.n	8009c4e <_fflush_r+0xa>
 8009c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c70:	07d0      	lsls	r0, r2, #31
 8009c72:	d404      	bmi.n	8009c7e <_fflush_r+0x3a>
 8009c74:	0599      	lsls	r1, r3, #22
 8009c76:	d402      	bmi.n	8009c7e <_fflush_r+0x3a>
 8009c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c7a:	f7ff f9e3 	bl	8009044 <__retarget_lock_acquire_recursive>
 8009c7e:	4628      	mov	r0, r5
 8009c80:	4621      	mov	r1, r4
 8009c82:	f7ff ff5d 	bl	8009b40 <__sflush_r>
 8009c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c88:	4605      	mov	r5, r0
 8009c8a:	07da      	lsls	r2, r3, #31
 8009c8c:	d4e0      	bmi.n	8009c50 <_fflush_r+0xc>
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	059b      	lsls	r3, r3, #22
 8009c92:	d4dd      	bmi.n	8009c50 <_fflush_r+0xc>
 8009c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c96:	f7ff f9d6 	bl	8009046 <__retarget_lock_release_recursive>
 8009c9a:	e7d9      	b.n	8009c50 <_fflush_r+0xc>
 8009c9c:	4b05      	ldr	r3, [pc, #20]	; (8009cb4 <_fflush_r+0x70>)
 8009c9e:	429c      	cmp	r4, r3
 8009ca0:	d101      	bne.n	8009ca6 <_fflush_r+0x62>
 8009ca2:	68ac      	ldr	r4, [r5, #8]
 8009ca4:	e7df      	b.n	8009c66 <_fflush_r+0x22>
 8009ca6:	4b04      	ldr	r3, [pc, #16]	; (8009cb8 <_fflush_r+0x74>)
 8009ca8:	429c      	cmp	r4, r3
 8009caa:	bf08      	it	eq
 8009cac:	68ec      	ldreq	r4, [r5, #12]
 8009cae:	e7da      	b.n	8009c66 <_fflush_r+0x22>
 8009cb0:	0800a214 	.word	0x0800a214
 8009cb4:	0800a234 	.word	0x0800a234
 8009cb8:	0800a1f4 	.word	0x0800a1f4

08009cbc <_lseek_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	4608      	mov	r0, r1
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	4d05      	ldr	r5, [pc, #20]	; (8009cdc <_lseek_r+0x20>)
 8009cc8:	602a      	str	r2, [r5, #0]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f7f6 fe7b 	bl	80009c6 <_lseek>
 8009cd0:	1c43      	adds	r3, r0, #1
 8009cd2:	d102      	bne.n	8009cda <_lseek_r+0x1e>
 8009cd4:	682b      	ldr	r3, [r5, #0]
 8009cd6:	b103      	cbz	r3, 8009cda <_lseek_r+0x1e>
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	20001430 	.word	0x20001430

08009ce0 <__swhatbuf_r>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	460e      	mov	r6, r1
 8009ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce8:	4614      	mov	r4, r2
 8009cea:	2900      	cmp	r1, #0
 8009cec:	461d      	mov	r5, r3
 8009cee:	b096      	sub	sp, #88	; 0x58
 8009cf0:	da08      	bge.n	8009d04 <__swhatbuf_r+0x24>
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009cf8:	602a      	str	r2, [r5, #0]
 8009cfa:	061a      	lsls	r2, r3, #24
 8009cfc:	d410      	bmi.n	8009d20 <__swhatbuf_r+0x40>
 8009cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d02:	e00e      	b.n	8009d22 <__swhatbuf_r+0x42>
 8009d04:	466a      	mov	r2, sp
 8009d06:	f000 f8c9 	bl	8009e9c <_fstat_r>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	dbf1      	blt.n	8009cf2 <__swhatbuf_r+0x12>
 8009d0e:	9a01      	ldr	r2, [sp, #4]
 8009d10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d18:	425a      	negs	r2, r3
 8009d1a:	415a      	adcs	r2, r3
 8009d1c:	602a      	str	r2, [r5, #0]
 8009d1e:	e7ee      	b.n	8009cfe <__swhatbuf_r+0x1e>
 8009d20:	2340      	movs	r3, #64	; 0x40
 8009d22:	2000      	movs	r0, #0
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	b016      	add	sp, #88	; 0x58
 8009d28:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d2c <__smakebuf_r>:
 8009d2c:	898b      	ldrh	r3, [r1, #12]
 8009d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d30:	079d      	lsls	r5, r3, #30
 8009d32:	4606      	mov	r6, r0
 8009d34:	460c      	mov	r4, r1
 8009d36:	d507      	bpl.n	8009d48 <__smakebuf_r+0x1c>
 8009d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	6123      	str	r3, [r4, #16]
 8009d40:	2301      	movs	r3, #1
 8009d42:	6163      	str	r3, [r4, #20]
 8009d44:	b002      	add	sp, #8
 8009d46:	bd70      	pop	{r4, r5, r6, pc}
 8009d48:	466a      	mov	r2, sp
 8009d4a:	ab01      	add	r3, sp, #4
 8009d4c:	f7ff ffc8 	bl	8009ce0 <__swhatbuf_r>
 8009d50:	9900      	ldr	r1, [sp, #0]
 8009d52:	4605      	mov	r5, r0
 8009d54:	4630      	mov	r0, r6
 8009d56:	f7fe ffbb 	bl	8008cd0 <_malloc_r>
 8009d5a:	b948      	cbnz	r0, 8009d70 <__smakebuf_r+0x44>
 8009d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d60:	059a      	lsls	r2, r3, #22
 8009d62:	d4ef      	bmi.n	8009d44 <__smakebuf_r+0x18>
 8009d64:	f023 0303 	bic.w	r3, r3, #3
 8009d68:	f043 0302 	orr.w	r3, r3, #2
 8009d6c:	81a3      	strh	r3, [r4, #12]
 8009d6e:	e7e3      	b.n	8009d38 <__smakebuf_r+0xc>
 8009d70:	4b0d      	ldr	r3, [pc, #52]	; (8009da8 <__smakebuf_r+0x7c>)
 8009d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	6020      	str	r0, [r4, #0]
 8009d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	9b00      	ldr	r3, [sp, #0]
 8009d80:	6120      	str	r0, [r4, #16]
 8009d82:	6163      	str	r3, [r4, #20]
 8009d84:	9b01      	ldr	r3, [sp, #4]
 8009d86:	b15b      	cbz	r3, 8009da0 <__smakebuf_r+0x74>
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d8e:	f000 f897 	bl	8009ec0 <_isatty_r>
 8009d92:	b128      	cbz	r0, 8009da0 <__smakebuf_r+0x74>
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	f023 0303 	bic.w	r3, r3, #3
 8009d9a:	f043 0301 	orr.w	r3, r3, #1
 8009d9e:	81a3      	strh	r3, [r4, #12]
 8009da0:	89a0      	ldrh	r0, [r4, #12]
 8009da2:	4305      	orrs	r5, r0
 8009da4:	81a5      	strh	r5, [r4, #12]
 8009da6:	e7cd      	b.n	8009d44 <__smakebuf_r+0x18>
 8009da8:	08008ea1 	.word	0x08008ea1

08009dac <memchr>:
 8009dac:	4603      	mov	r3, r0
 8009dae:	b510      	push	{r4, lr}
 8009db0:	b2c9      	uxtb	r1, r1
 8009db2:	4402      	add	r2, r0
 8009db4:	4293      	cmp	r3, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	d101      	bne.n	8009dbe <memchr+0x12>
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e003      	b.n	8009dc6 <memchr+0x1a>
 8009dbe:	7804      	ldrb	r4, [r0, #0]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	428c      	cmp	r4, r1
 8009dc4:	d1f6      	bne.n	8009db4 <memchr+0x8>
 8009dc6:	bd10      	pop	{r4, pc}

08009dc8 <memcpy>:
 8009dc8:	440a      	add	r2, r1
 8009dca:	4291      	cmp	r1, r2
 8009dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dd0:	d100      	bne.n	8009dd4 <memcpy+0xc>
 8009dd2:	4770      	bx	lr
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dda:	4291      	cmp	r1, r2
 8009ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009de0:	d1f9      	bne.n	8009dd6 <memcpy+0xe>
 8009de2:	bd10      	pop	{r4, pc}

08009de4 <memmove>:
 8009de4:	4288      	cmp	r0, r1
 8009de6:	b510      	push	{r4, lr}
 8009de8:	eb01 0402 	add.w	r4, r1, r2
 8009dec:	d902      	bls.n	8009df4 <memmove+0x10>
 8009dee:	4284      	cmp	r4, r0
 8009df0:	4623      	mov	r3, r4
 8009df2:	d807      	bhi.n	8009e04 <memmove+0x20>
 8009df4:	1e43      	subs	r3, r0, #1
 8009df6:	42a1      	cmp	r1, r4
 8009df8:	d008      	beq.n	8009e0c <memmove+0x28>
 8009dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e02:	e7f8      	b.n	8009df6 <memmove+0x12>
 8009e04:	4601      	mov	r1, r0
 8009e06:	4402      	add	r2, r0
 8009e08:	428a      	cmp	r2, r1
 8009e0a:	d100      	bne.n	8009e0e <memmove+0x2a>
 8009e0c:	bd10      	pop	{r4, pc}
 8009e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e16:	e7f7      	b.n	8009e08 <memmove+0x24>

08009e18 <_realloc_r>:
 8009e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1c:	4680      	mov	r8, r0
 8009e1e:	4614      	mov	r4, r2
 8009e20:	460e      	mov	r6, r1
 8009e22:	b921      	cbnz	r1, 8009e2e <_realloc_r+0x16>
 8009e24:	4611      	mov	r1, r2
 8009e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2a:	f7fe bf51 	b.w	8008cd0 <_malloc_r>
 8009e2e:	b92a      	cbnz	r2, 8009e3c <_realloc_r+0x24>
 8009e30:	f7fe fee6 	bl	8008c00 <_free_r>
 8009e34:	4625      	mov	r5, r4
 8009e36:	4628      	mov	r0, r5
 8009e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e3c:	f000 f850 	bl	8009ee0 <_malloc_usable_size_r>
 8009e40:	4284      	cmp	r4, r0
 8009e42:	4607      	mov	r7, r0
 8009e44:	d802      	bhi.n	8009e4c <_realloc_r+0x34>
 8009e46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e4a:	d812      	bhi.n	8009e72 <_realloc_r+0x5a>
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	4640      	mov	r0, r8
 8009e50:	f7fe ff3e 	bl	8008cd0 <_malloc_r>
 8009e54:	4605      	mov	r5, r0
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d0ed      	beq.n	8009e36 <_realloc_r+0x1e>
 8009e5a:	42bc      	cmp	r4, r7
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	4631      	mov	r1, r6
 8009e60:	bf28      	it	cs
 8009e62:	463a      	movcs	r2, r7
 8009e64:	f7ff ffb0 	bl	8009dc8 <memcpy>
 8009e68:	4631      	mov	r1, r6
 8009e6a:	4640      	mov	r0, r8
 8009e6c:	f7fe fec8 	bl	8008c00 <_free_r>
 8009e70:	e7e1      	b.n	8009e36 <_realloc_r+0x1e>
 8009e72:	4635      	mov	r5, r6
 8009e74:	e7df      	b.n	8009e36 <_realloc_r+0x1e>
	...

08009e78 <_read_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	4608      	mov	r0, r1
 8009e7e:	4611      	mov	r1, r2
 8009e80:	2200      	movs	r2, #0
 8009e82:	4d05      	ldr	r5, [pc, #20]	; (8009e98 <_read_r+0x20>)
 8009e84:	602a      	str	r2, [r5, #0]
 8009e86:	461a      	mov	r2, r3
 8009e88:	f7f6 fd5c 	bl	8000944 <_read>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d102      	bne.n	8009e96 <_read_r+0x1e>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b103      	cbz	r3, 8009e96 <_read_r+0x1e>
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	20001430 	.word	0x20001430

08009e9c <_fstat_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	4d06      	ldr	r5, [pc, #24]	; (8009ebc <_fstat_r+0x20>)
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	4608      	mov	r0, r1
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	f7f6 fd73 	bl	8000994 <_fstat>
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	d102      	bne.n	8009eb8 <_fstat_r+0x1c>
 8009eb2:	682b      	ldr	r3, [r5, #0]
 8009eb4:	b103      	cbz	r3, 8009eb8 <_fstat_r+0x1c>
 8009eb6:	6023      	str	r3, [r4, #0]
 8009eb8:	bd38      	pop	{r3, r4, r5, pc}
 8009eba:	bf00      	nop
 8009ebc:	20001430 	.word	0x20001430

08009ec0 <_isatty_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	4d05      	ldr	r5, [pc, #20]	; (8009edc <_isatty_r+0x1c>)
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	4608      	mov	r0, r1
 8009eca:	602b      	str	r3, [r5, #0]
 8009ecc:	f7f6 fd71 	bl	80009b2 <_isatty>
 8009ed0:	1c43      	adds	r3, r0, #1
 8009ed2:	d102      	bne.n	8009eda <_isatty_r+0x1a>
 8009ed4:	682b      	ldr	r3, [r5, #0]
 8009ed6:	b103      	cbz	r3, 8009eda <_isatty_r+0x1a>
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	bd38      	pop	{r3, r4, r5, pc}
 8009edc:	20001430 	.word	0x20001430

08009ee0 <_malloc_usable_size_r>:
 8009ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ee4:	1f18      	subs	r0, r3, #4
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	bfbc      	itt	lt
 8009eea:	580b      	ldrlt	r3, [r1, r0]
 8009eec:	18c0      	addlt	r0, r0, r3
 8009eee:	4770      	bx	lr

08009ef0 <_init>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	bf00      	nop
 8009ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef6:	bc08      	pop	{r3}
 8009ef8:	469e      	mov	lr, r3
 8009efa:	4770      	bx	lr

08009efc <_fini>:
 8009efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efe:	bf00      	nop
 8009f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f02:	bc08      	pop	{r3}
 8009f04:	469e      	mov	lr, r3
 8009f06:	4770      	bx	lr
