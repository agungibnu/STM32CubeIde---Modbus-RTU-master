
Modbus_RTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ec0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08009fcc  08009fcc  00019fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a33c  0800a33c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a33c  0800a33c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a33c  0800a33c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a33c  0800a33c  0001a33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a340  0800a340  0001a340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000129c  200001e0  0800a524  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000147c  0800a524  0002147c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012166  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d0  00000000  00000000  0003236f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00035640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00036480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab23  00000000  00000000  00037158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012931  00000000  00000000  00051c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b20  00000000  00000000  000645ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed0cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f0  00000000  00000000  000ed11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009fb4 	.word	0x08009fb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08009fb4 	.word	0x08009fb4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Serial Wire Debug SWO Pri
int _write(int file, char *ptr, int len){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
     int DataIdx;
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001b4:	2300      	movs	r3, #0
 80001b6:	617b      	str	r3, [r7, #20]
 80001b8:	e009      	b.n	80001ce <_write+0x26>
         ITM_SendChar((*ptr++));
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	1c5a      	adds	r2, r3, #1
 80001be:	60ba      	str	r2, [r7, #8]
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f7ff ffca 	bl	800015c <ITM_SendChar>
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001c8:	697b      	ldr	r3, [r7, #20]
 80001ca:	3301      	adds	r3, #1
 80001cc:	617b      	str	r3, [r7, #20]
 80001ce:	697a      	ldr	r2, [r7, #20]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	dbf1      	blt.n	80001ba <_write+0x12>
     }
     return len;
 80001d6:	687b      	ldr	r3, [r7, #4]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3718      	adds	r7, #24
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}

080001e0 <send_debug_CDC>:

void send_debug_CDC(char *data){
 80001e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001e4:	b087      	sub	sp, #28
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
 80001ea:	466b      	mov	r3, sp
 80001ec:	461e      	mov	r6, r3

	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f4:	482e      	ldr	r0, [pc, #184]	; (80002b0 <send_debug_CDC+0xd0>)
 80001f6:	f001 f881 	bl	80012fc <HAL_GPIO_WritePin>
	int dataLen = strlen(data);
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f7ff ffa6 	bl	800014c <strlen>
 8000200:	4603      	mov	r3, r0
 8000202:	617b      	str	r3, [r7, #20]
	char dataCDC[dataLen + 1];
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	1c59      	adds	r1, r3, #1
 8000208:	1e4b      	subs	r3, r1, #1
 800020a:	613b      	str	r3, [r7, #16]
 800020c:	460a      	mov	r2, r1
 800020e:	2300      	movs	r3, #0
 8000210:	4690      	mov	r8, r2
 8000212:	4699      	mov	r9, r3
 8000214:	f04f 0200 	mov.w	r2, #0
 8000218:	f04f 0300 	mov.w	r3, #0
 800021c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000220:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000224:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000228:	460a      	mov	r2, r1
 800022a:	2300      	movs	r3, #0
 800022c:	4614      	mov	r4, r2
 800022e:	461d      	mov	r5, r3
 8000230:	f04f 0200 	mov.w	r2, #0
 8000234:	f04f 0300 	mov.w	r3, #0
 8000238:	00eb      	lsls	r3, r5, #3
 800023a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800023e:	00e2      	lsls	r2, r4, #3
 8000240:	460b      	mov	r3, r1
 8000242:	3307      	adds	r3, #7
 8000244:	08db      	lsrs	r3, r3, #3
 8000246:	00db      	lsls	r3, r3, #3
 8000248:	ebad 0d03 	sub.w	sp, sp, r3
 800024c:	466b      	mov	r3, sp
 800024e:	3300      	adds	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
	strcpy(dataCDC, data);
 8000252:	6879      	ldr	r1, [r7, #4]
 8000254:	68f8      	ldr	r0, [r7, #12]
 8000256:	f008 fe59 	bl	8008f0c <strcpy>
	dataCDC[dataLen] = '\n';
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	4413      	add	r3, r2
 8000260:	220a      	movs	r2, #10
 8000262:	701a      	strb	r2, [r3, #0]
	dataCDC[dataLen + 1] = '\0';
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	3301      	adds	r3, #1
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	2100      	movs	r1, #0
 800026c:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS((uint8_t*)dataCDC, strlen(dataCDC));
 800026e:	68f8      	ldr	r0, [r7, #12]
 8000270:	f7ff ff6c 	bl	800014c <strlen>
 8000274:	4603      	mov	r3, r0
 8000276:	b29b      	uxth	r3, r3
 8000278:	4619      	mov	r1, r3
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f008 f902 	bl	8008484 <CDC_Transmit_FS>
	printf(dataCDC);
 8000280:	68f8      	ldr	r0, [r7, #12]
 8000282:	f008 fdfb 	bl	8008e7c <iprintf>
	HAL_Delay(5);
 8000286:	2005      	movs	r0, #5
 8000288:	f000 fcd0 	bl	8000c2c <HAL_Delay>
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 1);
 800028c:	2201      	movs	r2, #1
 800028e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000292:	4807      	ldr	r0, [pc, #28]	; (80002b0 <send_debug_CDC+0xd0>)
 8000294:	f001 f832 	bl	80012fc <HAL_GPIO_WritePin>
	free(text);
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <send_debug_CDC+0xd4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4618      	mov	r0, r3
 800029e:	f008 fd01 	bl	8008ca4 <free>
 80002a2:	46b5      	mov	sp, r6
}
 80002a4:	bf00      	nop
 80002a6:	371c      	adds	r7, #28
 80002a8:	46bd      	mov	sp, r7
 80002aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80002ae:	bf00      	nop
 80002b0:	40011000 	.word	0x40011000
 80002b4:	200002b8 	.word	0x200002b8

080002b8 <modbus>:

void modbus(uint8_t slaveAdd, uint8_t funcCode, uint8_t startAddr1, uint8_t startAddr2, uint8_t qty1, uint8_t qty2){
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b08b      	sub	sp, #44	; 0x2c
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4604      	mov	r4, r0
 80002c0:	4608      	mov	r0, r1
 80002c2:	4611      	mov	r1, r2
 80002c4:	461a      	mov	r2, r3
 80002c6:	4623      	mov	r3, r4
 80002c8:	71fb      	strb	r3, [r7, #7]
 80002ca:	4603      	mov	r3, r0
 80002cc:	71bb      	strb	r3, [r7, #6]
 80002ce:	460b      	mov	r3, r1
 80002d0:	717b      	strb	r3, [r7, #5]
 80002d2:	4613      	mov	r3, r2
 80002d4:	713b      	strb	r3, [r7, #4]
	uint8_t* dataFrame[] = {&slaveAdd, &funcCode, &startAddr1, &startAddr2, &qty1, &qty2};
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	1dbb      	adds	r3, r7, #6
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	1d7b      	adds	r3, r7, #5
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002ea:	61bb      	str	r3, [r7, #24]
 80002ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f0:	61fb      	str	r3, [r7, #28]

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, Rxdata, 32);
 80002f2:	2220      	movs	r2, #32
 80002f4:	4917      	ldr	r1, [pc, #92]	; (8000354 <modbus+0x9c>)
 80002f6:	4818      	ldr	r0, [pc, #96]	; (8000358 <modbus+0xa0>)
 80002f8:	f003 fb1f 	bl	800393a <HAL_UARTEx_ReceiveToIdle_IT>

	for (int x = 0; x < 6; x++){
 80002fc:	2300      	movs	r3, #0
 80002fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000300:	e00e      	b.n	8000320 <modbus+0x68>
		Txdata[x] = *dataFrame[x];
 8000302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	3328      	adds	r3, #40	; 0x28
 8000308:	443b      	add	r3, r7
 800030a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800030e:	7819      	ldrb	r1, [r3, #0]
 8000310:	4a12      	ldr	r2, [pc, #72]	; (800035c <modbus+0xa4>)
 8000312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000314:	4413      	add	r3, r2
 8000316:	460a      	mov	r2, r1
 8000318:	701a      	strb	r2, [r3, #0]
	for (int x = 0; x < 6; x++){
 800031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800031c:	3301      	adds	r3, #1
 800031e:	627b      	str	r3, [r7, #36]	; 0x24
 8000320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000322:	2b05      	cmp	r3, #5
 8000324:	dded      	ble.n	8000302 <modbus+0x4a>
	}

	uint16_t crc = crc16(Txdata, 6);
 8000326:	2106      	movs	r1, #6
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <modbus+0xa4>)
 800032a:	f000 fa2b 	bl	8000784 <crc16>
 800032e:	4603      	mov	r3, r0
 8000330:	847b      	strh	r3, [r7, #34]	; 0x22
    Txdata[6] = crc & 0xFF;         // CRC Low
 8000332:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <modbus+0xa4>)
 8000338:	719a      	strb	r2, [r3, #6]
    Txdata[7] = (crc >> 8) & 0xFF;  // CRC High
 800033a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800033c:	0a1b      	lsrs	r3, r3, #8
 800033e:	b29b      	uxth	r3, r3
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <modbus+0xa4>)
 8000344:	71da      	strb	r2, [r3, #7]
    request_modbus(Txdata);
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <modbus+0xa4>)
 8000348:	f000 f80a 	bl	8000360 <request_modbus>
}
 800034c:	bf00      	nop
 800034e:	372c      	adds	r7, #44	; 0x2c
 8000350:	46bd      	mov	sp, r7
 8000352:	bd90      	pop	{r4, r7, pc}
 8000354:	2000028c 	.word	0x2000028c
 8000358:	20000244 	.word	0x20000244
 800035c:	200002ac 	.word	0x200002ac

08000360 <request_modbus>:

void request_modbus(uint8_t *data){
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]

	send_debug_CDC("[Modbus Request : ");
 8000368:	484d      	ldr	r0, [pc, #308]	; (80004a0 <request_modbus+0x140>)
 800036a:	f7ff ff39 	bl	80001e0 <send_debug_CDC>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 800036e:	2201      	movs	r2, #1
 8000370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000374:	484b      	ldr	r0, [pc, #300]	; (80004a4 <request_modbus+0x144>)
 8000376:	f000 ffc1 	bl	80012fc <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, data, 8, 1000);
 800037a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037e:	2208      	movs	r2, #8
 8000380:	6879      	ldr	r1, [r7, #4]
 8000382:	4849      	ldr	r0, [pc, #292]	; (80004a8 <request_modbus+0x148>)
 8000384:	f003 fa56 	bl	8003834 <HAL_UART_Transmit>

	int offset = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < sizeof(Txdata)/sizeof(Txdata[0]); i++){
 800038c:	2300      	movs	r3, #0
 800038e:	61bb      	str	r3, [r7, #24]
 8000390:	e012      	b.n	80003b8 <request_modbus+0x58>
		offset+= sprintf(text+offset, "%02X", Txdata[i]);
 8000392:	4b46      	ldr	r3, [pc, #280]	; (80004ac <request_modbus+0x14c>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	18d0      	adds	r0, r2, r3
 800039a:	4a45      	ldr	r2, [pc, #276]	; (80004b0 <request_modbus+0x150>)
 800039c:	69bb      	ldr	r3, [r7, #24]
 800039e:	4413      	add	r3, r2
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	461a      	mov	r2, r3
 80003a4:	4943      	ldr	r1, [pc, #268]	; (80004b4 <request_modbus+0x154>)
 80003a6:	f008 fd91 	bl	8008ecc <siprintf>
 80003aa:	4602      	mov	r2, r0
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	4413      	add	r3, r2
 80003b0:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < sizeof(Txdata)/sizeof(Txdata[0]); i++){
 80003b2:	69bb      	ldr	r3, [r7, #24]
 80003b4:	3301      	adds	r3, #1
 80003b6:	61bb      	str	r3, [r7, #24]
 80003b8:	69bb      	ldr	r3, [r7, #24]
 80003ba:	2b07      	cmp	r3, #7
 80003bc:	d9e9      	bls.n	8000392 <request_modbus+0x32>
	}

	send_debug_CDC(text);
 80003be:	4b3b      	ldr	r3, [pc, #236]	; (80004ac <request_modbus+0x14c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff0c 	bl	80001e0 <send_debug_CDC>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ce:	4835      	ldr	r0, [pc, #212]	; (80004a4 <request_modbus+0x144>)
 80003d0:	f000 ff94 	bl	80012fc <HAL_GPIO_WritePin>

	if (Rxdata[0] != 0){
 80003d4:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <request_modbus+0x158>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d029      	beq.n	8000430 <request_modbus+0xd0>
		modbus_stat = 1;
 80003dc:	4b37      	ldr	r3, [pc, #220]	; (80004bc <request_modbus+0x15c>)
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]
		int offset1 = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 80003e6:	2300      	movs	r3, #0
 80003e8:	613b      	str	r3, [r7, #16]
 80003ea:	e012      	b.n	8000412 <request_modbus+0xb2>
			offset1+= sprintf(text+offset1, "%02X", Rxdata[x]);
 80003ec:	4b2f      	ldr	r3, [pc, #188]	; (80004ac <request_modbus+0x14c>)
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	18d0      	adds	r0, r2, r3
 80003f4:	4a30      	ldr	r2, [pc, #192]	; (80004b8 <request_modbus+0x158>)
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	4413      	add	r3, r2
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	461a      	mov	r2, r3
 80003fe:	492d      	ldr	r1, [pc, #180]	; (80004b4 <request_modbus+0x154>)
 8000400:	f008 fd64 	bl	8008ecc <siprintf>
 8000404:	4602      	mov	r2, r0
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	4413      	add	r3, r2
 800040a:	617b      	str	r3, [r7, #20]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	3301      	adds	r3, #1
 8000410:	613b      	str	r3, [r7, #16]
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	2b1f      	cmp	r3, #31
 8000416:	d9e9      	bls.n	80003ec <request_modbus+0x8c>
		}
		send_debug_CDC("Modbus Response :");
 8000418:	4829      	ldr	r0, [pc, #164]	; (80004c0 <request_modbus+0x160>)
 800041a:	f7ff fee1 	bl	80001e0 <send_debug_CDC>
		send_debug_CDC(text);
 800041e:	4b23      	ldr	r3, [pc, #140]	; (80004ac <request_modbus+0x14c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff fedc 	bl	80001e0 <send_debug_CDC>
		HAL_Delay(5);
 8000428:	2005      	movs	r0, #5
 800042a:	f000 fbff 	bl	8000c2c <HAL_Delay>
 800042e:	e02e      	b.n	800048e <request_modbus+0x12e>

	}else{
		modbus_stat = 0;
 8000430:	4b22      	ldr	r3, [pc, #136]	; (80004bc <request_modbus+0x15c>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
		send_debug_CDC("Modbus Response :");
 8000436:	4822      	ldr	r0, [pc, #136]	; (80004c0 <request_modbus+0x160>)
 8000438:	f7ff fed2 	bl	80001e0 <send_debug_CDC>
		int offset1 = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 8000440:	2300      	movs	r3, #0
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	e012      	b.n	800046c <request_modbus+0x10c>
			offset1+= sprintf(text+offset1, "%02X", Rxdata[x]);
 8000446:	4b19      	ldr	r3, [pc, #100]	; (80004ac <request_modbus+0x14c>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	18d0      	adds	r0, r2, r3
 800044e:	4a1a      	ldr	r2, [pc, #104]	; (80004b8 <request_modbus+0x158>)
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	4413      	add	r3, r2
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	461a      	mov	r2, r3
 8000458:	4916      	ldr	r1, [pc, #88]	; (80004b4 <request_modbus+0x154>)
 800045a:	f008 fd37 	bl	8008ecc <siprintf>
 800045e:	4602      	mov	r2, r0
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	4413      	add	r3, r2
 8000464:	60fb      	str	r3, [r7, #12]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	3301      	adds	r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	2b1f      	cmp	r3, #31
 8000470:	d9e9      	bls.n	8000446 <request_modbus+0xe6>
		}
		sprintf(text,"No Response from slave!!!");
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <request_modbus+0x14c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4913      	ldr	r1, [pc, #76]	; (80004c4 <request_modbus+0x164>)
 8000478:	4618      	mov	r0, r3
 800047a:	f008 fd27 	bl	8008ecc <siprintf>
		send_debug_CDC(text);
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <request_modbus+0x14c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff feac 	bl	80001e0 <send_debug_CDC>
		HAL_Delay(5);
 8000488:	2005      	movs	r0, #5
 800048a:	f000 fbcf 	bl	8000c2c <HAL_Delay>
	}
	memset(Rxdata, 0, sizeof(Rxdata));
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	4809      	ldr	r0, [pc, #36]	; (80004b8 <request_modbus+0x158>)
 8000494:	f008 fc0e 	bl	8008cb4 <memset>
}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	08009fcc 	.word	0x08009fcc
 80004a4:	40010800 	.word	0x40010800
 80004a8:	20000244 	.word	0x20000244
 80004ac:	200002b8 	.word	0x200002b8
 80004b0:	200002ac 	.word	0x200002ac
 80004b4:	08009fe0 	.word	0x08009fe0
 80004b8:	2000028c 	.word	0x2000028c
 80004bc:	200002b4 	.word	0x200002b4
 80004c0:	08009fe8 	.word	0x08009fe8
 80004c4:	08009ffc 	.word	0x08009ffc

080004c8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]

}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
	...

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fb3f 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f827 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f8d5 	bl	800069c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004f2:	f007 ff09 	bl	8008308 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80004f6:	f000 f87b 	bl	80005f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004fa:	f000 f8a3 	bl	8000644 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_CDC("[MODBUS RTU PROGRAM]");
 80004fe:	480d      	ldr	r0, [pc, #52]	; (8000534 <main+0x54>)
 8000500:	f7ff fe6e 	bl	80001e0 <send_debug_CDC>
  text = malloc(512);
 8000504:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000508:	f008 fbc4 	bl	8008c94 <malloc>
 800050c:	4603      	mov	r3, r0
 800050e:	461a      	mov	r2, r3
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <main+0x58>)
 8000512:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  modbus(0x02, 0x03, 0x00, 0x00, 0x00, 0x0A);
 8000514:	230a      	movs	r3, #10
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2300      	movs	r3, #0
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2300      	movs	r3, #0
 800051e:	2200      	movs	r2, #0
 8000520:	2103      	movs	r1, #3
 8000522:	2002      	movs	r0, #2
 8000524:	f7ff fec8 	bl	80002b8 <modbus>
	  HAL_Delay(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052c:	f000 fb7e 	bl	8000c2c <HAL_Delay>
	  modbus(0x02, 0x03, 0x00, 0x00, 0x00, 0x0A);
 8000530:	e7f0      	b.n	8000514 <main+0x34>
 8000532:	bf00      	nop
 8000534:	0800a018 	.word	0x0800a018
 8000538:	200002b8 	.word	0x200002b8

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000546:	2228      	movs	r2, #40	; 0x28
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f008 fbb2 	bl	8008cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000588:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fc38 	bl	8002e08 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800059e:	f000 f8eb 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	2102      	movs	r1, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fea4 	bl	800330c <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005ca:	f000 f8d5 	bl	8000778 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005ce:	2310      	movs	r3, #16
 80005d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 f825 	bl	8003628 <HAL_RCCEx_PeriphCLKConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005e4:	f000 f8c8 	bl	8000778 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	; 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_USART1_UART_Init+0x4c>)
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <MX_USART1_UART_Init+0x50>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_USART1_UART_Init+0x4c>)
 80005fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_USART1_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_USART1_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000628:	f003 f8b4 	bl	8003794 <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000632:	f000 f8a1 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200001fc 	.word	0x200001fc
 8000640:	40013800 	.word	0x40013800

08000644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_USART2_UART_Init+0x50>)
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_USART2_UART_Init+0x54>)
 800064c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2400;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_USART2_UART_Init+0x50>)
 8000650:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_USART2_UART_Init+0x50>)
 8000658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800065c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_USART2_UART_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_USART2_UART_Init+0x50>)
 8000666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART2_UART_Init+0x50>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_USART2_UART_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART2_UART_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_USART2_UART_Init+0x50>)
 8000680:	f003 f888 	bl	8003794 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800068a:	f000 f875 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000244 	.word	0x20000244
 8000698:	40004400 	.word	0x40004400

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b0:	4b2e      	ldr	r3, [pc, #184]	; (800076c <MX_GPIO_Init+0xd0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a2d      	ldr	r2, [pc, #180]	; (800076c <MX_GPIO_Init+0xd0>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b2b      	ldr	r3, [pc, #172]	; (800076c <MX_GPIO_Init+0xd0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0310 	and.w	r3, r3, #16
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <MX_GPIO_Init+0xd0>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a27      	ldr	r2, [pc, #156]	; (800076c <MX_GPIO_Init+0xd0>)
 80006ce:	f043 0320 	orr.w	r3, r3, #32
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_GPIO_Init+0xd0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0320 	and.w	r3, r3, #32
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_GPIO_Init+0xd0>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <MX_GPIO_Init+0xd0>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_GPIO_Init+0xd0>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_GPIO_Init+0xd0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <MX_GPIO_Init+0xd0>)
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_GPIO_Init+0xd0>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0308 	and.w	r3, r3, #8
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000716:	4816      	ldr	r0, [pc, #88]	; (8000770 <MX_GPIO_Init+0xd4>)
 8000718:	f000 fdf0 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	4814      	ldr	r0, [pc, #80]	; (8000774 <MX_GPIO_Init+0xd8>)
 8000724:	f000 fdea 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2302      	movs	r3, #2
 8000738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	4619      	mov	r1, r3
 8000740:	480b      	ldr	r0, [pc, #44]	; (8000770 <MX_GPIO_Init+0xd4>)
 8000742:	f000 fc57 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8000746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_GPIO_Init+0xd8>)
 8000760:	f000 fc48 	bl	8000ff4 <HAL_GPIO_Init>

}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	40011000 	.word	0x40011000
 8000774:	40010800 	.word	0x40010800

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000790:	23ff      	movs	r3, #255	; 0xff
 8000792:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000794:	23ff      	movs	r3, #255	; 0xff
 8000796:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000798:	e013      	b.n	80007c2 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	781a      	ldrb	r2, [r3, #0]
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	4053      	eors	r3, r2
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <crc16+0x64>)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	4413      	add	r3, r2
 80007b0:	781a      	ldrb	r2, [r3, #0]
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	4053      	eors	r3, r2
 80007b6:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <crc16+0x68>)
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	1e5a      	subs	r2, r3, #1
 80007c6:	807a      	strh	r2, [r7, #2]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1e6      	bne.n	800079a <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b21b      	sxth	r3, r3
 80007da:	b29b      	uxth	r3, r3
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	0800a078 	.word	0x0800a078
 80007ec:	0800a178 	.word	0x0800a178

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_MspInit+0x5c>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a14      	ldr	r2, [pc, #80]	; (800084c <HAL_MspInit+0x5c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_MspInit+0x5c>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x5c>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <HAL_MspInit+0x5c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_MspInit+0x5c>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_MspInit+0x60>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_MspInit+0x60>)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	40021000 	.word	0x40021000
 8000850:	40010000 	.word	0x40010000

08000854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0318 	add.w	r3, r7, #24
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a3f      	ldr	r2, [pc, #252]	; (800096c <HAL_UART_MspInit+0x118>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d13a      	bne.n	80008ea <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000874:	4b3e      	ldr	r3, [pc, #248]	; (8000970 <HAL_UART_MspInit+0x11c>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a3d      	ldr	r2, [pc, #244]	; (8000970 <HAL_UART_MspInit+0x11c>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <HAL_UART_MspInit+0x11c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b38      	ldr	r3, [pc, #224]	; (8000970 <HAL_UART_MspInit+0x11c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a37      	ldr	r2, [pc, #220]	; (8000970 <HAL_UART_MspInit+0x11c>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b35      	ldr	r3, [pc, #212]	; (8000970 <HAL_UART_MspInit+0x11c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	4619      	mov	r1, r3
 80008b8:	482e      	ldr	r0, [pc, #184]	; (8000974 <HAL_UART_MspInit+0x120>)
 80008ba:	f000 fb9b 	bl	8000ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0318 	add.w	r3, r7, #24
 80008d0:	4619      	mov	r1, r3
 80008d2:	4828      	ldr	r0, [pc, #160]	; (8000974 <HAL_UART_MspInit+0x120>)
 80008d4:	f000 fb8e 	bl	8000ff4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2025      	movs	r0, #37	; 0x25
 80008de:	f000 faa0 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008e2:	2025      	movs	r0, #37	; 0x25
 80008e4:	f000 fab9 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e8:	e03c      	b.n	8000964 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a22      	ldr	r2, [pc, #136]	; (8000978 <HAL_UART_MspInit+0x124>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d137      	bne.n	8000964 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <HAL_UART_MspInit+0x11c>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	4a1d      	ldr	r2, [pc, #116]	; (8000970 <HAL_UART_MspInit+0x11c>)
 80008fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fe:	61d3      	str	r3, [r2, #28]
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <HAL_UART_MspInit+0x11c>)
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_UART_MspInit+0x11c>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_UART_MspInit+0x11c>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_UART_MspInit+0x11c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000924:	2304      	movs	r3, #4
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0318 	add.w	r3, r7, #24
 8000934:	4619      	mov	r1, r3
 8000936:	480f      	ldr	r0, [pc, #60]	; (8000974 <HAL_UART_MspInit+0x120>)
 8000938:	f000 fb5c 	bl	8000ff4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800093c:	2308      	movs	r3, #8
 800093e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	4619      	mov	r1, r3
 800094e:	4809      	ldr	r0, [pc, #36]	; (8000974 <HAL_UART_MspInit+0x120>)
 8000950:	f000 fb50 	bl	8000ff4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2026      	movs	r0, #38	; 0x26
 800095a:	f000 fa62 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800095e:	2026      	movs	r0, #38	; 0x26
 8000960:	f000 fa7b 	bl	8000e5a <HAL_NVIC_EnableIRQ>
}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40013800 	.word	0x40013800
 8000970:	40021000 	.word	0x40021000
 8000974:	40010800 	.word	0x40010800
 8000978:	40004400 	.word	0x40004400

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 f917 	bl	8000bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009d2:	f000 fdd0 	bl	8001576 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000f5c 	.word	0x20000f5c

080009e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <USART1_IRQHandler+0x10>)
 80009e6:	f003 f805 	bl	80039f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001fc 	.word	0x200001fc

080009f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <USART2_IRQHandler+0x10>)
 80009fa:	f002 fffb 	bl	80039f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000244 	.word	0x20000244

08000a08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e00a      	b.n	8000a30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a1a:	f3af 8000 	nop.w
 8000a1e:	4601      	mov	r1, r0
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbf0      	blt.n	8000a1a <_read+0x12>
	}

return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
	return -1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a68:	605a      	str	r2, [r3, #4]
	return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <_isatty>:

int _isatty(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr

08000a8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b085      	sub	sp, #20
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
	return 0;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
	...

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f008 f8b4 	bl	8008c40 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20005000 	.word	0x20005000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	200002bc 	.word	0x200002bc
 8000b0c:	20001480 	.word	0x20001480

08000b10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b1c:	f7ff fff8 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b22:	490c      	ldr	r1, [pc, #48]	; (8000b54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b38:	4c09      	ldr	r4, [pc, #36]	; (8000b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f008 f881 	bl	8008c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4a:	f7ff fcc9 	bl	80004e0 <main>
  bx lr
 8000b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000b58:	0800a344 	.word	0x0800a344
  ldr r2, =_sbss
 8000b5c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000b60:	2000147c 	.word	0x2000147c

08000b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_2_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_Init+0x28>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_Init+0x28>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f947 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7e:	200f      	movs	r0, #15
 8000b80:	f000 f808 	bl	8000b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b84:	f7ff fe34 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x54>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x58>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f95f 	bl	8000e76 <HAL_SYSTICK_Config>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00e      	b.n	8000be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d80a      	bhi.n	8000bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f000 f927 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_InitTick+0x5c>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x1c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x20>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <HAL_IncTick+0x20>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000008 	.word	0x20000008
 8000c14:	200002c0 	.word	0x200002c0

08000c18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b02      	ldr	r3, [pc, #8]	; (8000c28 <HAL_GetTick+0x10>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	200002c0 	.word	0x200002c0

08000c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c34:	f7ff fff0 	bl	8000c18 <HAL_GetTick>
 8000c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d005      	beq.n	8000c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_Delay+0x44>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c52:	bf00      	nop
 8000c54:	f7ff ffe0 	bl	8000c18 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8f7      	bhi.n	8000c54 <HAL_Delay+0x28>
  {
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008

08000c74 <__NVIC_SetPriorityGrouping>:
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4906      	ldr	r1, [pc, #24]	; (8000d0c <__NVIC_EnableIRQ+0x34>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Config>:
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff90 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff2d 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff42 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff90 	bl	8000d64 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5f 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff35 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa2 	bl	8000dc8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d008      	beq.n	8000eb8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e020      	b.n	8000efa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 020e 	bic.w	r2, r2, #14
 8000ec6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0201 	bic.w	r2, r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d005      	beq.n	8000f28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2204      	movs	r2, #4
 8000f20:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e051      	b.n	8000fcc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 020e 	bic.w	r2, r2, #14
 8000f36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a22      	ldr	r2, [pc, #136]	; (8000fd8 <HAL_DMA_Abort_IT+0xd4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d029      	beq.n	8000fa6 <HAL_DMA_Abort_IT+0xa2>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <HAL_DMA_Abort_IT+0xd8>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d022      	beq.n	8000fa2 <HAL_DMA_Abort_IT+0x9e>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a1f      	ldr	r2, [pc, #124]	; (8000fe0 <HAL_DMA_Abort_IT+0xdc>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d01a      	beq.n	8000f9c <HAL_DMA_Abort_IT+0x98>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <HAL_DMA_Abort_IT+0xe0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d012      	beq.n	8000f96 <HAL_DMA_Abort_IT+0x92>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <HAL_DMA_Abort_IT+0xe4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00a      	beq.n	8000f90 <HAL_DMA_Abort_IT+0x8c>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <HAL_DMA_Abort_IT+0xe8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d102      	bne.n	8000f8a <HAL_DMA_Abort_IT+0x86>
 8000f84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f88:	e00e      	b.n	8000fa8 <HAL_DMA_Abort_IT+0xa4>
 8000f8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f8e:	e00b      	b.n	8000fa8 <HAL_DMA_Abort_IT+0xa4>
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	e008      	b.n	8000fa8 <HAL_DMA_Abort_IT+0xa4>
 8000f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9a:	e005      	b.n	8000fa8 <HAL_DMA_Abort_IT+0xa4>
 8000f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa0:	e002      	b.n	8000fa8 <HAL_DMA_Abort_IT+0xa4>
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	e000      	b.n	8000fa8 <HAL_DMA_Abort_IT+0xa4>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <HAL_DMA_Abort_IT+0xec>)
 8000faa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	4798      	blx	r3
    } 
  }
  return status;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020008 	.word	0x40020008
 8000fdc:	4002001c 	.word	0x4002001c
 8000fe0:	40020030 	.word	0x40020030
 8000fe4:	40020044 	.word	0x40020044
 8000fe8:	40020058 	.word	0x40020058
 8000fec:	4002006c 	.word	0x4002006c
 8000ff0:	40020000 	.word	0x40020000

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b08b      	sub	sp, #44	; 0x2c
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001006:	e169      	b.n	80012dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001008:	2201      	movs	r2, #1
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8158 	bne.w	80012d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4a9a      	ldr	r2, [pc, #616]	; (8001294 <HAL_GPIO_Init+0x2a0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d05e      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001030:	4a98      	ldr	r2, [pc, #608]	; (8001294 <HAL_GPIO_Init+0x2a0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d875      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 8001036:	4a98      	ldr	r2, [pc, #608]	; (8001298 <HAL_GPIO_Init+0x2a4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d058      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 800103c:	4a96      	ldr	r2, [pc, #600]	; (8001298 <HAL_GPIO_Init+0x2a4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d86f      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 8001042:	4a96      	ldr	r2, [pc, #600]	; (800129c <HAL_GPIO_Init+0x2a8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d052      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001048:	4a94      	ldr	r2, [pc, #592]	; (800129c <HAL_GPIO_Init+0x2a8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d869      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 800104e:	4a94      	ldr	r2, [pc, #592]	; (80012a0 <HAL_GPIO_Init+0x2ac>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d04c      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001054:	4a92      	ldr	r2, [pc, #584]	; (80012a0 <HAL_GPIO_Init+0x2ac>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d863      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 800105a:	4a92      	ldr	r2, [pc, #584]	; (80012a4 <HAL_GPIO_Init+0x2b0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d046      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001060:	4a90      	ldr	r2, [pc, #576]	; (80012a4 <HAL_GPIO_Init+0x2b0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d85d      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 8001066:	2b12      	cmp	r3, #18
 8001068:	d82a      	bhi.n	80010c0 <HAL_GPIO_Init+0xcc>
 800106a:	2b12      	cmp	r3, #18
 800106c:	d859      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 800106e:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <HAL_GPIO_Init+0x80>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	080010ef 	.word	0x080010ef
 8001078:	080010c9 	.word	0x080010c9
 800107c:	080010db 	.word	0x080010db
 8001080:	0800111d 	.word	0x0800111d
 8001084:	08001123 	.word	0x08001123
 8001088:	08001123 	.word	0x08001123
 800108c:	08001123 	.word	0x08001123
 8001090:	08001123 	.word	0x08001123
 8001094:	08001123 	.word	0x08001123
 8001098:	08001123 	.word	0x08001123
 800109c:	08001123 	.word	0x08001123
 80010a0:	08001123 	.word	0x08001123
 80010a4:	08001123 	.word	0x08001123
 80010a8:	08001123 	.word	0x08001123
 80010ac:	08001123 	.word	0x08001123
 80010b0:	08001123 	.word	0x08001123
 80010b4:	08001123 	.word	0x08001123
 80010b8:	080010d1 	.word	0x080010d1
 80010bc:	080010e5 	.word	0x080010e5
 80010c0:	4a79      	ldr	r2, [pc, #484]	; (80012a8 <HAL_GPIO_Init+0x2b4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010c6:	e02c      	b.n	8001122 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	623b      	str	r3, [r7, #32]
          break;
 80010ce:	e029      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	3304      	adds	r3, #4
 80010d6:	623b      	str	r3, [r7, #32]
          break;
 80010d8:	e024      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	3308      	adds	r3, #8
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e01f      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	330c      	adds	r3, #12
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e01a      	b.n	8001124 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010f6:	2304      	movs	r3, #4
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e013      	b.n	8001124 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001104:	2308      	movs	r3, #8
 8001106:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	611a      	str	r2, [r3, #16]
          break;
 800110e:	e009      	b.n	8001124 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001110:	2308      	movs	r3, #8
 8001112:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	615a      	str	r2, [r3, #20]
          break;
 800111a:	e003      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
          break;
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x130>
          break;
 8001122:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2bff      	cmp	r3, #255	; 0xff
 8001128:	d801      	bhi.n	800112e <HAL_GPIO_Init+0x13a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	e001      	b.n	8001132 <HAL_GPIO_Init+0x13e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3304      	adds	r3, #4
 8001132:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d802      	bhi.n	8001140 <HAL_GPIO_Init+0x14c>
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	e002      	b.n	8001146 <HAL_GPIO_Init+0x152>
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	3b08      	subs	r3, #8
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	210f      	movs	r1, #15
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	401a      	ands	r2, r3
 8001158:	6a39      	ldr	r1, [r7, #32]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	431a      	orrs	r2, r3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 80b1 	beq.w	80012d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001174:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a4c      	ldr	r2, [pc, #304]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800118c:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <HAL_GPIO_Init+0x2bc>)
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a40      	ldr	r2, [pc, #256]	; (80012b4 <HAL_GPIO_Init+0x2c0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d013      	beq.n	80011e0 <HAL_GPIO_Init+0x1ec>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a3f      	ldr	r2, [pc, #252]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d00d      	beq.n	80011dc <HAL_GPIO_Init+0x1e8>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d007      	beq.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a3d      	ldr	r2, [pc, #244]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d101      	bne.n	80011d4 <HAL_GPIO_Init+0x1e0>
 80011d0:	2303      	movs	r3, #3
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011d4:	2304      	movs	r3, #4
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011d8:	2302      	movs	r3, #2
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011e0:	2300      	movs	r3, #0
 80011e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e4:	f002 0203 	and.w	r2, r2, #3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011f2:	492f      	ldr	r1, [pc, #188]	; (80012b0 <HAL_GPIO_Init+0x2bc>)
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	492c      	ldr	r1, [pc, #176]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	608b      	str	r3, [r1, #8]
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	43db      	mvns	r3, r3
 8001222:	4928      	ldr	r1, [pc, #160]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001224:	4013      	ands	r3, r2
 8001226:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	4922      	ldr	r1, [pc, #136]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	60cb      	str	r3, [r1, #12]
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	43db      	mvns	r3, r3
 800124a:	491e      	ldr	r1, [pc, #120]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800124c:	4013      	ands	r3, r2
 800124e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	4918      	ldr	r1, [pc, #96]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	43db      	mvns	r3, r3
 8001272:	4914      	ldr	r1, [pc, #80]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001274:	4013      	ands	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d021      	beq.n	80012c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	490e      	ldr	r1, [pc, #56]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
 8001290:	e021      	b.n	80012d6 <HAL_GPIO_Init+0x2e2>
 8001292:	bf00      	nop
 8001294:	10320000 	.word	0x10320000
 8001298:	10310000 	.word	0x10310000
 800129c:	10220000 	.word	0x10220000
 80012a0:	10210000 	.word	0x10210000
 80012a4:	10120000 	.word	0x10120000
 80012a8:	10110000 	.word	0x10110000
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	40010800 	.word	0x40010800
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40011400 	.word	0x40011400
 80012c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_GPIO_Init+0x304>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	4909      	ldr	r1, [pc, #36]	; (80012f8 <HAL_GPIO_Init+0x304>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	3301      	adds	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	fa22 f303 	lsr.w	r3, r2, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f47f ae8e 	bne.w	8001008 <HAL_GPIO_Init+0x14>
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	372c      	adds	r7, #44	; 0x2c
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	611a      	str	r2, [r3, #16]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800132c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132e:	b08b      	sub	sp, #44	; 0x2c
 8001330:	af06      	add	r7, sp, #24
 8001332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0f1      	b.n	8001522 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f007 f9ca 	bl	80086ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f003 f8e9 	bl	800453c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	687e      	ldr	r6, [r7, #4]
 8001372:	466d      	mov	r5, sp
 8001374:	f106 0410 	add.w	r4, r6, #16
 8001378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137c:	6823      	ldr	r3, [r4, #0]
 800137e:	602b      	str	r3, [r5, #0]
 8001380:	1d33      	adds	r3, r6, #4
 8001382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001384:	6838      	ldr	r0, [r7, #0]
 8001386:	f003 f8b3 	bl	80044f0 <USB_CoreInit>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2202      	movs	r2, #2
 8001394:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0c2      	b.n	8001522 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 f8e4 	bl	8004570 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e040      	b.n	8001430 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	3301      	adds	r3, #1
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	3303      	adds	r3, #3
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	3338      	adds	r3, #56	; 0x38
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	333c      	adds	r3, #60	; 0x3c
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	3340      	adds	r3, #64	; 0x40
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	3301      	adds	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	429a      	cmp	r2, r3
 8001438:	d3b9      	bcc.n	80013ae <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e044      	b.n	80014ca <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	3301      	adds	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3b5      	bcc.n	8001440 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	687e      	ldr	r6, [r7, #4]
 80014dc:	466d      	mov	r5, sp
 80014de:	f106 0410 	add.w	r4, r6, #16
 80014e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	602b      	str	r3, [r5, #0]
 80014ea:	1d33      	adds	r3, r6, #4
 80014ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ee:	6838      	ldr	r0, [r7, #0]
 80014f0:	f003 f84a 	bl	8004588 <USB_DevInit>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2202      	movs	r2, #2
 80014fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e00d      	b.n	8001522 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f005 facb 	bl	8006ab6 <USB_DevDisconnect>

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800152a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_PCD_Start+0x16>
 800153c:	2302      	movs	r3, #2
 800153e:	e016      	b.n	800156e <HAL_PCD_Start+0x44>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f002 ffdf 	bl	8004510 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001552:	2101      	movs	r1, #1
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f007 fb3c 	bl	8008bd2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f005 fa9f 	bl	8006aa2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b088      	sub	sp, #32
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f005 faa1 	bl	8006aca <USB_ReadInterrupts>
 8001588:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fb1b 	bl	8001bd0 <PCD_EP_ISR_Handler>

    return;
 800159a:	e119      	b.n	80017d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d013      	beq.n	80015ce <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015b8:	b292      	uxth	r2, r2
 80015ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f007 f90f 	bl	80087e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015c4:	2100      	movs	r1, #0
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f905 	bl	80017d6 <HAL_PCD_SetAddress>

    return;
 80015cc:	e100      	b.n	80017d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00c      	beq.n	80015f2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015ea:	b292      	uxth	r2, r2
 80015ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015f0:	e0ee      	b.n	80017d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00c      	beq.n	8001616 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001604:	b29a      	uxth	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800160e:	b292      	uxth	r2, r2
 8001610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001614:	e0dc      	b.n	80017d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d027      	beq.n	8001670 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001628:	b29a      	uxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0204 	bic.w	r2, r2, #4
 8001632:	b292      	uxth	r2, r2
 8001634:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001640:	b29a      	uxth	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0208 	bic.w	r2, r2, #8
 800164a:	b292      	uxth	r2, r2
 800164c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f007 f8ff 	bl	8008854 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800165e:	b29a      	uxth	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001668:	b292      	uxth	r2, r2
 800166a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800166e:	e0af      	b.n	80017d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8083 	beq.w	8001782 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
 8001680:	e010      	b.n	80016a4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	441a      	add	r2, r3
 800168e:	7ffb      	ldrb	r3, [r7, #31]
 8001690:	8812      	ldrh	r2, [r2, #0]
 8001692:	b292      	uxth	r2, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	3320      	adds	r3, #32
 8001698:	443b      	add	r3, r7
 800169a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800169e:	7ffb      	ldrb	r3, [r7, #31]
 80016a0:	3301      	adds	r3, #1
 80016a2:	77fb      	strb	r3, [r7, #31]
 80016a4:	7ffb      	ldrb	r3, [r7, #31]
 80016a6:	2b07      	cmp	r3, #7
 80016a8:	d9eb      	bls.n	8001682 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	b292      	uxth	r2, r2
 80016be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0201 	bic.w	r2, r2, #1
 80016d4:	b292      	uxth	r2, r2
 80016d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80016da:	bf00      	nop
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f6      	beq.n	80016dc <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001700:	b292      	uxth	r2, r2
 8001702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	77fb      	strb	r3, [r7, #31]
 800170a:	e00f      	b.n	800172c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800170c:	7ffb      	ldrb	r3, [r7, #31]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	4611      	mov	r1, r2
 8001714:	7ffa      	ldrb	r2, [r7, #31]
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	440a      	add	r2, r1
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	3320      	adds	r3, #32
 800171e:	443b      	add	r3, r7
 8001720:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001724:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001726:	7ffb      	ldrb	r3, [r7, #31]
 8001728:	3301      	adds	r3, #1
 800172a:	77fb      	strb	r3, [r7, #31]
 800172c:	7ffb      	ldrb	r3, [r7, #31]
 800172e:	2b07      	cmp	r3, #7
 8001730:	d9ec      	bls.n	800170c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800173a:	b29a      	uxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f042 0208 	orr.w	r2, r2, #8
 8001744:	b292      	uxth	r2, r2
 8001746:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800175c:	b292      	uxth	r2, r2
 800175e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800176a:	b29a      	uxth	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 0204 	orr.w	r2, r2, #4
 8001774:	b292      	uxth	r2, r2
 8001776:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f007 f850 	bl	8008820 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001780:	e026      	b.n	80017d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00f      	beq.n	80017ac <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001794:	b29a      	uxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800179e:	b292      	uxth	r2, r2
 80017a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f007 f80e 	bl	80087c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80017aa:	e011      	b.n	80017d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00c      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017c8:	b292      	uxth	r2, r2
 80017ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017ce:	bf00      	nop
  }
}
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_PCD_SetAddress+0x1a>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e013      	b.n	8001818 <HAL_PCD_SetAddress+0x42>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f005 f937 	bl	8006a7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4603      	mov	r3, r0
 8001830:	70fb      	strb	r3, [r7, #3]
 8001832:	460b      	mov	r3, r1
 8001834:	803b      	strh	r3, [r7, #0]
 8001836:	4613      	mov	r3, r2
 8001838:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800183e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001842:	2b00      	cmp	r3, #0
 8001844:	da0e      	bge.n	8001864 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	705a      	strb	r2, [r3, #1]
 8001862:	e00e      	b.n	8001882 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	f003 0207 	and.w	r2, r3, #7
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	b2da      	uxtb	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800188e:	883a      	ldrh	r2, [r7, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	78ba      	ldrb	r2, [r7, #2]
 8001898:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800189a:	78bb      	ldrb	r3, [r7, #2]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d102      	bne.n	80018a6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_PCD_EP_Open+0x94>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e00e      	b.n	80018d2 <HAL_PCD_EP_Open+0xb2>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68f9      	ldr	r1, [r7, #12]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 fe80 	bl	80045c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80018d0:	7afb      	ldrb	r3, [r7, #11]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	da0e      	bge.n	800190c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2201      	movs	r2, #1
 8001908:	705a      	strb	r2, [r3, #1]
 800190a:	e00e      	b.n	800192a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 0207 	and.w	r2, r3, #7
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	b2da      	uxtb	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_PCD_EP_Close+0x6a>
 8001940:	2302      	movs	r3, #2
 8001942:	e00e      	b.n	8001962 <HAL_PCD_EP_Close+0x88>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68f9      	ldr	r1, [r7, #12]
 8001952:	4618      	mov	r0, r3
 8001954:	f003 f9f8 	bl	8004d48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	460b      	mov	r3, r1
 8001978:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	f003 0207 	and.w	r2, r3, #7
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2200      	movs	r2, #0
 80019a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2200      	movs	r2, #0
 80019a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019aa:	7afb      	ldrb	r3, [r7, #11]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6979      	ldr	r1, [r7, #20]
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 fbaf 	bl	8005120 <USB_EPStartXfer>

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	f003 0207 	and.w	r2, r3, #7
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	460b      	mov	r3, r1
 8001a08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2201      	movs	r2, #1
 8001a44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a46:	7afb      	ldrb	r3, [r7, #11]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6979      	ldr	r1, [r7, #20]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 fb61 	bl	8005120 <USB_EPStartXfer>

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	f003 0207 	and.w	r2, r3, #7
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d901      	bls.n	8001a86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e04c      	b.n	8001b20 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	da0e      	bge.n	8001aac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	705a      	strb	r2, [r3, #1]
 8001aaa:	e00c      	b.n	8001ac6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_PCD_EP_SetStall+0x7e>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e01c      	b.n	8001b20 <HAL_PCD_EP_SetStall+0xb8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 fec4 	bl	8006882 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d108      	bne.n	8001b16 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4610      	mov	r0, r2
 8001b12:	f004 ffe9 	bl	8006ae8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	f003 020f 	and.w	r2, r3, #15
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d901      	bls.n	8001b46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e040      	b.n	8001bc8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	da0e      	bge.n	8001b6c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	705a      	strb	r2, [r3, #1]
 8001b6a:	e00e      	b.n	8001b8a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	f003 0207 	and.w	r2, r3, #7
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_PCD_EP_ClrStall+0x82>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e00e      	b.n	8001bc8 <HAL_PCD_EP_ClrStall+0xa0>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68f9      	ldr	r1, [r7, #12]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 feb2 	bl	8006922 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b096      	sub	sp, #88	; 0x58
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bd8:	e3bf      	b.n	800235a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001be2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001be6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001bf4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 8179 	bne.w	8001ef0 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d152      	bne.n	8001cb0 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1a:	81fb      	strh	r3, [r7, #14]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	89fb      	ldrh	r3, [r7, #14]
 8001c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3328      	adds	r3, #40	; 0x28
 8001c32:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	441a      	add	r2, r3
 8001c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c6e:	2100      	movs	r1, #0
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f006 fd8e 	bl	8008792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 836b 	beq.w	800235a <PCD_EP_ISR_Handler+0x78a>
 8001c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 8366 	bne.w	800235a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001cae:	e354      	b.n	800235a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb6:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001cc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d034      	beq.n	8001d38 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3306      	adds	r3, #6
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d06:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f004 ff3b 	bl	8006b88 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d1e:	4013      	ands	r3, r2
 8001d20:	823b      	strh	r3, [r7, #16]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	8a3a      	ldrh	r2, [r7, #16]
 8001d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d2c:	b292      	uxth	r2, r2
 8001d2e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f006 fd01 	bl	8008738 <HAL_PCD_SetupStageCallback>
 8001d36:	e310      	b.n	800235a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d38:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f280 830c 	bge.w	800235a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d4e:	4013      	ands	r3, r2
 8001d50:	83fb      	strh	r3, [r7, #30]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	8bfa      	ldrh	r2, [r7, #30]
 8001d58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	3306      	adds	r3, #6
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d019      	beq.n	8001dc8 <PCD_EP_ISR_Handler+0x1f8>
 8001d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d015      	beq.n	8001dc8 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da2:	6959      	ldr	r1, [r3, #20]
 8001da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001daa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f004 feeb 	bl	8006b88 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	441a      	add	r2, r3
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f006 fcca 	bl	800875c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001dd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 82bd 	bne.w	800235a <PCD_EP_ISR_Handler+0x78a>
 8001de0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001de4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001de8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001dec:	f000 82b5 	beq.w	800235a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	4413      	add	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	801a      	strh	r2, [r3, #0]
 8001e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b3e      	cmp	r3, #62	; 0x3e
 8001e26:	d91d      	bls.n	8001e64 <PCD_EP_ISR_Handler+0x294>
 8001e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	095b      	lsrs	r3, r3, #5
 8001e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <PCD_EP_ISR_Handler+0x272>
 8001e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	647b      	str	r3, [r7, #68]	; 0x44
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	029b      	lsls	r3, r3, #10
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4313      	orrs	r3, r2
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	801a      	strh	r2, [r3, #0]
 8001e62:	e026      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x2e2>
 8001e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <PCD_EP_ISR_Handler+0x2b2>
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	801a      	strh	r2, [r3, #0]
 8001e80:	e017      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x2e2>
 8001e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	085b      	lsrs	r3, r3, #1
 8001e88:	647b      	str	r3, [r7, #68]	; 0x44
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <PCD_EP_ISR_Handler+0x2cc>
 8001e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e98:	3301      	adds	r3, #1
 8001e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	029b      	lsls	r3, r3, #10
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec2:	827b      	strh	r3, [r7, #18]
 8001ec4:	8a7b      	ldrh	r3, [r7, #18]
 8001ec6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001eca:	827b      	strh	r3, [r7, #18]
 8001ecc:	8a7b      	ldrh	r3, [r7, #18]
 8001ece:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ed2:	827b      	strh	r3, [r7, #18]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	8a7b      	ldrh	r3, [r7, #18]
 8001eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	8013      	strh	r3, [r2, #0]
 8001eee:	e234      	b.n	800235a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f04:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f280 80fc 	bge.w	8002106 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f24:	4013      	ands	r3, r2
 8001f26:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001f3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f40:	b292      	uxth	r2, r2
 8001f42:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f44:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5c:	7b1b      	ldrb	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d125      	bne.n	8001fae <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	3306      	adds	r3, #6
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f8a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001f8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8092 	beq.w	80020bc <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9e:	6959      	ldr	r1, [r3, #20]
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa2:	88da      	ldrh	r2, [r3, #6]
 8001fa4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fa8:	f004 fdee 	bl	8006b88 <USB_ReadPMA>
 8001fac:	e086      	b.n	80020bc <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb0:	78db      	ldrb	r3, [r3, #3]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d10a      	bne.n	8001fcc <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001fb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fba:	461a      	mov	r2, r3
 8001fbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f9d9 	bl	8002376 <HAL_PCD_EP_DB_Receive>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001fca:	e077      	b.n	80020bc <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	441a      	add	r2, r3
 8001ff8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002008:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800200c:	b29b      	uxth	r3, r3
 800200e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d024      	beq.n	8002074 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002032:	b29b      	uxth	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	3302      	adds	r3, #2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	4413      	add	r3, r2
 8002048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002052:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002056:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800205a:	2b00      	cmp	r3, #0
 800205c:	d02e      	beq.n	80020bc <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002064:	6959      	ldr	r1, [r3, #20]
 8002066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002068:	891a      	ldrh	r2, [r3, #8]
 800206a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800206e:	f004 fd8b 	bl	8006b88 <USB_ReadPMA>
 8002072:	e023      	b.n	80020bc <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800207c:	b29b      	uxth	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	3306      	adds	r3, #6
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	4413      	add	r3, r2
 8002092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800209c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80020a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d009      	beq.n	80020bc <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ae:	6959      	ldr	r1, [r3, #20]
 80020b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b2:	895a      	ldrh	r2, [r3, #10]
 80020b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020b8:	f004 fd66 	bl	8006b88 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	69da      	ldr	r2, [r3, #28]
 80020c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020c4:	441a      	add	r2, r3
 80020c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020d2:	441a      	add	r2, r3
 80020d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <PCD_EP_ISR_Handler+0x51c>
 80020e0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80020e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d206      	bcs.n	80020fa <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f006 fb32 	bl	800875c <HAL_PCD_DataOutStageCallback>
 80020f8:	e005      	b.n	8002106 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002100:	4618      	mov	r0, r3
 8002102:	f003 f80d 	bl	8005120 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002106:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800210a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8123 	beq.w	800235a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002114:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800213e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002142:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	441a      	add	r2, r3
 8002154:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800215c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002160:	b29b      	uxth	r3, r3
 8002162:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002166:	78db      	ldrb	r3, [r3, #3]
 8002168:	2b01      	cmp	r3, #1
 800216a:	f040 80a2 	bne.w	80022b2 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800216e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002176:	7b1b      	ldrb	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8093 	beq.w	80022a4 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800217e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d046      	beq.n	8002218 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800218a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218c:	785b      	ldrb	r3, [r3, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d126      	bne.n	80021e0 <PCD_EP_ISR_Handler+0x610>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	4413      	add	r3, r2
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
 80021aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	011a      	lsls	r2, r3, #4
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	4413      	add	r3, r2
 80021b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021b8:	623b      	str	r3, [r7, #32]
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	801a      	strh	r2, [r3, #0]
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d8:	b29a      	uxth	r2, r3
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	801a      	strh	r2, [r3, #0]
 80021de:	e061      	b.n	80022a4 <PCD_EP_ISR_Handler+0x6d4>
 80021e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e2:	785b      	ldrb	r3, [r3, #1]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d15d      	bne.n	80022a4 <PCD_EP_ISR_Handler+0x6d4>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	4413      	add	r3, r2
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	011a      	lsls	r2, r3, #4
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	4413      	add	r3, r2
 800220a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002212:	2200      	movs	r2, #0
 8002214:	801a      	strh	r2, [r3, #0]
 8002216:	e045      	b.n	80022a4 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800221e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d126      	bne.n	8002274 <PCD_EP_ISR_Handler+0x6a4>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	4413      	add	r3, r2
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
 800223e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	011a      	lsls	r2, r3, #4
 8002244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002246:	4413      	add	r3, r2
 8002248:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002258:	b29a      	uxth	r2, r3
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	801a      	strh	r2, [r3, #0]
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226c:	b29a      	uxth	r2, r3
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	801a      	strh	r2, [r3, #0]
 8002272:	e017      	b.n	80022a4 <PCD_EP_ISR_Handler+0x6d4>
 8002274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002276:	785b      	ldrb	r3, [r3, #1]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d113      	bne.n	80022a4 <PCD_EP_ISR_Handler+0x6d4>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002284:	b29b      	uxth	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800228a:	4413      	add	r3, r2
 800228c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	011a      	lsls	r2, r3, #4
 8002294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002296:	4413      	add	r3, r2
 8002298:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800229c:	63bb      	str	r3, [r7, #56]	; 0x38
 800229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a0:	2200      	movs	r2, #0
 80022a2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f006 fa71 	bl	8008792 <HAL_PCD_DataInStageCallback>
 80022b0:	e053      	b.n	800235a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80022b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d146      	bne.n	800234c <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	3302      	adds	r3, #2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80022ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d907      	bls.n	8002306 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80022f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022fe:	1ad2      	subs	r2, r2, r3
 8002300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002302:	619a      	str	r2, [r3, #24]
 8002304:	e002      	b.n	800230c <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800230c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f006 fa39 	bl	8008792 <HAL_PCD_DataInStageCallback>
 8002320:	e01b      	b.n	800235a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800232a:	441a      	add	r2, r3
 800232c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800232e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002338:	441a      	add	r2, r3
 800233a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002344:	4618      	mov	r0, r3
 8002346:	f002 feeb 	bl	8005120 <USB_EPStartXfer>
 800234a:	e006      	b.n	800235a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800234c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002350:	461a      	mov	r2, r3
 8002352:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f91b 	bl	8002590 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002362:	b29b      	uxth	r3, r3
 8002364:	b21b      	sxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	f6ff ac37 	blt.w	8001bda <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3758      	adds	r7, #88	; 0x58
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b088      	sub	sp, #32
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	4613      	mov	r3, r2
 8002382:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d07e      	beq.n	800248c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002396:	b29b      	uxth	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	3302      	adds	r3, #2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	8b7b      	ldrh	r3, [r7, #26]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d306      	bcc.n	80023d0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	8b7b      	ldrh	r3, [r7, #26]
 80023c8:	1ad2      	subs	r2, r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	619a      	str	r2, [r3, #24]
 80023ce:	e002      	b.n	80023d6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2200      	movs	r2, #0
 80023d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d123      	bne.n	8002426 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f8:	833b      	strh	r3, [r7, #24]
 80023fa:	8b3b      	ldrh	r3, [r7, #24]
 80023fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002400:	833b      	strh	r3, [r7, #24]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	441a      	add	r2, r3
 8002410:	8b3b      	ldrh	r3, [r7, #24]
 8002412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800241a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002422:	b29b      	uxth	r3, r3
 8002424:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01f      	beq.n	8002470 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244a:	82fb      	strh	r3, [r7, #22]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	441a      	add	r2, r3
 800245a:	8afb      	ldrh	r3, [r7, #22]
 800245c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002468:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800246c:	b29b      	uxth	r3, r3
 800246e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002470:	8b7b      	ldrh	r3, [r7, #26]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8087 	beq.w	8002586 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	6959      	ldr	r1, [r3, #20]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	891a      	ldrh	r2, [r3, #8]
 8002484:	8b7b      	ldrh	r3, [r7, #26]
 8002486:	f004 fb7f 	bl	8006b88 <USB_ReadPMA>
 800248a:	e07c      	b.n	8002586 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002494:	b29b      	uxth	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	3306      	adds	r3, #6
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	8b7b      	ldrh	r3, [r7, #26]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d306      	bcc.n	80024ce <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	8b7b      	ldrh	r3, [r7, #26]
 80024c6:	1ad2      	subs	r2, r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	619a      	str	r2, [r3, #24]
 80024cc:	e002      	b.n	80024d4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d123      	bne.n	8002524 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f6:	83fb      	strh	r3, [r7, #30]
 80024f8:	8bfb      	ldrh	r3, [r7, #30]
 80024fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024fe:	83fb      	strh	r3, [r7, #30]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	441a      	add	r2, r3
 800250e:	8bfb      	ldrh	r3, [r7, #30]
 8002510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002520:	b29b      	uxth	r3, r3
 8002522:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d11f      	bne.n	800256e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002548:	83bb      	strh	r3, [r7, #28]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	441a      	add	r2, r3
 8002558:	8bbb      	ldrh	r3, [r7, #28]
 800255a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800255e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002566:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800256a:	b29b      	uxth	r3, r3
 800256c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800256e:	8b7b      	ldrh	r3, [r7, #26]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	6959      	ldr	r1, [r3, #20]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	895a      	ldrh	r2, [r3, #10]
 8002580:	8b7b      	ldrh	r3, [r7, #26]
 8002582:	f004 fb01 	bl	8006b88 <USB_ReadPMA>
    }
  }

  return count;
 8002586:	8b7b      	ldrh	r3, [r7, #26]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3720      	adds	r7, #32
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b0a4      	sub	sp, #144	; 0x90
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	4613      	mov	r3, r2
 800259c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 81dd 	beq.w	8002964 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	3302      	adds	r3, #2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025de:	429a      	cmp	r2, r3
 80025e0:	d907      	bls.n	80025f2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025ea:	1ad2      	subs	r2, r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	619a      	str	r2, [r3, #24]
 80025f0:	e002      	b.n	80025f8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 80b9 	bne.w	8002774 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d126      	bne.n	8002658 <HAL_PCD_EP_DB_Transmit+0xc8>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002618:	b29b      	uxth	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	4413      	add	r3, r2
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	011a      	lsls	r2, r3, #4
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	4413      	add	r3, r2
 800262c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800263c:	b29a      	uxth	r2, r3
 800263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002640:	801a      	strh	r2, [r3, #0]
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800264c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002650:	b29a      	uxth	r2, r3
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	801a      	strh	r2, [r3, #0]
 8002656:	e01a      	b.n	800268e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	785b      	ldrb	r3, [r3, #1]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d116      	bne.n	800268e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	4413      	add	r3, r2
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	011a      	lsls	r2, r3, #4
 800267e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002680:	4413      	add	r3, r2
 8002682:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	2200      	movs	r2, #0
 800268c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	785b      	ldrb	r3, [r3, #1]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d126      	bne.n	80026ea <HAL_PCD_EP_DB_Transmit+0x15a>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	4413      	add	r3, r2
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	011a      	lsls	r2, r3, #4
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4413      	add	r3, r2
 80026be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	801a      	strh	r2, [r3, #0]
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e017      	b.n	800271a <HAL_PCD_EP_DB_Transmit+0x18a>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	785b      	ldrb	r3, [r3, #1]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d113      	bne.n	800271a <HAL_PCD_EP_DB_Transmit+0x18a>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	4413      	add	r3, r2
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	011a      	lsls	r2, r3, #4
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	4413      	add	r3, r2
 800270e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002712:	623b      	str	r3, [r7, #32]
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	2200      	movs	r2, #0
 8002718:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	4619      	mov	r1, r3
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f006 f836 	bl	8008792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 82fc 	beq.w	8002d2a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274c:	82fb      	strh	r3, [r7, #22]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	441a      	add	r2, r3
 800275c:	8afb      	ldrh	r3, [r7, #22]
 800275e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800276a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276e:	b29b      	uxth	r3, r3
 8002770:	8013      	strh	r3, [r2, #0]
 8002772:	e2da      	b.n	8002d2a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d021      	beq.n	80027c2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002798:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	441a      	add	r2, r3
 80027aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80027ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027be:	b29b      	uxth	r3, r3
 80027c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	f040 82ae 	bne.w	8002d2a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027d6:	441a      	add	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	69da      	ldr	r2, [r3, #28]
 80027e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027e4:	441a      	add	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	6a1a      	ldr	r2, [r3, #32]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d30b      	bcc.n	800280e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	6a1a      	ldr	r2, [r3, #32]
 8002802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002806:	1ad2      	subs	r2, r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	621a      	str	r2, [r3, #32]
 800280c:	e017      	b.n	800283e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d108      	bne.n	8002828 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002816:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800281a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002826:	e00a      	b.n	800283e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2200      	movs	r2, #0
 800283c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	785b      	ldrb	r3, [r3, #1]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d165      	bne.n	8002912 <HAL_PCD_EP_DB_Transmit+0x382>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002854:	b29b      	uxth	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285a:	4413      	add	r3, r2
 800285c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	011a      	lsls	r2, r3, #4
 8002864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002866:	4413      	add	r3, r2
 8002868:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800286c:	63bb      	str	r3, [r7, #56]	; 0x38
 800286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002878:	b29a      	uxth	r2, r3
 800287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287c:	801a      	strh	r2, [r3, #0]
 800287e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002882:	2b3e      	cmp	r3, #62	; 0x3e
 8002884:	d91d      	bls.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x332>
 8002886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	64bb      	str	r3, [r7, #72]	; 0x48
 800288e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x310>
 800289a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289c:	3b01      	subs	r3, #1
 800289e:	64bb      	str	r3, [r7, #72]	; 0x48
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	029b      	lsls	r3, r3, #10
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	4313      	orrs	r3, r2
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028be:	801a      	strh	r2, [r3, #0]
 80028c0:	e044      	b.n	800294c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80028c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <HAL_PCD_EP_DB_Transmit+0x350>
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d8:	b29a      	uxth	r2, r3
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	e035      	b.n	800294c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80028e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e4:	085b      	lsrs	r3, r3, #1
 80028e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80028e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_PCD_EP_DB_Transmit+0x36a>
 80028f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f6:	3301      	adds	r3, #1
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002902:	b29b      	uxth	r3, r3
 8002904:	029b      	lsls	r3, r3, #10
 8002906:	b29b      	uxth	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	b29a      	uxth	r2, r3
 800290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	e01c      	b.n	800294c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	785b      	ldrb	r3, [r3, #1]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d118      	bne.n	800294c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	647b      	str	r3, [r7, #68]	; 0x44
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002928:	b29b      	uxth	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292e:	4413      	add	r3, r2
 8002930:	647b      	str	r3, [r7, #68]	; 0x44
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	011a      	lsls	r2, r3, #4
 8002938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293a:	4413      	add	r3, r2
 800293c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002940:	643b      	str	r3, [r7, #64]	; 0x40
 8002942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002946:	b29a      	uxth	r2, r3
 8002948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	6959      	ldr	r1, [r3, #20]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	891a      	ldrh	r2, [r3, #8]
 8002958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800295c:	b29b      	uxth	r3, r3
 800295e:	f004 f8ce 	bl	8006afe <USB_WritePMA>
 8002962:	e1e2      	b.n	8002d2a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	3306      	adds	r3, #6
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	699a      	ldr	r2, [r3, #24]
 8002994:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002998:	429a      	cmp	r2, r3
 800299a:	d307      	bcc.n	80029ac <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029a4:	1ad2      	subs	r2, r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	619a      	str	r2, [r3, #24]
 80029aa:	e002      	b.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2200      	movs	r2, #0
 80029b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 80c0 	bne.w	8002b3c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	785b      	ldrb	r3, [r3, #1]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d126      	bne.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x482>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029d8:	4413      	add	r3, r2
 80029da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	011a      	lsls	r2, r3, #4
 80029e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029e4:	4413      	add	r3, r2
 80029e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80029ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029fa:	801a      	strh	r2, [r3, #0]
 80029fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a0e:	801a      	strh	r2, [r3, #0]
 8002a10:	e01a      	b.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	785b      	ldrb	r3, [r3, #1]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d116      	bne.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	667b      	str	r3, [r7, #100]	; 0x64
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a2e:	4413      	add	r3, r2
 8002a30:	667b      	str	r3, [r7, #100]	; 0x64
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	011a      	lsls	r2, r3, #4
 8002a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a40:	663b      	str	r3, [r7, #96]	; 0x60
 8002a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a44:	2200      	movs	r2, #0
 8002a46:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	677b      	str	r3, [r7, #116]	; 0x74
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	785b      	ldrb	r3, [r3, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d12b      	bne.n	8002aae <HAL_PCD_EP_DB_Transmit+0x51e>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6a:	4413      	add	r3, r2
 8002a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	011a      	lsls	r2, r3, #4
 8002a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a76:	4413      	add	r3, r2
 8002a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a92:	801a      	strh	r2, [r3, #0]
 8002a94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aaa:	801a      	strh	r2, [r3, #0]
 8002aac:	e017      	b.n	8002ade <HAL_PCD_EP_DB_Transmit+0x54e>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	785b      	ldrb	r3, [r3, #1]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d113      	bne.n	8002ade <HAL_PCD_EP_DB_Transmit+0x54e>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac4:	4413      	add	r3, r2
 8002ac6:	677b      	str	r3, [r7, #116]	; 0x74
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	011a      	lsls	r2, r3, #4
 8002ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ad6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ada:	2200      	movs	r2, #0
 8002adc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f005 fe54 	bl	8008792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 811a 	bne.w	8002d2a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b10:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	441a      	add	r2, r3
 8002b22:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	8013      	strh	r3, [r2, #0]
 8002b3a:	e0f6      	b.n	8002d2a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d121      	bne.n	8002b8a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	441a      	add	r2, r3
 8002b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	f040 80ca 	bne.w	8002d2a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b9e:	441a      	add	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bac:	441a      	add	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d30b      	bcc.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6a1a      	ldr	r2, [r3, #32]
 8002bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bce:	1ad2      	subs	r2, r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	621a      	str	r2, [r3, #32]
 8002bd4:	e017      	b.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d108      	bne.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002bde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bee:	e00a      	b.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	785b      	ldrb	r3, [r3, #1]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d165      	bne.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x750>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c28:	4413      	add	r3, r2
 8002c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	011a      	lsls	r2, r3, #4
 8002c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c34:	4413      	add	r3, r2
 8002c36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c4a:	801a      	strh	r2, [r3, #0]
 8002c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c50:	2b3e      	cmp	r3, #62	; 0x3e
 8002c52:	d91d      	bls.n	8002c90 <HAL_PCD_EP_DB_Transmit+0x700>
 8002c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x6de>
 8002c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	029b      	lsls	r3, r3, #10
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c8c:	801a      	strh	r2, [r3, #0]
 8002c8e:	e041      	b.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x784>
 8002c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <HAL_PCD_EP_DB_Transmit+0x71e>
 8002c98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002caa:	801a      	strh	r2, [r3, #0]
 8002cac:	e032      	b.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x784>
 8002cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_PCD_EP_DB_Transmit+0x738>
 8002cc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	029b      	lsls	r3, r3, #10
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cdc:	801a      	strh	r2, [r3, #0]
 8002cde:	e019      	b.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d115      	bne.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf6:	4413      	add	r3, r2
 8002cf8:	657b      	str	r3, [r7, #84]	; 0x54
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	011a      	lsls	r2, r3, #4
 8002d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d02:	4413      	add	r3, r2
 8002d04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d08:	653b      	str	r3, [r7, #80]	; 0x50
 8002d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d12:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6959      	ldr	r1, [r3, #20]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	895a      	ldrh	r2, [r3, #10]
 8002d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f003 feea 	bl	8006afe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d44:	82bb      	strh	r3, [r7, #20]
 8002d46:	8abb      	ldrh	r3, [r7, #20]
 8002d48:	f083 0310 	eor.w	r3, r3, #16
 8002d4c:	82bb      	strh	r3, [r7, #20]
 8002d4e:	8abb      	ldrh	r3, [r7, #20]
 8002d50:	f083 0320 	eor.w	r3, r3, #32
 8002d54:	82bb      	strh	r3, [r7, #20]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	441a      	add	r2, r3
 8002d64:	8abb      	ldrh	r3, [r7, #20]
 8002d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3790      	adds	r7, #144	; 0x90
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	817b      	strh	r3, [r7, #10]
 8002d92:	4613      	mov	r3, r2
 8002d94:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d96:	897b      	ldrh	r3, [r7, #10]
 8002d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4413      	add	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e009      	b.n	8002dce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dba:	897a      	ldrh	r2, [r7, #10]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002dce:	893b      	ldrh	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	80da      	strh	r2, [r3, #6]
 8002de2:	e00b      	b.n	8002dfc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2201      	movs	r2, #1
 8002de8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e272      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8087 	beq.w	8002f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e28:	4b92      	ldr	r3, [pc, #584]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d00c      	beq.n	8002e4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e34:	4b8f      	ldr	r3, [pc, #572]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d112      	bne.n	8002e66 <HAL_RCC_OscConfig+0x5e>
 8002e40:	4b8c      	ldr	r3, [pc, #560]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4c:	d10b      	bne.n	8002e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4e:	4b89      	ldr	r3, [pc, #548]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d06c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x12c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d168      	bne.n	8002f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e24c      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x76>
 8002e70:	4b80      	ldr	r3, [pc, #512]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a7f      	ldr	r2, [pc, #508]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	e02e      	b.n	8002edc <HAL_RCC_OscConfig+0xd4>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x98>
 8002e86:	4b7b      	ldr	r3, [pc, #492]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a7a      	ldr	r2, [pc, #488]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	4b78      	ldr	r3, [pc, #480]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a77      	ldr	r2, [pc, #476]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e01d      	b.n	8002edc <HAL_RCC_OscConfig+0xd4>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xbc>
 8002eaa:	4b72      	ldr	r3, [pc, #456]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a71      	ldr	r2, [pc, #452]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b6f      	ldr	r3, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a6e      	ldr	r2, [pc, #440]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e00b      	b.n	8002edc <HAL_RCC_OscConfig+0xd4>
 8002ec4:	4b6b      	ldr	r3, [pc, #428]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a6a      	ldr	r2, [pc, #424]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b68      	ldr	r3, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a67      	ldr	r2, [pc, #412]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d013      	beq.n	8002f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fd fe98 	bl	8000c18 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fd fe94 	bl	8000c18 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e200      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	4b5d      	ldr	r3, [pc, #372]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0xe4>
 8002f0a:	e014      	b.n	8002f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fd fe84 	bl	8000c18 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fd fe80 	bl	8000c18 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e1ec      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f26:	4b53      	ldr	r3, [pc, #332]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x10c>
 8002f32:	e000      	b.n	8002f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d063      	beq.n	800300a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f42:	4b4c      	ldr	r3, [pc, #304]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f4e:	4b49      	ldr	r3, [pc, #292]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d11c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x18c>
 8002f5a:	4b46      	ldr	r3, [pc, #280]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d116      	bne.n	8002f94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f66:	4b43      	ldr	r3, [pc, #268]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <HAL_RCC_OscConfig+0x176>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e1c0      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7e:	4b3d      	ldr	r3, [pc, #244]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4939      	ldr	r1, [pc, #228]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	e03a      	b.n	800300a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d020      	beq.n	8002fde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fd fe39 	bl	8000c18 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002faa:	f7fd fe35 	bl	8000c18 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e1a1      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4927      	ldr	r1, [pc, #156]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
 8002fdc:	e015      	b.n	800300a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fd fe18 	bl	8000c18 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fec:	f7fd fe14 	bl	8000c18 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e180      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d03a      	beq.n	800308c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d019      	beq.n	8003052 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301e:	4b17      	ldr	r3, [pc, #92]	; (800307c <HAL_RCC_OscConfig+0x274>)
 8003020:	2201      	movs	r2, #1
 8003022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003024:	f7fd fdf8 	bl	8000c18 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302c:	f7fd fdf4 	bl	8000c18 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e160      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800304a:	2001      	movs	r0, #1
 800304c:	f000 face 	bl	80035ec <RCC_Delay>
 8003050:	e01c      	b.n	800308c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_RCC_OscConfig+0x274>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003058:	f7fd fdde 	bl	8000c18 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305e:	e00f      	b.n	8003080 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003060:	f7fd fdda 	bl	8000c18 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d908      	bls.n	8003080 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e146      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	42420000 	.word	0x42420000
 800307c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	4b92      	ldr	r3, [pc, #584]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e9      	bne.n	8003060 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a6 	beq.w	80031e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b8b      	ldr	r3, [pc, #556]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10d      	bne.n	80030c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b88      	ldr	r3, [pc, #544]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	4a87      	ldr	r2, [pc, #540]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b4:	61d3      	str	r3, [r2, #28]
 80030b6:	4b85      	ldr	r3, [pc, #532]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	4b82      	ldr	r3, [pc, #520]	; (80032d0 <HAL_RCC_OscConfig+0x4c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d118      	bne.n	8003104 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d2:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <HAL_RCC_OscConfig+0x4c8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7e      	ldr	r2, [pc, #504]	; (80032d0 <HAL_RCC_OscConfig+0x4c8>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030de:	f7fd fd9b 	bl	8000c18 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e6:	f7fd fd97 	bl	8000c18 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b64      	cmp	r3, #100	; 0x64
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e103      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	4b75      	ldr	r3, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x4c8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d106      	bne.n	800311a <HAL_RCC_OscConfig+0x312>
 800310c:	4b6f      	ldr	r3, [pc, #444]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a6e      	ldr	r2, [pc, #440]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	e02d      	b.n	8003176 <HAL_RCC_OscConfig+0x36e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x334>
 8003122:	4b6a      	ldr	r3, [pc, #424]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a69      	ldr	r2, [pc, #420]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	6213      	str	r3, [r2, #32]
 800312e:	4b67      	ldr	r3, [pc, #412]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	4a66      	ldr	r2, [pc, #408]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003134:	f023 0304 	bic.w	r3, r3, #4
 8003138:	6213      	str	r3, [r2, #32]
 800313a:	e01c      	b.n	8003176 <HAL_RCC_OscConfig+0x36e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b05      	cmp	r3, #5
 8003142:	d10c      	bne.n	800315e <HAL_RCC_OscConfig+0x356>
 8003144:	4b61      	ldr	r3, [pc, #388]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4a60      	ldr	r2, [pc, #384]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800314a:	f043 0304 	orr.w	r3, r3, #4
 800314e:	6213      	str	r3, [r2, #32]
 8003150:	4b5e      	ldr	r3, [pc, #376]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4a5d      	ldr	r2, [pc, #372]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6213      	str	r3, [r2, #32]
 800315c:	e00b      	b.n	8003176 <HAL_RCC_OscConfig+0x36e>
 800315e:	4b5b      	ldr	r3, [pc, #364]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	4a5a      	ldr	r2, [pc, #360]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6213      	str	r3, [r2, #32]
 800316a:	4b58      	ldr	r3, [pc, #352]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4a57      	ldr	r2, [pc, #348]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d015      	beq.n	80031aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317e:	f7fd fd4b 	bl	8000c18 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fd fd47 	bl	8000c18 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0b1      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319c:	4b4b      	ldr	r3, [pc, #300]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ee      	beq.n	8003186 <HAL_RCC_OscConfig+0x37e>
 80031a8:	e014      	b.n	80031d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031aa:	f7fd fd35 	bl	8000c18 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fd fd31 	bl	8000c18 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e09b      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c8:	4b40      	ldr	r3, [pc, #256]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ee      	bne.n	80031b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d105      	bne.n	80031e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031da:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4a3b      	ldr	r2, [pc, #236]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8087 	beq.w	80032fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031f0:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d061      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d146      	bne.n	8003292 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003204:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <HAL_RCC_OscConfig+0x4cc>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fd fd05 	bl	8000c18 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003212:	f7fd fd01 	bl	8000c18 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e06d      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003224:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d108      	bne.n	800324c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	4921      	ldr	r1, [pc, #132]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800324c:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a19      	ldr	r1, [r3, #32]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	430b      	orrs	r3, r1
 800325e:	491b      	ldr	r1, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x4cc>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fd fcd5 	bl	8000c18 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003272:	f7fd fcd1 	bl	8000c18 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e03d      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x46a>
 8003290:	e035      	b.n	80032fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <HAL_RCC_OscConfig+0x4cc>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fd fcbe 	bl	8000c18 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fd fcba 	bl	8000c18 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e026      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x498>
 80032be:	e01e      	b.n	80032fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e019      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40007000 	.word	0x40007000
 80032d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_OscConfig+0x500>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000

0800330c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0d0      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003320:	4b6a      	ldr	r3, [pc, #424]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d910      	bls.n	8003350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b67      	ldr	r3, [pc, #412]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 0207 	bic.w	r2, r3, #7
 8003336:	4965      	ldr	r1, [pc, #404]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b63      	ldr	r3, [pc, #396]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003368:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003372:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003380:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800338a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	494d      	ldr	r1, [pc, #308]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d040      	beq.n	800342c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d115      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e073      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e06b      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4936      	ldr	r1, [pc, #216]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033fc:	f7fd fc0c 	bl	8000c18 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fd fc08 	bl	8000c18 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e053      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d210      	bcs.n	800345c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b24      	ldr	r3, [pc, #144]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 0207 	bic.w	r2, r3, #7
 8003442:	4922      	ldr	r1, [pc, #136]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4916      	ldr	r1, [pc, #88]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f821 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	; (80034d4 <HAL_RCC_ClockConfig+0x1c8>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <HAL_RCC_ClockConfig+0x1cc>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1d0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd fb6a 	bl	8000b94 <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40022000 	.word	0x40022000
 80034d0:	40021000 	.word	0x40021000
 80034d4:	0800a278 	.word	0x0800a278
 80034d8:	20000000 	.word	0x20000000
 80034dc:	20000004 	.word	0x20000004

080034e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034fa:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <HAL_RCC_GetSysClockFreq+0x94>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b04      	cmp	r3, #4
 8003508:	d002      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x30>
 800350a:	2b08      	cmp	r3, #8
 800350c:	d003      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0x36>
 800350e:	e027      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_RCC_GetSysClockFreq+0x98>)
 8003512:	613b      	str	r3, [r7, #16]
      break;
 8003514:	e027      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	0c9b      	lsrs	r3, r3, #18
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	4a17      	ldr	r2, [pc, #92]	; (800357c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003520:	5cd3      	ldrb	r3, [r2, r3]
 8003522:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800352e:	4b11      	ldr	r3, [pc, #68]	; (8003574 <HAL_RCC_GetSysClockFreq+0x94>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	0c5b      	lsrs	r3, r3, #17
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	4a11      	ldr	r2, [pc, #68]	; (8003580 <HAL_RCC_GetSysClockFreq+0xa0>)
 800353a:	5cd3      	ldrb	r3, [r2, r3]
 800353c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a0d      	ldr	r2, [pc, #52]	; (8003578 <HAL_RCC_GetSysClockFreq+0x98>)
 8003542:	fb03 f202 	mul.w	r2, r3, r2
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e004      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	613b      	str	r3, [r7, #16]
      break;
 800355e:	e002      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_GetSysClockFreq+0x98>)
 8003562:	613b      	str	r3, [r7, #16]
      break;
 8003564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003566:	693b      	ldr	r3, [r7, #16]
}
 8003568:	4618      	mov	r0, r3
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	007a1200 	.word	0x007a1200
 800357c:	0800a290 	.word	0x0800a290
 8003580:	0800a2a0 	.word	0x0800a2a0
 8003584:	003d0900 	.word	0x003d0900

08003588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800358c:	4b02      	ldr	r3, [pc, #8]	; (8003598 <HAL_RCC_GetHCLKFreq+0x10>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	20000000 	.word	0x20000000

0800359c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a0:	f7ff fff2 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	0a1b      	lsrs	r3, r3, #8
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4903      	ldr	r1, [pc, #12]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	0800a288 	.word	0x0800a288

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035c8:	f7ff ffde 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	0adb      	lsrs	r3, r3, #11
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	0800a288 	.word	0x0800a288

080035ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <RCC_Delay+0x34>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <RCC_Delay+0x38>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0a5b      	lsrs	r3, r3, #9
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003608:	bf00      	nop
  }
  while (Delay --);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e5a      	subs	r2, r3, #1
 800360e:	60fa      	str	r2, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f9      	bne.n	8003608 <RCC_Delay+0x1c>
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	20000000 	.word	0x20000000
 8003624:	10624dd3 	.word	0x10624dd3

08003628 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d07d      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003644:	2300      	movs	r3, #0
 8003646:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003648:	4b4f      	ldr	r3, [pc, #316]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10d      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003654:	4b4c      	ldr	r3, [pc, #304]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	4a4b      	ldr	r2, [pc, #300]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365e:	61d3      	str	r3, [r2, #28]
 8003660:	4b49      	ldr	r3, [pc, #292]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366c:	2301      	movs	r3, #1
 800366e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	4b46      	ldr	r3, [pc, #280]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d118      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367c:	4b43      	ldr	r3, [pc, #268]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a42      	ldr	r2, [pc, #264]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003686:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003688:	f7fd fac6 	bl	8000c18 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368e:	e008      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003690:	f7fd fac2 	bl	8000c18 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e06d      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a2:	4b3a      	ldr	r3, [pc, #232]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ae:	4b36      	ldr	r3, [pc, #216]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02e      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d027      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036cc:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036d6:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036dc:	4b2c      	ldr	r3, [pc, #176]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036e2:	4a29      	ldr	r2, [pc, #164]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d014      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fd fa91 	bl	8000c18 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fd fa8d 	bl	8000c18 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e036      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ee      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4917      	ldr	r1, [pc, #92]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	4313      	orrs	r3, r2
 800372c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003734:	4b14      	ldr	r3, [pc, #80]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4a13      	ldr	r2, [pc, #76]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800374c:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	490b      	ldr	r1, [pc, #44]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	4904      	ldr	r1, [pc, #16]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000
 800378c:	40007000 	.word	0x40007000
 8003790:	42420440 	.word	0x42420440

08003794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e042      	b.n	800382c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd f84a 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	; 0x24
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fdfb 	bl	80043d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800380c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b20      	cmp	r3, #32
 8003852:	d16d      	bne.n	8003930 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_UART_Transmit+0x2c>
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e066      	b.n	8003932 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2221      	movs	r2, #33	; 0x21
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003872:	f7fd f9d1 	bl	8000c18 <HAL_GetTick>
 8003876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388c:	d108      	bne.n	80038a0 <HAL_UART_Transmit+0x6c>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d104      	bne.n	80038a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	e003      	b.n	80038a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038a8:	e02a      	b.n	8003900 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2200      	movs	r2, #0
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fb4a 	bl	8003f4e <UART_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e036      	b.n	8003932 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10b      	bne.n	80038e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	3302      	adds	r3, #2
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	e007      	b.n	80038f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	3301      	adds	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1cf      	bne.n	80038aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2200      	movs	r2, #0
 8003912:	2140      	movs	r1, #64	; 0x40
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fb1a 	bl	8003f4e <UART_WaitOnFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e006      	b.n	8003932 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	e000      	b.n	8003932 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003930:	2302      	movs	r3, #2
  }
}
 8003932:	4618      	mov	r0, r3
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b08c      	sub	sp, #48	; 0x30
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	4613      	mov	r3, r2
 8003946:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b20      	cmp	r3, #32
 8003952:	d14a      	bne.n	80039ea <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e043      	b.n	80039ec <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	461a      	mov	r2, r3
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 fb57 	bl	800402a <UART_Start_Receive_IT>
 800397c:	4603      	mov	r3, r0
 800397e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003986:	2b00      	cmp	r3, #0
 8003988:	d12c      	bne.n	80039e4 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	2b01      	cmp	r3, #1
 8003990:	d125      	bne.n	80039de <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	617b      	str	r3, [r7, #20]
   return(result);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f043 0310 	orr.w	r3, r3, #16
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c8:	627a      	str	r2, [r7, #36]	; 0x24
 80039ca:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6a39      	ldr	r1, [r7, #32]
 80039ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e5      	bne.n	80039a8 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80039dc:	e002      	b.n	80039e4 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80039e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039e8:	e000      	b.n	80039ec <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
  }
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3730      	adds	r7, #48	; 0x30
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b0ba      	sub	sp, #232	; 0xe8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_UART_IRQHandler+0x66>
 8003a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fbff 	bl	8004256 <UART_Receive_IT>
      return;
 8003a58:	e25b      	b.n	8003f12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80de 	beq.w	8003c20 <HAL_UART_IRQHandler+0x22c>
 8003a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80d1 	beq.w	8003c20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_UART_IRQHandler+0xae>
 8003a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f043 0201 	orr.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xd2>
 8003aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	f043 0202 	orr.w	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_UART_IRQHandler+0xf6>
 8003ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d011      	beq.n	8003b1a <HAL_UART_IRQHandler+0x126>
 8003af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d105      	bne.n	8003b0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	f043 0208 	orr.w	r2, r3, #8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 81f2 	beq.w	8003f08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_UART_IRQHandler+0x14e>
 8003b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fb8a 	bl	8004256 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf14      	ite	ne
 8003b50:	2301      	movne	r3, #1
 8003b52:	2300      	moveq	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <HAL_UART_IRQHandler+0x17a>
 8003b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d04f      	beq.n	8003c0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa94 	bl	800409c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d041      	beq.n	8003c06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3314      	adds	r3, #20
 8003b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3314      	adds	r3, #20
 8003baa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1d9      	bne.n	8003b82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d013      	beq.n	8003bfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	4a7e      	ldr	r2, [pc, #504]	; (8003dd4 <HAL_UART_IRQHandler+0x3e0>)
 8003bdc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd f98e 	bl	8000f04 <HAL_DMA_Abort_IT>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d016      	beq.n	8003c1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	e00e      	b.n	8003c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f99c 	bl	8003f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	e00a      	b.n	8003c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f998 	bl	8003f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	e006      	b.n	8003c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f994 	bl	8003f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c1a:	e175      	b.n	8003f08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	bf00      	nop
    return;
 8003c1e:	e173      	b.n	8003f08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	f040 814f 	bne.w	8003ec8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8148 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8141 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80b6 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8145 	beq.w	8003f0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	f080 813e 	bcs.w	8003f0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	f000 8088 	beq.w	8003db4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cd0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1d9      	bne.n	8003ca4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e1      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3314      	adds	r3, #20
 8003d32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3314      	adds	r3, #20
 8003d4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e3      	bne.n	8003d2c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d84:	f023 0310 	bic.w	r3, r3, #16
 8003d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d96:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d98:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e3      	bne.n	8003d72 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd f86d 	bl	8000e8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fc fb7c 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dd0:	e09c      	b.n	8003f0c <HAL_UART_IRQHandler+0x518>
 8003dd2:	bf00      	nop
 8003dd4:	08004161 	.word	0x08004161
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 808e 	beq.w	8003f10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8089 	beq.w	8003f10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e22:	647a      	str	r2, [r7, #68]	; 0x44
 8003e24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e3      	bne.n	8003dfe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3314      	adds	r3, #20
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	623b      	str	r3, [r7, #32]
   return(result);
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3314      	adds	r3, #20
 8003e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e5a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e3      	bne.n	8003e36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0310 	bic.w	r3, r3, #16
 8003e92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	330c      	adds	r3, #12
 8003e9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ea0:	61fa      	str	r2, [r7, #28]
 8003ea2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	69b9      	ldr	r1, [r7, #24]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	617b      	str	r3, [r7, #20]
   return(result);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e3      	bne.n	8003e7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fc fb01 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ec6:	e023      	b.n	8003f10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d009      	beq.n	8003ee8 <HAL_UART_IRQHandler+0x4f4>
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f951 	bl	8004188 <UART_Transmit_IT>
    return;
 8003ee6:	e014      	b.n	8003f12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00e      	beq.n	8003f12 <HAL_UART_IRQHandler+0x51e>
 8003ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f990 	bl	8004226 <UART_EndTransmit_IT>
    return;
 8003f06:	e004      	b.n	8003f12 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f08:	bf00      	nop
 8003f0a:	e002      	b.n	8003f12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f0c:	bf00      	nop
 8003f0e:	e000      	b.n	8003f12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f10:	bf00      	nop
  }
}
 8003f12:	37e8      	adds	r7, #232	; 0xe8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b090      	sub	sp, #64	; 0x40
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5e:	e050      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d04c      	beq.n	8004002 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f6e:	f7fc fe53 	bl	8000c18 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d241      	bcs.n	8004002 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f9e:	637a      	str	r2, [r7, #52]	; 0x34
 8003fa0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e5      	bne.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3314      	adds	r3, #20
 8003fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3314      	adds	r3, #20
 8003fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd2:	623a      	str	r2, [r7, #32]
 8003fd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	69f9      	ldr	r1, [r7, #28]
 8003fd8:	6a3a      	ldr	r2, [r7, #32]
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e5      	bne.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e00f      	b.n	8004022 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4013      	ands	r3, r2
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	bf0c      	ite	eq
 8004012:	2301      	moveq	r3, #1
 8004014:	2300      	movne	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	429a      	cmp	r2, r3
 800401e:	d09f      	beq.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3740      	adds	r7, #64	; 0x40
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	88fa      	ldrh	r2, [r7, #6]
 8004048:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2222      	movs	r2, #34	; 0x22
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800406e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0220 	orr.w	r2, r2, #32
 800408e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800409c:	b480      	push	{r7}
 800409e:	b095      	sub	sp, #84	; 0x54
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040c4:	643a      	str	r2, [r7, #64]	; 0x40
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e5      	bne.n	80040a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3314      	adds	r3, #20
 80040de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3314      	adds	r3, #20
 80040f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e5      	bne.n	80040d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	2b01      	cmp	r3, #1
 8004112:	d119      	bne.n	8004148 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	60bb      	str	r3, [r7, #8]
   return(result);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f023 0310 	bic.w	r3, r3, #16
 800412a:	647b      	str	r3, [r7, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	330c      	adds	r3, #12
 8004132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004134:	61ba      	str	r2, [r7, #24]
 8004136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6979      	ldr	r1, [r7, #20]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	613b      	str	r3, [r7, #16]
   return(result);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e5      	bne.n	8004114 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004156:	bf00      	nop
 8004158:	3754      	adds	r7, #84	; 0x54
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff fede 	bl	8003f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b21      	cmp	r3, #33	; 0x21
 800419a:	d13e      	bne.n	800421a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a4:	d114      	bne.n	80041d0 <UART_Transmit_IT+0x48>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d110      	bne.n	80041d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	1c9a      	adds	r2, r3, #2
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	621a      	str	r2, [r3, #32]
 80041ce:	e008      	b.n	80041e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	1c59      	adds	r1, r3, #1
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6211      	str	r1, [r2, #32]
 80041da:	781a      	ldrb	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4619      	mov	r1, r3
 80041f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10f      	bne.n	8004216 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004204:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004214:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e000      	b.n	800421c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff fe66 	bl	8003f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b08c      	sub	sp, #48	; 0x30
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b22      	cmp	r3, #34	; 0x22
 8004268:	f040 80ae 	bne.w	80043c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004274:	d117      	bne.n	80042a6 <UART_Receive_IT+0x50>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d113      	bne.n	80042a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	b29b      	uxth	r3, r3
 8004290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004294:	b29a      	uxth	r2, r3
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	1c9a      	adds	r2, r3, #2
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28
 80042a4:	e026      	b.n	80042f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b8:	d007      	beq.n	80042ca <UART_Receive_IT+0x74>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <UART_Receive_IT+0x82>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e008      	b.n	80042ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4619      	mov	r1, r3
 8004302:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004304:	2b00      	cmp	r3, #0
 8004306:	d15d      	bne.n	80043c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0220 	bic.w	r2, r2, #32
 8004316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0201 	bic.w	r2, r2, #1
 8004336:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	2b01      	cmp	r3, #1
 800434c:	d135      	bne.n	80043ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	613b      	str	r3, [r7, #16]
   return(result);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f023 0310 	bic.w	r3, r3, #16
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004374:	623a      	str	r2, [r7, #32]
 8004376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	69f9      	ldr	r1, [r7, #28]
 800437a:	6a3a      	ldr	r2, [r7, #32]
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	61bb      	str	r3, [r7, #24]
   return(result);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e5      	bne.n	8004354 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b10      	cmp	r3, #16
 8004394:	d10a      	bne.n	80043ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043b0:	4619      	mov	r1, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fc f888 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
 80043b8:	e002      	b.n	80043c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fdb5 	bl	8003f2a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e002      	b.n	80043ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3730      	adds	r7, #48	; 0x30
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800440e:	f023 030c 	bic.w	r3, r3, #12
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	430b      	orrs	r3, r1
 800441a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <UART_SetConfig+0x114>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d103      	bne.n	8004444 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800443c:	f7ff f8c2 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	e002      	b.n	800444a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004444:	f7ff f8aa 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 8004448:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009a      	lsls	r2, r3, #2
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	4a22      	ldr	r2, [pc, #136]	; (80044ec <UART_SetConfig+0x118>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	0119      	lsls	r1, r3, #4
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009a      	lsls	r2, r3, #2
 8004474:	441a      	add	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004480:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <UART_SetConfig+0x118>)
 8004482:	fba3 0302 	umull	r0, r3, r3, r2
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	2064      	movs	r0, #100	; 0x64
 800448a:	fb00 f303 	mul.w	r3, r0, r3
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	3332      	adds	r3, #50	; 0x32
 8004494:	4a15      	ldr	r2, [pc, #84]	; (80044ec <UART_SetConfig+0x118>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044a0:	4419      	add	r1, r3
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	009a      	lsls	r2, r3, #2
 80044ac:	441a      	add	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <UART_SetConfig+0x118>)
 80044ba:	fba3 0302 	umull	r0, r3, r3, r2
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2064      	movs	r0, #100	; 0x64
 80044c2:	fb00 f303 	mul.w	r3, r0, r3
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	3332      	adds	r3, #50	; 0x32
 80044cc:	4a07      	ldr	r2, [pc, #28]	; (80044ec <UART_SetConfig+0x118>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	f003 020f 	and.w	r2, r3, #15
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	440a      	add	r2, r1
 80044de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40013800 	.word	0x40013800
 80044ec:	51eb851f 	.word	0x51eb851f

080044f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044f0:	b084      	sub	sp, #16
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	f107 0014 	add.w	r0, r7, #20
 80044fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	b004      	add	sp, #16
 800450e:	4770      	bx	lr

08004510 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004520:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004524:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr

0800453c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004544:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004548:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	b29b      	uxth	r3, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	b29b      	uxth	r3, r3
 800455a:	4013      	ands	r3, r2
 800455c:	b29a      	uxth	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004588:	b084      	sub	sp, #16
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	f107 0014 	add.w	r0, r7, #20
 8004596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	b004      	add	sp, #16
 80045c6:	4770      	bx	lr

080045c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b09d      	sub	sp, #116	; 0x74
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	78db      	ldrb	r3, [r3, #3]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d81f      	bhi.n	800463a <USB_ActivateEndpoint+0x72>
 80045fa:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <USB_ActivateEndpoint+0x38>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	08004611 	.word	0x08004611
 8004604:	0800462d 	.word	0x0800462d
 8004608:	08004643 	.word	0x08004643
 800460c:	0800461f 	.word	0x0800461f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004610:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004618:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800461c:	e012      	b.n	8004644 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800461e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004622:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004626:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800462a:	e00b      	b.n	8004644 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800462c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004630:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004634:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004638:	e004      	b.n	8004644 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004640:	e000      	b.n	8004644 <USB_ActivateEndpoint+0x7c>
      break;
 8004642:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004662:	b29b      	uxth	r3, r3
 8004664:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467c:	b29a      	uxth	r2, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	b29b      	uxth	r3, r3
 8004684:	4313      	orrs	r3, r2
 8004686:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	441a      	add	r2, r3
 8004694:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	7b1b      	ldrb	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f040 8178 	bne.w	80049a6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	785b      	ldrb	r3, [r3, #1]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8084 	beq.w	80047c8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	4413      	add	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	011a      	lsls	r2, r3, #4
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	88db      	ldrh	r3, [r3, #6]
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	827b      	strh	r3, [r7, #18]
 8004702:	8a7b      	ldrh	r3, [r7, #18]
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01b      	beq.n	8004744 <USB_ActivateEndpoint+0x17c>
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004722:	823b      	strh	r3, [r7, #16]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	441a      	add	r2, r3
 800472e:	8a3b      	ldrh	r3, [r7, #16]
 8004730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004740:	b29b      	uxth	r3, r3
 8004742:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	78db      	ldrb	r3, [r3, #3]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d020      	beq.n	800478e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004762:	81bb      	strh	r3, [r7, #12]
 8004764:	89bb      	ldrh	r3, [r7, #12]
 8004766:	f083 0320 	eor.w	r3, r3, #32
 800476a:	81bb      	strh	r3, [r7, #12]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	441a      	add	r2, r3
 8004776:	89bb      	ldrh	r3, [r7, #12]
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]
 800478c:	e2d5      	b.n	8004d3a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a4:	81fb      	strh	r3, [r7, #14]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	89fb      	ldrh	r3, [r7, #14]
 80047b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	8013      	strh	r3, [r2, #0]
 80047c6:	e2b8      	b.n	8004d3a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	633b      	str	r3, [r7, #48]	; 0x30
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	4413      	add	r3, r2
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	011a      	lsls	r2, r3, #4
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	88db      	ldrh	r3, [r3, #6]
 80047f0:	085b      	lsrs	r3, r3, #1
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004806:	b29b      	uxth	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	4413      	add	r3, r2
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	011a      	lsls	r2, r3, #4
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	4413      	add	r3, r2
 800481a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800482a:	b29a      	uxth	r2, r3
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	801a      	strh	r2, [r3, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b3e      	cmp	r3, #62	; 0x3e
 8004836:	d91d      	bls.n	8004874 <USB_ActivateEndpoint+0x2ac>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <USB_ActivateEndpoint+0x28a>
 800484c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800484e:	3b01      	subs	r3, #1
 8004850:	66bb      	str	r3, [r7, #104]	; 0x68
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	b29a      	uxth	r2, r3
 8004858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800485a:	b29b      	uxth	r3, r3
 800485c:	029b      	lsls	r3, r3, #10
 800485e:	b29b      	uxth	r3, r3
 8004860:	4313      	orrs	r3, r2
 8004862:	b29b      	uxth	r3, r3
 8004864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486c:	b29a      	uxth	r2, r3
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	e026      	b.n	80048c2 <USB_ActivateEndpoint+0x2fa>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <USB_ActivateEndpoint+0x2ca>
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800488a:	b29a      	uxth	r2, r3
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	801a      	strh	r2, [r3, #0]
 8004890:	e017      	b.n	80048c2 <USB_ActivateEndpoint+0x2fa>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	66bb      	str	r3, [r7, #104]	; 0x68
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <USB_ActivateEndpoint+0x2e4>
 80048a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048a8:	3301      	adds	r3, #1
 80048aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	029b      	lsls	r3, r3, #10
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	4313      	orrs	r3, r2
 80048bc:	b29a      	uxth	r2, r3
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80048d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01b      	beq.n	8004912 <USB_ActivateEndpoint+0x34a>
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f0:	843b      	strh	r3, [r7, #32]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	441a      	add	r2, r3
 80048fc:	8c3b      	ldrh	r3, [r7, #32]
 80048fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800490a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490e:	b29b      	uxth	r3, r3
 8004910:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d124      	bne.n	8004964 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800492c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004930:	83bb      	strh	r3, [r7, #28]
 8004932:	8bbb      	ldrh	r3, [r7, #28]
 8004934:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004938:	83bb      	strh	r3, [r7, #28]
 800493a:	8bbb      	ldrh	r3, [r7, #28]
 800493c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004940:	83bb      	strh	r3, [r7, #28]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	8bbb      	ldrh	r3, [r7, #28]
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]
 8004962:	e1ea      	b.n	8004d3a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497a:	83fb      	strh	r3, [r7, #30]
 800497c:	8bfb      	ldrh	r3, [r7, #30]
 800497e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004982:	83fb      	strh	r3, [r7, #30]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	8bfb      	ldrh	r3, [r7, #30]
 8004990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800499c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	8013      	strh	r3, [r2, #0]
 80049a4:	e1c9      	b.n	8004d3a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	78db      	ldrb	r3, [r3, #3]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d11e      	bne.n	80049ec <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	441a      	add	r2, r3
 80049d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80049d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049de:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	8013      	strh	r3, [r2, #0]
 80049ea:	e01d      	b.n	8004a28 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	441a      	add	r2, r3
 8004a10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a38:	4413      	add	r3, r2
 8004a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	011a      	lsls	r2, r3, #4
 8004a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	891b      	ldrh	r3, [r3, #8]
 8004a50:	085b      	lsrs	r3, r3, #1
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a5a:	801a      	strh	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6c:	4413      	add	r3, r2
 8004a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	011a      	lsls	r2, r3, #4
 8004a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	895b      	ldrh	r3, [r3, #10]
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	785b      	ldrb	r3, [r3, #1]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 8093 	bne.w	8004bc0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004aaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01b      	beq.n	8004aee <USB_ActivateEndpoint+0x526>
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004afc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01b      	beq.n	8004b3e <USB_ActivateEndpoint+0x576>
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	441a      	add	r2, r3
 8004b28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b54:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b56:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b5c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b64:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	441a      	add	r2, r3
 8004b70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	8013      	strh	r3, [r2, #0]
 8004bbe:	e0bc      	b.n	8004d3a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004bd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01d      	beq.n	8004c18 <USB_ActivateEndpoint+0x650>
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	441a      	add	r2, r3
 8004c00:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01d      	beq.n	8004c70 <USB_ActivateEndpoint+0x6a8>
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	441a      	add	r2, r3
 8004c58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	78db      	ldrb	r3, [r3, #3]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d024      	beq.n	8004cc2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c96:	f083 0320 	eor.w	r3, r3, #32
 8004c9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	441a      	add	r2, r3
 8004ca8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	8013      	strh	r3, [r2, #0]
 8004cc0:	e01d      	b.n	8004cfe <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004d3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3774      	adds	r7, #116	; 0x74
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr

08004d48 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b08d      	sub	sp, #52	; 0x34
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	7b1b      	ldrb	r3, [r3, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 808e 	bne.w	8004e78 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	785b      	ldrb	r3, [r3, #1]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d044      	beq.n	8004dee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	81bb      	strh	r3, [r7, #12]
 8004d72:	89bb      	ldrh	r3, [r7, #12]
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01b      	beq.n	8004db4 <USB_DeactivateEndpoint+0x6c>
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	817b      	strh	r3, [r7, #10]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	897b      	ldrh	r3, [r7, #10]
 8004da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dca:	813b      	strh	r3, [r7, #8]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	441a      	add	r2, r3
 8004dd6:	893b      	ldrh	r3, [r7, #8]
 8004dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	8013      	strh	r3, [r2, #0]
 8004dec:	e192      	b.n	8005114 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	827b      	strh	r3, [r7, #18]
 8004dfc:	8a7b      	ldrh	r3, [r7, #18]
 8004dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01b      	beq.n	8004e3e <USB_DeactivateEndpoint+0xf6>
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1c:	823b      	strh	r3, [r7, #16]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	441a      	add	r2, r3
 8004e28:	8a3b      	ldrh	r3, [r7, #16]
 8004e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e54:	81fb      	strh	r3, [r7, #14]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	441a      	add	r2, r3
 8004e60:	89fb      	ldrh	r3, [r7, #14]
 8004e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	8013      	strh	r3, [r2, #0]
 8004e76:	e14d      	b.n	8005114 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f040 80a5 	bne.w	8004fcc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	843b      	strh	r3, [r7, #32]
 8004e90:	8c3b      	ldrh	r3, [r7, #32]
 8004e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01b      	beq.n	8004ed2 <USB_DeactivateEndpoint+0x18a>
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb0:	83fb      	strh	r3, [r7, #30]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	441a      	add	r2, r3
 8004ebc:	8bfb      	ldrh	r3, [r7, #30]
 8004ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	83bb      	strh	r3, [r7, #28]
 8004ee0:	8bbb      	ldrh	r3, [r7, #28]
 8004ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01b      	beq.n	8004f22 <USB_DeactivateEndpoint+0x1da>
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f00:	837b      	strh	r3, [r7, #26]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	8b7b      	ldrh	r3, [r7, #26]
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f38:	833b      	strh	r3, [r7, #24]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	441a      	add	r2, r3
 8004f44:	8b3b      	ldrh	r3, [r7, #24]
 8004f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f70:	82fb      	strh	r3, [r7, #22]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	441a      	add	r2, r3
 8004f7c:	8afb      	ldrh	r3, [r7, #22]
 8004f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fa8:	82bb      	strh	r3, [r7, #20]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	441a      	add	r2, r3
 8004fb4:	8abb      	ldrh	r3, [r7, #20]
 8004fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	8013      	strh	r3, [r2, #0]
 8004fca:	e0a3      	b.n	8005114 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004fda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01b      	beq.n	800501c <USB_DeactivateEndpoint+0x2d4>
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	441a      	add	r2, r3
 8005006:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800500c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005018:	b29b      	uxth	r3, r3
 800501a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	857b      	strh	r3, [r7, #42]	; 0x2a
 800502a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800502c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01b      	beq.n	800506c <USB_DeactivateEndpoint+0x324>
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	853b      	strh	r3, [r7, #40]	; 0x28
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	441a      	add	r2, r3
 8005056:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005068:	b29b      	uxth	r3, r3
 800506a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005082:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800509c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d8:	b29b      	uxth	r3, r3
 80050da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3734      	adds	r7, #52	; 0x34
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr

08005120 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b0c2      	sub	sp, #264	; 0x108
 8005124:	af00      	add	r7, sp, #0
 8005126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800512a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800512e:	6018      	str	r0, [r3, #0]
 8005130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005138:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800513a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	785b      	ldrb	r3, [r3, #1]
 8005146:	2b01      	cmp	r3, #1
 8005148:	f040 86b7 	bne.w	8005eba <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800514c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699a      	ldr	r2, [r3, #24]
 8005158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	429a      	cmp	r2, r3
 8005166:	d908      	bls.n	800517a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005178:	e007      	b.n	800518a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800517a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800518a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	7b1b      	ldrb	r3, [r3, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d13a      	bne.n	8005210 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800519a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6959      	ldr	r1, [r3, #20]
 80051a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	88da      	ldrh	r2, [r3, #6]
 80051b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80051bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051c0:	6800      	ldr	r0, [r0, #0]
 80051c2:	f001 fc9c 	bl	8006afe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	461a      	mov	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4413      	add	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	011a      	lsls	r2, r3, #4
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	4413      	add	r3, r2
 80051fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	f000 be1f 	b.w	8005e4e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	2b02      	cmp	r3, #2
 800521e:	f040 8462 	bne.w	8005ae6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a1a      	ldr	r2, [r3, #32]
 800522e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	429a      	cmp	r2, r3
 800523c:	f240 83df 	bls.w	80059fe <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800526a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	441a      	add	r2, r3
 8005284:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800528c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005290:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005298:	b29b      	uxth	r3, r3
 800529a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800529c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ac:	1ad2      	subs	r2, r2, r3
 80052ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 81c7 	beq.w	8005670 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	633b      	str	r3, [r7, #48]	; 0x30
 80052ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d177      	bne.n	80053ee <USB_EPStartXfer+0x2ce>
 80052fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
 800530a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800530e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005318:	b29b      	uxth	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	4413      	add	r3, r2
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
 8005322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	011a      	lsls	r2, r3, #4
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	4413      	add	r3, r2
 8005334:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005344:	b29a      	uxth	r2, r3
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	801a      	strh	r2, [r3, #0]
 800534a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534e:	2b3e      	cmp	r3, #62	; 0x3e
 8005350:	d921      	bls.n	8005396 <USB_EPStartXfer+0x276>
 8005352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800535c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <USB_EPStartXfer+0x252>
 8005368:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800536c:	3b01      	subs	r3, #1
 800536e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29a      	uxth	r2, r3
 8005378:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800537c:	b29b      	uxth	r3, r3
 800537e:	029b      	lsls	r3, r3, #10
 8005380:	b29b      	uxth	r3, r3
 8005382:	4313      	orrs	r3, r2
 8005384:	b29b      	uxth	r3, r3
 8005386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800538a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538e:	b29a      	uxth	r2, r3
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	e050      	b.n	8005438 <USB_EPStartXfer+0x318>
 8005396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <USB_EPStartXfer+0x294>
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	e041      	b.n	8005438 <USB_EPStartXfer+0x318>
 80053b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <USB_EPStartXfer+0x2b4>
 80053ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053ce:	3301      	adds	r3, #1
 80053d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29a      	uxth	r2, r3
 80053da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053de:	b29b      	uxth	r3, r3
 80053e0:	029b      	lsls	r3, r3, #10
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e024      	b.n	8005438 <USB_EPStartXfer+0x318>
 80053ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d11c      	bne.n	8005438 <USB_EPStartXfer+0x318>
 80053fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005402:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540c:	b29b      	uxth	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	4413      	add	r3, r2
 8005414:	633b      	str	r3, [r7, #48]	; 0x30
 8005416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	011a      	lsls	r2, r3, #4
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	4413      	add	r3, r2
 8005428:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800542e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005432:	b29a      	uxth	r2, r3
 8005434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005436:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800543c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	895b      	ldrh	r3, [r3, #10]
 8005444:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6959      	ldr	r1, [r3, #20]
 8005454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005458:	b29b      	uxth	r3, r3
 800545a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800545e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005462:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005466:	6800      	ldr	r0, [r0, #0]
 8005468:	f001 fb49 	bl	8006afe <USB_WritePMA>
            ep->xfer_buff += len;
 800546c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800547c:	441a      	add	r2, r3
 800547e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800548a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6a1a      	ldr	r2, [r3, #32]
 8005496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d90f      	bls.n	80054c6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80054a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6a1a      	ldr	r2, [r3, #32]
 80054b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b6:	1ad2      	subs	r2, r2, r3
 80054b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	621a      	str	r2, [r3, #32]
 80054c4:	e00e      	b.n	80054e4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80054c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80054d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2200      	movs	r2, #0
 80054e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	785b      	ldrb	r3, [r3, #1]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d177      	bne.n	80055e4 <USB_EPStartXfer+0x4c4>
 80054f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	61bb      	str	r3, [r7, #24]
 8005500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550e:	b29b      	uxth	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	4413      	add	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	011a      	lsls	r2, r3, #4
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	4413      	add	r3, r2
 800552a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800553a:	b29a      	uxth	r2, r3
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005544:	2b3e      	cmp	r3, #62	; 0x3e
 8005546:	d921      	bls.n	800558c <USB_EPStartXfer+0x46c>
 8005548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <USB_EPStartXfer+0x448>
 800555e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005562:	3b01      	subs	r3, #1
 8005564:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29a      	uxth	r2, r3
 800556e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005572:	b29b      	uxth	r3, r3
 8005574:	029b      	lsls	r3, r3, #10
 8005576:	b29b      	uxth	r3, r3
 8005578:	4313      	orrs	r3, r2
 800557a:	b29b      	uxth	r3, r3
 800557c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005584:	b29a      	uxth	r2, r3
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	801a      	strh	r2, [r3, #0]
 800558a:	e056      	b.n	800563a <USB_EPStartXfer+0x51a>
 800558c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <USB_EPStartXfer+0x48a>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	801a      	strh	r2, [r3, #0]
 80055a8:	e047      	b.n	800563a <USB_EPStartXfer+0x51a>
 80055aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d004      	beq.n	80055ca <USB_EPStartXfer+0x4aa>
 80055c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c4:	3301      	adds	r3, #1
 80055c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	029b      	lsls	r3, r3, #10
 80055d8:	b29b      	uxth	r3, r3
 80055da:	4313      	orrs	r3, r2
 80055dc:	b29a      	uxth	r2, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	e02a      	b.n	800563a <USB_EPStartXfer+0x51a>
 80055e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d122      	bne.n	800563a <USB_EPStartXfer+0x51a>
 80055f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	623b      	str	r3, [r7, #32]
 8005600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005604:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560e:	b29b      	uxth	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	4413      	add	r3, r2
 8005616:	623b      	str	r3, [r7, #32]
 8005618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800561c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	011a      	lsls	r2, r3, #4
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	4413      	add	r3, r2
 800562a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005634:	b29a      	uxth	r2, r3
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800563a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	891b      	ldrh	r3, [r3, #8]
 8005646:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800564a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6959      	ldr	r1, [r3, #20]
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800565a:	b29b      	uxth	r3, r3
 800565c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005660:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005664:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005668:	6800      	ldr	r0, [r0, #0]
 800566a:	f001 fa48 	bl	8006afe <USB_WritePMA>
 800566e:	e3ee      	b.n	8005e4e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d177      	bne.n	8005770 <USB_EPStartXfer+0x650>
 8005680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	64bb      	str	r3, [r7, #72]	; 0x48
 800568c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569a:	b29b      	uxth	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a0:	4413      	add	r3, r2
 80056a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80056a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	011a      	lsls	r2, r3, #4
 80056b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b4:	4413      	add	r3, r2
 80056b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056ba:	647b      	str	r3, [r7, #68]	; 0x44
 80056bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d0:	2b3e      	cmp	r3, #62	; 0x3e
 80056d2:	d921      	bls.n	8005718 <USB_EPStartXfer+0x5f8>
 80056d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <USB_EPStartXfer+0x5d4>
 80056ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056ee:	3b01      	subs	r3, #1
 80056f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056fe:	b29b      	uxth	r3, r3
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	b29b      	uxth	r3, r3
 8005704:	4313      	orrs	r3, r2
 8005706:	b29b      	uxth	r3, r3
 8005708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005710:	b29a      	uxth	r2, r3
 8005712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005714:	801a      	strh	r2, [r3, #0]
 8005716:	e056      	b.n	80057c6 <USB_EPStartXfer+0x6a6>
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10a      	bne.n	8005736 <USB_EPStartXfer+0x616>
 8005720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572e:	b29a      	uxth	r2, r3
 8005730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005732:	801a      	strh	r2, [r3, #0]
 8005734:	e047      	b.n	80057c6 <USB_EPStartXfer+0x6a6>
 8005736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <USB_EPStartXfer+0x636>
 800574c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005750:	3301      	adds	r3, #1
 8005752:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29a      	uxth	r2, r3
 800575c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005760:	b29b      	uxth	r3, r3
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	b29b      	uxth	r3, r3
 8005766:	4313      	orrs	r3, r2
 8005768:	b29a      	uxth	r2, r3
 800576a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800576c:	801a      	strh	r2, [r3, #0]
 800576e:	e02a      	b.n	80057c6 <USB_EPStartXfer+0x6a6>
 8005770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d122      	bne.n	80057c6 <USB_EPStartXfer+0x6a6>
 8005780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	653b      	str	r3, [r7, #80]	; 0x50
 800578c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a0:	4413      	add	r3, r2
 80057a2:	653b      	str	r3, [r7, #80]	; 0x50
 80057a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	011a      	lsls	r2, r3, #4
 80057b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b4:	4413      	add	r3, r2
 80057b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	891b      	ldrh	r3, [r3, #8]
 80057d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6959      	ldr	r1, [r3, #20]
 80057e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057f4:	6800      	ldr	r0, [r0, #0]
 80057f6:	f001 f982 	bl	8006afe <USB_WritePMA>
            ep->xfer_buff += len;
 80057fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800580a:	441a      	add	r2, r3
 800580c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6a1a      	ldr	r2, [r3, #32]
 8005824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	429a      	cmp	r2, r3
 8005832:	d90f      	bls.n	8005854 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6a1a      	ldr	r2, [r3, #32]
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005844:	1ad2      	subs	r2, r2, r3
 8005846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	621a      	str	r2, [r3, #32]
 8005852:	e00e      	b.n	8005872 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2200      	movs	r2, #0
 8005870:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	643b      	str	r3, [r7, #64]	; 0x40
 800587e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	785b      	ldrb	r3, [r3, #1]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d177      	bne.n	800597e <USB_EPStartXfer+0x85e>
 800588e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	63bb      	str	r3, [r7, #56]	; 0x38
 800589a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	4413      	add	r3, r2
 80058b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80058b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	011a      	lsls	r2, r3, #4
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	4413      	add	r3, r2
 80058c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d8:	801a      	strh	r2, [r3, #0]
 80058da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058de:	2b3e      	cmp	r3, #62	; 0x3e
 80058e0:	d921      	bls.n	8005926 <USB_EPStartXfer+0x806>
 80058e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <USB_EPStartXfer+0x7e2>
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fc:	3b01      	subs	r3, #1
 80058fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	b29a      	uxth	r2, r3
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590c:	b29b      	uxth	r3, r3
 800590e:	029b      	lsls	r3, r3, #10
 8005910:	b29b      	uxth	r3, r3
 8005912:	4313      	orrs	r3, r2
 8005914:	b29b      	uxth	r3, r3
 8005916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591e:	b29a      	uxth	r2, r3
 8005920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	e050      	b.n	80059c8 <USB_EPStartXfer+0x8a8>
 8005926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <USB_EPStartXfer+0x824>
 800592e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800593c:	b29a      	uxth	r2, r3
 800593e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	e041      	b.n	80059c8 <USB_EPStartXfer+0x8a8>
 8005944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005948:	085b      	lsrs	r3, r3, #1
 800594a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800594e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d004      	beq.n	8005964 <USB_EPStartXfer+0x844>
 800595a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595e:	3301      	adds	r3, #1
 8005960:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29a      	uxth	r2, r3
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596e:	b29b      	uxth	r3, r3
 8005970:	029b      	lsls	r3, r3, #10
 8005972:	b29b      	uxth	r3, r3
 8005974:	4313      	orrs	r3, r2
 8005976:	b29a      	uxth	r2, r3
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	801a      	strh	r2, [r3, #0]
 800597c:	e024      	b.n	80059c8 <USB_EPStartXfer+0x8a8>
 800597e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d11c      	bne.n	80059c8 <USB_EPStartXfer+0x8a8>
 800598e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599c:	b29b      	uxth	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a2:	4413      	add	r3, r2
 80059a4:	643b      	str	r3, [r7, #64]	; 0x40
 80059a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	011a      	lsls	r2, r3, #4
 80059b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b6:	4413      	add	r3, r2
 80059b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	895b      	ldrh	r3, [r3, #10]
 80059d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6959      	ldr	r1, [r3, #20]
 80059e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059f6:	6800      	ldr	r0, [r0, #0]
 80059f8:	f001 f881 	bl	8006afe <USB_WritePMA>
 80059fc:	e227      	b.n	8005e4e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a34:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a8a:	4413      	add	r3, r2
 8005a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	011a      	lsls	r2, r3, #4
 8005a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	891b      	ldrh	r3, [r3, #8]
 8005abc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6959      	ldr	r1, [r3, #20]
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ad6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ada:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ade:	6800      	ldr	r0, [r0, #0]
 8005ae0:	f001 f80d 	bl	8006afe <USB_WritePMA>
 8005ae4:	e1b3      	b.n	8005e4e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6a1a      	ldr	r2, [r3, #32]
 8005af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af6:	1ad2      	subs	r2, r2, r3
 8005af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80c6 	beq.w	8005cb8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	673b      	str	r3, [r7, #112]	; 0x70
 8005b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d177      	bne.n	8005c38 <USB_EPStartXfer+0xb18>
 8005b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b68:	4413      	add	r3, r2
 8005b6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	011a      	lsls	r2, r3, #4
 8005b7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b82:	667b      	str	r3, [r7, #100]	; 0x64
 8005b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b98:	2b3e      	cmp	r3, #62	; 0x3e
 8005b9a:	d921      	bls.n	8005be0 <USB_EPStartXfer+0xac0>
 8005b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <USB_EPStartXfer+0xa9c>
 8005bb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	029b      	lsls	r3, r3, #10
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	e050      	b.n	8005c82 <USB_EPStartXfer+0xb62>
 8005be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <USB_EPStartXfer+0xade>
 8005be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bfa:	801a      	strh	r2, [r3, #0]
 8005bfc:	e041      	b.n	8005c82 <USB_EPStartXfer+0xb62>
 8005bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d004      	beq.n	8005c1e <USB_EPStartXfer+0xafe>
 8005c14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c18:	3301      	adds	r3, #1
 8005c1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	029b      	lsls	r3, r3, #10
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c34:	801a      	strh	r2, [r3, #0]
 8005c36:	e024      	b.n	8005c82 <USB_EPStartXfer+0xb62>
 8005c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d11c      	bne.n	8005c82 <USB_EPStartXfer+0xb62>
 8005c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c5c:	4413      	add	r3, r2
 8005c5e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	011a      	lsls	r2, r3, #4
 8005c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c70:	4413      	add	r3, r2
 8005c72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	895b      	ldrh	r3, [r3, #10]
 8005c8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6959      	ldr	r1, [r3, #20]
 8005c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ca8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005cac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005cb0:	6800      	ldr	r0, [r0, #0]
 8005cb2:	f000 ff24 	bl	8006afe <USB_WritePMA>
 8005cb6:	e0ca      	b.n	8005e4e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d177      	bne.n	8005db8 <USB_EPStartXfer+0xc98>
 8005cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ccc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ce8:	4413      	add	r3, r2
 8005cea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	011a      	lsls	r2, r3, #4
 8005cfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d02:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d18:	2b3e      	cmp	r3, #62	; 0x3e
 8005d1a:	d921      	bls.n	8005d60 <USB_EPStartXfer+0xc40>
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <USB_EPStartXfer+0xc1c>
 8005d32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d36:	3b01      	subs	r3, #1
 8005d38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	029b      	lsls	r3, r3, #10
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	e05c      	b.n	8005e1a <USB_EPStartXfer+0xcfa>
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <USB_EPStartXfer+0xc5e>
 8005d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	e04d      	b.n	8005e1a <USB_EPStartXfer+0xcfa>
 8005d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d82:	085b      	lsrs	r3, r3, #1
 8005d84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <USB_EPStartXfer+0xc7e>
 8005d94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d98:	3301      	adds	r3, #1
 8005d9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	029b      	lsls	r3, r3, #10
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	4313      	orrs	r3, r2
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	e030      	b.n	8005e1a <USB_EPStartXfer+0xcfa>
 8005db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d128      	bne.n	8005e1a <USB_EPStartXfer+0xcfa>
 8005dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dec:	4413      	add	r3, r2
 8005dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	011a      	lsls	r2, r3, #4
 8005e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e04:	4413      	add	r3, r2
 8005e06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	891b      	ldrh	r3, [r3, #8]
 8005e26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6959      	ldr	r1, [r3, #20]
 8005e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e40:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e44:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e48:	6800      	ldr	r0, [r0, #0]
 8005e4a:	f000 fe58 	bl	8006afe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e74:	817b      	strh	r3, [r7, #10]
 8005e76:	897b      	ldrh	r3, [r7, #10]
 8005e78:	f083 0310 	eor.w	r3, r3, #16
 8005e7c:	817b      	strh	r3, [r7, #10]
 8005e7e:	897b      	ldrh	r3, [r7, #10]
 8005e80:	f083 0320 	eor.w	r3, r3, #32
 8005e84:	817b      	strh	r3, [r7, #10]
 8005e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	897b      	ldrh	r3, [r7, #10]
 8005ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8013      	strh	r3, [r2, #0]
 8005eb6:	f000 bcde 	b.w	8006876 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	7b1b      	ldrb	r3, [r3, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f040 80bb 	bne.w	8006042 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699a      	ldr	r2, [r3, #24]
 8005ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d917      	bls.n	8005f18 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699a      	ldr	r2, [r3, #24]
 8005f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f08:	1ad2      	subs	r2, r2, r3
 8005f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	619a      	str	r2, [r3, #24]
 8005f16:	e00e      	b.n	8005f36 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	011a      	lsls	r2, r3, #4
 8005f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f72:	4413      	add	r3, r2
 8005f74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f94:	2b3e      	cmp	r3, #62	; 0x3e
 8005f96:	d924      	bls.n	8005fe2 <USB_EPStartXfer+0xec2>
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa6:	f003 031f 	and.w	r3, r3, #31
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <USB_EPStartXfer+0xe98>
 8005fae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	029b      	lsls	r3, r3, #10
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	f000 bc10 	b.w	8006802 <USB_EPStartXfer+0x16e2>
 8005fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10c      	bne.n	8006004 <USB_EPStartXfer+0xee4>
 8005fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006000:	801a      	strh	r2, [r3, #0]
 8006002:	e3fe      	b.n	8006802 <USB_EPStartXfer+0x16e2>
 8006004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800600e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d004      	beq.n	8006024 <USB_EPStartXfer+0xf04>
 800601a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800601e:	3301      	adds	r3, #1
 8006020:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29a      	uxth	r2, r3
 800602c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006030:	b29b      	uxth	r3, r3
 8006032:	029b      	lsls	r3, r3, #10
 8006034:	b29b      	uxth	r3, r3
 8006036:	4313      	orrs	r3, r2
 8006038:	b29a      	uxth	r2, r3
 800603a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800603e:	801a      	strh	r2, [r3, #0]
 8006040:	e3df      	b.n	8006802 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	78db      	ldrb	r3, [r3, #3]
 800604e:	2b02      	cmp	r3, #2
 8006050:	f040 8218 	bne.w	8006484 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f040 809d 	bne.w	80061a0 <USB_EPStartXfer+0x1080>
 8006066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006078:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006082:	b29b      	uxth	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800608a:	4413      	add	r3, r2
 800608c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	011a      	lsls	r2, r3, #4
 800609e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060a2:	4413      	add	r3, r2
 80060a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b3e      	cmp	r3, #62	; 0x3e
 80060ce:	d92b      	bls.n	8006128 <USB_EPStartXfer+0x1008>
 80060d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 031f 	and.w	r3, r3, #31
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d104      	bne.n	8006100 <USB_EPStartXfer+0xfe0>
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fa:	3b01      	subs	r3, #1
 80060fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006100:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29a      	uxth	r2, r3
 8006108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610c:	b29b      	uxth	r3, r3
 800610e:	029b      	lsls	r3, r3, #10
 8006110:	b29b      	uxth	r3, r3
 8006112:	4313      	orrs	r3, r2
 8006114:	b29b      	uxth	r3, r3
 8006116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611e:	b29a      	uxth	r2, r3
 8006120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	e070      	b.n	800620a <USB_EPStartXfer+0x10ea>
 8006128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10c      	bne.n	8006152 <USB_EPStartXfer+0x1032>
 8006138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006148:	b29a      	uxth	r2, r3
 800614a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	e05b      	b.n	800620a <USB_EPStartXfer+0x10ea>
 8006152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d004      	beq.n	8006182 <USB_EPStartXfer+0x1062>
 8006178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617c:	3301      	adds	r3, #1
 800617e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006182:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29a      	uxth	r2, r3
 800618a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618e:	b29b      	uxth	r3, r3
 8006190:	029b      	lsls	r3, r3, #10
 8006192:	b29b      	uxth	r3, r3
 8006194:	4313      	orrs	r3, r2
 8006196:	b29a      	uxth	r2, r3
 8006198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	e034      	b.n	800620a <USB_EPStartXfer+0x10ea>
 80061a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d12c      	bne.n	800620a <USB_EPStartXfer+0x10ea>
 80061b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061d4:	4413      	add	r3, r2
 80061d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	011a      	lsls	r2, r3, #4
 80061e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061ec:	4413      	add	r3, r2
 80061ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	b29a      	uxth	r2, r3
 8006204:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006208:	801a      	strh	r2, [r3, #0]
 800620a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f040 809d 	bne.w	8006364 <USB_EPStartXfer+0x1244>
 800622a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006246:	b29b      	uxth	r3, r3
 8006248:	461a      	mov	r2, r3
 800624a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800624e:	4413      	add	r3, r2
 8006250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	011a      	lsls	r2, r3, #4
 8006262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006266:	4413      	add	r3, r2
 8006268:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800626c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800627c:	b29a      	uxth	r2, r3
 800627e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b3e      	cmp	r3, #62	; 0x3e
 8006292:	d92b      	bls.n	80062ec <USB_EPStartXfer+0x11cc>
 8006294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 031f 	and.w	r3, r3, #31
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d104      	bne.n	80062c4 <USB_EPStartXfer+0x11a4>
 80062ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062be:	3b01      	subs	r3, #1
 80062c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	029b      	lsls	r3, r3, #10
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	b29b      	uxth	r3, r3
 80062da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	e069      	b.n	80063c0 <USB_EPStartXfer+0x12a0>
 80062ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10c      	bne.n	8006316 <USB_EPStartXfer+0x11f6>
 80062fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800630c:	b29a      	uxth	r2, r3
 800630e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	e054      	b.n	80063c0 <USB_EPStartXfer+0x12a0>
 8006316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <USB_EPStartXfer+0x1226>
 800633c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006340:	3301      	adds	r3, #1
 8006342:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006346:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29a      	uxth	r2, r3
 800634e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006352:	b29b      	uxth	r3, r3
 8006354:	029b      	lsls	r3, r3, #10
 8006356:	b29b      	uxth	r3, r3
 8006358:	4313      	orrs	r3, r2
 800635a:	b29a      	uxth	r2, r3
 800635c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	e02d      	b.n	80063c0 <USB_EPStartXfer+0x12a0>
 8006364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d125      	bne.n	80063c0 <USB_EPStartXfer+0x12a0>
 8006374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006382:	b29b      	uxth	r3, r3
 8006384:	461a      	mov	r2, r3
 8006386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800638a:	4413      	add	r3, r2
 800638c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	011a      	lsls	r2, r3, #4
 800639e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063a2:	4413      	add	r3, r2
 80063a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063be:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 8218 	beq.w	8006802 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <USB_EPStartXfer+0x12ea>
 80063fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10d      	bne.n	8006426 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800640a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800640e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006412:	2b00      	cmp	r3, #0
 8006414:	f040 81f5 	bne.w	8006802 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006418:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 81ee 	bne.w	8006802 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 8006444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	441a      	add	r2, r3
 800646a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800646e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800647e:	b29b      	uxth	r3, r3
 8006480:	8013      	strh	r3, [r2, #0]
 8006482:	e1be      	b.n	8006802 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	78db      	ldrb	r3, [r3, #3]
 8006490:	2b01      	cmp	r3, #1
 8006492:	f040 81b4 	bne.w	80067fe <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699a      	ldr	r2, [r3, #24]
 80064a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d917      	bls.n	80064e2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80064b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	619a      	str	r2, [r3, #24]
 80064e0:	e00e      	b.n	8006500 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80064e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80064f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2200      	movs	r2, #0
 80064fe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f040 8085 	bne.w	800661c <USB_EPStartXfer+0x14fc>
 8006512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652e:	b29b      	uxth	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006536:	4413      	add	r3, r2
 8006538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800653c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	011a      	lsls	r2, r3, #4
 800654a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800654e:	4413      	add	r3, r2
 8006550:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006558:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006564:	b29a      	uxth	r2, r3
 8006566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006570:	2b3e      	cmp	r3, #62	; 0x3e
 8006572:	d923      	bls.n	80065bc <USB_EPStartXfer+0x149c>
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <USB_EPStartXfer+0x1474>
 800658a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800658e:	3b01      	subs	r3, #1
 8006590:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006594:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29a      	uxth	r2, r3
 800659c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	029b      	lsls	r3, r3, #10
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	4313      	orrs	r3, r2
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	e060      	b.n	800667e <USB_EPStartXfer+0x155e>
 80065bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10c      	bne.n	80065de <USB_EPStartXfer+0x14be>
 80065c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	e04f      	b.n	800667e <USB_EPStartXfer+0x155e>
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <USB_EPStartXfer+0x14de>
 80065f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065f8:	3301      	adds	r3, #1
 80065fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	b29a      	uxth	r2, r3
 8006606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800660a:	b29b      	uxth	r3, r3
 800660c:	029b      	lsls	r3, r3, #10
 800660e:	b29b      	uxth	r3, r3
 8006610:	4313      	orrs	r3, r2
 8006612:	b29a      	uxth	r2, r3
 8006614:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	e030      	b.n	800667e <USB_EPStartXfer+0x155e>
 800661c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d128      	bne.n	800667e <USB_EPStartXfer+0x155e>
 800662c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800663a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006648:	b29b      	uxth	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006650:	4413      	add	r3, r2
 8006652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	011a      	lsls	r2, r3, #4
 8006664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006668:	4413      	add	r3, r2
 800666a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800666e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006676:	b29a      	uxth	r2, r3
 8006678:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800668c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f040 8085 	bne.w	80067a8 <USB_EPStartXfer+0x1688>
 800669e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066c2:	4413      	add	r3, r2
 80066c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	011a      	lsls	r2, r3, #4
 80066d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066da:	4413      	add	r3, r2
 80066dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066f6:	801a      	strh	r2, [r3, #0]
 80066f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fc:	2b3e      	cmp	r3, #62	; 0x3e
 80066fe:	d923      	bls.n	8006748 <USB_EPStartXfer+0x1628>
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006704:	095b      	lsrs	r3, r3, #5
 8006706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800670a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <USB_EPStartXfer+0x1600>
 8006716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800671a:	3b01      	subs	r3, #1
 800671c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006720:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29a      	uxth	r2, r3
 8006728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800672c:	b29b      	uxth	r3, r3
 800672e:	029b      	lsls	r3, r3, #10
 8006730:	b29b      	uxth	r3, r3
 8006732:	4313      	orrs	r3, r2
 8006734:	b29b      	uxth	r3, r3
 8006736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800673a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673e:	b29a      	uxth	r2, r3
 8006740:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006744:	801a      	strh	r2, [r3, #0]
 8006746:	e05c      	b.n	8006802 <USB_EPStartXfer+0x16e2>
 8006748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10c      	bne.n	800676a <USB_EPStartXfer+0x164a>
 8006750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800675c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006760:	b29a      	uxth	r2, r3
 8006762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	e04b      	b.n	8006802 <USB_EPStartXfer+0x16e2>
 800676a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <USB_EPStartXfer+0x166a>
 8006780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006784:	3301      	adds	r3, #1
 8006786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800678a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29a      	uxth	r2, r3
 8006792:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006796:	b29b      	uxth	r3, r3
 8006798:	029b      	lsls	r3, r3, #10
 800679a:	b29b      	uxth	r3, r3
 800679c:	4313      	orrs	r3, r2
 800679e:	b29a      	uxth	r2, r3
 80067a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067a4:	801a      	strh	r2, [r3, #0]
 80067a6:	e02c      	b.n	8006802 <USB_EPStartXfer+0x16e2>
 80067a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d124      	bne.n	8006802 <USB_EPStartXfer+0x16e2>
 80067b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067ce:	4413      	add	r3, r2
 80067d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	011a      	lsls	r2, r3, #4
 80067e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067e6:	4413      	add	r3, r2
 80067e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067fa:	801a      	strh	r2, [r3, #0]
 80067fc:	e001      	b.n	8006802 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e03a      	b.n	8006878 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006828:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800682c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006830:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006834:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006838:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800683c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006840:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006848:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	441a      	add	r2, r3
 800685e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006872:	b29b      	uxth	r3, r3
 8006874:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006882:	b480      	push	{r7}
 8006884:	b085      	sub	sp, #20
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d020      	beq.n	80068d6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068aa:	81bb      	strh	r3, [r7, #12]
 80068ac:	89bb      	ldrh	r3, [r7, #12]
 80068ae:	f083 0310 	eor.w	r3, r3, #16
 80068b2:	81bb      	strh	r3, [r7, #12]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	441a      	add	r2, r3
 80068be:	89bb      	ldrh	r3, [r7, #12]
 80068c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	8013      	strh	r3, [r2, #0]
 80068d4:	e01f      	b.n	8006916 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ec:	81fb      	strh	r3, [r7, #14]
 80068ee:	89fb      	ldrh	r3, [r7, #14]
 80068f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068f4:	81fb      	strh	r3, [r7, #14]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	441a      	add	r2, r3
 8006900:	89fb      	ldrh	r3, [r7, #14]
 8006902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800690a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006912:	b29b      	uxth	r3, r3
 8006914:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	bc80      	pop	{r7}
 8006920:	4770      	bx	lr

08006922 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006922:	b480      	push	{r7}
 8006924:	b087      	sub	sp, #28
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	7b1b      	ldrb	r3, [r3, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	f040 809d 	bne.w	8006a70 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	785b      	ldrb	r3, [r3, #1]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d04c      	beq.n	80069d8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	823b      	strh	r3, [r7, #16]
 800694c:	8a3b      	ldrh	r3, [r7, #16]
 800694e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01b      	beq.n	800698e <USB_EPClearStall+0x6c>
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696c:	81fb      	strh	r3, [r7, #14]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	441a      	add	r2, r3
 8006978:	89fb      	ldrh	r3, [r7, #14]
 800697a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006986:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800698a:	b29b      	uxth	r3, r3
 800698c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	78db      	ldrb	r3, [r3, #3]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d06c      	beq.n	8006a70 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ac:	81bb      	strh	r3, [r7, #12]
 80069ae:	89bb      	ldrh	r3, [r7, #12]
 80069b0:	f083 0320 	eor.w	r3, r3, #32
 80069b4:	81bb      	strh	r3, [r7, #12]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	441a      	add	r2, r3
 80069c0:	89bb      	ldrh	r3, [r7, #12]
 80069c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	8013      	strh	r3, [r2, #0]
 80069d6:	e04b      	b.n	8006a70 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	82fb      	strh	r3, [r7, #22]
 80069e6:	8afb      	ldrh	r3, [r7, #22]
 80069e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01b      	beq.n	8006a28 <USB_EPClearStall+0x106>
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	82bb      	strh	r3, [r7, #20]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	441a      	add	r2, r3
 8006a12:	8abb      	ldrh	r3, [r7, #20]
 8006a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	827b      	strh	r3, [r7, #18]
 8006a40:	8a7b      	ldrh	r3, [r7, #18]
 8006a42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a46:	827b      	strh	r3, [r7, #18]
 8006a48:	8a7b      	ldrh	r3, [r7, #18]
 8006a4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a4e:	827b      	strh	r3, [r7, #18]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	441a      	add	r2, r3
 8006a5a:	8a7b      	ldrh	r3, [r7, #18]
 8006a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr

08006a7c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d103      	bne.n	8006a96 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2280      	movs	r2, #128	; 0x80
 8006a92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr

08006aa2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr

08006ab6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bc80      	pop	{r7}
 8006ac8:	4770      	bx	lr

08006aca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006adc:	68fb      	ldr	r3, [r7, #12]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr

08006ae8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b08b      	sub	sp, #44	; 0x2c
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	4611      	mov	r1, r2
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	80fb      	strh	r3, [r7, #6]
 8006b10:	4613      	mov	r3, r2
 8006b12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b14:	88bb      	ldrh	r3, [r7, #4]
 8006b16:	3301      	adds	r3, #1
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b24:	88fb      	ldrh	r3, [r7, #6]
 8006b26:	005a      	lsls	r2, r3, #1
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b30:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
 8006b36:	e01e      	b.n	8006b76 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	3301      	adds	r3, #1
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	021b      	lsls	r3, r3, #8
 8006b46:	b21a      	sxth	r2, r3
 8006b48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	b21b      	sxth	r3, r3
 8006b50:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	8a7a      	ldrh	r2, [r7, #18]
 8006b56:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	3302      	adds	r3, #2
 8006b5c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	3302      	adds	r3, #2
 8006b62:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	3301      	adds	r3, #1
 8006b68:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	3b01      	subs	r3, #1
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1dd      	bne.n	8006b38 <USB_WritePMA+0x3a>
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	372c      	adds	r7, #44	; 0x2c
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr

08006b88 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b08b      	sub	sp, #44	; 0x2c
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	4611      	mov	r1, r2
 8006b94:	461a      	mov	r2, r3
 8006b96:	460b      	mov	r3, r1
 8006b98:	80fb      	strh	r3, [r7, #6]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b9e:	88bb      	ldrh	r3, [r7, #4]
 8006ba0:	085b      	lsrs	r3, r3, #1
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bae:	88fb      	ldrh	r3, [r7, #6]
 8006bb0:	005a      	lsls	r2, r3, #1
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc0:	e01b      	b.n	8006bfa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	3302      	adds	r3, #2
 8006bce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	0a1b      	lsrs	r3, r3, #8
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	3301      	adds	r3, #1
 8006bec:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	3302      	adds	r3, #2
 8006bf2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e0      	bne.n	8006bc2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006c00:	88bb      	ldrh	r3, [r7, #4]
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d007      	beq.n	8006c1c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	701a      	strb	r2, [r3, #0]
  }
}
 8006c1c:	bf00      	nop
 8006c1e:	372c      	adds	r7, #44	; 0x2c
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr

08006c26 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	7c1b      	ldrb	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d115      	bne.n	8006c6a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c42:	2202      	movs	r2, #2
 8006c44:	2181      	movs	r1, #129	; 0x81
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f001 fe87 	bl	800895a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c56:	2202      	movs	r2, #2
 8006c58:	2101      	movs	r1, #1
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 fe7d 	bl	800895a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006c68:	e012      	b.n	8006c90 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c6a:	2340      	movs	r3, #64	; 0x40
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	2181      	movs	r1, #129	; 0x81
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 fe72 	bl	800895a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c7c:	2340      	movs	r3, #64	; 0x40
 8006c7e:	2202      	movs	r2, #2
 8006c80:	2101      	movs	r1, #1
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fe69 	bl	800895a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c90:	2308      	movs	r3, #8
 8006c92:	2203      	movs	r2, #3
 8006c94:	2182      	movs	r1, #130	; 0x82
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fe5f 	bl	800895a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ca2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006ca6:	f001 ff7f 	bl	8008ba8 <USBD_static_malloc>
 8006caa:	4602      	mov	r2, r0
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]
 8006cc0:	e026      	b.n	8006d10 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	7c1b      	ldrb	r3, [r3, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 ff1f 	bl	8008b3c <USBD_LL_PrepareReceive>
 8006cfe:	e007      	b.n	8006d10 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d06:	2340      	movs	r3, #64	; 0x40
 8006d08:	2101      	movs	r1, #1
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 ff16 	bl	8008b3c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d2a:	2181      	movs	r1, #129	; 0x81
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 fe3a 	bl	80089a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d38:	2101      	movs	r1, #1
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fe33 	bl	80089a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d48:	2182      	movs	r1, #130	; 0x82
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fe2b 	bl	80089a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00e      	beq.n	8006d7e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 ff25 	bl	8008bc0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d98:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d039      	beq.n	8006e26 <USBD_CDC_Setup+0x9e>
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d17f      	bne.n	8006eb6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	88db      	ldrh	r3, [r3, #6]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d029      	beq.n	8006e12 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	b25b      	sxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da11      	bge.n	8006dec <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006dd4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	88d2      	ldrh	r2, [r2, #6]
 8006dda:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ddc:	6939      	ldr	r1, [r7, #16]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	88db      	ldrh	r3, [r3, #6]
 8006de2:	461a      	mov	r2, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fa0a 	bl	80081fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006dea:	e06b      	b.n	8006ec4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	785a      	ldrb	r2, [r3, #1]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	88db      	ldrh	r3, [r3, #6]
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e02:	6939      	ldr	r1, [r7, #16]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	88db      	ldrh	r3, [r3, #6]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 fa25 	bl	800825a <USBD_CtlPrepareRx>
      break;
 8006e10:	e058      	b.n	8006ec4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	7850      	ldrb	r0, [r2, #1]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	4798      	blx	r3
      break;
 8006e24:	e04e      	b.n	8006ec4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	2b0b      	cmp	r3, #11
 8006e2c:	d02e      	beq.n	8006e8c <USBD_CDC_Setup+0x104>
 8006e2e:	2b0b      	cmp	r3, #11
 8006e30:	dc38      	bgt.n	8006ea4 <USBD_CDC_Setup+0x11c>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <USBD_CDC_Setup+0xb4>
 8006e36:	2b0a      	cmp	r3, #10
 8006e38:	d014      	beq.n	8006e64 <USBD_CDC_Setup+0xdc>
 8006e3a:	e033      	b.n	8006ea4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d107      	bne.n	8006e56 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e46:	f107 030c 	add.w	r3, r7, #12
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 f9d5 	bl	80081fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e54:	e02e      	b.n	8006eb4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 f966 	bl	800812a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	75fb      	strb	r3, [r7, #23]
          break;
 8006e62:	e027      	b.n	8006eb4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d107      	bne.n	8006e7e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e6e:	f107 030f 	add.w	r3, r7, #15
 8006e72:	2201      	movs	r2, #1
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 f9c1 	bl	80081fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e7c:	e01a      	b.n	8006eb4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 f952 	bl	800812a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e86:	2302      	movs	r3, #2
 8006e88:	75fb      	strb	r3, [r7, #23]
          break;
 8006e8a:	e013      	b.n	8006eb4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d00d      	beq.n	8006eb2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 f946 	bl	800812a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ea2:	e006      	b.n	8006eb2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 f93f 	bl	800812a <USBD_CtlError>
          ret = USBD_FAIL;
 8006eac:	2302      	movs	r3, #2
 8006eae:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb0:	e000      	b.n	8006eb4 <USBD_CDC_Setup+0x12c>
          break;
 8006eb2:	bf00      	nop
      }
      break;
 8006eb4:	e006      	b.n	8006ec4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 f936 	bl	800812a <USBD_CtlError>
      ret = USBD_FAIL;
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec2:	bf00      	nop
  }

  return ret;
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ee8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d03a      	beq.n	8006f6a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	440b      	add	r3, r1
 8006f02:	331c      	adds	r3, #28
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d029      	beq.n	8006f5e <USBD_CDC_DataIn+0x90>
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	331c      	adds	r3, #28
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	78f9      	ldrb	r1, [r7, #3]
 8006f1e:	68b8      	ldr	r0, [r7, #8]
 8006f20:	460b      	mov	r3, r1
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	4403      	add	r3, r0
 8006f2a:	3338      	adds	r3, #56	; 0x38
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f32:	fb01 f303 	mul.w	r3, r1, r3
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d110      	bne.n	8006f5e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f3c:	78fa      	ldrb	r2, [r7, #3]
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	4613      	mov	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	331c      	adds	r3, #28
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f50:	78f9      	ldrb	r1, [r7, #3]
 8006f52:	2300      	movs	r3, #0
 8006f54:	2200      	movs	r2, #0
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 fdcd 	bl	8008af6 <USBD_LL_Transmit>
 8006f5c:	e003      	b.n	8006f66 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	e000      	b.n	8006f6c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f6a:	2302      	movs	r3, #2
  }
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 fdf8 	bl	8008b82 <USBD_LL_GetRxDataSize>
 8006f92:	4602      	mov	r2, r0
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00d      	beq.n	8006fc0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4798      	blx	r3

    return USBD_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	e000      	b.n	8006fc2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006fc0:	2302      	movs	r3, #2
  }
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d015      	beq.n	8007010 <USBD_CDC_EP0_RxReady+0x46>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fea:	2bff      	cmp	r3, #255	; 0xff
 8006fec:	d010      	beq.n	8007010 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ffc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007004:	b292      	uxth	r2, r2
 8007006:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	22ff      	movs	r2, #255	; 0xff
 800700c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2243      	movs	r2, #67	; 0x43
 8007028:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800702a:	4b03      	ldr	r3, [pc, #12]	; (8007038 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	20000094 	.word	0x20000094

0800703c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2243      	movs	r2, #67	; 0x43
 8007048:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800704a:	4b03      	ldr	r3, [pc, #12]	; (8007058 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20000050 	.word	0x20000050

0800705c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2243      	movs	r2, #67	; 0x43
 8007068:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800706a:	4b03      	ldr	r3, [pc, #12]	; (8007078 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	200000d8 	.word	0x200000d8

0800707c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	220a      	movs	r2, #10
 8007088:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800708a:	4b03      	ldr	r3, [pc, #12]	; (8007098 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	2000000c 	.word	0x2000000c

0800709c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80070a6:	2302      	movs	r3, #2
 80070a8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr

080070c8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	4613      	mov	r3, r2
 80070d4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070dc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070e6:	88fa      	ldrh	r2, [r7, #6]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr

080070fa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr

08007120 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007136:	2b00      	cmp	r3, #0
 8007138:	d01c      	beq.n	8007174 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007140:	2b00      	cmp	r3, #0
 8007142:	d115      	bne.n	8007170 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007162:	b29b      	uxth	r3, r3
 8007164:	2181      	movs	r1, #129	; 0x81
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 fcc5 	bl	8008af6 <USBD_LL_Transmit>

      return USBD_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	e002      	b.n	8007176 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007170:	2301      	movs	r3, #1
 8007172:	e000      	b.n	8007176 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007174:	2302      	movs	r3, #2
  }
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007194:	2b00      	cmp	r3, #0
 8007196:	d017      	beq.n	80071c8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	7c1b      	ldrb	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d109      	bne.n	80071b4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071aa:	2101      	movs	r1, #1
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 fcc5 	bl	8008b3c <USBD_LL_PrepareReceive>
 80071b2:	e007      	b.n	80071c4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071ba:	2340      	movs	r3, #64	; 0x40
 80071bc:	2101      	movs	r1, #1
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 fcbc 	bl	8008b3c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	e000      	b.n	80071ca <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80071c8:	2302      	movs	r3, #2
  }
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	60f8      	str	r0, [r7, #12]
 80071da:	60b9      	str	r1, [r7, #8]
 80071dc:	4613      	mov	r3, r2
 80071de:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80071e6:	2302      	movs	r3, #2
 80071e8:	e01a      	b.n	8007220 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d003      	beq.n	80071fc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	79fa      	ldrb	r2, [r7, #7]
 8007216:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f001 fb29 	bl	8008870 <USBD_LL_Init>

  return USBD_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d006      	beq.n	800724a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
 8007248:	e001      	b.n	800724e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800724a:	2302      	movs	r3, #2
 800724c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr

0800725a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 fb5e 	bl	8008924 <USBD_LL_Start>

  return USBD_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	bc80      	pop	{r7}
 8007284:	4770      	bx	lr

08007286 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	460b      	mov	r3, r1
 8007290:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007292:	2302      	movs	r3, #2
 8007294:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00c      	beq.n	80072ba <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	78fa      	ldrb	r2, [r7, #3]
 80072aa:	4611      	mov	r1, r2
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	4798      	blx	r3
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	4611      	mov	r1, r2
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3

  return USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 fed8 	bl	80080b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007310:	461a      	mov	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800731e:	f003 031f 	and.w	r3, r3, #31
 8007322:	2b02      	cmp	r3, #2
 8007324:	d016      	beq.n	8007354 <USBD_LL_SetupStage+0x6a>
 8007326:	2b02      	cmp	r3, #2
 8007328:	d81c      	bhi.n	8007364 <USBD_LL_SetupStage+0x7a>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <USBD_LL_SetupStage+0x4a>
 800732e:	2b01      	cmp	r3, #1
 8007330:	d008      	beq.n	8007344 <USBD_LL_SetupStage+0x5a>
 8007332:	e017      	b.n	8007364 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f9cb 	bl	80076d8 <USBD_StdDevReq>
      break;
 8007342:	e01a      	b.n	800737a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fa2d 	bl	80077ac <USBD_StdItfReq>
      break;
 8007352:	e012      	b.n	800737a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fa6d 	bl	800783c <USBD_StdEPReq>
      break;
 8007362:	e00a      	b.n	800737a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800736a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800736e:	b2db      	uxtb	r3, r3
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 fb36 	bl	80089e4 <USBD_LL_StallEP>
      break;
 8007378:	bf00      	nop
  }

  return USBD_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	460b      	mov	r3, r1
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007392:	7afb      	ldrb	r3, [r7, #11]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d14b      	bne.n	8007430 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800739e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d134      	bne.n	8007414 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d919      	bls.n	80073ea <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	1ad2      	subs	r2, r2, r3
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d203      	bcs.n	80073d8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	e002      	b.n	80073de <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073dc:	b29b      	uxth	r3, r3
 80073de:	461a      	mov	r2, r3
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 ff57 	bl	8008296 <USBD_CtlContinueRx>
 80073e8:	e038      	b.n	800745c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d105      	bne.n	800740c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 ff54 	bl	80082ba <USBD_CtlSendStatus>
 8007412:	e023      	b.n	800745c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800741a:	2b05      	cmp	r3, #5
 800741c:	d11e      	bne.n	800745c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007426:	2100      	movs	r1, #0
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f001 fadb 	bl	80089e4 <USBD_LL_StallEP>
 800742e:	e015      	b.n	800745c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00d      	beq.n	8007458 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007442:	2b03      	cmp	r3, #3
 8007444:	d108      	bne.n	8007458 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	7afa      	ldrb	r2, [r7, #11]
 8007450:	4611      	mov	r1, r2
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	4798      	blx	r3
 8007456:	e001      	b.n	800745c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007458:	2302      	movs	r3, #2
 800745a:	e000      	b.n	800745e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b086      	sub	sp, #24
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	460b      	mov	r3, r1
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007474:	7afb      	ldrb	r3, [r7, #11]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d17f      	bne.n	800757a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3314      	adds	r3, #20
 800747e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007486:	2b02      	cmp	r3, #2
 8007488:	d15c      	bne.n	8007544 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	429a      	cmp	r2, r3
 8007494:	d915      	bls.n	80074c2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 fec1 	bl	8008236 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074b4:	2300      	movs	r3, #0
 80074b6:	2200      	movs	r2, #0
 80074b8:	2100      	movs	r1, #0
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f001 fb3e 	bl	8008b3c <USBD_LL_PrepareReceive>
 80074c0:	e04e      	b.n	8007560 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	6912      	ldr	r2, [r2, #16]
 80074ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80074ce:	fb01 f202 	mul.w	r2, r1, r2
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d11c      	bne.n	8007512 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d316      	bcc.n	8007512 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d20f      	bcs.n	8007512 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074f2:	2200      	movs	r2, #0
 80074f4:	2100      	movs	r1, #0
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 fe9d 	bl	8008236 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007504:	2300      	movs	r3, #0
 8007506:	2200      	movs	r2, #0
 8007508:	2100      	movs	r1, #0
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f001 fb16 	bl	8008b3c <USBD_LL_PrepareReceive>
 8007510:	e026      	b.n	8007560 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007524:	2b03      	cmp	r3, #3
 8007526:	d105      	bne.n	8007534 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007534:	2180      	movs	r1, #128	; 0x80
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f001 fa54 	bl	80089e4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 fecf 	bl	80082e0 <USBD_CtlReceiveStatus>
 8007542:	e00d      	b.n	8007560 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800754a:	2b04      	cmp	r3, #4
 800754c:	d004      	beq.n	8007558 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007554:	2b00      	cmp	r3, #0
 8007556:	d103      	bne.n	8007560 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007558:	2180      	movs	r1, #128	; 0x80
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f001 fa42 	bl	80089e4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007566:	2b01      	cmp	r3, #1
 8007568:	d11d      	bne.n	80075a6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7ff fe81 	bl	8007272 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007578:	e015      	b.n	80075a6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00d      	beq.n	80075a2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800758c:	2b03      	cmp	r3, #3
 800758e:	d108      	bne.n	80075a2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	7afa      	ldrb	r2, [r7, #11]
 800759a:	4611      	mov	r1, r2
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	4798      	blx	r3
 80075a0:	e001      	b.n	80075a6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075a2:	2302      	movs	r3, #2
 80075a4:	e000      	b.n	80075a8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075b8:	2340      	movs	r3, #64	; 0x40
 80075ba:	2200      	movs	r2, #0
 80075bc:	2100      	movs	r1, #0
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 f9cb 	bl	800895a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2240      	movs	r2, #64	; 0x40
 80075d0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075d4:	2340      	movs	r3, #64	; 0x40
 80075d6:	2200      	movs	r2, #0
 80075d8:	2180      	movs	r1, #128	; 0x80
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f001 f9bd 	bl	800895a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2240      	movs	r2, #64	; 0x40
 80075ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007610:	2b00      	cmp	r3, #0
 8007612:	d009      	beq.n	8007628 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6852      	ldr	r2, [r2, #4]
 8007620:	b2d2      	uxtb	r2, r2
 8007622:	4611      	mov	r1, r2
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	4798      	blx	r3
  }

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	78fa      	ldrb	r2, [r7, #3]
 8007642:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	bc80      	pop	{r7}
 800764e:	4770      	bx	lr

08007650 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2204      	movs	r2, #4
 8007668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	bc80      	pop	{r7}
 8007676:	4770      	bx	lr

08007678 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007686:	2b04      	cmp	r3, #4
 8007688:	d105      	bne.n	8007696 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	bc80      	pop	{r7}
 80076a0:	4770      	bx	lr

080076a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d10b      	bne.n	80076cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ee:	2b40      	cmp	r3, #64	; 0x40
 80076f0:	d005      	beq.n	80076fe <USBD_StdDevReq+0x26>
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	d84f      	bhi.n	8007796 <USBD_StdDevReq+0xbe>
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d009      	beq.n	800770e <USBD_StdDevReq+0x36>
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	d14b      	bne.n	8007796 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	4798      	blx	r3
      break;
 800770c:	e048      	b.n	80077a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	785b      	ldrb	r3, [r3, #1]
 8007712:	2b09      	cmp	r3, #9
 8007714:	d839      	bhi.n	800778a <USBD_StdDevReq+0xb2>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <USBD_StdDevReq+0x44>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	0800776d 	.word	0x0800776d
 8007720:	08007781 	.word	0x08007781
 8007724:	0800778b 	.word	0x0800778b
 8007728:	08007777 	.word	0x08007777
 800772c:	0800778b 	.word	0x0800778b
 8007730:	0800774f 	.word	0x0800774f
 8007734:	08007745 	.word	0x08007745
 8007738:	0800778b 	.word	0x0800778b
 800773c:	08007763 	.word	0x08007763
 8007740:	08007759 	.word	0x08007759
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f9dc 	bl	8007b04 <USBD_GetDescriptor>
          break;
 800774c:	e022      	b.n	8007794 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb3f 	bl	8007dd4 <USBD_SetAddress>
          break;
 8007756:	e01d      	b.n	8007794 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fb7e 	bl	8007e5c <USBD_SetConfig>
          break;
 8007760:	e018      	b.n	8007794 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fc07 	bl	8007f78 <USBD_GetConfig>
          break;
 800776a:	e013      	b.n	8007794 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fc37 	bl	8007fe2 <USBD_GetStatus>
          break;
 8007774:	e00e      	b.n	8007794 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fc65 	bl	8008048 <USBD_SetFeature>
          break;
 800777e:	e009      	b.n	8007794 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fc74 	bl	8008070 <USBD_ClrFeature>
          break;
 8007788:	e004      	b.n	8007794 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fccc 	bl	800812a <USBD_CtlError>
          break;
 8007792:	bf00      	nop
      }
      break;
 8007794:	e004      	b.n	80077a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fcc6 	bl	800812a <USBD_CtlError>
      break;
 800779e:	bf00      	nop
  }

  return ret;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop

080077ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077c2:	2b40      	cmp	r3, #64	; 0x40
 80077c4:	d005      	beq.n	80077d2 <USBD_StdItfReq+0x26>
 80077c6:	2b40      	cmp	r3, #64	; 0x40
 80077c8:	d82e      	bhi.n	8007828 <USBD_StdItfReq+0x7c>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <USBD_StdItfReq+0x26>
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	d12a      	bne.n	8007828 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d8:	3b01      	subs	r3, #1
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d81d      	bhi.n	800781a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	889b      	ldrh	r3, [r3, #4]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d813      	bhi.n	8007810 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	4798      	blx	r3
 80077f6:	4603      	mov	r3, r0
 80077f8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	88db      	ldrh	r3, [r3, #6]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d110      	bne.n	8007824 <USBD_StdItfReq+0x78>
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10d      	bne.n	8007824 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fd56 	bl	80082ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800780e:	e009      	b.n	8007824 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fc89 	bl	800812a <USBD_CtlError>
          break;
 8007818:	e004      	b.n	8007824 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fc84 	bl	800812a <USBD_CtlError>
          break;
 8007822:	e000      	b.n	8007826 <USBD_StdItfReq+0x7a>
          break;
 8007824:	bf00      	nop
      }
      break;
 8007826:	e004      	b.n	8007832 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fc7d 	bl	800812a <USBD_CtlError>
      break;
 8007830:	bf00      	nop
  }

  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	889b      	ldrh	r3, [r3, #4]
 800784e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007858:	2b40      	cmp	r3, #64	; 0x40
 800785a:	d007      	beq.n	800786c <USBD_StdEPReq+0x30>
 800785c:	2b40      	cmp	r3, #64	; 0x40
 800785e:	f200 8146 	bhi.w	8007aee <USBD_StdEPReq+0x2b2>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <USBD_StdEPReq+0x40>
 8007866:	2b20      	cmp	r3, #32
 8007868:	f040 8141 	bne.w	8007aee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
      break;
 800787a:	e13d      	b.n	8007af8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007884:	2b20      	cmp	r3, #32
 8007886:	d10a      	bne.n	800789e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	4798      	blx	r3
 8007896:	4603      	mov	r3, r0
 8007898:	73fb      	strb	r3, [r7, #15]

        return ret;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	e12d      	b.n	8007afa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	785b      	ldrb	r3, [r3, #1]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d007      	beq.n	80078b6 <USBD_StdEPReq+0x7a>
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	f300 811b 	bgt.w	8007ae2 <USBD_StdEPReq+0x2a6>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d072      	beq.n	8007996 <USBD_StdEPReq+0x15a>
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d03a      	beq.n	800792a <USBD_StdEPReq+0xee>
 80078b4:	e115      	b.n	8007ae2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d002      	beq.n	80078c6 <USBD_StdEPReq+0x8a>
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d015      	beq.n	80078f0 <USBD_StdEPReq+0xb4>
 80078c4:	e02b      	b.n	800791e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00c      	beq.n	80078e6 <USBD_StdEPReq+0xaa>
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2b80      	cmp	r3, #128	; 0x80
 80078d0:	d009      	beq.n	80078e6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 f884 	bl	80089e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078dc:	2180      	movs	r1, #128	; 0x80
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 f880 	bl	80089e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078e4:	e020      	b.n	8007928 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fc1e 	bl	800812a <USBD_CtlError>
              break;
 80078ee:	e01b      	b.n	8007928 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	885b      	ldrh	r3, [r3, #2]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10e      	bne.n	8007916 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00b      	beq.n	8007916 <USBD_StdEPReq+0xda>
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b80      	cmp	r3, #128	; 0x80
 8007902:	d008      	beq.n	8007916 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	88db      	ldrh	r3, [r3, #6]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 f867 	bl	80089e4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fccf 	bl	80082ba <USBD_CtlSendStatus>

              break;
 800791c:	e004      	b.n	8007928 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fc02 	bl	800812a <USBD_CtlError>
              break;
 8007926:	bf00      	nop
          }
          break;
 8007928:	e0e0      	b.n	8007aec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007930:	2b02      	cmp	r3, #2
 8007932:	d002      	beq.n	800793a <USBD_StdEPReq+0xfe>
 8007934:	2b03      	cmp	r3, #3
 8007936:	d015      	beq.n	8007964 <USBD_StdEPReq+0x128>
 8007938:	e026      	b.n	8007988 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00c      	beq.n	800795a <USBD_StdEPReq+0x11e>
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d009      	beq.n	800795a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 f84a 	bl	80089e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007950:	2180      	movs	r1, #128	; 0x80
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 f846 	bl	80089e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007958:	e01c      	b.n	8007994 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fbe4 	bl	800812a <USBD_CtlError>
              break;
 8007962:	e017      	b.n	8007994 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	885b      	ldrh	r3, [r3, #2]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d112      	bne.n	8007992 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007972:	2b00      	cmp	r3, #0
 8007974:	d004      	beq.n	8007980 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 f851 	bl	8008a22 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fc9a 	bl	80082ba <USBD_CtlSendStatus>
              }
              break;
 8007986:	e004      	b.n	8007992 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fbcd 	bl	800812a <USBD_CtlError>
              break;
 8007990:	e000      	b.n	8007994 <USBD_StdEPReq+0x158>
              break;
 8007992:	bf00      	nop
          }
          break;
 8007994:	e0aa      	b.n	8007aec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800799c:	2b02      	cmp	r3, #2
 800799e:	d002      	beq.n	80079a6 <USBD_StdEPReq+0x16a>
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d032      	beq.n	8007a0a <USBD_StdEPReq+0x1ce>
 80079a4:	e097      	b.n	8007ad6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <USBD_StdEPReq+0x180>
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b80      	cmp	r3, #128	; 0x80
 80079b0:	d004      	beq.n	80079bc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fbb8 	bl	800812a <USBD_CtlError>
                break;
 80079ba:	e091      	b.n	8007ae0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	da0b      	bge.n	80079dc <USBD_StdEPReq+0x1a0>
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	3310      	adds	r3, #16
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	3304      	adds	r3, #4
 80079da:	e00b      	b.n	80079f4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	4413      	add	r3, r2
 80079f2:	3304      	adds	r3, #4
 80079f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2202      	movs	r2, #2
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fbfb 	bl	80081fe <USBD_CtlSendData>
              break;
 8007a08:	e06a      	b.n	8007ae0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	da11      	bge.n	8007a36 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	f003 020f 	and.w	r2, r3, #15
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	440b      	add	r3, r1
 8007a24:	3318      	adds	r3, #24
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d117      	bne.n	8007a5c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fb7b 	bl	800812a <USBD_CtlError>
                  break;
 8007a34:	e054      	b.n	8007ae0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	f003 020f 	and.w	r2, r3, #15
 8007a3c:	6879      	ldr	r1, [r7, #4]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	440b      	add	r3, r1
 8007a48:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d104      	bne.n	8007a5c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fb68 	bl	800812a <USBD_CtlError>
                  break;
 8007a5a:	e041      	b.n	8007ae0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	da0b      	bge.n	8007a7c <USBD_StdEPReq+0x240>
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	3310      	adds	r3, #16
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	4413      	add	r3, r2
 8007a78:	3304      	adds	r3, #4
 8007a7a:	e00b      	b.n	8007a94 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a82:	4613      	mov	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	3304      	adds	r3, #4
 8007a94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <USBD_StdEPReq+0x266>
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b80      	cmp	r3, #128	; 0x80
 8007aa0:	d103      	bne.n	8007aaa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	e00e      	b.n	8007ac8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 ffd6 	bl	8008a60 <USBD_LL_IsStallEP>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2201      	movs	r2, #1
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	e002      	b.n	8007ac8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2202      	movs	r2, #2
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fb95 	bl	80081fe <USBD_CtlSendData>
              break;
 8007ad4:	e004      	b.n	8007ae0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fb26 	bl	800812a <USBD_CtlError>
              break;
 8007ade:	bf00      	nop
          }
          break;
 8007ae0:	e004      	b.n	8007aec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fb20 	bl	800812a <USBD_CtlError>
          break;
 8007aea:	bf00      	nop
      }
      break;
 8007aec:	e004      	b.n	8007af8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fb1a 	bl	800812a <USBD_CtlError>
      break;
 8007af6:	bf00      	nop
  }

  return ret;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	885b      	ldrh	r3, [r3, #2]
 8007b1e:	0a1b      	lsrs	r3, r3, #8
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	2b06      	cmp	r3, #6
 8007b26:	f200 8128 	bhi.w	8007d7a <USBD_GetDescriptor+0x276>
 8007b2a:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <USBD_GetDescriptor+0x2c>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b4d 	.word	0x08007b4d
 8007b34:	08007b65 	.word	0x08007b65
 8007b38:	08007ba5 	.word	0x08007ba5
 8007b3c:	08007d7b 	.word	0x08007d7b
 8007b40:	08007d7b 	.word	0x08007d7b
 8007b44:	08007d1b 	.word	0x08007d1b
 8007b48:	08007d47 	.word	0x08007d47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	7c12      	ldrb	r2, [r2, #16]
 8007b58:	f107 0108 	add.w	r1, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
      break;
 8007b62:	e112      	b.n	8007d8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	7c1b      	ldrb	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10d      	bne.n	8007b88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b74:	f107 0208 	add.w	r2, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3301      	adds	r3, #1
 8007b82:	2202      	movs	r2, #2
 8007b84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b86:	e100      	b.n	8007d8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	f107 0208 	add.w	r2, r7, #8
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	701a      	strb	r2, [r3, #0]
      break;
 8007ba2:	e0f2      	b.n	8007d8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	885b      	ldrh	r3, [r3, #2]
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b05      	cmp	r3, #5
 8007bac:	f200 80ac 	bhi.w	8007d08 <USBD_GetDescriptor+0x204>
 8007bb0:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <USBD_GetDescriptor+0xb4>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007bd1 	.word	0x08007bd1
 8007bbc:	08007c05 	.word	0x08007c05
 8007bc0:	08007c39 	.word	0x08007c39
 8007bc4:	08007c6d 	.word	0x08007c6d
 8007bc8:	08007ca1 	.word	0x08007ca1
 8007bcc:	08007cd5 	.word	0x08007cd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00b      	beq.n	8007bf4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	7c12      	ldrb	r2, [r2, #16]
 8007be8:	f107 0108 	add.w	r1, r7, #8
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bf2:	e091      	b.n	8007d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fa97 	bl	800812a <USBD_CtlError>
            err++;
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	72fb      	strb	r3, [r7, #11]
          break;
 8007c02:	e089      	b.n	8007d18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00b      	beq.n	8007c28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	7c12      	ldrb	r2, [r2, #16]
 8007c1c:	f107 0108 	add.w	r1, r7, #8
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c26:	e077      	b.n	8007d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa7d 	bl	800812a <USBD_CtlError>
            err++;
 8007c30:	7afb      	ldrb	r3, [r7, #11]
 8007c32:	3301      	adds	r3, #1
 8007c34:	72fb      	strb	r3, [r7, #11]
          break;
 8007c36:	e06f      	b.n	8007d18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	7c12      	ldrb	r2, [r2, #16]
 8007c50:	f107 0108 	add.w	r1, r7, #8
 8007c54:	4610      	mov	r0, r2
 8007c56:	4798      	blx	r3
 8007c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c5a:	e05d      	b.n	8007d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fa63 	bl	800812a <USBD_CtlError>
            err++;
 8007c64:	7afb      	ldrb	r3, [r7, #11]
 8007c66:	3301      	adds	r3, #1
 8007c68:	72fb      	strb	r3, [r7, #11]
          break;
 8007c6a:	e055      	b.n	8007d18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	7c12      	ldrb	r2, [r2, #16]
 8007c84:	f107 0108 	add.w	r1, r7, #8
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4798      	blx	r3
 8007c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c8e:	e043      	b.n	8007d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa49 	bl	800812a <USBD_CtlError>
            err++;
 8007c98:	7afb      	ldrb	r3, [r7, #11]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c9e:	e03b      	b.n	8007d18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00b      	beq.n	8007cc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7c12      	ldrb	r2, [r2, #16]
 8007cb8:	f107 0108 	add.w	r1, r7, #8
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cc2:	e029      	b.n	8007d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fa2f 	bl	800812a <USBD_CtlError>
            err++;
 8007ccc:	7afb      	ldrb	r3, [r7, #11]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cd2:	e021      	b.n	8007d18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	7c12      	ldrb	r2, [r2, #16]
 8007cec:	f107 0108 	add.w	r1, r7, #8
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
 8007cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cf6:	e00f      	b.n	8007d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fa15 	bl	800812a <USBD_CtlError>
            err++;
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	3301      	adds	r3, #1
 8007d04:	72fb      	strb	r3, [r7, #11]
          break;
 8007d06:	e007      	b.n	8007d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa0d 	bl	800812a <USBD_CtlError>
          err++;
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	3301      	adds	r3, #1
 8007d14:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d16:	e038      	b.n	8007d8a <USBD_GetDescriptor+0x286>
 8007d18:	e037      	b.n	8007d8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7c1b      	ldrb	r3, [r3, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d109      	bne.n	8007d36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2a:	f107 0208 	add.w	r2, r7, #8
 8007d2e:	4610      	mov	r0, r2
 8007d30:	4798      	blx	r3
 8007d32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d34:	e029      	b.n	8007d8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f9f6 	bl	800812a <USBD_CtlError>
        err++;
 8007d3e:	7afb      	ldrb	r3, [r7, #11]
 8007d40:	3301      	adds	r3, #1
 8007d42:	72fb      	strb	r3, [r7, #11]
      break;
 8007d44:	e021      	b.n	8007d8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	7c1b      	ldrb	r3, [r3, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10d      	bne.n	8007d6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d56:	f107 0208 	add.w	r2, r7, #8
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	4798      	blx	r3
 8007d5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	3301      	adds	r3, #1
 8007d64:	2207      	movs	r2, #7
 8007d66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d68:	e00f      	b.n	8007d8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f9dc 	bl	800812a <USBD_CtlError>
        err++;
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	3301      	adds	r3, #1
 8007d76:	72fb      	strb	r3, [r7, #11]
      break;
 8007d78:	e007      	b.n	8007d8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f9d4 	bl	800812a <USBD_CtlError>
      err++;
 8007d82:	7afb      	ldrb	r3, [r7, #11]
 8007d84:	3301      	adds	r3, #1
 8007d86:	72fb      	strb	r3, [r7, #11]
      break;
 8007d88:	bf00      	nop
  }

  if (err != 0U)
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d11c      	bne.n	8007dca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007d90:	893b      	ldrh	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d011      	beq.n	8007dba <USBD_GetDescriptor+0x2b6>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	88db      	ldrh	r3, [r3, #6]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00d      	beq.n	8007dba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	88da      	ldrh	r2, [r3, #6]
 8007da2:	893b      	ldrh	r3, [r7, #8]
 8007da4:	4293      	cmp	r3, r2
 8007da6:	bf28      	it	cs
 8007da8:	4613      	movcs	r3, r2
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dae:	893b      	ldrh	r3, [r7, #8]
 8007db0:	461a      	mov	r2, r3
 8007db2:	68f9      	ldr	r1, [r7, #12]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fa22 	bl	80081fe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	88db      	ldrh	r3, [r3, #6]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d104      	bne.n	8007dcc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa79 	bl	80082ba <USBD_CtlSendStatus>
 8007dc8:	e000      	b.n	8007dcc <USBD_GetDescriptor+0x2c8>
    return;
 8007dca:	bf00      	nop
    }
  }
}
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop

08007dd4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	889b      	ldrh	r3, [r3, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d130      	bne.n	8007e48 <USBD_SetAddress+0x74>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	88db      	ldrh	r3, [r3, #6]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d12c      	bne.n	8007e48 <USBD_SetAddress+0x74>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	885b      	ldrh	r3, [r3, #2]
 8007df2:	2b7f      	cmp	r3, #127	; 0x7f
 8007df4:	d828      	bhi.n	8007e48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	885b      	ldrh	r3, [r3, #2]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d104      	bne.n	8007e16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f98b 	bl	800812a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e14:	e01d      	b.n	8007e52 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	7bfa      	ldrb	r2, [r7, #15]
 8007e1a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fe48 	bl	8008ab8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fa46 	bl	80082ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d004      	beq.n	8007e3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3c:	e009      	b.n	8007e52 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e46:	e004      	b.n	8007e52 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f96d 	bl	800812a <USBD_CtlError>
  }
}
 8007e50:	bf00      	nop
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	885b      	ldrh	r3, [r3, #2]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	4b41      	ldr	r3, [pc, #260]	; (8007f74 <USBD_SetConfig+0x118>)
 8007e6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e70:	4b40      	ldr	r3, [pc, #256]	; (8007f74 <USBD_SetConfig+0x118>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d904      	bls.n	8007e82 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f955 	bl	800812a <USBD_CtlError>
 8007e80:	e075      	b.n	8007f6e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d002      	beq.n	8007e92 <USBD_SetConfig+0x36>
 8007e8c:	2b03      	cmp	r3, #3
 8007e8e:	d023      	beq.n	8007ed8 <USBD_SetConfig+0x7c>
 8007e90:	e062      	b.n	8007f58 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e92:	4b38      	ldr	r3, [pc, #224]	; (8007f74 <USBD_SetConfig+0x118>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01a      	beq.n	8007ed0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007e9a:	4b36      	ldr	r3, [pc, #216]	; (8007f74 <USBD_SetConfig+0x118>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007eac:	4b31      	ldr	r3, [pc, #196]	; (8007f74 <USBD_SetConfig+0x118>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7ff f9e7 	bl	8007286 <USBD_SetClassConfig>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d104      	bne.n	8007ec8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f932 	bl	800812a <USBD_CtlError>
            return;
 8007ec6:	e052      	b.n	8007f6e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f9f6 	bl	80082ba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ece:	e04e      	b.n	8007f6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f9f2 	bl	80082ba <USBD_CtlSendStatus>
        break;
 8007ed6:	e04a      	b.n	8007f6e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ed8:	4b26      	ldr	r3, [pc, #152]	; (8007f74 <USBD_SetConfig+0x118>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d112      	bne.n	8007f06 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007ee8:	4b22      	ldr	r3, [pc, #136]	; (8007f74 <USBD_SetConfig+0x118>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	461a      	mov	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ef2:	4b20      	ldr	r3, [pc, #128]	; (8007f74 <USBD_SetConfig+0x118>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff f9e3 	bl	80072c4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f9db 	bl	80082ba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f04:	e033      	b.n	8007f6e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f06:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <USBD_SetConfig+0x118>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d01d      	beq.n	8007f50 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff f9d1 	bl	80072c4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f22:	4b14      	ldr	r3, [pc, #80]	; (8007f74 <USBD_SetConfig+0x118>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f2c:	4b11      	ldr	r3, [pc, #68]	; (8007f74 <USBD_SetConfig+0x118>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff f9a7 	bl	8007286 <USBD_SetClassConfig>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d104      	bne.n	8007f48 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f8f2 	bl	800812a <USBD_CtlError>
            return;
 8007f46:	e012      	b.n	8007f6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f9b6 	bl	80082ba <USBD_CtlSendStatus>
        break;
 8007f4e:	e00e      	b.n	8007f6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f9b2 	bl	80082ba <USBD_CtlSendStatus>
        break;
 8007f56:	e00a      	b.n	8007f6e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f8e5 	bl	800812a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f60:	4b04      	ldr	r3, [pc, #16]	; (8007f74 <USBD_SetConfig+0x118>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff f9ac 	bl	80072c4 <USBD_ClrClassConfig>
        break;
 8007f6c:	bf00      	nop
    }
  }
}
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	200002c4 	.word	0x200002c4

08007f78 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	88db      	ldrh	r3, [r3, #6]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d004      	beq.n	8007f94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f8cc 	bl	800812a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f92:	e022      	b.n	8007fda <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	dc02      	bgt.n	8007fa4 <USBD_GetConfig+0x2c>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	dc03      	bgt.n	8007faa <USBD_GetConfig+0x32>
 8007fa2:	e015      	b.n	8007fd0 <USBD_GetConfig+0x58>
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d00b      	beq.n	8007fc0 <USBD_GetConfig+0x48>
 8007fa8:	e012      	b.n	8007fd0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f920 	bl	80081fe <USBD_CtlSendData>
        break;
 8007fbe:	e00c      	b.n	8007fda <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f918 	bl	80081fe <USBD_CtlSendData>
        break;
 8007fce:	e004      	b.n	8007fda <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f8a9 	bl	800812a <USBD_CtlError>
        break;
 8007fd8:	bf00      	nop
}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d81e      	bhi.n	8008036 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	88db      	ldrh	r3, [r3, #6]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d004      	beq.n	800800a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f891 	bl	800812a <USBD_CtlError>
        break;
 8008008:	e01a      	b.n	8008040 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f043 0202 	orr.w	r2, r3, #2
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	330c      	adds	r3, #12
 800802a:	2202      	movs	r2, #2
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f8e5 	bl	80081fe <USBD_CtlSendData>
      break;
 8008034:	e004      	b.n	8008040 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f876 	bl	800812a <USBD_CtlError>
      break;
 800803e:	bf00      	nop
  }
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	885b      	ldrh	r3, [r3, #2]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d106      	bne.n	8008068 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f929 	bl	80082ba <USBD_CtlSendStatus>
  }
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008080:	3b01      	subs	r3, #1
 8008082:	2b02      	cmp	r3, #2
 8008084:	d80b      	bhi.n	800809e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	885b      	ldrh	r3, [r3, #2]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d10c      	bne.n	80080a8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f90f 	bl	80082ba <USBD_CtlSendStatus>
      }
      break;
 800809c:	e004      	b.n	80080a8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f842 	bl	800812a <USBD_CtlError>
      break;
 80080a6:	e000      	b.n	80080aa <USBD_ClrFeature+0x3a>
      break;
 80080a8:	bf00      	nop
  }
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781a      	ldrb	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	785a      	ldrb	r2, [r3, #1]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	3302      	adds	r3, #2
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	3303      	adds	r3, #3
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	b29b      	uxth	r3, r3
 80080e0:	4413      	add	r3, r2
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	3304      	adds	r3, #4
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	3305      	adds	r3, #5
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	4413      	add	r3, r2
 80080fe:	b29a      	uxth	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	3306      	adds	r3, #6
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b29a      	uxth	r2, r3
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	3307      	adds	r3, #7
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	b29b      	uxth	r3, r3
 8008118:	4413      	add	r3, r2
 800811a:	b29a      	uxth	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	80da      	strh	r2, [r3, #6]

}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr

0800812a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008134:	2180      	movs	r1, #128	; 0x80
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fc54 	bl	80089e4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800813c:	2100      	movs	r1, #0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fc50 	bl	80089e4 <USBD_LL_StallEP>
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d032      	beq.n	80081c8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f834 	bl	80081d0 <USBD_GetLen>
 8008168:	4603      	mov	r3, r0
 800816a:	3301      	adds	r3, #1
 800816c:	b29b      	uxth	r3, r3
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	b29a      	uxth	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	75fa      	strb	r2, [r7, #23]
 800817c:	461a      	mov	r2, r3
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	4413      	add	r3, r2
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	7812      	ldrb	r2, [r2, #0]
 8008186:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
 800818a:	1c5a      	adds	r2, r3, #1
 800818c:	75fa      	strb	r2, [r7, #23]
 800818e:	461a      	mov	r2, r3
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	4413      	add	r3, r2
 8008194:	2203      	movs	r2, #3
 8008196:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008198:	e012      	b.n	80081c0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	60fa      	str	r2, [r7, #12]
 80081a0:	7dfa      	ldrb	r2, [r7, #23]
 80081a2:	1c51      	adds	r1, r2, #1
 80081a4:	75f9      	strb	r1, [r7, #23]
 80081a6:	4611      	mov	r1, r2
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	440a      	add	r2, r1
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	75fa      	strb	r2, [r7, #23]
 80081b6:	461a      	mov	r2, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4413      	add	r3, r2
 80081bc:	2200      	movs	r2, #0
 80081be:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1e8      	bne.n	800819a <USBD_GetString+0x4e>
    }
  }
}
 80081c8:	bf00      	nop
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80081dc:	e005      	b.n	80081ea <USBD_GetLen+0x1a>
  {
    len++;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	3301      	adds	r3, #1
 80081e2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3301      	adds	r3, #1
 80081e8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1f5      	bne.n	80081de <USBD_GetLen+0xe>
  }

  return len;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bc80      	pop	{r7}
 80081fc:	4770      	bx	lr

080081fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	4613      	mov	r3, r2
 800820a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2202      	movs	r2, #2
 8008210:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008214:	88fa      	ldrh	r2, [r7, #6]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800821a:	88fa      	ldrh	r2, [r7, #6]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008220:	88fb      	ldrh	r3, [r7, #6]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	2100      	movs	r1, #0
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 fc65 	bl	8008af6 <USBD_LL_Transmit>

  return USBD_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	4613      	mov	r3, r2
 8008242:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008244:	88fb      	ldrh	r3, [r7, #6]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	2100      	movs	r1, #0
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f000 fc53 	bl	8008af6 <USBD_LL_Transmit>

  return USBD_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	4613      	mov	r3, r2
 8008266:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2203      	movs	r2, #3
 800826c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008270:	88fa      	ldrh	r2, [r7, #6]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008278:	88fa      	ldrh	r2, [r7, #6]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008280:	88fb      	ldrh	r3, [r7, #6]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	2100      	movs	r1, #0
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f000 fc58 	bl	8008b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	4613      	mov	r3, r2
 80082a2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082a4:	88fb      	ldrh	r3, [r7, #6]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	2100      	movs	r1, #0
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fc46 	bl	8008b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2204      	movs	r2, #4
 80082c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082ca:	2300      	movs	r3, #0
 80082cc:	2200      	movs	r2, #0
 80082ce:	2100      	movs	r1, #0
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fc10 	bl	8008af6 <USBD_LL_Transmit>

  return USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2205      	movs	r2, #5
 80082ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082f0:	2300      	movs	r3, #0
 80082f2:	2200      	movs	r2, #0
 80082f4:	2100      	movs	r1, #0
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fc20 	bl	8008b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800830c:	2200      	movs	r2, #0
 800830e:	4912      	ldr	r1, [pc, #72]	; (8008358 <MX_USB_DEVICE_Init+0x50>)
 8008310:	4812      	ldr	r0, [pc, #72]	; (800835c <MX_USB_DEVICE_Init+0x54>)
 8008312:	f7fe ff5e 	bl	80071d2 <USBD_Init>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800831c:	f7f8 fa2c 	bl	8000778 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008320:	490f      	ldr	r1, [pc, #60]	; (8008360 <MX_USB_DEVICE_Init+0x58>)
 8008322:	480e      	ldr	r0, [pc, #56]	; (800835c <MX_USB_DEVICE_Init+0x54>)
 8008324:	f7fe ff80 	bl	8007228 <USBD_RegisterClass>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800832e:	f7f8 fa23 	bl	8000778 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008332:	490c      	ldr	r1, [pc, #48]	; (8008364 <MX_USB_DEVICE_Init+0x5c>)
 8008334:	4809      	ldr	r0, [pc, #36]	; (800835c <MX_USB_DEVICE_Init+0x54>)
 8008336:	f7fe feb1 	bl	800709c <USBD_CDC_RegisterInterface>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008340:	f7f8 fa1a 	bl	8000778 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008344:	4805      	ldr	r0, [pc, #20]	; (800835c <MX_USB_DEVICE_Init+0x54>)
 8008346:	f7fe ff88 	bl	800725a <USBD_Start>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008350:	f7f8 fa12 	bl	8000778 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008354:	bf00      	nop
 8008356:	bd80      	pop	{r7, pc}
 8008358:	2000012c 	.word	0x2000012c
 800835c:	200002c8 	.word	0x200002c8
 8008360:	20000018 	.word	0x20000018
 8008364:	2000011c 	.word	0x2000011c

08008368 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800836c:	2200      	movs	r2, #0
 800836e:	4905      	ldr	r1, [pc, #20]	; (8008384 <CDC_Init_FS+0x1c>)
 8008370:	4805      	ldr	r0, [pc, #20]	; (8008388 <CDC_Init_FS+0x20>)
 8008372:	f7fe fea9 	bl	80070c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008376:	4905      	ldr	r1, [pc, #20]	; (800838c <CDC_Init_FS+0x24>)
 8008378:	4803      	ldr	r0, [pc, #12]	; (8008388 <CDC_Init_FS+0x20>)
 800837a:	f7fe febe 	bl	80070fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800837e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008380:	4618      	mov	r0, r3
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20000974 	.word	0x20000974
 8008388:	200002c8 	.word	0x200002c8
 800838c:	2000058c 	.word	0x2000058c

08008390 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008390:	b480      	push	{r7}
 8008392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008394:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008396:	4618      	mov	r0, r3
 8008398:	46bd      	mov	sp, r7
 800839a:	bc80      	pop	{r7}
 800839c:	4770      	bx	lr
	...

080083a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	6039      	str	r1, [r7, #0]
 80083aa:	71fb      	strb	r3, [r7, #7]
 80083ac:	4613      	mov	r3, r2
 80083ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083b0:	79fb      	ldrb	r3, [r7, #7]
 80083b2:	2b23      	cmp	r3, #35	; 0x23
 80083b4:	d84a      	bhi.n	800844c <CDC_Control_FS+0xac>
 80083b6:	a201      	add	r2, pc, #4	; (adr r2, 80083bc <CDC_Control_FS+0x1c>)
 80083b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083bc:	0800844d 	.word	0x0800844d
 80083c0:	0800844d 	.word	0x0800844d
 80083c4:	0800844d 	.word	0x0800844d
 80083c8:	0800844d 	.word	0x0800844d
 80083cc:	0800844d 	.word	0x0800844d
 80083d0:	0800844d 	.word	0x0800844d
 80083d4:	0800844d 	.word	0x0800844d
 80083d8:	0800844d 	.word	0x0800844d
 80083dc:	0800844d 	.word	0x0800844d
 80083e0:	0800844d 	.word	0x0800844d
 80083e4:	0800844d 	.word	0x0800844d
 80083e8:	0800844d 	.word	0x0800844d
 80083ec:	0800844d 	.word	0x0800844d
 80083f0:	0800844d 	.word	0x0800844d
 80083f4:	0800844d 	.word	0x0800844d
 80083f8:	0800844d 	.word	0x0800844d
 80083fc:	0800844d 	.word	0x0800844d
 8008400:	0800844d 	.word	0x0800844d
 8008404:	0800844d 	.word	0x0800844d
 8008408:	0800844d 	.word	0x0800844d
 800840c:	0800844d 	.word	0x0800844d
 8008410:	0800844d 	.word	0x0800844d
 8008414:	0800844d 	.word	0x0800844d
 8008418:	0800844d 	.word	0x0800844d
 800841c:	0800844d 	.word	0x0800844d
 8008420:	0800844d 	.word	0x0800844d
 8008424:	0800844d 	.word	0x0800844d
 8008428:	0800844d 	.word	0x0800844d
 800842c:	0800844d 	.word	0x0800844d
 8008430:	0800844d 	.word	0x0800844d
 8008434:	0800844d 	.word	0x0800844d
 8008438:	0800844d 	.word	0x0800844d
 800843c:	0800844d 	.word	0x0800844d
 8008440:	0800844d 	.word	0x0800844d
 8008444:	0800844d 	.word	0x0800844d
 8008448:	0800844d 	.word	0x0800844d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800844c:	bf00      	nop
  }

  return (USBD_OK);
 800844e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	bc80      	pop	{r7}
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop

0800845c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008466:	6879      	ldr	r1, [r7, #4]
 8008468:	4805      	ldr	r0, [pc, #20]	; (8008480 <CDC_Receive_FS+0x24>)
 800846a:	f7fe fe46 	bl	80070fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800846e:	4804      	ldr	r0, [pc, #16]	; (8008480 <CDC_Receive_FS+0x24>)
 8008470:	f7fe fe85 	bl	800717e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008474:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	200002c8 	.word	0x200002c8

08008484 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008494:	4b0d      	ldr	r3, [pc, #52]	; (80084cc <CDC_Transmit_FS+0x48>)
 8008496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e00b      	b.n	80084c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80084aa:	887b      	ldrh	r3, [r7, #2]
 80084ac:	461a      	mov	r2, r3
 80084ae:	6879      	ldr	r1, [r7, #4]
 80084b0:	4806      	ldr	r0, [pc, #24]	; (80084cc <CDC_Transmit_FS+0x48>)
 80084b2:	f7fe fe09 	bl	80070c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80084b6:	4805      	ldr	r0, [pc, #20]	; (80084cc <CDC_Transmit_FS+0x48>)
 80084b8:	f7fe fe32 	bl	8007120 <USBD_CDC_TransmitPacket>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	200002c8 	.word	0x200002c8

080084d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	6039      	str	r1, [r7, #0]
 80084da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2212      	movs	r2, #18
 80084e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084e2:	4b03      	ldr	r3, [pc, #12]	; (80084f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bc80      	pop	{r7}
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	20000148 	.word	0x20000148

080084f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	6039      	str	r1, [r7, #0]
 80084fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2204      	movs	r2, #4
 8008504:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008506:	4b03      	ldr	r3, [pc, #12]	; (8008514 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	bc80      	pop	{r7}
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	2000015c 	.word	0x2000015c

08008518 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	4603      	mov	r3, r0
 8008520:	6039      	str	r1, [r7, #0]
 8008522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d105      	bne.n	8008536 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	4907      	ldr	r1, [pc, #28]	; (800854c <USBD_FS_ProductStrDescriptor+0x34>)
 800852e:	4808      	ldr	r0, [pc, #32]	; (8008550 <USBD_FS_ProductStrDescriptor+0x38>)
 8008530:	f7ff fe0c 	bl	800814c <USBD_GetString>
 8008534:	e004      	b.n	8008540 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	4904      	ldr	r1, [pc, #16]	; (800854c <USBD_FS_ProductStrDescriptor+0x34>)
 800853a:	4805      	ldr	r0, [pc, #20]	; (8008550 <USBD_FS_ProductStrDescriptor+0x38>)
 800853c:	f7ff fe06 	bl	800814c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008540:	4b02      	ldr	r3, [pc, #8]	; (800854c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20000d5c 	.word	0x20000d5c
 8008550:	0800a030 	.word	0x0800a030

08008554 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	6039      	str	r1, [r7, #0]
 800855e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	4904      	ldr	r1, [pc, #16]	; (8008574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008564:	4804      	ldr	r0, [pc, #16]	; (8008578 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008566:	f7ff fdf1 	bl	800814c <USBD_GetString>
  return USBD_StrDesc;
 800856a:	4b02      	ldr	r3, [pc, #8]	; (8008574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20000d5c 	.word	0x20000d5c
 8008578:	0800a048 	.word	0x0800a048

0800857c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	6039      	str	r1, [r7, #0]
 8008586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	221a      	movs	r2, #26
 800858c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800858e:	f000 f843 	bl	8008618 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008592:	4b02      	ldr	r3, [pc, #8]	; (800859c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008594:	4618      	mov	r0, r3
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	20000160 	.word	0x20000160

080085a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	6039      	str	r1, [r7, #0]
 80085aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085ac:	79fb      	ldrb	r3, [r7, #7]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d105      	bne.n	80085be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	4907      	ldr	r1, [pc, #28]	; (80085d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085b6:	4808      	ldr	r0, [pc, #32]	; (80085d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085b8:	f7ff fdc8 	bl	800814c <USBD_GetString>
 80085bc:	e004      	b.n	80085c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	4904      	ldr	r1, [pc, #16]	; (80085d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085c2:	4805      	ldr	r0, [pc, #20]	; (80085d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085c4:	f7ff fdc2 	bl	800814c <USBD_GetString>
  }
  return USBD_StrDesc;
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	20000d5c 	.word	0x20000d5c
 80085d8:	0800a05c 	.word	0x0800a05c

080085dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	6039      	str	r1, [r7, #0]
 80085e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085e8:	79fb      	ldrb	r3, [r7, #7]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d105      	bne.n	80085fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	4907      	ldr	r1, [pc, #28]	; (8008610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085f2:	4808      	ldr	r0, [pc, #32]	; (8008614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085f4:	f7ff fdaa 	bl	800814c <USBD_GetString>
 80085f8:	e004      	b.n	8008604 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	4904      	ldr	r1, [pc, #16]	; (8008610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085fe:	4805      	ldr	r0, [pc, #20]	; (8008614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008600:	f7ff fda4 	bl	800814c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008604:	4b02      	ldr	r3, [pc, #8]	; (8008610 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20000d5c 	.word	0x20000d5c
 8008614:	0800a068 	.word	0x0800a068

08008618 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800861e:	4b0f      	ldr	r3, [pc, #60]	; (800865c <Get_SerialNum+0x44>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008624:	4b0e      	ldr	r3, [pc, #56]	; (8008660 <Get_SerialNum+0x48>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800862a:	4b0e      	ldr	r3, [pc, #56]	; (8008664 <Get_SerialNum+0x4c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4413      	add	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d009      	beq.n	8008652 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800863e:	2208      	movs	r2, #8
 8008640:	4909      	ldr	r1, [pc, #36]	; (8008668 <Get_SerialNum+0x50>)
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 f814 	bl	8008670 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008648:	2204      	movs	r2, #4
 800864a:	4908      	ldr	r1, [pc, #32]	; (800866c <Get_SerialNum+0x54>)
 800864c:	68b8      	ldr	r0, [r7, #8]
 800864e:	f000 f80f 	bl	8008670 <IntToUnicode>
  }
}
 8008652:	bf00      	nop
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	1ffff7e8 	.word	0x1ffff7e8
 8008660:	1ffff7ec 	.word	0x1ffff7ec
 8008664:	1ffff7f0 	.word	0x1ffff7f0
 8008668:	20000162 	.word	0x20000162
 800866c:	20000172 	.word	0x20000172

08008670 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	4613      	mov	r3, r2
 800867c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008682:	2300      	movs	r3, #0
 8008684:	75fb      	strb	r3, [r7, #23]
 8008686:	e027      	b.n	80086d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	0f1b      	lsrs	r3, r3, #28
 800868c:	2b09      	cmp	r3, #9
 800868e:	d80b      	bhi.n	80086a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	0f1b      	lsrs	r3, r3, #28
 8008694:	b2da      	uxtb	r2, r3
 8008696:	7dfb      	ldrb	r3, [r7, #23]
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	4619      	mov	r1, r3
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	440b      	add	r3, r1
 80086a0:	3230      	adds	r2, #48	; 0x30
 80086a2:	b2d2      	uxtb	r2, r2
 80086a4:	701a      	strb	r2, [r3, #0]
 80086a6:	e00a      	b.n	80086be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	0f1b      	lsrs	r3, r3, #28
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	4619      	mov	r1, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	440b      	add	r3, r1
 80086b8:	3237      	adds	r2, #55	; 0x37
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	011b      	lsls	r3, r3, #4
 80086c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	3301      	adds	r3, #1
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	4413      	add	r3, r2
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	3301      	adds	r3, #1
 80086d6:	75fb      	strb	r3, [r7, #23]
 80086d8:	7dfa      	ldrb	r2, [r7, #23]
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d3d3      	bcc.n	8008688 <IntToUnicode+0x18>
  }
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a0d      	ldr	r2, [pc, #52]	; (8008730 <HAL_PCD_MspInit+0x44>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d113      	bne.n	8008726 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80086fe:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <HAL_PCD_MspInit+0x48>)
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	4a0c      	ldr	r2, [pc, #48]	; (8008734 <HAL_PCD_MspInit+0x48>)
 8008704:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008708:	61d3      	str	r3, [r2, #28]
 800870a:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <HAL_PCD_MspInit+0x48>)
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008716:	2200      	movs	r2, #0
 8008718:	2100      	movs	r1, #0
 800871a:	2014      	movs	r0, #20
 800871c:	f7f8 fb81 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008720:	2014      	movs	r0, #20
 8008722:	f7f8 fb9a 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008726:	bf00      	nop
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	40005c00 	.word	0x40005c00
 8008734:	40021000 	.word	0x40021000

08008738 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f7fe fdcb 	bl	80072ea <USBD_LL_SetupStage>
}
 8008754:	bf00      	nop
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800876e:	78fa      	ldrb	r2, [r7, #3]
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	00db      	lsls	r3, r3, #3
 800877a:	440b      	add	r3, r1
 800877c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	4619      	mov	r1, r3
 8008786:	f7fe fdfd 	bl	8007384 <USBD_LL_DataOutStage>
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80087a4:	78fa      	ldrb	r2, [r7, #3]
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	440b      	add	r3, r1
 80087b2:	333c      	adds	r3, #60	; 0x3c
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	78fb      	ldrb	r3, [r7, #3]
 80087b8:	4619      	mov	r1, r3
 80087ba:	f7fe fe54 	bl	8007466 <USBD_LL_DataInStage>
}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fe ff64 	bl	80076a2 <USBD_LL_SOF>
}
 80087da:	bf00      	nop
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087ea:	2301      	movs	r3, #1
 80087ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d001      	beq.n	80087fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80087f6:	f7f7 ffbf 	bl	8000778 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008800:	7bfa      	ldrb	r2, [r7, #15]
 8008802:	4611      	mov	r1, r2
 8008804:	4618      	mov	r0, r3
 8008806:	f7fe ff14 	bl	8007632 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008810:	4618      	mov	r0, r3
 8008812:	f7fe fecd 	bl	80075b0 <USBD_LL_Reset>
}
 8008816:	bf00      	nop
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
	...

08008820 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe ff0e 	bl	8007650 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800883c:	4b04      	ldr	r3, [pc, #16]	; (8008850 <HAL_PCD_SuspendCallback+0x30>)
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	4a03      	ldr	r2, [pc, #12]	; (8008850 <HAL_PCD_SuspendCallback+0x30>)
 8008842:	f043 0306 	orr.w	r3, r3, #6
 8008846:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	e000ed00 	.word	0xe000ed00

08008854 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe ff08 	bl	8007678 <USBD_LL_Resume>
}
 8008868:	bf00      	nop
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008878:	4a28      	ldr	r2, [pc, #160]	; (800891c <USBD_LL_Init+0xac>)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a26      	ldr	r2, [pc, #152]	; (800891c <USBD_LL_Init+0xac>)
 8008884:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008888:	4b24      	ldr	r3, [pc, #144]	; (800891c <USBD_LL_Init+0xac>)
 800888a:	4a25      	ldr	r2, [pc, #148]	; (8008920 <USBD_LL_Init+0xb0>)
 800888c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800888e:	4b23      	ldr	r3, [pc, #140]	; (800891c <USBD_LL_Init+0xac>)
 8008890:	2208      	movs	r2, #8
 8008892:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008894:	4b21      	ldr	r3, [pc, #132]	; (800891c <USBD_LL_Init+0xac>)
 8008896:	2202      	movs	r2, #2
 8008898:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800889a:	4b20      	ldr	r3, [pc, #128]	; (800891c <USBD_LL_Init+0xac>)
 800889c:	2200      	movs	r2, #0
 800889e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80088a0:	4b1e      	ldr	r3, [pc, #120]	; (800891c <USBD_LL_Init+0xac>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80088a6:	4b1d      	ldr	r3, [pc, #116]	; (800891c <USBD_LL_Init+0xac>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80088ac:	481b      	ldr	r0, [pc, #108]	; (800891c <USBD_LL_Init+0xac>)
 80088ae:	f7f8 fd3d 	bl	800132c <HAL_PCD_Init>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80088b8:	f7f7 ff5e 	bl	8000778 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088c2:	2318      	movs	r3, #24
 80088c4:	2200      	movs	r2, #0
 80088c6:	2100      	movs	r1, #0
 80088c8:	f7fa fa5c 	bl	8002d84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088d2:	2358      	movs	r3, #88	; 0x58
 80088d4:	2200      	movs	r2, #0
 80088d6:	2180      	movs	r1, #128	; 0x80
 80088d8:	f7fa fa54 	bl	8002d84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088e2:	23c0      	movs	r3, #192	; 0xc0
 80088e4:	2200      	movs	r2, #0
 80088e6:	2181      	movs	r1, #129	; 0x81
 80088e8:	f7fa fa4c 	bl	8002d84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80088f6:	2200      	movs	r2, #0
 80088f8:	2101      	movs	r1, #1
 80088fa:	f7fa fa43 	bl	8002d84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008908:	2200      	movs	r2, #0
 800890a:	2182      	movs	r1, #130	; 0x82
 800890c:	f7fa fa3a 	bl	8002d84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20000f5c 	.word	0x20000f5c
 8008920:	40005c00 	.word	0x40005c00

08008924 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800893a:	4618      	mov	r0, r3
 800893c:	f7f8 fdf5 	bl	800152a <HAL_PCD_Start>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	4618      	mov	r0, r3
 8008948:	f000 f94e 	bl	8008be8 <USBD_Get_USB_Status>
 800894c:	4603      	mov	r3, r0
 800894e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008950:	7bbb      	ldrb	r3, [r7, #14]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	4608      	mov	r0, r1
 8008964:	4611      	mov	r1, r2
 8008966:	461a      	mov	r2, r3
 8008968:	4603      	mov	r3, r0
 800896a:	70fb      	strb	r3, [r7, #3]
 800896c:	460b      	mov	r3, r1
 800896e:	70bb      	strb	r3, [r7, #2]
 8008970:	4613      	mov	r3, r2
 8008972:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008982:	78bb      	ldrb	r3, [r7, #2]
 8008984:	883a      	ldrh	r2, [r7, #0]
 8008986:	78f9      	ldrb	r1, [r7, #3]
 8008988:	f7f8 ff4a 	bl	8001820 <HAL_PCD_EP_Open>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f928 	bl	8008be8 <USBD_Get_USB_Status>
 8008998:	4603      	mov	r3, r0
 800899a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800899c:	7bbb      	ldrb	r3, [r7, #14]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	460b      	mov	r3, r1
 80089b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	4611      	mov	r1, r2
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7f8 ff88 	bl	80018da <HAL_PCD_EP_Close>
 80089ca:	4603      	mov	r3, r0
 80089cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 f909 	bl	8008be8 <USBD_Get_USB_Status>
 80089d6:	4603      	mov	r3, r0
 80089d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089da:	7bbb      	ldrb	r3, [r7, #14]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089fe:	78fa      	ldrb	r2, [r7, #3]
 8008a00:	4611      	mov	r1, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7f9 f830 	bl	8001a68 <HAL_PCD_EP_SetStall>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f8ea 	bl	8008be8 <USBD_Get_USB_Status>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a3c:	78fa      	ldrb	r2, [r7, #3]
 8008a3e:	4611      	mov	r1, r2
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7f9 f871 	bl	8001b28 <HAL_PCD_EP_ClrStall>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 f8cb 	bl	8008be8 <USBD_Get_USB_Status>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	da0c      	bge.n	8008a96 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a7c:	78fb      	ldrb	r3, [r7, #3]
 8008a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a82:	68f9      	ldr	r1, [r7, #12]
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	00db      	lsls	r3, r3, #3
 8008a8e:	440b      	add	r3, r1
 8008a90:	3302      	adds	r3, #2
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	e00b      	b.n	8008aae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a96:	78fb      	ldrb	r3, [r7, #3]
 8008a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a9c:	68f9      	ldr	r1, [r7, #12]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	00db      	lsls	r3, r3, #3
 8008aa6:	440b      	add	r3, r1
 8008aa8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008aac:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bc80      	pop	{r7}
 8008ab6:	4770      	bx	lr

08008ab8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ad2:	78fa      	ldrb	r2, [r7, #3]
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7f8 fe7d 	bl	80017d6 <HAL_PCD_SetAddress>
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f880 	bl	8008be8 <USBD_Get_USB_Status>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b086      	sub	sp, #24
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	461a      	mov	r2, r3
 8008b02:	460b      	mov	r3, r1
 8008b04:	72fb      	strb	r3, [r7, #11]
 8008b06:	4613      	mov	r3, r2
 8008b08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b18:	893b      	ldrh	r3, [r7, #8]
 8008b1a:	7af9      	ldrb	r1, [r7, #11]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	f7f8 ff6c 	bl	80019fa <HAL_PCD_EP_Transmit>
 8008b22:	4603      	mov	r3, r0
 8008b24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 f85d 	bl	8008be8 <USBD_Get_USB_Status>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b32:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	607a      	str	r2, [r7, #4]
 8008b46:	461a      	mov	r2, r3
 8008b48:	460b      	mov	r3, r1
 8008b4a:	72fb      	strb	r3, [r7, #11]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b5e:	893b      	ldrh	r3, [r7, #8]
 8008b60:	7af9      	ldrb	r1, [r7, #11]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	f7f8 ff01 	bl	800196a <HAL_PCD_EP_Receive>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f83a 	bl	8008be8 <USBD_Get_USB_Status>
 8008b74:	4603      	mov	r3, r0
 8008b76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b78:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b94:	78fa      	ldrb	r2, [r7, #3]
 8008b96:	4611      	mov	r1, r2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7f8 ff17 	bl	80019cc <HAL_PCD_EP_GetRxCount>
 8008b9e:	4603      	mov	r3, r0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bb0:	4b02      	ldr	r3, [pc, #8]	; (8008bbc <USBD_static_malloc+0x14>)
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bc80      	pop	{r7}
 8008bba:	4770      	bx	lr
 8008bbc:	2000124c 	.word	0x2000124c

08008bc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]

}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bc80      	pop	{r7}
 8008bd0:	4770      	bx	lr

08008bd2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b083      	sub	sp, #12
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bc80      	pop	{r7}
 8008be6:	4770      	bx	lr

08008be8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bf6:	79fb      	ldrb	r3, [r7, #7]
 8008bf8:	2b03      	cmp	r3, #3
 8008bfa:	d817      	bhi.n	8008c2c <USBD_Get_USB_Status+0x44>
 8008bfc:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <USBD_Get_USB_Status+0x1c>)
 8008bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c02:	bf00      	nop
 8008c04:	08008c15 	.word	0x08008c15
 8008c08:	08008c1b 	.word	0x08008c1b
 8008c0c:	08008c21 	.word	0x08008c21
 8008c10:	08008c27 	.word	0x08008c27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73fb      	strb	r3, [r7, #15]
    break;
 8008c18:	e00b      	b.n	8008c32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c1e:	e008      	b.n	8008c32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c20:	2301      	movs	r3, #1
 8008c22:	73fb      	strb	r3, [r7, #15]
    break;
 8008c24:	e005      	b.n	8008c32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c26:	2302      	movs	r3, #2
 8008c28:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2a:	e002      	b.n	8008c32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c30:	bf00      	nop
  }
  return usb_status;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bc80      	pop	{r7}
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop

08008c40 <__errno>:
 8008c40:	4b01      	ldr	r3, [pc, #4]	; (8008c48 <__errno+0x8>)
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	2000017c 	.word	0x2000017c

08008c4c <__libc_init_array>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	2600      	movs	r6, #0
 8008c50:	4d0c      	ldr	r5, [pc, #48]	; (8008c84 <__libc_init_array+0x38>)
 8008c52:	4c0d      	ldr	r4, [pc, #52]	; (8008c88 <__libc_init_array+0x3c>)
 8008c54:	1b64      	subs	r4, r4, r5
 8008c56:	10a4      	asrs	r4, r4, #2
 8008c58:	42a6      	cmp	r6, r4
 8008c5a:	d109      	bne.n	8008c70 <__libc_init_array+0x24>
 8008c5c:	f001 f9aa 	bl	8009fb4 <_init>
 8008c60:	2600      	movs	r6, #0
 8008c62:	4d0a      	ldr	r5, [pc, #40]	; (8008c8c <__libc_init_array+0x40>)
 8008c64:	4c0a      	ldr	r4, [pc, #40]	; (8008c90 <__libc_init_array+0x44>)
 8008c66:	1b64      	subs	r4, r4, r5
 8008c68:	10a4      	asrs	r4, r4, #2
 8008c6a:	42a6      	cmp	r6, r4
 8008c6c:	d105      	bne.n	8008c7a <__libc_init_array+0x2e>
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}
 8008c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c74:	4798      	blx	r3
 8008c76:	3601      	adds	r6, #1
 8008c78:	e7ee      	b.n	8008c58 <__libc_init_array+0xc>
 8008c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c7e:	4798      	blx	r3
 8008c80:	3601      	adds	r6, #1
 8008c82:	e7f2      	b.n	8008c6a <__libc_init_array+0x1e>
 8008c84:	0800a33c 	.word	0x0800a33c
 8008c88:	0800a33c 	.word	0x0800a33c
 8008c8c:	0800a33c 	.word	0x0800a33c
 8008c90:	0800a340 	.word	0x0800a340

08008c94 <malloc>:
 8008c94:	4b02      	ldr	r3, [pc, #8]	; (8008ca0 <malloc+0xc>)
 8008c96:	4601      	mov	r1, r0
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	f000 b87b 	b.w	8008d94 <_malloc_r>
 8008c9e:	bf00      	nop
 8008ca0:	2000017c 	.word	0x2000017c

08008ca4 <free>:
 8008ca4:	4b02      	ldr	r3, [pc, #8]	; (8008cb0 <free+0xc>)
 8008ca6:	4601      	mov	r1, r0
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	f000 b80b 	b.w	8008cc4 <_free_r>
 8008cae:	bf00      	nop
 8008cb0:	2000017c 	.word	0x2000017c

08008cb4 <memset>:
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	4402      	add	r2, r0
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d100      	bne.n	8008cbe <memset+0xa>
 8008cbc:	4770      	bx	lr
 8008cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008cc2:	e7f9      	b.n	8008cb8 <memset+0x4>

08008cc4 <_free_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	2900      	cmp	r1, #0
 8008cca:	d040      	beq.n	8008d4e <_free_r+0x8a>
 8008ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cd0:	1f0c      	subs	r4, r1, #4
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	bfb8      	it	lt
 8008cd6:	18e4      	addlt	r4, r4, r3
 8008cd8:	f000 fa18 	bl	800910c <__malloc_lock>
 8008cdc:	4a1c      	ldr	r2, [pc, #112]	; (8008d50 <_free_r+0x8c>)
 8008cde:	6813      	ldr	r3, [r2, #0]
 8008ce0:	b933      	cbnz	r3, 8008cf0 <_free_r+0x2c>
 8008ce2:	6063      	str	r3, [r4, #4]
 8008ce4:	6014      	str	r4, [r2, #0]
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cec:	f000 ba14 	b.w	8009118 <__malloc_unlock>
 8008cf0:	42a3      	cmp	r3, r4
 8008cf2:	d908      	bls.n	8008d06 <_free_r+0x42>
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	1821      	adds	r1, r4, r0
 8008cf8:	428b      	cmp	r3, r1
 8008cfa:	bf01      	itttt	eq
 8008cfc:	6819      	ldreq	r1, [r3, #0]
 8008cfe:	685b      	ldreq	r3, [r3, #4]
 8008d00:	1809      	addeq	r1, r1, r0
 8008d02:	6021      	streq	r1, [r4, #0]
 8008d04:	e7ed      	b.n	8008ce2 <_free_r+0x1e>
 8008d06:	461a      	mov	r2, r3
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	b10b      	cbz	r3, 8008d10 <_free_r+0x4c>
 8008d0c:	42a3      	cmp	r3, r4
 8008d0e:	d9fa      	bls.n	8008d06 <_free_r+0x42>
 8008d10:	6811      	ldr	r1, [r2, #0]
 8008d12:	1850      	adds	r0, r2, r1
 8008d14:	42a0      	cmp	r0, r4
 8008d16:	d10b      	bne.n	8008d30 <_free_r+0x6c>
 8008d18:	6820      	ldr	r0, [r4, #0]
 8008d1a:	4401      	add	r1, r0
 8008d1c:	1850      	adds	r0, r2, r1
 8008d1e:	4283      	cmp	r3, r0
 8008d20:	6011      	str	r1, [r2, #0]
 8008d22:	d1e0      	bne.n	8008ce6 <_free_r+0x22>
 8008d24:	6818      	ldr	r0, [r3, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	4401      	add	r1, r0
 8008d2a:	6011      	str	r1, [r2, #0]
 8008d2c:	6053      	str	r3, [r2, #4]
 8008d2e:	e7da      	b.n	8008ce6 <_free_r+0x22>
 8008d30:	d902      	bls.n	8008d38 <_free_r+0x74>
 8008d32:	230c      	movs	r3, #12
 8008d34:	602b      	str	r3, [r5, #0]
 8008d36:	e7d6      	b.n	8008ce6 <_free_r+0x22>
 8008d38:	6820      	ldr	r0, [r4, #0]
 8008d3a:	1821      	adds	r1, r4, r0
 8008d3c:	428b      	cmp	r3, r1
 8008d3e:	bf01      	itttt	eq
 8008d40:	6819      	ldreq	r1, [r3, #0]
 8008d42:	685b      	ldreq	r3, [r3, #4]
 8008d44:	1809      	addeq	r1, r1, r0
 8008d46:	6021      	streq	r1, [r4, #0]
 8008d48:	6063      	str	r3, [r4, #4]
 8008d4a:	6054      	str	r4, [r2, #4]
 8008d4c:	e7cb      	b.n	8008ce6 <_free_r+0x22>
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	2000146c 	.word	0x2000146c

08008d54 <sbrk_aligned>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	4e0e      	ldr	r6, [pc, #56]	; (8008d90 <sbrk_aligned+0x3c>)
 8008d58:	460c      	mov	r4, r1
 8008d5a:	6831      	ldr	r1, [r6, #0]
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	b911      	cbnz	r1, 8008d66 <sbrk_aligned+0x12>
 8008d60:	f000 f8a4 	bl	8008eac <_sbrk_r>
 8008d64:	6030      	str	r0, [r6, #0]
 8008d66:	4621      	mov	r1, r4
 8008d68:	4628      	mov	r0, r5
 8008d6a:	f000 f89f 	bl	8008eac <_sbrk_r>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	d00a      	beq.n	8008d88 <sbrk_aligned+0x34>
 8008d72:	1cc4      	adds	r4, r0, #3
 8008d74:	f024 0403 	bic.w	r4, r4, #3
 8008d78:	42a0      	cmp	r0, r4
 8008d7a:	d007      	beq.n	8008d8c <sbrk_aligned+0x38>
 8008d7c:	1a21      	subs	r1, r4, r0
 8008d7e:	4628      	mov	r0, r5
 8008d80:	f000 f894 	bl	8008eac <_sbrk_r>
 8008d84:	3001      	adds	r0, #1
 8008d86:	d101      	bne.n	8008d8c <sbrk_aligned+0x38>
 8008d88:	f04f 34ff 	mov.w	r4, #4294967295
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
 8008d90:	20001470 	.word	0x20001470

08008d94 <_malloc_r>:
 8008d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d98:	1ccd      	adds	r5, r1, #3
 8008d9a:	f025 0503 	bic.w	r5, r5, #3
 8008d9e:	3508      	adds	r5, #8
 8008da0:	2d0c      	cmp	r5, #12
 8008da2:	bf38      	it	cc
 8008da4:	250c      	movcc	r5, #12
 8008da6:	2d00      	cmp	r5, #0
 8008da8:	4607      	mov	r7, r0
 8008daa:	db01      	blt.n	8008db0 <_malloc_r+0x1c>
 8008dac:	42a9      	cmp	r1, r5
 8008dae:	d905      	bls.n	8008dbc <_malloc_r+0x28>
 8008db0:	230c      	movs	r3, #12
 8008db2:	2600      	movs	r6, #0
 8008db4:	603b      	str	r3, [r7, #0]
 8008db6:	4630      	mov	r0, r6
 8008db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dbc:	4e2e      	ldr	r6, [pc, #184]	; (8008e78 <_malloc_r+0xe4>)
 8008dbe:	f000 f9a5 	bl	800910c <__malloc_lock>
 8008dc2:	6833      	ldr	r3, [r6, #0]
 8008dc4:	461c      	mov	r4, r3
 8008dc6:	bb34      	cbnz	r4, 8008e16 <_malloc_r+0x82>
 8008dc8:	4629      	mov	r1, r5
 8008dca:	4638      	mov	r0, r7
 8008dcc:	f7ff ffc2 	bl	8008d54 <sbrk_aligned>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	d14d      	bne.n	8008e72 <_malloc_r+0xde>
 8008dd6:	6834      	ldr	r4, [r6, #0]
 8008dd8:	4626      	mov	r6, r4
 8008dda:	2e00      	cmp	r6, #0
 8008ddc:	d140      	bne.n	8008e60 <_malloc_r+0xcc>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	4631      	mov	r1, r6
 8008de2:	4638      	mov	r0, r7
 8008de4:	eb04 0803 	add.w	r8, r4, r3
 8008de8:	f000 f860 	bl	8008eac <_sbrk_r>
 8008dec:	4580      	cmp	r8, r0
 8008dee:	d13a      	bne.n	8008e66 <_malloc_r+0xd2>
 8008df0:	6821      	ldr	r1, [r4, #0]
 8008df2:	3503      	adds	r5, #3
 8008df4:	1a6d      	subs	r5, r5, r1
 8008df6:	f025 0503 	bic.w	r5, r5, #3
 8008dfa:	3508      	adds	r5, #8
 8008dfc:	2d0c      	cmp	r5, #12
 8008dfe:	bf38      	it	cc
 8008e00:	250c      	movcc	r5, #12
 8008e02:	4638      	mov	r0, r7
 8008e04:	4629      	mov	r1, r5
 8008e06:	f7ff ffa5 	bl	8008d54 <sbrk_aligned>
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d02b      	beq.n	8008e66 <_malloc_r+0xd2>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	442b      	add	r3, r5
 8008e12:	6023      	str	r3, [r4, #0]
 8008e14:	e00e      	b.n	8008e34 <_malloc_r+0xa0>
 8008e16:	6822      	ldr	r2, [r4, #0]
 8008e18:	1b52      	subs	r2, r2, r5
 8008e1a:	d41e      	bmi.n	8008e5a <_malloc_r+0xc6>
 8008e1c:	2a0b      	cmp	r2, #11
 8008e1e:	d916      	bls.n	8008e4e <_malloc_r+0xba>
 8008e20:	1961      	adds	r1, r4, r5
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	6025      	str	r5, [r4, #0]
 8008e26:	bf18      	it	ne
 8008e28:	6059      	strne	r1, [r3, #4]
 8008e2a:	6863      	ldr	r3, [r4, #4]
 8008e2c:	bf08      	it	eq
 8008e2e:	6031      	streq	r1, [r6, #0]
 8008e30:	5162      	str	r2, [r4, r5]
 8008e32:	604b      	str	r3, [r1, #4]
 8008e34:	4638      	mov	r0, r7
 8008e36:	f104 060b 	add.w	r6, r4, #11
 8008e3a:	f000 f96d 	bl	8009118 <__malloc_unlock>
 8008e3e:	f026 0607 	bic.w	r6, r6, #7
 8008e42:	1d23      	adds	r3, r4, #4
 8008e44:	1af2      	subs	r2, r6, r3
 8008e46:	d0b6      	beq.n	8008db6 <_malloc_r+0x22>
 8008e48:	1b9b      	subs	r3, r3, r6
 8008e4a:	50a3      	str	r3, [r4, r2]
 8008e4c:	e7b3      	b.n	8008db6 <_malloc_r+0x22>
 8008e4e:	6862      	ldr	r2, [r4, #4]
 8008e50:	42a3      	cmp	r3, r4
 8008e52:	bf0c      	ite	eq
 8008e54:	6032      	streq	r2, [r6, #0]
 8008e56:	605a      	strne	r2, [r3, #4]
 8008e58:	e7ec      	b.n	8008e34 <_malloc_r+0xa0>
 8008e5a:	4623      	mov	r3, r4
 8008e5c:	6864      	ldr	r4, [r4, #4]
 8008e5e:	e7b2      	b.n	8008dc6 <_malloc_r+0x32>
 8008e60:	4634      	mov	r4, r6
 8008e62:	6876      	ldr	r6, [r6, #4]
 8008e64:	e7b9      	b.n	8008dda <_malloc_r+0x46>
 8008e66:	230c      	movs	r3, #12
 8008e68:	4638      	mov	r0, r7
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	f000 f954 	bl	8009118 <__malloc_unlock>
 8008e70:	e7a1      	b.n	8008db6 <_malloc_r+0x22>
 8008e72:	6025      	str	r5, [r4, #0]
 8008e74:	e7de      	b.n	8008e34 <_malloc_r+0xa0>
 8008e76:	bf00      	nop
 8008e78:	2000146c 	.word	0x2000146c

08008e7c <iprintf>:
 8008e7c:	b40f      	push	{r0, r1, r2, r3}
 8008e7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ea8 <iprintf+0x2c>)
 8008e80:	b513      	push	{r0, r1, r4, lr}
 8008e82:	681c      	ldr	r4, [r3, #0]
 8008e84:	b124      	cbz	r4, 8008e90 <iprintf+0x14>
 8008e86:	69a3      	ldr	r3, [r4, #24]
 8008e88:	b913      	cbnz	r3, 8008e90 <iprintf+0x14>
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 f89e 	bl	8008fcc <__sinit>
 8008e90:	ab05      	add	r3, sp, #20
 8008e92:	4620      	mov	r0, r4
 8008e94:	9a04      	ldr	r2, [sp, #16]
 8008e96:	68a1      	ldr	r1, [r4, #8]
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	f000 fac7 	bl	800942c <_vfiprintf_r>
 8008e9e:	b002      	add	sp, #8
 8008ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea4:	b004      	add	sp, #16
 8008ea6:	4770      	bx	lr
 8008ea8:	2000017c 	.word	0x2000017c

08008eac <_sbrk_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	2300      	movs	r3, #0
 8008eb0:	4d05      	ldr	r5, [pc, #20]	; (8008ec8 <_sbrk_r+0x1c>)
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	4608      	mov	r0, r1
 8008eb6:	602b      	str	r3, [r5, #0]
 8008eb8:	f7f7 fdf4 	bl	8000aa4 <_sbrk>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_sbrk_r+0x1a>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_sbrk_r+0x1a>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	20001478 	.word	0x20001478

08008ecc <siprintf>:
 8008ecc:	b40e      	push	{r1, r2, r3}
 8008ece:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ed2:	b500      	push	{lr}
 8008ed4:	b09c      	sub	sp, #112	; 0x70
 8008ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ed8:	9002      	str	r0, [sp, #8]
 8008eda:	9006      	str	r0, [sp, #24]
 8008edc:	9107      	str	r1, [sp, #28]
 8008ede:	9104      	str	r1, [sp, #16]
 8008ee0:	4808      	ldr	r0, [pc, #32]	; (8008f04 <siprintf+0x38>)
 8008ee2:	4909      	ldr	r1, [pc, #36]	; (8008f08 <siprintf+0x3c>)
 8008ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee8:	9105      	str	r1, [sp, #20]
 8008eea:	6800      	ldr	r0, [r0, #0]
 8008eec:	a902      	add	r1, sp, #8
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	f000 f974 	bl	80091dc <_svfiprintf_r>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	9b02      	ldr	r3, [sp, #8]
 8008ef8:	701a      	strb	r2, [r3, #0]
 8008efa:	b01c      	add	sp, #112	; 0x70
 8008efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f00:	b003      	add	sp, #12
 8008f02:	4770      	bx	lr
 8008f04:	2000017c 	.word	0x2000017c
 8008f08:	ffff0208 	.word	0xffff0208

08008f0c <strcpy>:
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f12:	f803 2b01 	strb.w	r2, [r3], #1
 8008f16:	2a00      	cmp	r2, #0
 8008f18:	d1f9      	bne.n	8008f0e <strcpy+0x2>
 8008f1a:	4770      	bx	lr

08008f1c <std>:
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	b510      	push	{r4, lr}
 8008f20:	4604      	mov	r4, r0
 8008f22:	e9c0 3300 	strd	r3, r3, [r0]
 8008f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f2a:	6083      	str	r3, [r0, #8]
 8008f2c:	8181      	strh	r1, [r0, #12]
 8008f2e:	6643      	str	r3, [r0, #100]	; 0x64
 8008f30:	81c2      	strh	r2, [r0, #14]
 8008f32:	6183      	str	r3, [r0, #24]
 8008f34:	4619      	mov	r1, r3
 8008f36:	2208      	movs	r2, #8
 8008f38:	305c      	adds	r0, #92	; 0x5c
 8008f3a:	f7ff febb 	bl	8008cb4 <memset>
 8008f3e:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <std+0x38>)
 8008f40:	6224      	str	r4, [r4, #32]
 8008f42:	6263      	str	r3, [r4, #36]	; 0x24
 8008f44:	4b04      	ldr	r3, [pc, #16]	; (8008f58 <std+0x3c>)
 8008f46:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f48:	4b04      	ldr	r3, [pc, #16]	; (8008f5c <std+0x40>)
 8008f4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f4c:	4b04      	ldr	r3, [pc, #16]	; (8008f60 <std+0x44>)
 8008f4e:	6323      	str	r3, [r4, #48]	; 0x30
 8008f50:	bd10      	pop	{r4, pc}
 8008f52:	bf00      	nop
 8008f54:	080099b9 	.word	0x080099b9
 8008f58:	080099db 	.word	0x080099db
 8008f5c:	08009a13 	.word	0x08009a13
 8008f60:	08009a37 	.word	0x08009a37

08008f64 <_cleanup_r>:
 8008f64:	4901      	ldr	r1, [pc, #4]	; (8008f6c <_cleanup_r+0x8>)
 8008f66:	f000 b8af 	b.w	80090c8 <_fwalk_reent>
 8008f6a:	bf00      	nop
 8008f6c:	08009d09 	.word	0x08009d09

08008f70 <__sfmoreglue>:
 8008f70:	2268      	movs	r2, #104	; 0x68
 8008f72:	b570      	push	{r4, r5, r6, lr}
 8008f74:	1e4d      	subs	r5, r1, #1
 8008f76:	4355      	muls	r5, r2
 8008f78:	460e      	mov	r6, r1
 8008f7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f7e:	f7ff ff09 	bl	8008d94 <_malloc_r>
 8008f82:	4604      	mov	r4, r0
 8008f84:	b140      	cbz	r0, 8008f98 <__sfmoreglue+0x28>
 8008f86:	2100      	movs	r1, #0
 8008f88:	e9c0 1600 	strd	r1, r6, [r0]
 8008f8c:	300c      	adds	r0, #12
 8008f8e:	60a0      	str	r0, [r4, #8]
 8008f90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f94:	f7ff fe8e 	bl	8008cb4 <memset>
 8008f98:	4620      	mov	r0, r4
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}

08008f9c <__sfp_lock_acquire>:
 8008f9c:	4801      	ldr	r0, [pc, #4]	; (8008fa4 <__sfp_lock_acquire+0x8>)
 8008f9e:	f000 b8b3 	b.w	8009108 <__retarget_lock_acquire_recursive>
 8008fa2:	bf00      	nop
 8008fa4:	20001475 	.word	0x20001475

08008fa8 <__sfp_lock_release>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	; (8008fb0 <__sfp_lock_release+0x8>)
 8008faa:	f000 b8ae 	b.w	800910a <__retarget_lock_release_recursive>
 8008fae:	bf00      	nop
 8008fb0:	20001475 	.word	0x20001475

08008fb4 <__sinit_lock_acquire>:
 8008fb4:	4801      	ldr	r0, [pc, #4]	; (8008fbc <__sinit_lock_acquire+0x8>)
 8008fb6:	f000 b8a7 	b.w	8009108 <__retarget_lock_acquire_recursive>
 8008fba:	bf00      	nop
 8008fbc:	20001476 	.word	0x20001476

08008fc0 <__sinit_lock_release>:
 8008fc0:	4801      	ldr	r0, [pc, #4]	; (8008fc8 <__sinit_lock_release+0x8>)
 8008fc2:	f000 b8a2 	b.w	800910a <__retarget_lock_release_recursive>
 8008fc6:	bf00      	nop
 8008fc8:	20001476 	.word	0x20001476

08008fcc <__sinit>:
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	4604      	mov	r4, r0
 8008fd0:	f7ff fff0 	bl	8008fb4 <__sinit_lock_acquire>
 8008fd4:	69a3      	ldr	r3, [r4, #24]
 8008fd6:	b11b      	cbz	r3, 8008fe0 <__sinit+0x14>
 8008fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fdc:	f7ff bff0 	b.w	8008fc0 <__sinit_lock_release>
 8008fe0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fe4:	6523      	str	r3, [r4, #80]	; 0x50
 8008fe6:	4b13      	ldr	r3, [pc, #76]	; (8009034 <__sinit+0x68>)
 8008fe8:	4a13      	ldr	r2, [pc, #76]	; (8009038 <__sinit+0x6c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fee:	42a3      	cmp	r3, r4
 8008ff0:	bf08      	it	eq
 8008ff2:	2301      	moveq	r3, #1
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	bf08      	it	eq
 8008ff8:	61a3      	streq	r3, [r4, #24]
 8008ffa:	f000 f81f 	bl	800903c <__sfp>
 8008ffe:	6060      	str	r0, [r4, #4]
 8009000:	4620      	mov	r0, r4
 8009002:	f000 f81b 	bl	800903c <__sfp>
 8009006:	60a0      	str	r0, [r4, #8]
 8009008:	4620      	mov	r0, r4
 800900a:	f000 f817 	bl	800903c <__sfp>
 800900e:	2200      	movs	r2, #0
 8009010:	2104      	movs	r1, #4
 8009012:	60e0      	str	r0, [r4, #12]
 8009014:	6860      	ldr	r0, [r4, #4]
 8009016:	f7ff ff81 	bl	8008f1c <std>
 800901a:	2201      	movs	r2, #1
 800901c:	2109      	movs	r1, #9
 800901e:	68a0      	ldr	r0, [r4, #8]
 8009020:	f7ff ff7c 	bl	8008f1c <std>
 8009024:	2202      	movs	r2, #2
 8009026:	2112      	movs	r1, #18
 8009028:	68e0      	ldr	r0, [r4, #12]
 800902a:	f7ff ff77 	bl	8008f1c <std>
 800902e:	2301      	movs	r3, #1
 8009030:	61a3      	str	r3, [r4, #24]
 8009032:	e7d1      	b.n	8008fd8 <__sinit+0xc>
 8009034:	0800a2a4 	.word	0x0800a2a4
 8009038:	08008f65 	.word	0x08008f65

0800903c <__sfp>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	4607      	mov	r7, r0
 8009040:	f7ff ffac 	bl	8008f9c <__sfp_lock_acquire>
 8009044:	4b1e      	ldr	r3, [pc, #120]	; (80090c0 <__sfp+0x84>)
 8009046:	681e      	ldr	r6, [r3, #0]
 8009048:	69b3      	ldr	r3, [r6, #24]
 800904a:	b913      	cbnz	r3, 8009052 <__sfp+0x16>
 800904c:	4630      	mov	r0, r6
 800904e:	f7ff ffbd 	bl	8008fcc <__sinit>
 8009052:	3648      	adds	r6, #72	; 0x48
 8009054:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009058:	3b01      	subs	r3, #1
 800905a:	d503      	bpl.n	8009064 <__sfp+0x28>
 800905c:	6833      	ldr	r3, [r6, #0]
 800905e:	b30b      	cbz	r3, 80090a4 <__sfp+0x68>
 8009060:	6836      	ldr	r6, [r6, #0]
 8009062:	e7f7      	b.n	8009054 <__sfp+0x18>
 8009064:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009068:	b9d5      	cbnz	r5, 80090a0 <__sfp+0x64>
 800906a:	4b16      	ldr	r3, [pc, #88]	; (80090c4 <__sfp+0x88>)
 800906c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009070:	60e3      	str	r3, [r4, #12]
 8009072:	6665      	str	r5, [r4, #100]	; 0x64
 8009074:	f000 f847 	bl	8009106 <__retarget_lock_init_recursive>
 8009078:	f7ff ff96 	bl	8008fa8 <__sfp_lock_release>
 800907c:	2208      	movs	r2, #8
 800907e:	4629      	mov	r1, r5
 8009080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009088:	6025      	str	r5, [r4, #0]
 800908a:	61a5      	str	r5, [r4, #24]
 800908c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009090:	f7ff fe10 	bl	8008cb4 <memset>
 8009094:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009098:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800909c:	4620      	mov	r0, r4
 800909e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a0:	3468      	adds	r4, #104	; 0x68
 80090a2:	e7d9      	b.n	8009058 <__sfp+0x1c>
 80090a4:	2104      	movs	r1, #4
 80090a6:	4638      	mov	r0, r7
 80090a8:	f7ff ff62 	bl	8008f70 <__sfmoreglue>
 80090ac:	4604      	mov	r4, r0
 80090ae:	6030      	str	r0, [r6, #0]
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d1d5      	bne.n	8009060 <__sfp+0x24>
 80090b4:	f7ff ff78 	bl	8008fa8 <__sfp_lock_release>
 80090b8:	230c      	movs	r3, #12
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	e7ee      	b.n	800909c <__sfp+0x60>
 80090be:	bf00      	nop
 80090c0:	0800a2a4 	.word	0x0800a2a4
 80090c4:	ffff0001 	.word	0xffff0001

080090c8 <_fwalk_reent>:
 80090c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090cc:	4606      	mov	r6, r0
 80090ce:	4688      	mov	r8, r1
 80090d0:	2700      	movs	r7, #0
 80090d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090da:	f1b9 0901 	subs.w	r9, r9, #1
 80090de:	d505      	bpl.n	80090ec <_fwalk_reent+0x24>
 80090e0:	6824      	ldr	r4, [r4, #0]
 80090e2:	2c00      	cmp	r4, #0
 80090e4:	d1f7      	bne.n	80090d6 <_fwalk_reent+0xe>
 80090e6:	4638      	mov	r0, r7
 80090e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ec:	89ab      	ldrh	r3, [r5, #12]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d907      	bls.n	8009102 <_fwalk_reent+0x3a>
 80090f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090f6:	3301      	adds	r3, #1
 80090f8:	d003      	beq.n	8009102 <_fwalk_reent+0x3a>
 80090fa:	4629      	mov	r1, r5
 80090fc:	4630      	mov	r0, r6
 80090fe:	47c0      	blx	r8
 8009100:	4307      	orrs	r7, r0
 8009102:	3568      	adds	r5, #104	; 0x68
 8009104:	e7e9      	b.n	80090da <_fwalk_reent+0x12>

08009106 <__retarget_lock_init_recursive>:
 8009106:	4770      	bx	lr

08009108 <__retarget_lock_acquire_recursive>:
 8009108:	4770      	bx	lr

0800910a <__retarget_lock_release_recursive>:
 800910a:	4770      	bx	lr

0800910c <__malloc_lock>:
 800910c:	4801      	ldr	r0, [pc, #4]	; (8009114 <__malloc_lock+0x8>)
 800910e:	f7ff bffb 	b.w	8009108 <__retarget_lock_acquire_recursive>
 8009112:	bf00      	nop
 8009114:	20001474 	.word	0x20001474

08009118 <__malloc_unlock>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__malloc_unlock+0x8>)
 800911a:	f7ff bff6 	b.w	800910a <__retarget_lock_release_recursive>
 800911e:	bf00      	nop
 8009120:	20001474 	.word	0x20001474

08009124 <__ssputs_r>:
 8009124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	688e      	ldr	r6, [r1, #8]
 800912a:	4682      	mov	sl, r0
 800912c:	429e      	cmp	r6, r3
 800912e:	460c      	mov	r4, r1
 8009130:	4690      	mov	r8, r2
 8009132:	461f      	mov	r7, r3
 8009134:	d838      	bhi.n	80091a8 <__ssputs_r+0x84>
 8009136:	898a      	ldrh	r2, [r1, #12]
 8009138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800913c:	d032      	beq.n	80091a4 <__ssputs_r+0x80>
 800913e:	6825      	ldr	r5, [r4, #0]
 8009140:	6909      	ldr	r1, [r1, #16]
 8009142:	3301      	adds	r3, #1
 8009144:	eba5 0901 	sub.w	r9, r5, r1
 8009148:	6965      	ldr	r5, [r4, #20]
 800914a:	444b      	add	r3, r9
 800914c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009154:	106d      	asrs	r5, r5, #1
 8009156:	429d      	cmp	r5, r3
 8009158:	bf38      	it	cc
 800915a:	461d      	movcc	r5, r3
 800915c:	0553      	lsls	r3, r2, #21
 800915e:	d531      	bpl.n	80091c4 <__ssputs_r+0xa0>
 8009160:	4629      	mov	r1, r5
 8009162:	f7ff fe17 	bl	8008d94 <_malloc_r>
 8009166:	4606      	mov	r6, r0
 8009168:	b950      	cbnz	r0, 8009180 <__ssputs_r+0x5c>
 800916a:	230c      	movs	r3, #12
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	f8ca 3000 	str.w	r3, [sl]
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009180:	464a      	mov	r2, r9
 8009182:	6921      	ldr	r1, [r4, #16]
 8009184:	f000 fe82 	bl	8009e8c <memcpy>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800918e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009192:	81a3      	strh	r3, [r4, #12]
 8009194:	6126      	str	r6, [r4, #16]
 8009196:	444e      	add	r6, r9
 8009198:	6026      	str	r6, [r4, #0]
 800919a:	463e      	mov	r6, r7
 800919c:	6165      	str	r5, [r4, #20]
 800919e:	eba5 0509 	sub.w	r5, r5, r9
 80091a2:	60a5      	str	r5, [r4, #8]
 80091a4:	42be      	cmp	r6, r7
 80091a6:	d900      	bls.n	80091aa <__ssputs_r+0x86>
 80091a8:	463e      	mov	r6, r7
 80091aa:	4632      	mov	r2, r6
 80091ac:	4641      	mov	r1, r8
 80091ae:	6820      	ldr	r0, [r4, #0]
 80091b0:	f000 fe7a 	bl	8009ea8 <memmove>
 80091b4:	68a3      	ldr	r3, [r4, #8]
 80091b6:	2000      	movs	r0, #0
 80091b8:	1b9b      	subs	r3, r3, r6
 80091ba:	60a3      	str	r3, [r4, #8]
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	4433      	add	r3, r6
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	e7db      	b.n	800917c <__ssputs_r+0x58>
 80091c4:	462a      	mov	r2, r5
 80091c6:	f000 fe89 	bl	8009edc <_realloc_r>
 80091ca:	4606      	mov	r6, r0
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d1e1      	bne.n	8009194 <__ssputs_r+0x70>
 80091d0:	4650      	mov	r0, sl
 80091d2:	6921      	ldr	r1, [r4, #16]
 80091d4:	f7ff fd76 	bl	8008cc4 <_free_r>
 80091d8:	e7c7      	b.n	800916a <__ssputs_r+0x46>
	...

080091dc <_svfiprintf_r>:
 80091dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	4698      	mov	r8, r3
 80091e2:	898b      	ldrh	r3, [r1, #12]
 80091e4:	4607      	mov	r7, r0
 80091e6:	061b      	lsls	r3, r3, #24
 80091e8:	460d      	mov	r5, r1
 80091ea:	4614      	mov	r4, r2
 80091ec:	b09d      	sub	sp, #116	; 0x74
 80091ee:	d50e      	bpl.n	800920e <_svfiprintf_r+0x32>
 80091f0:	690b      	ldr	r3, [r1, #16]
 80091f2:	b963      	cbnz	r3, 800920e <_svfiprintf_r+0x32>
 80091f4:	2140      	movs	r1, #64	; 0x40
 80091f6:	f7ff fdcd 	bl	8008d94 <_malloc_r>
 80091fa:	6028      	str	r0, [r5, #0]
 80091fc:	6128      	str	r0, [r5, #16]
 80091fe:	b920      	cbnz	r0, 800920a <_svfiprintf_r+0x2e>
 8009200:	230c      	movs	r3, #12
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	f04f 30ff 	mov.w	r0, #4294967295
 8009208:	e0d1      	b.n	80093ae <_svfiprintf_r+0x1d2>
 800920a:	2340      	movs	r3, #64	; 0x40
 800920c:	616b      	str	r3, [r5, #20]
 800920e:	2300      	movs	r3, #0
 8009210:	9309      	str	r3, [sp, #36]	; 0x24
 8009212:	2320      	movs	r3, #32
 8009214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009218:	2330      	movs	r3, #48	; 0x30
 800921a:	f04f 0901 	mov.w	r9, #1
 800921e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009222:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093c8 <_svfiprintf_r+0x1ec>
 8009226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800922a:	4623      	mov	r3, r4
 800922c:	469a      	mov	sl, r3
 800922e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009232:	b10a      	cbz	r2, 8009238 <_svfiprintf_r+0x5c>
 8009234:	2a25      	cmp	r2, #37	; 0x25
 8009236:	d1f9      	bne.n	800922c <_svfiprintf_r+0x50>
 8009238:	ebba 0b04 	subs.w	fp, sl, r4
 800923c:	d00b      	beq.n	8009256 <_svfiprintf_r+0x7a>
 800923e:	465b      	mov	r3, fp
 8009240:	4622      	mov	r2, r4
 8009242:	4629      	mov	r1, r5
 8009244:	4638      	mov	r0, r7
 8009246:	f7ff ff6d 	bl	8009124 <__ssputs_r>
 800924a:	3001      	adds	r0, #1
 800924c:	f000 80aa 	beq.w	80093a4 <_svfiprintf_r+0x1c8>
 8009250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009252:	445a      	add	r2, fp
 8009254:	9209      	str	r2, [sp, #36]	; 0x24
 8009256:	f89a 3000 	ldrb.w	r3, [sl]
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 80a2 	beq.w	80093a4 <_svfiprintf_r+0x1c8>
 8009260:	2300      	movs	r3, #0
 8009262:	f04f 32ff 	mov.w	r2, #4294967295
 8009266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800926a:	f10a 0a01 	add.w	sl, sl, #1
 800926e:	9304      	str	r3, [sp, #16]
 8009270:	9307      	str	r3, [sp, #28]
 8009272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009276:	931a      	str	r3, [sp, #104]	; 0x68
 8009278:	4654      	mov	r4, sl
 800927a:	2205      	movs	r2, #5
 800927c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009280:	4851      	ldr	r0, [pc, #324]	; (80093c8 <_svfiprintf_r+0x1ec>)
 8009282:	f000 fdf5 	bl	8009e70 <memchr>
 8009286:	9a04      	ldr	r2, [sp, #16]
 8009288:	b9d8      	cbnz	r0, 80092c2 <_svfiprintf_r+0xe6>
 800928a:	06d0      	lsls	r0, r2, #27
 800928c:	bf44      	itt	mi
 800928e:	2320      	movmi	r3, #32
 8009290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009294:	0711      	lsls	r1, r2, #28
 8009296:	bf44      	itt	mi
 8009298:	232b      	movmi	r3, #43	; 0x2b
 800929a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800929e:	f89a 3000 	ldrb.w	r3, [sl]
 80092a2:	2b2a      	cmp	r3, #42	; 0x2a
 80092a4:	d015      	beq.n	80092d2 <_svfiprintf_r+0xf6>
 80092a6:	4654      	mov	r4, sl
 80092a8:	2000      	movs	r0, #0
 80092aa:	f04f 0c0a 	mov.w	ip, #10
 80092ae:	9a07      	ldr	r2, [sp, #28]
 80092b0:	4621      	mov	r1, r4
 80092b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092b6:	3b30      	subs	r3, #48	; 0x30
 80092b8:	2b09      	cmp	r3, #9
 80092ba:	d94e      	bls.n	800935a <_svfiprintf_r+0x17e>
 80092bc:	b1b0      	cbz	r0, 80092ec <_svfiprintf_r+0x110>
 80092be:	9207      	str	r2, [sp, #28]
 80092c0:	e014      	b.n	80092ec <_svfiprintf_r+0x110>
 80092c2:	eba0 0308 	sub.w	r3, r0, r8
 80092c6:	fa09 f303 	lsl.w	r3, r9, r3
 80092ca:	4313      	orrs	r3, r2
 80092cc:	46a2      	mov	sl, r4
 80092ce:	9304      	str	r3, [sp, #16]
 80092d0:	e7d2      	b.n	8009278 <_svfiprintf_r+0x9c>
 80092d2:	9b03      	ldr	r3, [sp, #12]
 80092d4:	1d19      	adds	r1, r3, #4
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	9103      	str	r1, [sp, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	bfbb      	ittet	lt
 80092de:	425b      	neglt	r3, r3
 80092e0:	f042 0202 	orrlt.w	r2, r2, #2
 80092e4:	9307      	strge	r3, [sp, #28]
 80092e6:	9307      	strlt	r3, [sp, #28]
 80092e8:	bfb8      	it	lt
 80092ea:	9204      	strlt	r2, [sp, #16]
 80092ec:	7823      	ldrb	r3, [r4, #0]
 80092ee:	2b2e      	cmp	r3, #46	; 0x2e
 80092f0:	d10c      	bne.n	800930c <_svfiprintf_r+0x130>
 80092f2:	7863      	ldrb	r3, [r4, #1]
 80092f4:	2b2a      	cmp	r3, #42	; 0x2a
 80092f6:	d135      	bne.n	8009364 <_svfiprintf_r+0x188>
 80092f8:	9b03      	ldr	r3, [sp, #12]
 80092fa:	3402      	adds	r4, #2
 80092fc:	1d1a      	adds	r2, r3, #4
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	9203      	str	r2, [sp, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	bfb8      	it	lt
 8009306:	f04f 33ff 	movlt.w	r3, #4294967295
 800930a:	9305      	str	r3, [sp, #20]
 800930c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80093cc <_svfiprintf_r+0x1f0>
 8009310:	2203      	movs	r2, #3
 8009312:	4650      	mov	r0, sl
 8009314:	7821      	ldrb	r1, [r4, #0]
 8009316:	f000 fdab 	bl	8009e70 <memchr>
 800931a:	b140      	cbz	r0, 800932e <_svfiprintf_r+0x152>
 800931c:	2340      	movs	r3, #64	; 0x40
 800931e:	eba0 000a 	sub.w	r0, r0, sl
 8009322:	fa03 f000 	lsl.w	r0, r3, r0
 8009326:	9b04      	ldr	r3, [sp, #16]
 8009328:	3401      	adds	r4, #1
 800932a:	4303      	orrs	r3, r0
 800932c:	9304      	str	r3, [sp, #16]
 800932e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009332:	2206      	movs	r2, #6
 8009334:	4826      	ldr	r0, [pc, #152]	; (80093d0 <_svfiprintf_r+0x1f4>)
 8009336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800933a:	f000 fd99 	bl	8009e70 <memchr>
 800933e:	2800      	cmp	r0, #0
 8009340:	d038      	beq.n	80093b4 <_svfiprintf_r+0x1d8>
 8009342:	4b24      	ldr	r3, [pc, #144]	; (80093d4 <_svfiprintf_r+0x1f8>)
 8009344:	bb1b      	cbnz	r3, 800938e <_svfiprintf_r+0x1b2>
 8009346:	9b03      	ldr	r3, [sp, #12]
 8009348:	3307      	adds	r3, #7
 800934a:	f023 0307 	bic.w	r3, r3, #7
 800934e:	3308      	adds	r3, #8
 8009350:	9303      	str	r3, [sp, #12]
 8009352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009354:	4433      	add	r3, r6
 8009356:	9309      	str	r3, [sp, #36]	; 0x24
 8009358:	e767      	b.n	800922a <_svfiprintf_r+0x4e>
 800935a:	460c      	mov	r4, r1
 800935c:	2001      	movs	r0, #1
 800935e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009362:	e7a5      	b.n	80092b0 <_svfiprintf_r+0xd4>
 8009364:	2300      	movs	r3, #0
 8009366:	f04f 0c0a 	mov.w	ip, #10
 800936a:	4619      	mov	r1, r3
 800936c:	3401      	adds	r4, #1
 800936e:	9305      	str	r3, [sp, #20]
 8009370:	4620      	mov	r0, r4
 8009372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009376:	3a30      	subs	r2, #48	; 0x30
 8009378:	2a09      	cmp	r2, #9
 800937a:	d903      	bls.n	8009384 <_svfiprintf_r+0x1a8>
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0c5      	beq.n	800930c <_svfiprintf_r+0x130>
 8009380:	9105      	str	r1, [sp, #20]
 8009382:	e7c3      	b.n	800930c <_svfiprintf_r+0x130>
 8009384:	4604      	mov	r4, r0
 8009386:	2301      	movs	r3, #1
 8009388:	fb0c 2101 	mla	r1, ip, r1, r2
 800938c:	e7f0      	b.n	8009370 <_svfiprintf_r+0x194>
 800938e:	ab03      	add	r3, sp, #12
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	462a      	mov	r2, r5
 8009394:	4638      	mov	r0, r7
 8009396:	4b10      	ldr	r3, [pc, #64]	; (80093d8 <_svfiprintf_r+0x1fc>)
 8009398:	a904      	add	r1, sp, #16
 800939a:	f3af 8000 	nop.w
 800939e:	1c42      	adds	r2, r0, #1
 80093a0:	4606      	mov	r6, r0
 80093a2:	d1d6      	bne.n	8009352 <_svfiprintf_r+0x176>
 80093a4:	89ab      	ldrh	r3, [r5, #12]
 80093a6:	065b      	lsls	r3, r3, #25
 80093a8:	f53f af2c 	bmi.w	8009204 <_svfiprintf_r+0x28>
 80093ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ae:	b01d      	add	sp, #116	; 0x74
 80093b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b4:	ab03      	add	r3, sp, #12
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	462a      	mov	r2, r5
 80093ba:	4638      	mov	r0, r7
 80093bc:	4b06      	ldr	r3, [pc, #24]	; (80093d8 <_svfiprintf_r+0x1fc>)
 80093be:	a904      	add	r1, sp, #16
 80093c0:	f000 f9d4 	bl	800976c <_printf_i>
 80093c4:	e7eb      	b.n	800939e <_svfiprintf_r+0x1c2>
 80093c6:	bf00      	nop
 80093c8:	0800a308 	.word	0x0800a308
 80093cc:	0800a30e 	.word	0x0800a30e
 80093d0:	0800a312 	.word	0x0800a312
 80093d4:	00000000 	.word	0x00000000
 80093d8:	08009125 	.word	0x08009125

080093dc <__sfputc_r>:
 80093dc:	6893      	ldr	r3, [r2, #8]
 80093de:	b410      	push	{r4}
 80093e0:	3b01      	subs	r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	6093      	str	r3, [r2, #8]
 80093e6:	da07      	bge.n	80093f8 <__sfputc_r+0x1c>
 80093e8:	6994      	ldr	r4, [r2, #24]
 80093ea:	42a3      	cmp	r3, r4
 80093ec:	db01      	blt.n	80093f2 <__sfputc_r+0x16>
 80093ee:	290a      	cmp	r1, #10
 80093f0:	d102      	bne.n	80093f8 <__sfputc_r+0x1c>
 80093f2:	bc10      	pop	{r4}
 80093f4:	f000 bb24 	b.w	8009a40 <__swbuf_r>
 80093f8:	6813      	ldr	r3, [r2, #0]
 80093fa:	1c58      	adds	r0, r3, #1
 80093fc:	6010      	str	r0, [r2, #0]
 80093fe:	7019      	strb	r1, [r3, #0]
 8009400:	4608      	mov	r0, r1
 8009402:	bc10      	pop	{r4}
 8009404:	4770      	bx	lr

08009406 <__sfputs_r>:
 8009406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009408:	4606      	mov	r6, r0
 800940a:	460f      	mov	r7, r1
 800940c:	4614      	mov	r4, r2
 800940e:	18d5      	adds	r5, r2, r3
 8009410:	42ac      	cmp	r4, r5
 8009412:	d101      	bne.n	8009418 <__sfputs_r+0x12>
 8009414:	2000      	movs	r0, #0
 8009416:	e007      	b.n	8009428 <__sfputs_r+0x22>
 8009418:	463a      	mov	r2, r7
 800941a:	4630      	mov	r0, r6
 800941c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009420:	f7ff ffdc 	bl	80093dc <__sfputc_r>
 8009424:	1c43      	adds	r3, r0, #1
 8009426:	d1f3      	bne.n	8009410 <__sfputs_r+0xa>
 8009428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800942c <_vfiprintf_r>:
 800942c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009430:	460d      	mov	r5, r1
 8009432:	4614      	mov	r4, r2
 8009434:	4698      	mov	r8, r3
 8009436:	4606      	mov	r6, r0
 8009438:	b09d      	sub	sp, #116	; 0x74
 800943a:	b118      	cbz	r0, 8009444 <_vfiprintf_r+0x18>
 800943c:	6983      	ldr	r3, [r0, #24]
 800943e:	b90b      	cbnz	r3, 8009444 <_vfiprintf_r+0x18>
 8009440:	f7ff fdc4 	bl	8008fcc <__sinit>
 8009444:	4b89      	ldr	r3, [pc, #548]	; (800966c <_vfiprintf_r+0x240>)
 8009446:	429d      	cmp	r5, r3
 8009448:	d11b      	bne.n	8009482 <_vfiprintf_r+0x56>
 800944a:	6875      	ldr	r5, [r6, #4]
 800944c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800944e:	07d9      	lsls	r1, r3, #31
 8009450:	d405      	bmi.n	800945e <_vfiprintf_r+0x32>
 8009452:	89ab      	ldrh	r3, [r5, #12]
 8009454:	059a      	lsls	r2, r3, #22
 8009456:	d402      	bmi.n	800945e <_vfiprintf_r+0x32>
 8009458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800945a:	f7ff fe55 	bl	8009108 <__retarget_lock_acquire_recursive>
 800945e:	89ab      	ldrh	r3, [r5, #12]
 8009460:	071b      	lsls	r3, r3, #28
 8009462:	d501      	bpl.n	8009468 <_vfiprintf_r+0x3c>
 8009464:	692b      	ldr	r3, [r5, #16]
 8009466:	b9eb      	cbnz	r3, 80094a4 <_vfiprintf_r+0x78>
 8009468:	4629      	mov	r1, r5
 800946a:	4630      	mov	r0, r6
 800946c:	f000 fb4c 	bl	8009b08 <__swsetup_r>
 8009470:	b1c0      	cbz	r0, 80094a4 <_vfiprintf_r+0x78>
 8009472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009474:	07dc      	lsls	r4, r3, #31
 8009476:	d50e      	bpl.n	8009496 <_vfiprintf_r+0x6a>
 8009478:	f04f 30ff 	mov.w	r0, #4294967295
 800947c:	b01d      	add	sp, #116	; 0x74
 800947e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009482:	4b7b      	ldr	r3, [pc, #492]	; (8009670 <_vfiprintf_r+0x244>)
 8009484:	429d      	cmp	r5, r3
 8009486:	d101      	bne.n	800948c <_vfiprintf_r+0x60>
 8009488:	68b5      	ldr	r5, [r6, #8]
 800948a:	e7df      	b.n	800944c <_vfiprintf_r+0x20>
 800948c:	4b79      	ldr	r3, [pc, #484]	; (8009674 <_vfiprintf_r+0x248>)
 800948e:	429d      	cmp	r5, r3
 8009490:	bf08      	it	eq
 8009492:	68f5      	ldreq	r5, [r6, #12]
 8009494:	e7da      	b.n	800944c <_vfiprintf_r+0x20>
 8009496:	89ab      	ldrh	r3, [r5, #12]
 8009498:	0598      	lsls	r0, r3, #22
 800949a:	d4ed      	bmi.n	8009478 <_vfiprintf_r+0x4c>
 800949c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800949e:	f7ff fe34 	bl	800910a <__retarget_lock_release_recursive>
 80094a2:	e7e9      	b.n	8009478 <_vfiprintf_r+0x4c>
 80094a4:	2300      	movs	r3, #0
 80094a6:	9309      	str	r3, [sp, #36]	; 0x24
 80094a8:	2320      	movs	r3, #32
 80094aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094ae:	2330      	movs	r3, #48	; 0x30
 80094b0:	f04f 0901 	mov.w	r9, #1
 80094b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80094b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009678 <_vfiprintf_r+0x24c>
 80094bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094c0:	4623      	mov	r3, r4
 80094c2:	469a      	mov	sl, r3
 80094c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094c8:	b10a      	cbz	r2, 80094ce <_vfiprintf_r+0xa2>
 80094ca:	2a25      	cmp	r2, #37	; 0x25
 80094cc:	d1f9      	bne.n	80094c2 <_vfiprintf_r+0x96>
 80094ce:	ebba 0b04 	subs.w	fp, sl, r4
 80094d2:	d00b      	beq.n	80094ec <_vfiprintf_r+0xc0>
 80094d4:	465b      	mov	r3, fp
 80094d6:	4622      	mov	r2, r4
 80094d8:	4629      	mov	r1, r5
 80094da:	4630      	mov	r0, r6
 80094dc:	f7ff ff93 	bl	8009406 <__sfputs_r>
 80094e0:	3001      	adds	r0, #1
 80094e2:	f000 80aa 	beq.w	800963a <_vfiprintf_r+0x20e>
 80094e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094e8:	445a      	add	r2, fp
 80094ea:	9209      	str	r2, [sp, #36]	; 0x24
 80094ec:	f89a 3000 	ldrb.w	r3, [sl]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 80a2 	beq.w	800963a <_vfiprintf_r+0x20e>
 80094f6:	2300      	movs	r3, #0
 80094f8:	f04f 32ff 	mov.w	r2, #4294967295
 80094fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009500:	f10a 0a01 	add.w	sl, sl, #1
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	9307      	str	r3, [sp, #28]
 8009508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800950c:	931a      	str	r3, [sp, #104]	; 0x68
 800950e:	4654      	mov	r4, sl
 8009510:	2205      	movs	r2, #5
 8009512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009516:	4858      	ldr	r0, [pc, #352]	; (8009678 <_vfiprintf_r+0x24c>)
 8009518:	f000 fcaa 	bl	8009e70 <memchr>
 800951c:	9a04      	ldr	r2, [sp, #16]
 800951e:	b9d8      	cbnz	r0, 8009558 <_vfiprintf_r+0x12c>
 8009520:	06d1      	lsls	r1, r2, #27
 8009522:	bf44      	itt	mi
 8009524:	2320      	movmi	r3, #32
 8009526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800952a:	0713      	lsls	r3, r2, #28
 800952c:	bf44      	itt	mi
 800952e:	232b      	movmi	r3, #43	; 0x2b
 8009530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009534:	f89a 3000 	ldrb.w	r3, [sl]
 8009538:	2b2a      	cmp	r3, #42	; 0x2a
 800953a:	d015      	beq.n	8009568 <_vfiprintf_r+0x13c>
 800953c:	4654      	mov	r4, sl
 800953e:	2000      	movs	r0, #0
 8009540:	f04f 0c0a 	mov.w	ip, #10
 8009544:	9a07      	ldr	r2, [sp, #28]
 8009546:	4621      	mov	r1, r4
 8009548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800954c:	3b30      	subs	r3, #48	; 0x30
 800954e:	2b09      	cmp	r3, #9
 8009550:	d94e      	bls.n	80095f0 <_vfiprintf_r+0x1c4>
 8009552:	b1b0      	cbz	r0, 8009582 <_vfiprintf_r+0x156>
 8009554:	9207      	str	r2, [sp, #28]
 8009556:	e014      	b.n	8009582 <_vfiprintf_r+0x156>
 8009558:	eba0 0308 	sub.w	r3, r0, r8
 800955c:	fa09 f303 	lsl.w	r3, r9, r3
 8009560:	4313      	orrs	r3, r2
 8009562:	46a2      	mov	sl, r4
 8009564:	9304      	str	r3, [sp, #16]
 8009566:	e7d2      	b.n	800950e <_vfiprintf_r+0xe2>
 8009568:	9b03      	ldr	r3, [sp, #12]
 800956a:	1d19      	adds	r1, r3, #4
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	9103      	str	r1, [sp, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	bfbb      	ittet	lt
 8009574:	425b      	neglt	r3, r3
 8009576:	f042 0202 	orrlt.w	r2, r2, #2
 800957a:	9307      	strge	r3, [sp, #28]
 800957c:	9307      	strlt	r3, [sp, #28]
 800957e:	bfb8      	it	lt
 8009580:	9204      	strlt	r2, [sp, #16]
 8009582:	7823      	ldrb	r3, [r4, #0]
 8009584:	2b2e      	cmp	r3, #46	; 0x2e
 8009586:	d10c      	bne.n	80095a2 <_vfiprintf_r+0x176>
 8009588:	7863      	ldrb	r3, [r4, #1]
 800958a:	2b2a      	cmp	r3, #42	; 0x2a
 800958c:	d135      	bne.n	80095fa <_vfiprintf_r+0x1ce>
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	3402      	adds	r4, #2
 8009592:	1d1a      	adds	r2, r3, #4
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	9203      	str	r2, [sp, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	bfb8      	it	lt
 800959c:	f04f 33ff 	movlt.w	r3, #4294967295
 80095a0:	9305      	str	r3, [sp, #20]
 80095a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800967c <_vfiprintf_r+0x250>
 80095a6:	2203      	movs	r2, #3
 80095a8:	4650      	mov	r0, sl
 80095aa:	7821      	ldrb	r1, [r4, #0]
 80095ac:	f000 fc60 	bl	8009e70 <memchr>
 80095b0:	b140      	cbz	r0, 80095c4 <_vfiprintf_r+0x198>
 80095b2:	2340      	movs	r3, #64	; 0x40
 80095b4:	eba0 000a 	sub.w	r0, r0, sl
 80095b8:	fa03 f000 	lsl.w	r0, r3, r0
 80095bc:	9b04      	ldr	r3, [sp, #16]
 80095be:	3401      	adds	r4, #1
 80095c0:	4303      	orrs	r3, r0
 80095c2:	9304      	str	r3, [sp, #16]
 80095c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c8:	2206      	movs	r2, #6
 80095ca:	482d      	ldr	r0, [pc, #180]	; (8009680 <_vfiprintf_r+0x254>)
 80095cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095d0:	f000 fc4e 	bl	8009e70 <memchr>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d03f      	beq.n	8009658 <_vfiprintf_r+0x22c>
 80095d8:	4b2a      	ldr	r3, [pc, #168]	; (8009684 <_vfiprintf_r+0x258>)
 80095da:	bb1b      	cbnz	r3, 8009624 <_vfiprintf_r+0x1f8>
 80095dc:	9b03      	ldr	r3, [sp, #12]
 80095de:	3307      	adds	r3, #7
 80095e0:	f023 0307 	bic.w	r3, r3, #7
 80095e4:	3308      	adds	r3, #8
 80095e6:	9303      	str	r3, [sp, #12]
 80095e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ea:	443b      	add	r3, r7
 80095ec:	9309      	str	r3, [sp, #36]	; 0x24
 80095ee:	e767      	b.n	80094c0 <_vfiprintf_r+0x94>
 80095f0:	460c      	mov	r4, r1
 80095f2:	2001      	movs	r0, #1
 80095f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80095f8:	e7a5      	b.n	8009546 <_vfiprintf_r+0x11a>
 80095fa:	2300      	movs	r3, #0
 80095fc:	f04f 0c0a 	mov.w	ip, #10
 8009600:	4619      	mov	r1, r3
 8009602:	3401      	adds	r4, #1
 8009604:	9305      	str	r3, [sp, #20]
 8009606:	4620      	mov	r0, r4
 8009608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800960c:	3a30      	subs	r2, #48	; 0x30
 800960e:	2a09      	cmp	r2, #9
 8009610:	d903      	bls.n	800961a <_vfiprintf_r+0x1ee>
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0c5      	beq.n	80095a2 <_vfiprintf_r+0x176>
 8009616:	9105      	str	r1, [sp, #20]
 8009618:	e7c3      	b.n	80095a2 <_vfiprintf_r+0x176>
 800961a:	4604      	mov	r4, r0
 800961c:	2301      	movs	r3, #1
 800961e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009622:	e7f0      	b.n	8009606 <_vfiprintf_r+0x1da>
 8009624:	ab03      	add	r3, sp, #12
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	462a      	mov	r2, r5
 800962a:	4630      	mov	r0, r6
 800962c:	4b16      	ldr	r3, [pc, #88]	; (8009688 <_vfiprintf_r+0x25c>)
 800962e:	a904      	add	r1, sp, #16
 8009630:	f3af 8000 	nop.w
 8009634:	4607      	mov	r7, r0
 8009636:	1c78      	adds	r0, r7, #1
 8009638:	d1d6      	bne.n	80095e8 <_vfiprintf_r+0x1bc>
 800963a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800963c:	07d9      	lsls	r1, r3, #31
 800963e:	d405      	bmi.n	800964c <_vfiprintf_r+0x220>
 8009640:	89ab      	ldrh	r3, [r5, #12]
 8009642:	059a      	lsls	r2, r3, #22
 8009644:	d402      	bmi.n	800964c <_vfiprintf_r+0x220>
 8009646:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009648:	f7ff fd5f 	bl	800910a <__retarget_lock_release_recursive>
 800964c:	89ab      	ldrh	r3, [r5, #12]
 800964e:	065b      	lsls	r3, r3, #25
 8009650:	f53f af12 	bmi.w	8009478 <_vfiprintf_r+0x4c>
 8009654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009656:	e711      	b.n	800947c <_vfiprintf_r+0x50>
 8009658:	ab03      	add	r3, sp, #12
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	462a      	mov	r2, r5
 800965e:	4630      	mov	r0, r6
 8009660:	4b09      	ldr	r3, [pc, #36]	; (8009688 <_vfiprintf_r+0x25c>)
 8009662:	a904      	add	r1, sp, #16
 8009664:	f000 f882 	bl	800976c <_printf_i>
 8009668:	e7e4      	b.n	8009634 <_vfiprintf_r+0x208>
 800966a:	bf00      	nop
 800966c:	0800a2c8 	.word	0x0800a2c8
 8009670:	0800a2e8 	.word	0x0800a2e8
 8009674:	0800a2a8 	.word	0x0800a2a8
 8009678:	0800a308 	.word	0x0800a308
 800967c:	0800a30e 	.word	0x0800a30e
 8009680:	0800a312 	.word	0x0800a312
 8009684:	00000000 	.word	0x00000000
 8009688:	08009407 	.word	0x08009407

0800968c <_printf_common>:
 800968c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009690:	4616      	mov	r6, r2
 8009692:	4699      	mov	r9, r3
 8009694:	688a      	ldr	r2, [r1, #8]
 8009696:	690b      	ldr	r3, [r1, #16]
 8009698:	4607      	mov	r7, r0
 800969a:	4293      	cmp	r3, r2
 800969c:	bfb8      	it	lt
 800969e:	4613      	movlt	r3, r2
 80096a0:	6033      	str	r3, [r6, #0]
 80096a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096a6:	460c      	mov	r4, r1
 80096a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096ac:	b10a      	cbz	r2, 80096b2 <_printf_common+0x26>
 80096ae:	3301      	adds	r3, #1
 80096b0:	6033      	str	r3, [r6, #0]
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	0699      	lsls	r1, r3, #26
 80096b6:	bf42      	ittt	mi
 80096b8:	6833      	ldrmi	r3, [r6, #0]
 80096ba:	3302      	addmi	r3, #2
 80096bc:	6033      	strmi	r3, [r6, #0]
 80096be:	6825      	ldr	r5, [r4, #0]
 80096c0:	f015 0506 	ands.w	r5, r5, #6
 80096c4:	d106      	bne.n	80096d4 <_printf_common+0x48>
 80096c6:	f104 0a19 	add.w	sl, r4, #25
 80096ca:	68e3      	ldr	r3, [r4, #12]
 80096cc:	6832      	ldr	r2, [r6, #0]
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	42ab      	cmp	r3, r5
 80096d2:	dc28      	bgt.n	8009726 <_printf_common+0x9a>
 80096d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096d8:	1e13      	subs	r3, r2, #0
 80096da:	6822      	ldr	r2, [r4, #0]
 80096dc:	bf18      	it	ne
 80096de:	2301      	movne	r3, #1
 80096e0:	0692      	lsls	r2, r2, #26
 80096e2:	d42d      	bmi.n	8009740 <_printf_common+0xb4>
 80096e4:	4649      	mov	r1, r9
 80096e6:	4638      	mov	r0, r7
 80096e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096ec:	47c0      	blx	r8
 80096ee:	3001      	adds	r0, #1
 80096f0:	d020      	beq.n	8009734 <_printf_common+0xa8>
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	68e5      	ldr	r5, [r4, #12]
 80096f6:	f003 0306 	and.w	r3, r3, #6
 80096fa:	2b04      	cmp	r3, #4
 80096fc:	bf18      	it	ne
 80096fe:	2500      	movne	r5, #0
 8009700:	6832      	ldr	r2, [r6, #0]
 8009702:	f04f 0600 	mov.w	r6, #0
 8009706:	68a3      	ldr	r3, [r4, #8]
 8009708:	bf08      	it	eq
 800970a:	1aad      	subeq	r5, r5, r2
 800970c:	6922      	ldr	r2, [r4, #16]
 800970e:	bf08      	it	eq
 8009710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009714:	4293      	cmp	r3, r2
 8009716:	bfc4      	itt	gt
 8009718:	1a9b      	subgt	r3, r3, r2
 800971a:	18ed      	addgt	r5, r5, r3
 800971c:	341a      	adds	r4, #26
 800971e:	42b5      	cmp	r5, r6
 8009720:	d11a      	bne.n	8009758 <_printf_common+0xcc>
 8009722:	2000      	movs	r0, #0
 8009724:	e008      	b.n	8009738 <_printf_common+0xac>
 8009726:	2301      	movs	r3, #1
 8009728:	4652      	mov	r2, sl
 800972a:	4649      	mov	r1, r9
 800972c:	4638      	mov	r0, r7
 800972e:	47c0      	blx	r8
 8009730:	3001      	adds	r0, #1
 8009732:	d103      	bne.n	800973c <_printf_common+0xb0>
 8009734:	f04f 30ff 	mov.w	r0, #4294967295
 8009738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800973c:	3501      	adds	r5, #1
 800973e:	e7c4      	b.n	80096ca <_printf_common+0x3e>
 8009740:	2030      	movs	r0, #48	; 0x30
 8009742:	18e1      	adds	r1, r4, r3
 8009744:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009748:	1c5a      	adds	r2, r3, #1
 800974a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800974e:	4422      	add	r2, r4
 8009750:	3302      	adds	r3, #2
 8009752:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009756:	e7c5      	b.n	80096e4 <_printf_common+0x58>
 8009758:	2301      	movs	r3, #1
 800975a:	4622      	mov	r2, r4
 800975c:	4649      	mov	r1, r9
 800975e:	4638      	mov	r0, r7
 8009760:	47c0      	blx	r8
 8009762:	3001      	adds	r0, #1
 8009764:	d0e6      	beq.n	8009734 <_printf_common+0xa8>
 8009766:	3601      	adds	r6, #1
 8009768:	e7d9      	b.n	800971e <_printf_common+0x92>
	...

0800976c <_printf_i>:
 800976c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009770:	7e0f      	ldrb	r7, [r1, #24]
 8009772:	4691      	mov	r9, r2
 8009774:	2f78      	cmp	r7, #120	; 0x78
 8009776:	4680      	mov	r8, r0
 8009778:	460c      	mov	r4, r1
 800977a:	469a      	mov	sl, r3
 800977c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800977e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009782:	d807      	bhi.n	8009794 <_printf_i+0x28>
 8009784:	2f62      	cmp	r7, #98	; 0x62
 8009786:	d80a      	bhi.n	800979e <_printf_i+0x32>
 8009788:	2f00      	cmp	r7, #0
 800978a:	f000 80d9 	beq.w	8009940 <_printf_i+0x1d4>
 800978e:	2f58      	cmp	r7, #88	; 0x58
 8009790:	f000 80a4 	beq.w	80098dc <_printf_i+0x170>
 8009794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800979c:	e03a      	b.n	8009814 <_printf_i+0xa8>
 800979e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097a2:	2b15      	cmp	r3, #21
 80097a4:	d8f6      	bhi.n	8009794 <_printf_i+0x28>
 80097a6:	a101      	add	r1, pc, #4	; (adr r1, 80097ac <_printf_i+0x40>)
 80097a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097ac:	08009805 	.word	0x08009805
 80097b0:	08009819 	.word	0x08009819
 80097b4:	08009795 	.word	0x08009795
 80097b8:	08009795 	.word	0x08009795
 80097bc:	08009795 	.word	0x08009795
 80097c0:	08009795 	.word	0x08009795
 80097c4:	08009819 	.word	0x08009819
 80097c8:	08009795 	.word	0x08009795
 80097cc:	08009795 	.word	0x08009795
 80097d0:	08009795 	.word	0x08009795
 80097d4:	08009795 	.word	0x08009795
 80097d8:	08009927 	.word	0x08009927
 80097dc:	08009849 	.word	0x08009849
 80097e0:	08009909 	.word	0x08009909
 80097e4:	08009795 	.word	0x08009795
 80097e8:	08009795 	.word	0x08009795
 80097ec:	08009949 	.word	0x08009949
 80097f0:	08009795 	.word	0x08009795
 80097f4:	08009849 	.word	0x08009849
 80097f8:	08009795 	.word	0x08009795
 80097fc:	08009795 	.word	0x08009795
 8009800:	08009911 	.word	0x08009911
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	1d1a      	adds	r2, r3, #4
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	602a      	str	r2, [r5, #0]
 800980c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009814:	2301      	movs	r3, #1
 8009816:	e0a4      	b.n	8009962 <_printf_i+0x1f6>
 8009818:	6820      	ldr	r0, [r4, #0]
 800981a:	6829      	ldr	r1, [r5, #0]
 800981c:	0606      	lsls	r6, r0, #24
 800981e:	f101 0304 	add.w	r3, r1, #4
 8009822:	d50a      	bpl.n	800983a <_printf_i+0xce>
 8009824:	680e      	ldr	r6, [r1, #0]
 8009826:	602b      	str	r3, [r5, #0]
 8009828:	2e00      	cmp	r6, #0
 800982a:	da03      	bge.n	8009834 <_printf_i+0xc8>
 800982c:	232d      	movs	r3, #45	; 0x2d
 800982e:	4276      	negs	r6, r6
 8009830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009834:	230a      	movs	r3, #10
 8009836:	485e      	ldr	r0, [pc, #376]	; (80099b0 <_printf_i+0x244>)
 8009838:	e019      	b.n	800986e <_printf_i+0x102>
 800983a:	680e      	ldr	r6, [r1, #0]
 800983c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	bf18      	it	ne
 8009844:	b236      	sxthne	r6, r6
 8009846:	e7ef      	b.n	8009828 <_printf_i+0xbc>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	6820      	ldr	r0, [r4, #0]
 800984c:	1d19      	adds	r1, r3, #4
 800984e:	6029      	str	r1, [r5, #0]
 8009850:	0601      	lsls	r1, r0, #24
 8009852:	d501      	bpl.n	8009858 <_printf_i+0xec>
 8009854:	681e      	ldr	r6, [r3, #0]
 8009856:	e002      	b.n	800985e <_printf_i+0xf2>
 8009858:	0646      	lsls	r6, r0, #25
 800985a:	d5fb      	bpl.n	8009854 <_printf_i+0xe8>
 800985c:	881e      	ldrh	r6, [r3, #0]
 800985e:	2f6f      	cmp	r7, #111	; 0x6f
 8009860:	bf0c      	ite	eq
 8009862:	2308      	moveq	r3, #8
 8009864:	230a      	movne	r3, #10
 8009866:	4852      	ldr	r0, [pc, #328]	; (80099b0 <_printf_i+0x244>)
 8009868:	2100      	movs	r1, #0
 800986a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800986e:	6865      	ldr	r5, [r4, #4]
 8009870:	2d00      	cmp	r5, #0
 8009872:	bfa8      	it	ge
 8009874:	6821      	ldrge	r1, [r4, #0]
 8009876:	60a5      	str	r5, [r4, #8]
 8009878:	bfa4      	itt	ge
 800987a:	f021 0104 	bicge.w	r1, r1, #4
 800987e:	6021      	strge	r1, [r4, #0]
 8009880:	b90e      	cbnz	r6, 8009886 <_printf_i+0x11a>
 8009882:	2d00      	cmp	r5, #0
 8009884:	d04d      	beq.n	8009922 <_printf_i+0x1b6>
 8009886:	4615      	mov	r5, r2
 8009888:	fbb6 f1f3 	udiv	r1, r6, r3
 800988c:	fb03 6711 	mls	r7, r3, r1, r6
 8009890:	5dc7      	ldrb	r7, [r0, r7]
 8009892:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009896:	4637      	mov	r7, r6
 8009898:	42bb      	cmp	r3, r7
 800989a:	460e      	mov	r6, r1
 800989c:	d9f4      	bls.n	8009888 <_printf_i+0x11c>
 800989e:	2b08      	cmp	r3, #8
 80098a0:	d10b      	bne.n	80098ba <_printf_i+0x14e>
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	07de      	lsls	r6, r3, #31
 80098a6:	d508      	bpl.n	80098ba <_printf_i+0x14e>
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	6861      	ldr	r1, [r4, #4]
 80098ac:	4299      	cmp	r1, r3
 80098ae:	bfde      	ittt	le
 80098b0:	2330      	movle	r3, #48	; 0x30
 80098b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098ba:	1b52      	subs	r2, r2, r5
 80098bc:	6122      	str	r2, [r4, #16]
 80098be:	464b      	mov	r3, r9
 80098c0:	4621      	mov	r1, r4
 80098c2:	4640      	mov	r0, r8
 80098c4:	f8cd a000 	str.w	sl, [sp]
 80098c8:	aa03      	add	r2, sp, #12
 80098ca:	f7ff fedf 	bl	800968c <_printf_common>
 80098ce:	3001      	adds	r0, #1
 80098d0:	d14c      	bne.n	800996c <_printf_i+0x200>
 80098d2:	f04f 30ff 	mov.w	r0, #4294967295
 80098d6:	b004      	add	sp, #16
 80098d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098dc:	4834      	ldr	r0, [pc, #208]	; (80099b0 <_printf_i+0x244>)
 80098de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098e2:	6829      	ldr	r1, [r5, #0]
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80098ea:	6029      	str	r1, [r5, #0]
 80098ec:	061d      	lsls	r5, r3, #24
 80098ee:	d514      	bpl.n	800991a <_printf_i+0x1ae>
 80098f0:	07df      	lsls	r7, r3, #31
 80098f2:	bf44      	itt	mi
 80098f4:	f043 0320 	orrmi.w	r3, r3, #32
 80098f8:	6023      	strmi	r3, [r4, #0]
 80098fa:	b91e      	cbnz	r6, 8009904 <_printf_i+0x198>
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	f023 0320 	bic.w	r3, r3, #32
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	2310      	movs	r3, #16
 8009906:	e7af      	b.n	8009868 <_printf_i+0xfc>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	f043 0320 	orr.w	r3, r3, #32
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	2378      	movs	r3, #120	; 0x78
 8009912:	4828      	ldr	r0, [pc, #160]	; (80099b4 <_printf_i+0x248>)
 8009914:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009918:	e7e3      	b.n	80098e2 <_printf_i+0x176>
 800991a:	0659      	lsls	r1, r3, #25
 800991c:	bf48      	it	mi
 800991e:	b2b6      	uxthmi	r6, r6
 8009920:	e7e6      	b.n	80098f0 <_printf_i+0x184>
 8009922:	4615      	mov	r5, r2
 8009924:	e7bb      	b.n	800989e <_printf_i+0x132>
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	6826      	ldr	r6, [r4, #0]
 800992a:	1d18      	adds	r0, r3, #4
 800992c:	6961      	ldr	r1, [r4, #20]
 800992e:	6028      	str	r0, [r5, #0]
 8009930:	0635      	lsls	r5, r6, #24
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	d501      	bpl.n	800993a <_printf_i+0x1ce>
 8009936:	6019      	str	r1, [r3, #0]
 8009938:	e002      	b.n	8009940 <_printf_i+0x1d4>
 800993a:	0670      	lsls	r0, r6, #25
 800993c:	d5fb      	bpl.n	8009936 <_printf_i+0x1ca>
 800993e:	8019      	strh	r1, [r3, #0]
 8009940:	2300      	movs	r3, #0
 8009942:	4615      	mov	r5, r2
 8009944:	6123      	str	r3, [r4, #16]
 8009946:	e7ba      	b.n	80098be <_printf_i+0x152>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	2100      	movs	r1, #0
 800994c:	1d1a      	adds	r2, r3, #4
 800994e:	602a      	str	r2, [r5, #0]
 8009950:	681d      	ldr	r5, [r3, #0]
 8009952:	6862      	ldr	r2, [r4, #4]
 8009954:	4628      	mov	r0, r5
 8009956:	f000 fa8b 	bl	8009e70 <memchr>
 800995a:	b108      	cbz	r0, 8009960 <_printf_i+0x1f4>
 800995c:	1b40      	subs	r0, r0, r5
 800995e:	6060      	str	r0, [r4, #4]
 8009960:	6863      	ldr	r3, [r4, #4]
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	2300      	movs	r3, #0
 8009966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800996a:	e7a8      	b.n	80098be <_printf_i+0x152>
 800996c:	462a      	mov	r2, r5
 800996e:	4649      	mov	r1, r9
 8009970:	4640      	mov	r0, r8
 8009972:	6923      	ldr	r3, [r4, #16]
 8009974:	47d0      	blx	sl
 8009976:	3001      	adds	r0, #1
 8009978:	d0ab      	beq.n	80098d2 <_printf_i+0x166>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	079b      	lsls	r3, r3, #30
 800997e:	d413      	bmi.n	80099a8 <_printf_i+0x23c>
 8009980:	68e0      	ldr	r0, [r4, #12]
 8009982:	9b03      	ldr	r3, [sp, #12]
 8009984:	4298      	cmp	r0, r3
 8009986:	bfb8      	it	lt
 8009988:	4618      	movlt	r0, r3
 800998a:	e7a4      	b.n	80098d6 <_printf_i+0x16a>
 800998c:	2301      	movs	r3, #1
 800998e:	4632      	mov	r2, r6
 8009990:	4649      	mov	r1, r9
 8009992:	4640      	mov	r0, r8
 8009994:	47d0      	blx	sl
 8009996:	3001      	adds	r0, #1
 8009998:	d09b      	beq.n	80098d2 <_printf_i+0x166>
 800999a:	3501      	adds	r5, #1
 800999c:	68e3      	ldr	r3, [r4, #12]
 800999e:	9903      	ldr	r1, [sp, #12]
 80099a0:	1a5b      	subs	r3, r3, r1
 80099a2:	42ab      	cmp	r3, r5
 80099a4:	dcf2      	bgt.n	800998c <_printf_i+0x220>
 80099a6:	e7eb      	b.n	8009980 <_printf_i+0x214>
 80099a8:	2500      	movs	r5, #0
 80099aa:	f104 0619 	add.w	r6, r4, #25
 80099ae:	e7f5      	b.n	800999c <_printf_i+0x230>
 80099b0:	0800a319 	.word	0x0800a319
 80099b4:	0800a32a 	.word	0x0800a32a

080099b8 <__sread>:
 80099b8:	b510      	push	{r4, lr}
 80099ba:	460c      	mov	r4, r1
 80099bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c0:	f000 fabc 	bl	8009f3c <_read_r>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	bfab      	itete	ge
 80099c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099ca:	89a3      	ldrhlt	r3, [r4, #12]
 80099cc:	181b      	addge	r3, r3, r0
 80099ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099d2:	bfac      	ite	ge
 80099d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80099d6:	81a3      	strhlt	r3, [r4, #12]
 80099d8:	bd10      	pop	{r4, pc}

080099da <__swrite>:
 80099da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099de:	461f      	mov	r7, r3
 80099e0:	898b      	ldrh	r3, [r1, #12]
 80099e2:	4605      	mov	r5, r0
 80099e4:	05db      	lsls	r3, r3, #23
 80099e6:	460c      	mov	r4, r1
 80099e8:	4616      	mov	r6, r2
 80099ea:	d505      	bpl.n	80099f8 <__swrite+0x1e>
 80099ec:	2302      	movs	r3, #2
 80099ee:	2200      	movs	r2, #0
 80099f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f4:	f000 f9c4 	bl	8009d80 <_lseek_r>
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	4632      	mov	r2, r6
 80099fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a00:	81a3      	strh	r3, [r4, #12]
 8009a02:	4628      	mov	r0, r5
 8009a04:	463b      	mov	r3, r7
 8009a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a0e:	f000 b869 	b.w	8009ae4 <_write_r>

08009a12 <__sseek>:
 8009a12:	b510      	push	{r4, lr}
 8009a14:	460c      	mov	r4, r1
 8009a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a1a:	f000 f9b1 	bl	8009d80 <_lseek_r>
 8009a1e:	1c43      	adds	r3, r0, #1
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	bf15      	itete	ne
 8009a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a2e:	81a3      	strheq	r3, [r4, #12]
 8009a30:	bf18      	it	ne
 8009a32:	81a3      	strhne	r3, [r4, #12]
 8009a34:	bd10      	pop	{r4, pc}

08009a36 <__sclose>:
 8009a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3a:	f000 b8d3 	b.w	8009be4 <_close_r>
	...

08009a40 <__swbuf_r>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	460e      	mov	r6, r1
 8009a44:	4614      	mov	r4, r2
 8009a46:	4605      	mov	r5, r0
 8009a48:	b118      	cbz	r0, 8009a52 <__swbuf_r+0x12>
 8009a4a:	6983      	ldr	r3, [r0, #24]
 8009a4c:	b90b      	cbnz	r3, 8009a52 <__swbuf_r+0x12>
 8009a4e:	f7ff fabd 	bl	8008fcc <__sinit>
 8009a52:	4b21      	ldr	r3, [pc, #132]	; (8009ad8 <__swbuf_r+0x98>)
 8009a54:	429c      	cmp	r4, r3
 8009a56:	d12b      	bne.n	8009ab0 <__swbuf_r+0x70>
 8009a58:	686c      	ldr	r4, [r5, #4]
 8009a5a:	69a3      	ldr	r3, [r4, #24]
 8009a5c:	60a3      	str	r3, [r4, #8]
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	071a      	lsls	r2, r3, #28
 8009a62:	d52f      	bpl.n	8009ac4 <__swbuf_r+0x84>
 8009a64:	6923      	ldr	r3, [r4, #16]
 8009a66:	b36b      	cbz	r3, 8009ac4 <__swbuf_r+0x84>
 8009a68:	6923      	ldr	r3, [r4, #16]
 8009a6a:	6820      	ldr	r0, [r4, #0]
 8009a6c:	b2f6      	uxtb	r6, r6
 8009a6e:	1ac0      	subs	r0, r0, r3
 8009a70:	6963      	ldr	r3, [r4, #20]
 8009a72:	4637      	mov	r7, r6
 8009a74:	4283      	cmp	r3, r0
 8009a76:	dc04      	bgt.n	8009a82 <__swbuf_r+0x42>
 8009a78:	4621      	mov	r1, r4
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f000 f944 	bl	8009d08 <_fflush_r>
 8009a80:	bb30      	cbnz	r0, 8009ad0 <__swbuf_r+0x90>
 8009a82:	68a3      	ldr	r3, [r4, #8]
 8009a84:	3001      	adds	r0, #1
 8009a86:	3b01      	subs	r3, #1
 8009a88:	60a3      	str	r3, [r4, #8]
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	6022      	str	r2, [r4, #0]
 8009a90:	701e      	strb	r6, [r3, #0]
 8009a92:	6963      	ldr	r3, [r4, #20]
 8009a94:	4283      	cmp	r3, r0
 8009a96:	d004      	beq.n	8009aa2 <__swbuf_r+0x62>
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	07db      	lsls	r3, r3, #31
 8009a9c:	d506      	bpl.n	8009aac <__swbuf_r+0x6c>
 8009a9e:	2e0a      	cmp	r6, #10
 8009aa0:	d104      	bne.n	8009aac <__swbuf_r+0x6c>
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 f92f 	bl	8009d08 <_fflush_r>
 8009aaa:	b988      	cbnz	r0, 8009ad0 <__swbuf_r+0x90>
 8009aac:	4638      	mov	r0, r7
 8009aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab0:	4b0a      	ldr	r3, [pc, #40]	; (8009adc <__swbuf_r+0x9c>)
 8009ab2:	429c      	cmp	r4, r3
 8009ab4:	d101      	bne.n	8009aba <__swbuf_r+0x7a>
 8009ab6:	68ac      	ldr	r4, [r5, #8]
 8009ab8:	e7cf      	b.n	8009a5a <__swbuf_r+0x1a>
 8009aba:	4b09      	ldr	r3, [pc, #36]	; (8009ae0 <__swbuf_r+0xa0>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	bf08      	it	eq
 8009ac0:	68ec      	ldreq	r4, [r5, #12]
 8009ac2:	e7ca      	b.n	8009a5a <__swbuf_r+0x1a>
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f000 f81e 	bl	8009b08 <__swsetup_r>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d0cb      	beq.n	8009a68 <__swbuf_r+0x28>
 8009ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ad4:	e7ea      	b.n	8009aac <__swbuf_r+0x6c>
 8009ad6:	bf00      	nop
 8009ad8:	0800a2c8 	.word	0x0800a2c8
 8009adc:	0800a2e8 	.word	0x0800a2e8
 8009ae0:	0800a2a8 	.word	0x0800a2a8

08009ae4 <_write_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	4608      	mov	r0, r1
 8009aea:	4611      	mov	r1, r2
 8009aec:	2200      	movs	r2, #0
 8009aee:	4d05      	ldr	r5, [pc, #20]	; (8009b04 <_write_r+0x20>)
 8009af0:	602a      	str	r2, [r5, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	f7f6 fb58 	bl	80001a8 <_write>
 8009af8:	1c43      	adds	r3, r0, #1
 8009afa:	d102      	bne.n	8009b02 <_write_r+0x1e>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	b103      	cbz	r3, 8009b02 <_write_r+0x1e>
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	20001478 	.word	0x20001478

08009b08 <__swsetup_r>:
 8009b08:	4b32      	ldr	r3, [pc, #200]	; (8009bd4 <__swsetup_r+0xcc>)
 8009b0a:	b570      	push	{r4, r5, r6, lr}
 8009b0c:	681d      	ldr	r5, [r3, #0]
 8009b0e:	4606      	mov	r6, r0
 8009b10:	460c      	mov	r4, r1
 8009b12:	b125      	cbz	r5, 8009b1e <__swsetup_r+0x16>
 8009b14:	69ab      	ldr	r3, [r5, #24]
 8009b16:	b913      	cbnz	r3, 8009b1e <__swsetup_r+0x16>
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f7ff fa57 	bl	8008fcc <__sinit>
 8009b1e:	4b2e      	ldr	r3, [pc, #184]	; (8009bd8 <__swsetup_r+0xd0>)
 8009b20:	429c      	cmp	r4, r3
 8009b22:	d10f      	bne.n	8009b44 <__swsetup_r+0x3c>
 8009b24:	686c      	ldr	r4, [r5, #4]
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b2c:	0719      	lsls	r1, r3, #28
 8009b2e:	d42c      	bmi.n	8009b8a <__swsetup_r+0x82>
 8009b30:	06dd      	lsls	r5, r3, #27
 8009b32:	d411      	bmi.n	8009b58 <__swsetup_r+0x50>
 8009b34:	2309      	movs	r3, #9
 8009b36:	6033      	str	r3, [r6, #0]
 8009b38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b40:	81a3      	strh	r3, [r4, #12]
 8009b42:	e03e      	b.n	8009bc2 <__swsetup_r+0xba>
 8009b44:	4b25      	ldr	r3, [pc, #148]	; (8009bdc <__swsetup_r+0xd4>)
 8009b46:	429c      	cmp	r4, r3
 8009b48:	d101      	bne.n	8009b4e <__swsetup_r+0x46>
 8009b4a:	68ac      	ldr	r4, [r5, #8]
 8009b4c:	e7eb      	b.n	8009b26 <__swsetup_r+0x1e>
 8009b4e:	4b24      	ldr	r3, [pc, #144]	; (8009be0 <__swsetup_r+0xd8>)
 8009b50:	429c      	cmp	r4, r3
 8009b52:	bf08      	it	eq
 8009b54:	68ec      	ldreq	r4, [r5, #12]
 8009b56:	e7e6      	b.n	8009b26 <__swsetup_r+0x1e>
 8009b58:	0758      	lsls	r0, r3, #29
 8009b5a:	d512      	bpl.n	8009b82 <__swsetup_r+0x7a>
 8009b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b5e:	b141      	cbz	r1, 8009b72 <__swsetup_r+0x6a>
 8009b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b64:	4299      	cmp	r1, r3
 8009b66:	d002      	beq.n	8009b6e <__swsetup_r+0x66>
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7ff f8ab 	bl	8008cc4 <_free_r>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	6363      	str	r3, [r4, #52]	; 0x34
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b78:	81a3      	strh	r3, [r4, #12]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	6063      	str	r3, [r4, #4]
 8009b7e:	6923      	ldr	r3, [r4, #16]
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	f043 0308 	orr.w	r3, r3, #8
 8009b88:	81a3      	strh	r3, [r4, #12]
 8009b8a:	6923      	ldr	r3, [r4, #16]
 8009b8c:	b94b      	cbnz	r3, 8009ba2 <__swsetup_r+0x9a>
 8009b8e:	89a3      	ldrh	r3, [r4, #12]
 8009b90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b98:	d003      	beq.n	8009ba2 <__swsetup_r+0x9a>
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f000 f927 	bl	8009df0 <__smakebuf_r>
 8009ba2:	89a0      	ldrh	r0, [r4, #12]
 8009ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ba8:	f010 0301 	ands.w	r3, r0, #1
 8009bac:	d00a      	beq.n	8009bc4 <__swsetup_r+0xbc>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60a3      	str	r3, [r4, #8]
 8009bb2:	6963      	ldr	r3, [r4, #20]
 8009bb4:	425b      	negs	r3, r3
 8009bb6:	61a3      	str	r3, [r4, #24]
 8009bb8:	6923      	ldr	r3, [r4, #16]
 8009bba:	b943      	cbnz	r3, 8009bce <__swsetup_r+0xc6>
 8009bbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bc0:	d1ba      	bne.n	8009b38 <__swsetup_r+0x30>
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
 8009bc4:	0781      	lsls	r1, r0, #30
 8009bc6:	bf58      	it	pl
 8009bc8:	6963      	ldrpl	r3, [r4, #20]
 8009bca:	60a3      	str	r3, [r4, #8]
 8009bcc:	e7f4      	b.n	8009bb8 <__swsetup_r+0xb0>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	e7f7      	b.n	8009bc2 <__swsetup_r+0xba>
 8009bd2:	bf00      	nop
 8009bd4:	2000017c 	.word	0x2000017c
 8009bd8:	0800a2c8 	.word	0x0800a2c8
 8009bdc:	0800a2e8 	.word	0x0800a2e8
 8009be0:	0800a2a8 	.word	0x0800a2a8

08009be4 <_close_r>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	2300      	movs	r3, #0
 8009be8:	4d05      	ldr	r5, [pc, #20]	; (8009c00 <_close_r+0x1c>)
 8009bea:	4604      	mov	r4, r0
 8009bec:	4608      	mov	r0, r1
 8009bee:	602b      	str	r3, [r5, #0]
 8009bf0:	f7f6 ff27 	bl	8000a42 <_close>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	d102      	bne.n	8009bfe <_close_r+0x1a>
 8009bf8:	682b      	ldr	r3, [r5, #0]
 8009bfa:	b103      	cbz	r3, 8009bfe <_close_r+0x1a>
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
 8009c00:	20001478 	.word	0x20001478

08009c04 <__sflush_r>:
 8009c04:	898a      	ldrh	r2, [r1, #12]
 8009c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c08:	4605      	mov	r5, r0
 8009c0a:	0710      	lsls	r0, r2, #28
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	d457      	bmi.n	8009cc0 <__sflush_r+0xbc>
 8009c10:	684b      	ldr	r3, [r1, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	dc04      	bgt.n	8009c20 <__sflush_r+0x1c>
 8009c16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	dc01      	bgt.n	8009c20 <__sflush_r+0x1c>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c22:	2e00      	cmp	r6, #0
 8009c24:	d0fa      	beq.n	8009c1c <__sflush_r+0x18>
 8009c26:	2300      	movs	r3, #0
 8009c28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c2c:	682f      	ldr	r7, [r5, #0]
 8009c2e:	602b      	str	r3, [r5, #0]
 8009c30:	d032      	beq.n	8009c98 <__sflush_r+0x94>
 8009c32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	075a      	lsls	r2, r3, #29
 8009c38:	d505      	bpl.n	8009c46 <__sflush_r+0x42>
 8009c3a:	6863      	ldr	r3, [r4, #4]
 8009c3c:	1ac0      	subs	r0, r0, r3
 8009c3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c40:	b10b      	cbz	r3, 8009c46 <__sflush_r+0x42>
 8009c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c44:	1ac0      	subs	r0, r0, r3
 8009c46:	2300      	movs	r3, #0
 8009c48:	4602      	mov	r2, r0
 8009c4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	6a21      	ldr	r1, [r4, #32]
 8009c50:	47b0      	blx	r6
 8009c52:	1c43      	adds	r3, r0, #1
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	d106      	bne.n	8009c66 <__sflush_r+0x62>
 8009c58:	6829      	ldr	r1, [r5, #0]
 8009c5a:	291d      	cmp	r1, #29
 8009c5c:	d82c      	bhi.n	8009cb8 <__sflush_r+0xb4>
 8009c5e:	4a29      	ldr	r2, [pc, #164]	; (8009d04 <__sflush_r+0x100>)
 8009c60:	40ca      	lsrs	r2, r1
 8009c62:	07d6      	lsls	r6, r2, #31
 8009c64:	d528      	bpl.n	8009cb8 <__sflush_r+0xb4>
 8009c66:	2200      	movs	r2, #0
 8009c68:	6062      	str	r2, [r4, #4]
 8009c6a:	6922      	ldr	r2, [r4, #16]
 8009c6c:	04d9      	lsls	r1, r3, #19
 8009c6e:	6022      	str	r2, [r4, #0]
 8009c70:	d504      	bpl.n	8009c7c <__sflush_r+0x78>
 8009c72:	1c42      	adds	r2, r0, #1
 8009c74:	d101      	bne.n	8009c7a <__sflush_r+0x76>
 8009c76:	682b      	ldr	r3, [r5, #0]
 8009c78:	b903      	cbnz	r3, 8009c7c <__sflush_r+0x78>
 8009c7a:	6560      	str	r0, [r4, #84]	; 0x54
 8009c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c7e:	602f      	str	r7, [r5, #0]
 8009c80:	2900      	cmp	r1, #0
 8009c82:	d0cb      	beq.n	8009c1c <__sflush_r+0x18>
 8009c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c88:	4299      	cmp	r1, r3
 8009c8a:	d002      	beq.n	8009c92 <__sflush_r+0x8e>
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f7ff f819 	bl	8008cc4 <_free_r>
 8009c92:	2000      	movs	r0, #0
 8009c94:	6360      	str	r0, [r4, #52]	; 0x34
 8009c96:	e7c2      	b.n	8009c1e <__sflush_r+0x1a>
 8009c98:	6a21      	ldr	r1, [r4, #32]
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b0      	blx	r6
 8009ca0:	1c41      	adds	r1, r0, #1
 8009ca2:	d1c7      	bne.n	8009c34 <__sflush_r+0x30>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d0c4      	beq.n	8009c34 <__sflush_r+0x30>
 8009caa:	2b1d      	cmp	r3, #29
 8009cac:	d001      	beq.n	8009cb2 <__sflush_r+0xae>
 8009cae:	2b16      	cmp	r3, #22
 8009cb0:	d101      	bne.n	8009cb6 <__sflush_r+0xb2>
 8009cb2:	602f      	str	r7, [r5, #0]
 8009cb4:	e7b2      	b.n	8009c1c <__sflush_r+0x18>
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	e7ae      	b.n	8009c1e <__sflush_r+0x1a>
 8009cc0:	690f      	ldr	r7, [r1, #16]
 8009cc2:	2f00      	cmp	r7, #0
 8009cc4:	d0aa      	beq.n	8009c1c <__sflush_r+0x18>
 8009cc6:	0793      	lsls	r3, r2, #30
 8009cc8:	bf18      	it	ne
 8009cca:	2300      	movne	r3, #0
 8009ccc:	680e      	ldr	r6, [r1, #0]
 8009cce:	bf08      	it	eq
 8009cd0:	694b      	ldreq	r3, [r1, #20]
 8009cd2:	1bf6      	subs	r6, r6, r7
 8009cd4:	600f      	str	r7, [r1, #0]
 8009cd6:	608b      	str	r3, [r1, #8]
 8009cd8:	2e00      	cmp	r6, #0
 8009cda:	dd9f      	ble.n	8009c1c <__sflush_r+0x18>
 8009cdc:	4633      	mov	r3, r6
 8009cde:	463a      	mov	r2, r7
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	6a21      	ldr	r1, [r4, #32]
 8009ce4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009ce8:	47e0      	blx	ip
 8009cea:	2800      	cmp	r0, #0
 8009cec:	dc06      	bgt.n	8009cfc <__sflush_r+0xf8>
 8009cee:	89a3      	ldrh	r3, [r4, #12]
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cf8:	81a3      	strh	r3, [r4, #12]
 8009cfa:	e790      	b.n	8009c1e <__sflush_r+0x1a>
 8009cfc:	4407      	add	r7, r0
 8009cfe:	1a36      	subs	r6, r6, r0
 8009d00:	e7ea      	b.n	8009cd8 <__sflush_r+0xd4>
 8009d02:	bf00      	nop
 8009d04:	20400001 	.word	0x20400001

08009d08 <_fflush_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	690b      	ldr	r3, [r1, #16]
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	460c      	mov	r4, r1
 8009d10:	b913      	cbnz	r3, 8009d18 <_fflush_r+0x10>
 8009d12:	2500      	movs	r5, #0
 8009d14:	4628      	mov	r0, r5
 8009d16:	bd38      	pop	{r3, r4, r5, pc}
 8009d18:	b118      	cbz	r0, 8009d22 <_fflush_r+0x1a>
 8009d1a:	6983      	ldr	r3, [r0, #24]
 8009d1c:	b90b      	cbnz	r3, 8009d22 <_fflush_r+0x1a>
 8009d1e:	f7ff f955 	bl	8008fcc <__sinit>
 8009d22:	4b14      	ldr	r3, [pc, #80]	; (8009d74 <_fflush_r+0x6c>)
 8009d24:	429c      	cmp	r4, r3
 8009d26:	d11b      	bne.n	8009d60 <_fflush_r+0x58>
 8009d28:	686c      	ldr	r4, [r5, #4]
 8009d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d0ef      	beq.n	8009d12 <_fflush_r+0xa>
 8009d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d34:	07d0      	lsls	r0, r2, #31
 8009d36:	d404      	bmi.n	8009d42 <_fflush_r+0x3a>
 8009d38:	0599      	lsls	r1, r3, #22
 8009d3a:	d402      	bmi.n	8009d42 <_fflush_r+0x3a>
 8009d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d3e:	f7ff f9e3 	bl	8009108 <__retarget_lock_acquire_recursive>
 8009d42:	4628      	mov	r0, r5
 8009d44:	4621      	mov	r1, r4
 8009d46:	f7ff ff5d 	bl	8009c04 <__sflush_r>
 8009d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d4c:	4605      	mov	r5, r0
 8009d4e:	07da      	lsls	r2, r3, #31
 8009d50:	d4e0      	bmi.n	8009d14 <_fflush_r+0xc>
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	059b      	lsls	r3, r3, #22
 8009d56:	d4dd      	bmi.n	8009d14 <_fflush_r+0xc>
 8009d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d5a:	f7ff f9d6 	bl	800910a <__retarget_lock_release_recursive>
 8009d5e:	e7d9      	b.n	8009d14 <_fflush_r+0xc>
 8009d60:	4b05      	ldr	r3, [pc, #20]	; (8009d78 <_fflush_r+0x70>)
 8009d62:	429c      	cmp	r4, r3
 8009d64:	d101      	bne.n	8009d6a <_fflush_r+0x62>
 8009d66:	68ac      	ldr	r4, [r5, #8]
 8009d68:	e7df      	b.n	8009d2a <_fflush_r+0x22>
 8009d6a:	4b04      	ldr	r3, [pc, #16]	; (8009d7c <_fflush_r+0x74>)
 8009d6c:	429c      	cmp	r4, r3
 8009d6e:	bf08      	it	eq
 8009d70:	68ec      	ldreq	r4, [r5, #12]
 8009d72:	e7da      	b.n	8009d2a <_fflush_r+0x22>
 8009d74:	0800a2c8 	.word	0x0800a2c8
 8009d78:	0800a2e8 	.word	0x0800a2e8
 8009d7c:	0800a2a8 	.word	0x0800a2a8

08009d80 <_lseek_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	4611      	mov	r1, r2
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4d05      	ldr	r5, [pc, #20]	; (8009da0 <_lseek_r+0x20>)
 8009d8c:	602a      	str	r2, [r5, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f7f6 fe7b 	bl	8000a8a <_lseek>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_lseek_r+0x1e>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_lseek_r+0x1e>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	20001478 	.word	0x20001478

08009da4 <__swhatbuf_r>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	460e      	mov	r6, r1
 8009da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dac:	4614      	mov	r4, r2
 8009dae:	2900      	cmp	r1, #0
 8009db0:	461d      	mov	r5, r3
 8009db2:	b096      	sub	sp, #88	; 0x58
 8009db4:	da08      	bge.n	8009dc8 <__swhatbuf_r+0x24>
 8009db6:	2200      	movs	r2, #0
 8009db8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009dbc:	602a      	str	r2, [r5, #0]
 8009dbe:	061a      	lsls	r2, r3, #24
 8009dc0:	d410      	bmi.n	8009de4 <__swhatbuf_r+0x40>
 8009dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dc6:	e00e      	b.n	8009de6 <__swhatbuf_r+0x42>
 8009dc8:	466a      	mov	r2, sp
 8009dca:	f000 f8c9 	bl	8009f60 <_fstat_r>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	dbf1      	blt.n	8009db6 <__swhatbuf_r+0x12>
 8009dd2:	9a01      	ldr	r2, [sp, #4]
 8009dd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ddc:	425a      	negs	r2, r3
 8009dde:	415a      	adcs	r2, r3
 8009de0:	602a      	str	r2, [r5, #0]
 8009de2:	e7ee      	b.n	8009dc2 <__swhatbuf_r+0x1e>
 8009de4:	2340      	movs	r3, #64	; 0x40
 8009de6:	2000      	movs	r0, #0
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	b016      	add	sp, #88	; 0x58
 8009dec:	bd70      	pop	{r4, r5, r6, pc}
	...

08009df0 <__smakebuf_r>:
 8009df0:	898b      	ldrh	r3, [r1, #12]
 8009df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009df4:	079d      	lsls	r5, r3, #30
 8009df6:	4606      	mov	r6, r0
 8009df8:	460c      	mov	r4, r1
 8009dfa:	d507      	bpl.n	8009e0c <__smakebuf_r+0x1c>
 8009dfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	6123      	str	r3, [r4, #16]
 8009e04:	2301      	movs	r3, #1
 8009e06:	6163      	str	r3, [r4, #20]
 8009e08:	b002      	add	sp, #8
 8009e0a:	bd70      	pop	{r4, r5, r6, pc}
 8009e0c:	466a      	mov	r2, sp
 8009e0e:	ab01      	add	r3, sp, #4
 8009e10:	f7ff ffc8 	bl	8009da4 <__swhatbuf_r>
 8009e14:	9900      	ldr	r1, [sp, #0]
 8009e16:	4605      	mov	r5, r0
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f7fe ffbb 	bl	8008d94 <_malloc_r>
 8009e1e:	b948      	cbnz	r0, 8009e34 <__smakebuf_r+0x44>
 8009e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e24:	059a      	lsls	r2, r3, #22
 8009e26:	d4ef      	bmi.n	8009e08 <__smakebuf_r+0x18>
 8009e28:	f023 0303 	bic.w	r3, r3, #3
 8009e2c:	f043 0302 	orr.w	r3, r3, #2
 8009e30:	81a3      	strh	r3, [r4, #12]
 8009e32:	e7e3      	b.n	8009dfc <__smakebuf_r+0xc>
 8009e34:	4b0d      	ldr	r3, [pc, #52]	; (8009e6c <__smakebuf_r+0x7c>)
 8009e36:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	6020      	str	r0, [r4, #0]
 8009e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e40:	81a3      	strh	r3, [r4, #12]
 8009e42:	9b00      	ldr	r3, [sp, #0]
 8009e44:	6120      	str	r0, [r4, #16]
 8009e46:	6163      	str	r3, [r4, #20]
 8009e48:	9b01      	ldr	r3, [sp, #4]
 8009e4a:	b15b      	cbz	r3, 8009e64 <__smakebuf_r+0x74>
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e52:	f000 f897 	bl	8009f84 <_isatty_r>
 8009e56:	b128      	cbz	r0, 8009e64 <__smakebuf_r+0x74>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f023 0303 	bic.w	r3, r3, #3
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	89a0      	ldrh	r0, [r4, #12]
 8009e66:	4305      	orrs	r5, r0
 8009e68:	81a5      	strh	r5, [r4, #12]
 8009e6a:	e7cd      	b.n	8009e08 <__smakebuf_r+0x18>
 8009e6c:	08008f65 	.word	0x08008f65

08009e70 <memchr>:
 8009e70:	4603      	mov	r3, r0
 8009e72:	b510      	push	{r4, lr}
 8009e74:	b2c9      	uxtb	r1, r1
 8009e76:	4402      	add	r2, r0
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	d101      	bne.n	8009e82 <memchr+0x12>
 8009e7e:	2000      	movs	r0, #0
 8009e80:	e003      	b.n	8009e8a <memchr+0x1a>
 8009e82:	7804      	ldrb	r4, [r0, #0]
 8009e84:	3301      	adds	r3, #1
 8009e86:	428c      	cmp	r4, r1
 8009e88:	d1f6      	bne.n	8009e78 <memchr+0x8>
 8009e8a:	bd10      	pop	{r4, pc}

08009e8c <memcpy>:
 8009e8c:	440a      	add	r2, r1
 8009e8e:	4291      	cmp	r1, r2
 8009e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e94:	d100      	bne.n	8009e98 <memcpy+0xc>
 8009e96:	4770      	bx	lr
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e9e:	4291      	cmp	r1, r2
 8009ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ea4:	d1f9      	bne.n	8009e9a <memcpy+0xe>
 8009ea6:	bd10      	pop	{r4, pc}

08009ea8 <memmove>:
 8009ea8:	4288      	cmp	r0, r1
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	eb01 0402 	add.w	r4, r1, r2
 8009eb0:	d902      	bls.n	8009eb8 <memmove+0x10>
 8009eb2:	4284      	cmp	r4, r0
 8009eb4:	4623      	mov	r3, r4
 8009eb6:	d807      	bhi.n	8009ec8 <memmove+0x20>
 8009eb8:	1e43      	subs	r3, r0, #1
 8009eba:	42a1      	cmp	r1, r4
 8009ebc:	d008      	beq.n	8009ed0 <memmove+0x28>
 8009ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ec6:	e7f8      	b.n	8009eba <memmove+0x12>
 8009ec8:	4601      	mov	r1, r0
 8009eca:	4402      	add	r2, r0
 8009ecc:	428a      	cmp	r2, r1
 8009ece:	d100      	bne.n	8009ed2 <memmove+0x2a>
 8009ed0:	bd10      	pop	{r4, pc}
 8009ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eda:	e7f7      	b.n	8009ecc <memmove+0x24>

08009edc <_realloc_r>:
 8009edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee0:	4680      	mov	r8, r0
 8009ee2:	4614      	mov	r4, r2
 8009ee4:	460e      	mov	r6, r1
 8009ee6:	b921      	cbnz	r1, 8009ef2 <_realloc_r+0x16>
 8009ee8:	4611      	mov	r1, r2
 8009eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eee:	f7fe bf51 	b.w	8008d94 <_malloc_r>
 8009ef2:	b92a      	cbnz	r2, 8009f00 <_realloc_r+0x24>
 8009ef4:	f7fe fee6 	bl	8008cc4 <_free_r>
 8009ef8:	4625      	mov	r5, r4
 8009efa:	4628      	mov	r0, r5
 8009efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f00:	f000 f850 	bl	8009fa4 <_malloc_usable_size_r>
 8009f04:	4284      	cmp	r4, r0
 8009f06:	4607      	mov	r7, r0
 8009f08:	d802      	bhi.n	8009f10 <_realloc_r+0x34>
 8009f0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f0e:	d812      	bhi.n	8009f36 <_realloc_r+0x5a>
 8009f10:	4621      	mov	r1, r4
 8009f12:	4640      	mov	r0, r8
 8009f14:	f7fe ff3e 	bl	8008d94 <_malloc_r>
 8009f18:	4605      	mov	r5, r0
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d0ed      	beq.n	8009efa <_realloc_r+0x1e>
 8009f1e:	42bc      	cmp	r4, r7
 8009f20:	4622      	mov	r2, r4
 8009f22:	4631      	mov	r1, r6
 8009f24:	bf28      	it	cs
 8009f26:	463a      	movcs	r2, r7
 8009f28:	f7ff ffb0 	bl	8009e8c <memcpy>
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4640      	mov	r0, r8
 8009f30:	f7fe fec8 	bl	8008cc4 <_free_r>
 8009f34:	e7e1      	b.n	8009efa <_realloc_r+0x1e>
 8009f36:	4635      	mov	r5, r6
 8009f38:	e7df      	b.n	8009efa <_realloc_r+0x1e>
	...

08009f3c <_read_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4608      	mov	r0, r1
 8009f42:	4611      	mov	r1, r2
 8009f44:	2200      	movs	r2, #0
 8009f46:	4d05      	ldr	r5, [pc, #20]	; (8009f5c <_read_r+0x20>)
 8009f48:	602a      	str	r2, [r5, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f7f6 fd5c 	bl	8000a08 <_read>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_read_r+0x1e>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_read_r+0x1e>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	20001478 	.word	0x20001478

08009f60 <_fstat_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	2300      	movs	r3, #0
 8009f64:	4d06      	ldr	r5, [pc, #24]	; (8009f80 <_fstat_r+0x20>)
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	602b      	str	r3, [r5, #0]
 8009f6e:	f7f6 fd73 	bl	8000a58 <_fstat>
 8009f72:	1c43      	adds	r3, r0, #1
 8009f74:	d102      	bne.n	8009f7c <_fstat_r+0x1c>
 8009f76:	682b      	ldr	r3, [r5, #0]
 8009f78:	b103      	cbz	r3, 8009f7c <_fstat_r+0x1c>
 8009f7a:	6023      	str	r3, [r4, #0]
 8009f7c:	bd38      	pop	{r3, r4, r5, pc}
 8009f7e:	bf00      	nop
 8009f80:	20001478 	.word	0x20001478

08009f84 <_isatty_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	2300      	movs	r3, #0
 8009f88:	4d05      	ldr	r5, [pc, #20]	; (8009fa0 <_isatty_r+0x1c>)
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	4608      	mov	r0, r1
 8009f8e:	602b      	str	r3, [r5, #0]
 8009f90:	f7f6 fd71 	bl	8000a76 <_isatty>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d102      	bne.n	8009f9e <_isatty_r+0x1a>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	b103      	cbz	r3, 8009f9e <_isatty_r+0x1a>
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	20001478 	.word	0x20001478

08009fa4 <_malloc_usable_size_r>:
 8009fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa8:	1f18      	subs	r0, r3, #4
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	bfbc      	itt	lt
 8009fae:	580b      	ldrlt	r3, [r1, r0]
 8009fb0:	18c0      	addlt	r0, r0, r3
 8009fb2:	4770      	bx	lr

08009fb4 <_init>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	bf00      	nop
 8009fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fba:	bc08      	pop	{r3}
 8009fbc:	469e      	mov	lr, r3
 8009fbe:	4770      	bx	lr

08009fc0 <_fini>:
 8009fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc2:	bf00      	nop
 8009fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fc6:	bc08      	pop	{r3}
 8009fc8:	469e      	mov	lr, r3
 8009fca:	4770      	bx	lr
