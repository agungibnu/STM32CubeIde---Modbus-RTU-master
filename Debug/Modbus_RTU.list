
Modbus_RTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800a048  0800a048  0001a048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3cc  0800a3cc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3cc  0800a3cc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3cc  0800a3cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3cc  0800a3cc  0001a3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3d0  0800a3d0  0001a3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a4  200001e0  0800a5b4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001484  0800a5b4  00021484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012190  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e7  00000000  00000000  00032399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00035680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  000364c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab23  00000000  00000000  000371a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012980  00000000  00000000  00051ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b39  00000000  00000000  0006464b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed184  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004214  00000000  00000000  000ed1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a030 	.word	0x0800a030

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	0800a030 	.word	0x0800a030

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Serial Wire Debug SWO Pri
int _write(int file, char *ptr, int len){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
     int DataIdx;
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001b4:	2300      	movs	r3, #0
 80001b6:	617b      	str	r3, [r7, #20]
 80001b8:	e009      	b.n	80001ce <_write+0x26>
         ITM_SendChar((*ptr++));
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	1c5a      	adds	r2, r3, #1
 80001be:	60ba      	str	r2, [r7, #8]
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f7ff ffca 	bl	800015c <ITM_SendChar>
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001c8:	697b      	ldr	r3, [r7, #20]
 80001ca:	3301      	adds	r3, #1
 80001cc:	617b      	str	r3, [r7, #20]
 80001ce:	697a      	ldr	r2, [r7, #20]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	dbf1      	blt.n	80001ba <_write+0x12>
     }
     return len;
 80001d6:	687b      	ldr	r3, [r7, #4]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3718      	adds	r7, #24
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}

080001e0 <send_debug_CDC>:

void send_debug_CDC(char *data){
 80001e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001e4:	b087      	sub	sp, #28
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
 80001ea:	466b      	mov	r3, sp
 80001ec:	461e      	mov	r6, r3

	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f4:	482e      	ldr	r0, [pc, #184]	; (80002b0 <send_debug_CDC+0xd0>)
 80001f6:	f001 f8bf 	bl	8001378 <HAL_GPIO_WritePin>
	int dataLen = strlen(data);
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f7ff ffa6 	bl	800014c <strlen>
 8000200:	4603      	mov	r3, r0
 8000202:	617b      	str	r3, [r7, #20]
	char dataCDC[dataLen + 1];
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	1c59      	adds	r1, r3, #1
 8000208:	1e4b      	subs	r3, r1, #1
 800020a:	613b      	str	r3, [r7, #16]
 800020c:	460a      	mov	r2, r1
 800020e:	2300      	movs	r3, #0
 8000210:	4690      	mov	r8, r2
 8000212:	4699      	mov	r9, r3
 8000214:	f04f 0200 	mov.w	r2, #0
 8000218:	f04f 0300 	mov.w	r3, #0
 800021c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000220:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000224:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000228:	460a      	mov	r2, r1
 800022a:	2300      	movs	r3, #0
 800022c:	4614      	mov	r4, r2
 800022e:	461d      	mov	r5, r3
 8000230:	f04f 0200 	mov.w	r2, #0
 8000234:	f04f 0300 	mov.w	r3, #0
 8000238:	00eb      	lsls	r3, r5, #3
 800023a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800023e:	00e2      	lsls	r2, r4, #3
 8000240:	460b      	mov	r3, r1
 8000242:	3307      	adds	r3, #7
 8000244:	08db      	lsrs	r3, r3, #3
 8000246:	00db      	lsls	r3, r3, #3
 8000248:	ebad 0d03 	sub.w	sp, sp, r3
 800024c:	466b      	mov	r3, sp
 800024e:	3300      	adds	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
	strcpy(dataCDC, data);
 8000252:	6879      	ldr	r1, [r7, #4]
 8000254:	68f8      	ldr	r0, [r7, #12]
 8000256:	f008 fe97 	bl	8008f88 <strcpy>
	dataCDC[dataLen] = '\n';
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	4413      	add	r3, r2
 8000260:	220a      	movs	r2, #10
 8000262:	701a      	strb	r2, [r3, #0]
	dataCDC[dataLen + 1] = '\0';
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	3301      	adds	r3, #1
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	2100      	movs	r1, #0
 800026c:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS((uint8_t*)dataCDC, strlen(dataCDC));
 800026e:	68f8      	ldr	r0, [r7, #12]
 8000270:	f7ff ff6c 	bl	800014c <strlen>
 8000274:	4603      	mov	r3, r0
 8000276:	b29b      	uxth	r3, r3
 8000278:	4619      	mov	r1, r3
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f008 f940 	bl	8008500 <CDC_Transmit_FS>
	printf(dataCDC);
 8000280:	68f8      	ldr	r0, [r7, #12]
 8000282:	f008 fe39 	bl	8008ef8 <iprintf>
	HAL_Delay(5);
 8000286:	2005      	movs	r0, #5
 8000288:	f000 fd0e 	bl	8000ca8 <HAL_Delay>
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, 1);
 800028c:	2201      	movs	r2, #1
 800028e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000292:	4807      	ldr	r0, [pc, #28]	; (80002b0 <send_debug_CDC+0xd0>)
 8000294:	f001 f870 	bl	8001378 <HAL_GPIO_WritePin>
	free(text);
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <send_debug_CDC+0xd4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4618      	mov	r0, r3
 800029e:	f008 fd3f 	bl	8008d20 <free>
 80002a2:	46b5      	mov	sp, r6
}
 80002a4:	bf00      	nop
 80002a6:	371c      	adds	r7, #28
 80002a8:	46bd      	mov	sp, r7
 80002aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80002ae:	bf00      	nop
 80002b0:	40011000 	.word	0x40011000
 80002b4:	200002c0 	.word	0x200002c0

080002b8 <modbus>:

void modbus(uint8_t slaveAdd, uint8_t funcCode, uint8_t startAddr1, uint8_t startAddr2, uint8_t qty1, uint8_t qty2){
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b08b      	sub	sp, #44	; 0x2c
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4604      	mov	r4, r0
 80002c0:	4608      	mov	r0, r1
 80002c2:	4611      	mov	r1, r2
 80002c4:	461a      	mov	r2, r3
 80002c6:	4623      	mov	r3, r4
 80002c8:	71fb      	strb	r3, [r7, #7]
 80002ca:	4603      	mov	r3, r0
 80002cc:	71bb      	strb	r3, [r7, #6]
 80002ce:	460b      	mov	r3, r1
 80002d0:	717b      	strb	r3, [r7, #5]
 80002d2:	4613      	mov	r3, r2
 80002d4:	713b      	strb	r3, [r7, #4]
	uint8_t* dataFrame[] = {&slaveAdd, &funcCode, &startAddr1, &startAddr2, &qty1, &qty2};
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	1dbb      	adds	r3, r7, #6
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	1d7b      	adds	r3, r7, #5
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002ea:	61bb      	str	r3, [r7, #24]
 80002ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f0:	61fb      	str	r3, [r7, #28]

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, Rxdata, sizeof(Rxdata));
 80002f2:	2226      	movs	r2, #38	; 0x26
 80002f4:	4917      	ldr	r1, [pc, #92]	; (8000354 <modbus+0x9c>)
 80002f6:	4818      	ldr	r0, [pc, #96]	; (8000358 <modbus+0xa0>)
 80002f8:	f003 fb5d 	bl	80039b6 <HAL_UARTEx_ReceiveToIdle_IT>

	for (int x = 0; x < 6; x++){
 80002fc:	2300      	movs	r3, #0
 80002fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000300:	e00e      	b.n	8000320 <modbus+0x68>
		Txdata[x] = *dataFrame[x];
 8000302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	3328      	adds	r3, #40	; 0x28
 8000308:	443b      	add	r3, r7
 800030a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800030e:	7819      	ldrb	r1, [r3, #0]
 8000310:	4a12      	ldr	r2, [pc, #72]	; (800035c <modbus+0xa4>)
 8000312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000314:	4413      	add	r3, r2
 8000316:	460a      	mov	r2, r1
 8000318:	701a      	strb	r2, [r3, #0]
	for (int x = 0; x < 6; x++){
 800031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800031c:	3301      	adds	r3, #1
 800031e:	627b      	str	r3, [r7, #36]	; 0x24
 8000320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000322:	2b05      	cmp	r3, #5
 8000324:	dded      	ble.n	8000302 <modbus+0x4a>
	}

	uint16_t crc = crc16(Txdata, 6);
 8000326:	2106      	movs	r1, #6
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <modbus+0xa4>)
 800032a:	f000 fa69 	bl	8000800 <crc16>
 800032e:	4603      	mov	r3, r0
 8000330:	847b      	strh	r3, [r7, #34]	; 0x22
    Txdata[6] = crc & 0xFF;         // CRC Low
 8000332:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <modbus+0xa4>)
 8000338:	719a      	strb	r2, [r3, #6]
    Txdata[7] = (crc >> 8) & 0xFF;  // CRC High
 800033a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800033c:	0a1b      	lsrs	r3, r3, #8
 800033e:	b29b      	uxth	r3, r3
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <modbus+0xa4>)
 8000344:	71da      	strb	r2, [r3, #7]
    request_modbus(Txdata);
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <modbus+0xa4>)
 8000348:	f000 f80a 	bl	8000360 <request_modbus>
}
 800034c:	bf00      	nop
 800034e:	372c      	adds	r7, #44	; 0x2c
 8000350:	46bd      	mov	sp, r7
 8000352:	bd90      	pop	{r4, r7, pc}
 8000354:	2000028c 	.word	0x2000028c
 8000358:	20000244 	.word	0x20000244
 800035c:	200002b4 	.word	0x200002b4

08000360 <request_modbus>:

void request_modbus(uint8_t *data){
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]

	send_debug_CDC("[Modbus Request : ");
 8000368:	483d      	ldr	r0, [pc, #244]	; (8000460 <request_modbus+0x100>)
 800036a:	f7ff ff39 	bl	80001e0 <send_debug_CDC>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 800036e:	2201      	movs	r2, #1
 8000370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000374:	483b      	ldr	r0, [pc, #236]	; (8000464 <request_modbus+0x104>)
 8000376:	f000 ffff 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, data, 8, 1000);
 800037a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037e:	2208      	movs	r2, #8
 8000380:	6879      	ldr	r1, [r7, #4]
 8000382:	4839      	ldr	r0, [pc, #228]	; (8000468 <request_modbus+0x108>)
 8000384:	f003 fa94 	bl	80038b0 <HAL_UART_Transmit>

	int offset = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < sizeof(Txdata)/sizeof(Txdata[0]); i++){
 800038c:	2300      	movs	r3, #0
 800038e:	613b      	str	r3, [r7, #16]
 8000390:	e012      	b.n	80003b8 <request_modbus+0x58>
		offset+= sprintf(text+offset, "%02X", Txdata[i]);
 8000392:	4b36      	ldr	r3, [pc, #216]	; (800046c <request_modbus+0x10c>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	18d0      	adds	r0, r2, r3
 800039a:	4a35      	ldr	r2, [pc, #212]	; (8000470 <request_modbus+0x110>)
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	4413      	add	r3, r2
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	461a      	mov	r2, r3
 80003a4:	4933      	ldr	r1, [pc, #204]	; (8000474 <request_modbus+0x114>)
 80003a6:	f008 fdcf 	bl	8008f48 <siprintf>
 80003aa:	4602      	mov	r2, r0
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	4413      	add	r3, r2
 80003b0:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < sizeof(Txdata)/sizeof(Txdata[0]); i++){
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	3301      	adds	r3, #1
 80003b6:	613b      	str	r3, [r7, #16]
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	2b07      	cmp	r3, #7
 80003bc:	d9e9      	bls.n	8000392 <request_modbus+0x32>
	}

	send_debug_CDC(text);
 80003be:	4b2b      	ldr	r3, [pc, #172]	; (800046c <request_modbus+0x10c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff0c 	bl	80001e0 <send_debug_CDC>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ce:	4825      	ldr	r0, [pc, #148]	; (8000464 <request_modbus+0x104>)
 80003d0:	f000 ffd2 	bl	8001378 <HAL_GPIO_WritePin>

	if (Rxdata[0] != 0){
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <request_modbus+0x118>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d02b      	beq.n	8000434 <request_modbus+0xd4>
		modbus_stat = 1;
 80003dc:	4b27      	ldr	r3, [pc, #156]	; (800047c <request_modbus+0x11c>)
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]
		int offset1 = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 80003e6:	2300      	movs	r3, #0
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	e012      	b.n	8000412 <request_modbus+0xb2>
			offset1+= sprintf(text+offset1, "%02X", Rxdata[x]);
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <request_modbus+0x10c>)
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	18d0      	adds	r0, r2, r3
 80003f4:	4a20      	ldr	r2, [pc, #128]	; (8000478 <request_modbus+0x118>)
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	4413      	add	r3, r2
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	461a      	mov	r2, r3
 80003fe:	491d      	ldr	r1, [pc, #116]	; (8000474 <request_modbus+0x114>)
 8000400:	f008 fda2 	bl	8008f48 <siprintf>
 8000404:	4602      	mov	r2, r0
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	4413      	add	r3, r2
 800040a:	60fb      	str	r3, [r7, #12]
		for (int x = 0; x < sizeof(Rxdata)/sizeof(Rxdata[0]); x++){
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	3301      	adds	r3, #1
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	2b25      	cmp	r3, #37	; 0x25
 8000416:	d9e9      	bls.n	80003ec <request_modbus+0x8c>
		}
		send_debug_CDC("Modbus Response :");
 8000418:	4819      	ldr	r0, [pc, #100]	; (8000480 <request_modbus+0x120>)
 800041a:	f7ff fee1 	bl	80001e0 <send_debug_CDC>
		send_debug_CDC(text);
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <request_modbus+0x10c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff fedc 	bl	80001e0 <send_debug_CDC>
		decode_data();
 8000428:	f000 f82e 	bl	8000488 <decode_data>
		HAL_Delay(5);
 800042c:	2005      	movs	r0, #5
 800042e:	f000 fc3b 	bl	8000ca8 <HAL_Delay>
		modbus_stat = 0;
		sprintf(text,"No Response from slave!!!");
		send_debug_CDC(text);
		HAL_Delay(5);
	}
}
 8000432:	e010      	b.n	8000456 <request_modbus+0xf6>
		modbus_stat = 0;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <request_modbus+0x11c>)
 8000436:	2200      	movs	r2, #0
 8000438:	701a      	strb	r2, [r3, #0]
		sprintf(text,"No Response from slave!!!");
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <request_modbus+0x10c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4911      	ldr	r1, [pc, #68]	; (8000484 <request_modbus+0x124>)
 8000440:	4618      	mov	r0, r3
 8000442:	f008 fd81 	bl	8008f48 <siprintf>
		send_debug_CDC(text);
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <request_modbus+0x10c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fec8 	bl	80001e0 <send_debug_CDC>
		HAL_Delay(5);
 8000450:	2005      	movs	r0, #5
 8000452:	f000 fc29 	bl	8000ca8 <HAL_Delay>
}
 8000456:	bf00      	nop
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	0800a048 	.word	0x0800a048
 8000464:	40010800 	.word	0x40010800
 8000468:	20000244 	.word	0x20000244
 800046c:	200002c0 	.word	0x200002c0
 8000470:	200002b4 	.word	0x200002b4
 8000474:	0800a05c 	.word	0x0800a05c
 8000478:	2000028c 	.word	0x2000028c
 800047c:	200002bc 	.word	0x200002bc
 8000480:	0800a064 	.word	0x0800a064
 8000484:	0800a078 	.word	0x0800a078

08000488 <decode_data>:

void decode_data(){
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
	uint8_t databyte[4];
	uint32_t sensordata= 0;
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
	int offset1 = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 4; i++){
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	e01b      	b.n	80004d4 <decode_data+0x4c>
		databyte[i] = Rxdata[3+i];
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	3303      	adds	r3, #3
 80004a0:	4a20      	ldr	r2, [pc, #128]	; (8000524 <decode_data+0x9c>)
 80004a2:	5cd1      	ldrb	r1, [r2, r3]
 80004a4:	463a      	mov	r2, r7
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	4413      	add	r3, r2
 80004aa:	460a      	mov	r2, r1
 80004ac:	701a      	strb	r2, [r3, #0]
		offset1+= sprintf(text+offset1, "%02X", databyte[i]);
 80004ae:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <decode_data+0xa0>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	18d0      	adds	r0, r2, r3
 80004b6:	463a      	mov	r2, r7
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	4413      	add	r3, r2
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	461a      	mov	r2, r3
 80004c0:	491a      	ldr	r1, [pc, #104]	; (800052c <decode_data+0xa4>)
 80004c2:	f008 fd41 	bl	8008f48 <siprintf>
 80004c6:	4602      	mov	r2, r0
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	4413      	add	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 4; i++){
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	3301      	adds	r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	dde0      	ble.n	800049c <decode_data+0x14>
	}
	send_debug_CDC(text);
 80004da:	4b13      	ldr	r3, [pc, #76]	; (8000528 <decode_data+0xa0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff fe7e 	bl	80001e0 <send_debug_CDC>

//	for (int i = 0; i < 4; i++){
//		sensordata = (sensordata << 8) | databyte[i];
//	}
	sensordata = (Rxdata[6] << 24) | (Rxdata[5] << 16) | (Rxdata[3] << 8) | Rxdata[4];
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <decode_data+0x9c>)
 80004e6:	799b      	ldrb	r3, [r3, #6]
 80004e8:	061a      	lsls	r2, r3, #24
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <decode_data+0x9c>)
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	041b      	lsls	r3, r3, #16
 80004f0:	431a      	orrs	r2, r3
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <decode_data+0x9c>)
 80004f4:	78db      	ldrb	r3, [r3, #3]
 80004f6:	021b      	lsls	r3, r3, #8
 80004f8:	4313      	orrs	r3, r2
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <decode_data+0x9c>)
 80004fc:	7912      	ldrb	r2, [r2, #4]
 80004fe:	4313      	orrs	r3, r2
 8000500:	607b      	str	r3, [r7, #4]
	sprintf(text, "Sensor data : %lu", sensordata);
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <decode_data+0xa0>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	4909      	ldr	r1, [pc, #36]	; (8000530 <decode_data+0xa8>)
 800050a:	4618      	mov	r0, r3
 800050c:	f008 fd1c 	bl	8008f48 <siprintf>
	send_debug_CDC(text);
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <decode_data+0xa0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff fe63 	bl	80001e0 <send_debug_CDC>
}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	2000028c 	.word	0x2000028c
 8000528:	200002c0 	.word	0x200002c0
 800052c:	0800a05c 	.word	0x0800a05c
 8000530:	0800a094 	.word	0x0800a094

08000534 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	807b      	strh	r3, [r7, #2]

}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
	...

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 fb47 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f82f 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f000 f8dd 	bl	8000718 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800055e:	f007 ff11 	bl	8008384 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000562:	f000 f883 	bl	800066c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f8ab 	bl	80006c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_CDC("[MODBUS RTU PROGRAM]");
 800056a:	480f      	ldr	r0, [pc, #60]	; (80005a8 <main+0x5c>)
 800056c:	f7ff fe38 	bl	80001e0 <send_debug_CDC>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, Rxdata, sizeof(Rxdata));
 8000570:	2226      	movs	r2, #38	; 0x26
 8000572:	490e      	ldr	r1, [pc, #56]	; (80005ac <main+0x60>)
 8000574:	480e      	ldr	r0, [pc, #56]	; (80005b0 <main+0x64>)
 8000576:	f003 fa1e 	bl	80039b6 <HAL_UARTEx_ReceiveToIdle_IT>
  text = malloc(512);
 800057a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800057e:	f008 fbc7 	bl	8008d10 <malloc>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <main+0x68>)
 8000588:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  modbus(0x01, 0x03, 0x00, 0x07, 0x00, 0x02);
 800058a:	2302      	movs	r3, #2
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2300      	movs	r3, #0
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2307      	movs	r3, #7
 8000594:	2200      	movs	r2, #0
 8000596:	2103      	movs	r1, #3
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff fe8d 	bl	80002b8 <modbus>
	  HAL_Delay(1000);
 800059e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a2:	f000 fb81 	bl	8000ca8 <HAL_Delay>
	  modbus(0x01, 0x03, 0x00, 0x07, 0x00, 0x02);
 80005a6:	e7f0      	b.n	800058a <main+0x3e>
 80005a8:	0800a0a8 	.word	0x0800a0a8
 80005ac:	2000028c 	.word	0x2000028c
 80005b0:	20000244 	.word	0x20000244
 80005b4:	200002c0 	.word	0x200002c0

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005c2:	2228      	movs	r2, #40	; 0x28
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f008 fbb2 	bl	8008d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f6:	2301      	movs	r3, #1
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000604:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000608:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fc38 	bl	8002e84 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800061a:	f000 f8eb 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800062e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2102      	movs	r1, #2
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fea4 	bl	8003388 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000646:	f000 f8d5 	bl	80007f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800064a:	2310      	movs	r3, #16
 800064c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f003 f825 	bl	80036a4 <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000660:	f000 f8c8 	bl	80007f4 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	; 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_USART1_UART_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000678:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800067c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 80006a4:	f003 f8b4 	bl	8003810 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ae:	f000 f8a1 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200001fc 	.word	0x200001fc
 80006bc:	40013800 	.word	0x40013800

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_USART2_UART_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2400;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006cc:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006d8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006fc:	f003 f888 	bl	8003810 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000706:	f000 f875 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000244 	.word	0x20000244
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072c:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a2d      	ldr	r2, [pc, #180]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0310 	and.w	r3, r3, #16
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800074a:	f043 0320 	orr.w	r3, r3, #32
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0320 	and.w	r3, r3, #32
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0304 	and.w	r3, r3, #4
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a1b      	ldr	r2, [pc, #108]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	4816      	ldr	r0, [pc, #88]	; (80007ec <MX_GPIO_Init+0xd4>)
 8000794:	f000 fdf0 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079e:	4814      	ldr	r0, [pc, #80]	; (80007f0 <MX_GPIO_Init+0xd8>)
 80007a0:	f000 fdea 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80007a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	4619      	mov	r1, r3
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_GPIO_Init+0xd4>)
 80007be:	f000 fc57 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 80007c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	4619      	mov	r1, r3
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_GPIO_Init+0xd8>)
 80007dc:	f000 fc48 	bl	8001070 <HAL_GPIO_Init>

}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40011000 	.word	0x40011000
 80007f0:	40010800 	.word	0x40010800

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 800080c:	23ff      	movs	r3, #255	; 0xff
 800080e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000810:	23ff      	movs	r3, #255	; 0xff
 8000812:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000814:	e013      	b.n	800083e <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	4053      	eors	r3, r2
 8000822:	b2db      	uxtb	r3, r3
 8000824:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000826:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <crc16+0x64>)
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	4413      	add	r3, r2
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	4053      	eors	r3, r2
 8000832:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <crc16+0x68>)
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 800083e:	887b      	ldrh	r3, [r7, #2]
 8000840:	1e5a      	subs	r2, r3, #1
 8000842:	807a      	strh	r2, [r7, #2]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1e6      	bne.n	8000816 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	b21a      	sxth	r2, r3
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	b21b      	sxth	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b21b      	sxth	r3, r3
 8000856:	b29b      	uxth	r3, r3
}
 8000858:	4618      	mov	r0, r3
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	0800a108 	.word	0x0800a108
 8000868:	0800a208 	.word	0x0800a208

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_MspInit+0x5c>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <HAL_MspInit+0x5c>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_MspInit+0x5c>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x5c>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <HAL_MspInit+0x5c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_MspInit+0x5c>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_MspInit+0x60>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_MspInit+0x60>)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010000 	.word	0x40010000

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a3f      	ldr	r2, [pc, #252]	; (80009e8 <HAL_UART_MspInit+0x118>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d13a      	bne.n	8000966 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008f0:	4b3e      	ldr	r3, [pc, #248]	; (80009ec <HAL_UART_MspInit+0x11c>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a3d      	ldr	r2, [pc, #244]	; (80009ec <HAL_UART_MspInit+0x11c>)
 80008f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b3b      	ldr	r3, [pc, #236]	; (80009ec <HAL_UART_MspInit+0x11c>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b38      	ldr	r3, [pc, #224]	; (80009ec <HAL_UART_MspInit+0x11c>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a37      	ldr	r2, [pc, #220]	; (80009ec <HAL_UART_MspInit+0x11c>)
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b35      	ldr	r3, [pc, #212]	; (80009ec <HAL_UART_MspInit+0x11c>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0318 	add.w	r3, r7, #24
 8000932:	4619      	mov	r1, r3
 8000934:	482e      	ldr	r0, [pc, #184]	; (80009f0 <HAL_UART_MspInit+0x120>)
 8000936:	f000 fb9b 	bl	8001070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800093a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	4619      	mov	r1, r3
 800094e:	4828      	ldr	r0, [pc, #160]	; (80009f0 <HAL_UART_MspInit+0x120>)
 8000950:	f000 fb8e 	bl	8001070 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2025      	movs	r0, #37	; 0x25
 800095a:	f000 faa0 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800095e:	2025      	movs	r0, #37	; 0x25
 8000960:	f000 fab9 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000964:	e03c      	b.n	80009e0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <HAL_UART_MspInit+0x124>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d137      	bne.n	80009e0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <HAL_UART_MspInit+0x11c>)
 8000972:	69db      	ldr	r3, [r3, #28]
 8000974:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <HAL_UART_MspInit+0x11c>)
 8000976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097a:	61d3      	str	r3, [r2, #28]
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <HAL_UART_MspInit+0x11c>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_UART_MspInit+0x11c>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a17      	ldr	r2, [pc, #92]	; (80009ec <HAL_UART_MspInit+0x11c>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_UART_MspInit+0x11c>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009a0:	2304      	movs	r3, #4
 80009a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	4619      	mov	r1, r3
 80009b2:	480f      	ldr	r0, [pc, #60]	; (80009f0 <HAL_UART_MspInit+0x120>)
 80009b4:	f000 fb5c 	bl	8001070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009b8:	2308      	movs	r3, #8
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	4619      	mov	r1, r3
 80009ca:	4809      	ldr	r0, [pc, #36]	; (80009f0 <HAL_UART_MspInit+0x120>)
 80009cc:	f000 fb50 	bl	8001070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	2026      	movs	r0, #38	; 0x26
 80009d6:	f000 fa62 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009da:	2026      	movs	r0, #38	; 0x26
 80009dc:	f000 fa7b 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40013800 	.word	0x40013800
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010800 	.word	0x40010800
 80009f4:	40004400 	.word	0x40004400

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr

08000a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3e:	f000 f917 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a4e:	f000 fdd0 	bl	80015f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000f64 	.word	0x20000f64

08000a5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <USART1_IRQHandler+0x10>)
 8000a62:	f003 f805 	bl	8003a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001fc 	.word	0x200001fc

08000a70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <USART2_IRQHandler+0x10>)
 8000a76:	f002 fffb 	bl	8003a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000244 	.word	0x20000244

08000a84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	e00a      	b.n	8000aac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a96:	f3af 8000 	nop.w
 8000a9a:	4601      	mov	r1, r0
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	b2ca      	uxtb	r2, r1
 8000aa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf0      	blt.n	8000a96 <_read+0x12>
	}

return len;
 8000ab4:	687b      	ldr	r3, [r7, #4]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae4:	605a      	str	r2, [r3, #4]
	return 0;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <_isatty>:

int _isatty(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
	return 1;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b085      	sub	sp, #20
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
	return 0;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
	...

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f008 f8b4 	bl	8008cbc <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20005000 	.word	0x20005000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	200002c4 	.word	0x200002c4
 8000b88:	20001488 	.word	0x20001488

08000b8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b98:	f7ff fff8 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480b      	ldr	r0, [pc, #44]	; (8000bcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b9e:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bb4:	4c09      	ldr	r4, [pc, #36]	; (8000bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f008 f881 	bl	8008cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc6:	f7ff fcc1 	bl	800054c <main>
  bx lr
 8000bca:	4770      	bx	lr
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000bd4:	0800a3d4 	.word	0x0800a3d4
  ldr r2, =_sbss
 8000bd8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000bdc:	20001484 	.word	0x20001484

08000be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC1_2_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_Init+0x28>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x28>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f947 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	200f      	movs	r0, #15
 8000bfc:	f000 f808 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe34 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40022000 	.word	0x40022000

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f95f 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f927 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x1c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x20>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <HAL_IncTick+0x20>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	200002c8 	.word	0x200002c8

08000c94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <HAL_GetTick+0x10>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	200002c8 	.word	0x200002c8

08000ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff fff0 	bl	8000c94 <HAL_GetTick>
 8000cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	d005      	beq.n	8000cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_Delay+0x44>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cce:	bf00      	nop
 8000cd0:	f7ff ffe0 	bl	8000c94 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8f7      	bhi.n	8000cd0 <HAL_Delay+0x28>
  {
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008

08000cf0 <__NVIC_SetPriorityGrouping>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4906      	ldr	r1, [pc, #24]	; (8000d88 <__NVIC_EnableIRQ+0x34>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_SetPriority>:
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <SysTick_Config>:
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff90 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff2d 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb0:	f7ff ff42 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff ff90 	bl	8000de0 <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5f 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff35 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffa2 	bl	8000e44 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d008      	beq.n	8000f34 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2204      	movs	r2, #4
 8000f26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e020      	b.n	8000f76 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 020e 	bic.w	r2, r2, #14
 8000f42:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0201 	bic.w	r2, r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f62:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d005      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e051      	b.n	8001048 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 020e 	bic.w	r2, r2, #14
 8000fb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0201 	bic.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a22      	ldr	r2, [pc, #136]	; (8001054 <HAL_DMA_Abort_IT+0xd4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d029      	beq.n	8001022 <HAL_DMA_Abort_IT+0xa2>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a21      	ldr	r2, [pc, #132]	; (8001058 <HAL_DMA_Abort_IT+0xd8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d022      	beq.n	800101e <HAL_DMA_Abort_IT+0x9e>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a1f      	ldr	r2, [pc, #124]	; (800105c <HAL_DMA_Abort_IT+0xdc>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01a      	beq.n	8001018 <HAL_DMA_Abort_IT+0x98>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <HAL_DMA_Abort_IT+0xe0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d012      	beq.n	8001012 <HAL_DMA_Abort_IT+0x92>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <HAL_DMA_Abort_IT+0xe4>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d00a      	beq.n	800100c <HAL_DMA_Abort_IT+0x8c>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_DMA_Abort_IT+0xe8>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d102      	bne.n	8001006 <HAL_DMA_Abort_IT+0x86>
 8001000:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001004:	e00e      	b.n	8001024 <HAL_DMA_Abort_IT+0xa4>
 8001006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800100a:	e00b      	b.n	8001024 <HAL_DMA_Abort_IT+0xa4>
 800100c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001010:	e008      	b.n	8001024 <HAL_DMA_Abort_IT+0xa4>
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	e005      	b.n	8001024 <HAL_DMA_Abort_IT+0xa4>
 8001018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101c:	e002      	b.n	8001024 <HAL_DMA_Abort_IT+0xa4>
 800101e:	2310      	movs	r3, #16
 8001020:	e000      	b.n	8001024 <HAL_DMA_Abort_IT+0xa4>
 8001022:	2301      	movs	r3, #1
 8001024:	4a11      	ldr	r2, [pc, #68]	; (800106c <HAL_DMA_Abort_IT+0xec>)
 8001026:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	4798      	blx	r3
    } 
  }
  return status;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40020008 	.word	0x40020008
 8001058:	4002001c 	.word	0x4002001c
 800105c:	40020030 	.word	0x40020030
 8001060:	40020044 	.word	0x40020044
 8001064:	40020058 	.word	0x40020058
 8001068:	4002006c 	.word	0x4002006c
 800106c:	40020000 	.word	0x40020000

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b08b      	sub	sp, #44	; 0x2c
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001082:	e169      	b.n	8001358 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001084:	2201      	movs	r2, #1
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 8158 	bne.w	8001352 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a9a      	ldr	r2, [pc, #616]	; (8001310 <HAL_GPIO_Init+0x2a0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d05e      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010ac:	4a98      	ldr	r2, [pc, #608]	; (8001310 <HAL_GPIO_Init+0x2a0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d875      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010b2:	4a98      	ldr	r2, [pc, #608]	; (8001314 <HAL_GPIO_Init+0x2a4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d058      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010b8:	4a96      	ldr	r2, [pc, #600]	; (8001314 <HAL_GPIO_Init+0x2a4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d86f      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010be:	4a96      	ldr	r2, [pc, #600]	; (8001318 <HAL_GPIO_Init+0x2a8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d052      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010c4:	4a94      	ldr	r2, [pc, #592]	; (8001318 <HAL_GPIO_Init+0x2a8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d869      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010ca:	4a94      	ldr	r2, [pc, #592]	; (800131c <HAL_GPIO_Init+0x2ac>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d04c      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010d0:	4a92      	ldr	r2, [pc, #584]	; (800131c <HAL_GPIO_Init+0x2ac>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d863      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010d6:	4a92      	ldr	r2, [pc, #584]	; (8001320 <HAL_GPIO_Init+0x2b0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d046      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010dc:	4a90      	ldr	r2, [pc, #576]	; (8001320 <HAL_GPIO_Init+0x2b0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d85d      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010e2:	2b12      	cmp	r3, #18
 80010e4:	d82a      	bhi.n	800113c <HAL_GPIO_Init+0xcc>
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d859      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <HAL_GPIO_Init+0x80>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	0800116b 	.word	0x0800116b
 80010f4:	08001145 	.word	0x08001145
 80010f8:	08001157 	.word	0x08001157
 80010fc:	08001199 	.word	0x08001199
 8001100:	0800119f 	.word	0x0800119f
 8001104:	0800119f 	.word	0x0800119f
 8001108:	0800119f 	.word	0x0800119f
 800110c:	0800119f 	.word	0x0800119f
 8001110:	0800119f 	.word	0x0800119f
 8001114:	0800119f 	.word	0x0800119f
 8001118:	0800119f 	.word	0x0800119f
 800111c:	0800119f 	.word	0x0800119f
 8001120:	0800119f 	.word	0x0800119f
 8001124:	0800119f 	.word	0x0800119f
 8001128:	0800119f 	.word	0x0800119f
 800112c:	0800119f 	.word	0x0800119f
 8001130:	0800119f 	.word	0x0800119f
 8001134:	0800114d 	.word	0x0800114d
 8001138:	08001161 	.word	0x08001161
 800113c:	4a79      	ldr	r2, [pc, #484]	; (8001324 <HAL_GPIO_Init+0x2b4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001142:	e02c      	b.n	800119e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e029      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	3304      	adds	r3, #4
 8001152:	623b      	str	r3, [r7, #32]
          break;
 8001154:	e024      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	3308      	adds	r3, #8
 800115c:	623b      	str	r3, [r7, #32]
          break;
 800115e:	e01f      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	330c      	adds	r3, #12
 8001166:	623b      	str	r3, [r7, #32]
          break;
 8001168:	e01a      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001172:	2304      	movs	r3, #4
 8001174:	623b      	str	r3, [r7, #32]
          break;
 8001176:	e013      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001180:	2308      	movs	r3, #8
 8001182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	611a      	str	r2, [r3, #16]
          break;
 800118a:	e009      	b.n	80011a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800118c:	2308      	movs	r3, #8
 800118e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	615a      	str	r2, [r3, #20]
          break;
 8001196:	e003      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
          break;
 800119c:	e000      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          break;
 800119e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2bff      	cmp	r3, #255	; 0xff
 80011a4:	d801      	bhi.n	80011aa <HAL_GPIO_Init+0x13a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	e001      	b.n	80011ae <HAL_GPIO_Init+0x13e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3304      	adds	r3, #4
 80011ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2bff      	cmp	r3, #255	; 0xff
 80011b4:	d802      	bhi.n	80011bc <HAL_GPIO_Init+0x14c>
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	e002      	b.n	80011c2 <HAL_GPIO_Init+0x152>
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	3b08      	subs	r3, #8
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	210f      	movs	r1, #15
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	6a39      	ldr	r1, [r7, #32]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	431a      	orrs	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80b1 	beq.w	8001352 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f0:	4b4d      	ldr	r3, [pc, #308]	; (8001328 <HAL_GPIO_Init+0x2b8>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	; (8001328 <HAL_GPIO_Init+0x2b8>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b4a      	ldr	r3, [pc, #296]	; (8001328 <HAL_GPIO_Init+0x2b8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001208:	4a48      	ldr	r2, [pc, #288]	; (800132c <HAL_GPIO_Init+0x2bc>)
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a40      	ldr	r2, [pc, #256]	; (8001330 <HAL_GPIO_Init+0x2c0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d013      	beq.n	800125c <HAL_GPIO_Init+0x1ec>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a3f      	ldr	r2, [pc, #252]	; (8001334 <HAL_GPIO_Init+0x2c4>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d00d      	beq.n	8001258 <HAL_GPIO_Init+0x1e8>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a3e      	ldr	r2, [pc, #248]	; (8001338 <HAL_GPIO_Init+0x2c8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d007      	beq.n	8001254 <HAL_GPIO_Init+0x1e4>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a3d      	ldr	r2, [pc, #244]	; (800133c <HAL_GPIO_Init+0x2cc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d101      	bne.n	8001250 <HAL_GPIO_Init+0x1e0>
 800124c:	2303      	movs	r3, #3
 800124e:	e006      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001250:	2304      	movs	r3, #4
 8001252:	e004      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001254:	2302      	movs	r3, #2
 8001256:	e002      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 800125c:	2300      	movs	r3, #0
 800125e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001260:	f002 0203 	and.w	r2, r2, #3
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	4093      	lsls	r3, r2
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800126e:	492f      	ldr	r1, [pc, #188]	; (800132c <HAL_GPIO_Init+0x2bc>)
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001288:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	492c      	ldr	r1, [pc, #176]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	608b      	str	r3, [r1, #8]
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	4928      	ldr	r1, [pc, #160]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	4922      	ldr	r1, [pc, #136]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	60cb      	str	r3, [r1, #12]
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	491e      	ldr	r1, [pc, #120]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4918      	ldr	r1, [pc, #96]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4914      	ldr	r1, [pc, #80]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d021      	beq.n	8001344 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	490e      	ldr	r1, [pc, #56]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
 800130c:	e021      	b.n	8001352 <HAL_GPIO_Init+0x2e2>
 800130e:	bf00      	nop
 8001310:	10320000 	.word	0x10320000
 8001314:	10310000 	.word	0x10310000
 8001318:	10220000 	.word	0x10220000
 800131c:	10210000 	.word	0x10210000
 8001320:	10120000 	.word	0x10120000
 8001324:	10110000 	.word	0x10110000
 8001328:	40021000 	.word	0x40021000
 800132c:	40010000 	.word	0x40010000
 8001330:	40010800 	.word	0x40010800
 8001334:	40010c00 	.word	0x40010c00
 8001338:	40011000 	.word	0x40011000
 800133c:	40011400 	.word	0x40011400
 8001340:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_GPIO_Init+0x304>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	43db      	mvns	r3, r3
 800134c:	4909      	ldr	r1, [pc, #36]	; (8001374 <HAL_GPIO_Init+0x304>)
 800134e:	4013      	ands	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	3301      	adds	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	f47f ae8e 	bne.w	8001084 <HAL_GPIO_Init+0x14>
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	372c      	adds	r7, #44	; 0x2c
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40010400 	.word	0x40010400

08001378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
 8001384:	4613      	mov	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001388:	787b      	ldrb	r3, [r7, #1]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001394:	e003      	b.n	800139e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	041a      	lsls	r2, r3, #16
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	611a      	str	r2, [r3, #16]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013aa:	b08b      	sub	sp, #44	; 0x2c
 80013ac:	af06      	add	r7, sp, #24
 80013ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0f1      	b.n	800159e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f007 f9ca 	bl	8008768 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2203      	movs	r2, #3
 80013d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 f8e9 	bl	80045b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	687e      	ldr	r6, [r7, #4]
 80013ee:	466d      	mov	r5, sp
 80013f0:	f106 0410 	add.w	r4, r6, #16
 80013f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	602b      	str	r3, [r5, #0]
 80013fc:	1d33      	adds	r3, r6, #4
 80013fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001400:	6838      	ldr	r0, [r7, #0]
 8001402:	f003 f8b3 	bl	800456c <USB_CoreInit>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e0c2      	b.n	800159e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f003 f8e4 	bl	80045ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e040      	b.n	80014ac <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	3301      	adds	r3, #1
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	3303      	adds	r3, #3
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	3338      	adds	r3, #56	; 0x38
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	333c      	adds	r3, #60	; 0x3c
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	440b      	add	r3, r1
 80014a0:	3340      	adds	r3, #64	; 0x40
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	3301      	adds	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3b9      	bcc.n	800142a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e044      	b.n	8001546 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	f203 1369 	addw	r3, r3, #361	; 0x169
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	440b      	add	r3, r1
 80014e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	440b      	add	r3, r1
 80014f6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	440b      	add	r3, r1
 800150c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3301      	adds	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	d3b5      	bcc.n	80014bc <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	687e      	ldr	r6, [r7, #4]
 8001558:	466d      	mov	r5, sp
 800155a:	f106 0410 	add.w	r4, r6, #16
 800155e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	602b      	str	r3, [r5, #0]
 8001566:	1d33      	adds	r3, r6, #4
 8001568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f003 f84a 	bl	8004604 <USB_DevInit>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00d      	b.n	800159e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f005 facb 	bl	8006b32 <USB_DevDisconnect>

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_PCD_Start+0x16>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e016      	b.n	80015ea <HAL_PCD_Start+0x44>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 ffdf 	bl	800458c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80015ce:	2101      	movs	r1, #1
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f007 fb3c 	bl	8008c4e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f005 fa9f 	bl	8006b1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b088      	sub	sp, #32
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f005 faa1 	bl	8006b46 <USB_ReadInterrupts>
 8001604:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 fb1b 	bl	8001c4c <PCD_EP_ISR_Handler>

    return;
 8001616:	e119      	b.n	800184c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161e:	2b00      	cmp	r3, #0
 8001620:	d013      	beq.n	800164a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001634:	b292      	uxth	r2, r2
 8001636:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f007 f90f 	bl	800885e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001640:	2100      	movs	r1, #0
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f905 	bl	8001852 <HAL_PCD_SetAddress>

    return;
 8001648:	e100      	b.n	800184c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00c      	beq.n	800166e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800165c:	b29a      	uxth	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001666:	b292      	uxth	r2, r2
 8001668:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800166c:	e0ee      	b.n	800184c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00c      	beq.n	8001692 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001680:	b29a      	uxth	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800168a:	b292      	uxth	r2, r2
 800168c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001690:	e0dc      	b.n	800184c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d027      	beq.n	80016ec <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0204 	bic.w	r2, r2, #4
 80016ae:	b292      	uxth	r2, r2
 80016b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016bc:	b29a      	uxth	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0208 	bic.w	r2, r2, #8
 80016c6:	b292      	uxth	r2, r2
 80016c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f007 f8ff 	bl	80088d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016da:	b29a      	uxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016e4:	b292      	uxth	r2, r2
 80016e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016ea:	e0af      	b.n	800184c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8083 	beq.w	80017fe <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	77fb      	strb	r3, [r7, #31]
 80016fc:	e010      	b.n	8001720 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	7ffb      	ldrb	r3, [r7, #31]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	441a      	add	r2, r3
 800170a:	7ffb      	ldrb	r3, [r7, #31]
 800170c:	8812      	ldrh	r2, [r2, #0]
 800170e:	b292      	uxth	r2, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	3320      	adds	r3, #32
 8001714:	443b      	add	r3, r7
 8001716:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800171a:	7ffb      	ldrb	r3, [r7, #31]
 800171c:	3301      	adds	r3, #1
 800171e:	77fb      	strb	r3, [r7, #31]
 8001720:	7ffb      	ldrb	r3, [r7, #31]
 8001722:	2b07      	cmp	r3, #7
 8001724:	d9eb      	bls.n	80016fe <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800172e:	b29a      	uxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0201 	orr.w	r2, r2, #1
 8001738:	b292      	uxth	r2, r2
 800173a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001746:	b29a      	uxth	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	b292      	uxth	r2, r2
 8001752:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001756:	bf00      	nop
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001760:	b29b      	uxth	r3, r3
 8001762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f6      	beq.n	8001758 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001772:	b29a      	uxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800177c:	b292      	uxth	r2, r2
 800177e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	77fb      	strb	r3, [r7, #31]
 8001786:	e00f      	b.n	80017a8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001788:	7ffb      	ldrb	r3, [r7, #31]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	4611      	mov	r1, r2
 8001790:	7ffa      	ldrb	r2, [r7, #31]
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	440a      	add	r2, r1
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	3320      	adds	r3, #32
 800179a:	443b      	add	r3, r7
 800179c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80017a0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80017a2:	7ffb      	ldrb	r3, [r7, #31]
 80017a4:	3301      	adds	r3, #1
 80017a6:	77fb      	strb	r3, [r7, #31]
 80017a8:	7ffb      	ldrb	r3, [r7, #31]
 80017aa:	2b07      	cmp	r3, #7
 80017ac:	d9ec      	bls.n	8001788 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0208 	orr.w	r2, r2, #8
 80017c0:	b292      	uxth	r2, r2
 80017c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d8:	b292      	uxth	r2, r2
 80017da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0204 	orr.w	r2, r2, #4
 80017f0:	b292      	uxth	r2, r2
 80017f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f007 f850 	bl	800889c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80017fc:	e026      	b.n	800184c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00f      	beq.n	8001828 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800181a:	b292      	uxth	r2, r2
 800181c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f007 f80e 	bl	8008842 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001826:	e011      	b.n	800184c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00c      	beq.n	800184c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800183a:	b29a      	uxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001844:	b292      	uxth	r2, r2
 8001846:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800184a:	bf00      	nop
  }
}
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_PCD_SetAddress+0x1a>
 8001868:	2302      	movs	r3, #2
 800186a:	e013      	b.n	8001894 <HAL_PCD_SetAddress+0x42>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f005 f937 	bl	8006af8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	70fb      	strb	r3, [r7, #3]
 80018ae:	460b      	mov	r3, r1
 80018b0:	803b      	strh	r3, [r7, #0]
 80018b2:	4613      	mov	r3, r2
 80018b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	da0e      	bge.n	80018e0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2201      	movs	r2, #1
 80018dc:	705a      	strb	r2, [r3, #1]
 80018de:	e00e      	b.n	80018fe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	f003 0207 	and.w	r2, r3, #7
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	b2da      	uxtb	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800190a:	883a      	ldrh	r2, [r7, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	78ba      	ldrb	r2, [r7, #2]
 8001914:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001916:	78bb      	ldrb	r3, [r7, #2]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d102      	bne.n	8001922 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_PCD_EP_Open+0x94>
 800192c:	2302      	movs	r3, #2
 800192e:	e00e      	b.n	800194e <HAL_PCD_EP_Open+0xb2>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fe80 	bl	8004644 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800194c:	7afb      	ldrb	r3, [r7, #11]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001966:	2b00      	cmp	r3, #0
 8001968:	da0e      	bge.n	8001988 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	705a      	strb	r2, [r3, #1]
 8001986:	e00e      	b.n	80019a6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	f003 0207 	and.w	r2, r3, #7
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_PCD_EP_Close+0x6a>
 80019bc:	2302      	movs	r3, #2
 80019be:	e00e      	b.n	80019de <HAL_PCD_EP_Close+0x88>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 f9f8 	bl	8004dc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	460b      	mov	r3, r1
 80019f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019f6:	7afb      	ldrb	r3, [r7, #11]
 80019f8:	f003 0207 	and.w	r2, r3, #7
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2200      	movs	r2, #0
 8001a24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6979      	ldr	r1, [r7, #20]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 fbaf 	bl	800519c <USB_EPStartXfer>

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	f003 0207 	and.w	r2, r3, #7
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	460b      	mov	r3, r1
 8001a84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a86:	7afb      	ldrb	r3, [r7, #11]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6979      	ldr	r1, [r7, #20]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 fb61 	bl	800519c <USB_EPStartXfer>

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	f003 0207 	and.w	r2, r3, #7
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d901      	bls.n	8001b02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e04c      	b.n	8001b9c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	da0e      	bge.n	8001b28 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2201      	movs	r2, #1
 8001b24:	705a      	strb	r2, [r3, #1]
 8001b26:	e00c      	b.n	8001b42 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_PCD_EP_SetStall+0x7e>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e01c      	b.n	8001b9c <HAL_PCD_EP_SetStall+0xb8>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68f9      	ldr	r1, [r7, #12]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f004 fec4 	bl	80068fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d108      	bne.n	8001b92 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	f004 ffe9 	bl	8006b64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 020f 	and.w	r2, r3, #15
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d901      	bls.n	8001bc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e040      	b.n	8001c44 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	da0e      	bge.n	8001be8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2201      	movs	r2, #1
 8001be4:	705a      	strb	r2, [r3, #1]
 8001be6:	e00e      	b.n	8001c06 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	f003 0207 	and.w	r2, r3, #7
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_PCD_EP_ClrStall+0x82>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e00e      	b.n	8001c44 <HAL_PCD_EP_ClrStall+0xa0>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 feb2 	bl	800699e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b096      	sub	sp, #88	; 0x58
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c54:	e3bf      	b.n	80023d6 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001c70:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f040 8179 	bne.w	8001f6c <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d152      	bne.n	8001d2c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c96:	81fb      	strh	r3, [r7, #14]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	89fb      	ldrh	r3, [r7, #14]
 8001c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3328      	adds	r3, #40	; 0x28
 8001cae:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	441a      	add	r2, r3
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cea:	2100      	movs	r1, #0
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f006 fd8e 	bl	800880e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 836b 	beq.w	80023d6 <PCD_EP_ISR_Handler+0x78a>
 8001d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f040 8366 	bne.w	80023d6 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b292      	uxth	r2, r2
 8001d1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d2a:	e354      	b.n	80023d6 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d32:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d034      	beq.n	8001db4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3306      	adds	r3, #6
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d74:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d82:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d86:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	f004 ff3b 	bl	8006c04 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	823b      	strh	r3, [r7, #16]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	8a3a      	ldrh	r2, [r7, #16]
 8001da4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001da8:	b292      	uxth	r2, r2
 8001daa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f006 fd01 	bl	80087b4 <HAL_PCD_SetupStageCallback>
 8001db2:	e310      	b.n	80023d6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001db4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f280 830c 	bge.w	80023d6 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dca:	4013      	ands	r3, r2
 8001dcc:	83fb      	strh	r3, [r7, #30]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	8bfa      	ldrh	r2, [r7, #30]
 8001dd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd8:	b292      	uxth	r2, r2
 8001dda:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	3306      	adds	r3, #6
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e06:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d019      	beq.n	8001e44 <PCD_EP_ISR_Handler+0x1f8>
 8001e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d015      	beq.n	8001e44 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1e:	6959      	ldr	r1, [r3, #20]
 8001e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e22:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e26:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	f004 feeb 	bl	8006c04 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	441a      	add	r2, r3
 8001e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f006 fcca 	bl	80087d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001e4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 82bd 	bne.w	80023d6 <PCD_EP_ISR_Handler+0x78a>
 8001e5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001e64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001e68:	f000 82b5 	beq.w	80023d6 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4413      	add	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	801a      	strh	r2, [r3, #0]
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8001ea2:	d91d      	bls.n	8001ee0 <PCD_EP_ISR_Handler+0x294>
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8001eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <PCD_EP_ISR_Handler+0x272>
 8001eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	029b      	lsls	r3, r3, #10
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	801a      	strh	r2, [r3, #0]
 8001ede:	e026      	b.n	8001f2e <PCD_EP_ISR_Handler+0x2e2>
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10a      	bne.n	8001efe <PCD_EP_ISR_Handler+0x2b2>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	801a      	strh	r2, [r3, #0]
 8001efc:	e017      	b.n	8001f2e <PCD_EP_ISR_Handler+0x2e2>
 8001efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	085b      	lsrs	r3, r3, #1
 8001f04:	647b      	str	r3, [r7, #68]	; 0x44
 8001f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <PCD_EP_ISR_Handler+0x2cc>
 8001f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f14:	3301      	adds	r3, #1
 8001f16:	647b      	str	r3, [r7, #68]	; 0x44
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	029b      	lsls	r3, r3, #10
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3e:	827b      	strh	r3, [r7, #18]
 8001f40:	8a7b      	ldrh	r3, [r7, #18]
 8001f42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f46:	827b      	strh	r3, [r7, #18]
 8001f48:	8a7b      	ldrh	r3, [r7, #18]
 8001f4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f4e:	827b      	strh	r3, [r7, #18]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	8a7b      	ldrh	r3, [r7, #18]
 8001f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	8013      	strh	r3, [r2, #0]
 8001f6a:	e234      	b.n	80023d6 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f80:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f280 80fc 	bge.w	8002182 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001fb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fbc:	b292      	uxth	r2, r2
 8001fbe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fc0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd8:	7b1b      	ldrb	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d125      	bne.n	800202a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3306      	adds	r3, #6
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002006:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800200a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8092 	beq.w	8002138 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201a:	6959      	ldr	r1, [r3, #20]
 800201c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201e:	88da      	ldrh	r2, [r3, #6]
 8002020:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002024:	f004 fdee 	bl	8006c04 <USB_ReadPMA>
 8002028:	e086      	b.n	8002138 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800202a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202c:	78db      	ldrb	r3, [r3, #3]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d10a      	bne.n	8002048 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002032:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002036:	461a      	mov	r2, r3
 8002038:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f9d9 	bl	80023f2 <HAL_PCD_EP_DB_Receive>
 8002040:	4603      	mov	r3, r0
 8002042:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002046:	e077      	b.n	8002138 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800205e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002062:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	441a      	add	r2, r3
 8002074:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800207c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002088:	b29b      	uxth	r3, r3
 800208a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d024      	beq.n	80020f0 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	3302      	adds	r3, #2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80020d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d02e      	beq.n	8002138 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e0:	6959      	ldr	r1, [r3, #20]
 80020e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e4:	891a      	ldrh	r2, [r3, #8]
 80020e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020ea:	f004 fd8b 	bl	8006c04 <USB_ReadPMA>
 80020ee:	e023      	b.n	8002138 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	3306      	adds	r3, #6
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	4413      	add	r3, r2
 800210e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002118:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800211c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212a:	6959      	ldr	r1, [r3, #20]
 800212c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212e:	895a      	ldrh	r2, [r3, #10]
 8002130:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002134:	f004 fd66 	bl	8006c04 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002140:	441a      	add	r2, r3
 8002142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002144:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800214e:	441a      	add	r2, r3
 8002150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002152:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <PCD_EP_ISR_Handler+0x51c>
 800215c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	429a      	cmp	r2, r3
 8002166:	d206      	bcs.n	8002176 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f006 fb32 	bl	80087d8 <HAL_PCD_DataOutStageCallback>
 8002174:	e005      	b.n	8002182 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800217c:	4618      	mov	r0, r3
 800217e:	f003 f80d 	bl	800519c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002182:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8123 	beq.w	80023d6 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002190:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	441a      	add	r2, r3
 80021d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80021d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021dc:	b29b      	uxth	r3, r3
 80021de:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80021e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e2:	78db      	ldrb	r3, [r3, #3]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	f040 80a2 	bne.w	800232e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80021ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80021f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f2:	7b1b      	ldrb	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8093 	beq.w	8002320 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d046      	beq.n	8002294 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002208:	785b      	ldrb	r3, [r3, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d126      	bne.n	800225c <PCD_EP_ISR_Handler+0x610>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800221c:	b29b      	uxth	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	4413      	add	r3, r2
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	011a      	lsls	r2, r3, #4
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	4413      	add	r3, r2
 8002230:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002234:	623b      	str	r3, [r7, #32]
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002240:	b29a      	uxth	r2, r3
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	801a      	strh	r2, [r3, #0]
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002254:	b29a      	uxth	r2, r3
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	801a      	strh	r2, [r3, #0]
 800225a:	e061      	b.n	8002320 <PCD_EP_ISR_Handler+0x6d4>
 800225c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800225e:	785b      	ldrb	r3, [r3, #1]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d15d      	bne.n	8002320 <PCD_EP_ISR_Handler+0x6d4>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002272:	b29b      	uxth	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	4413      	add	r3, r2
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	011a      	lsls	r2, r3, #4
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	4413      	add	r3, r2
 8002286:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	2200      	movs	r2, #0
 8002290:	801a      	strh	r2, [r3, #0]
 8002292:	e045      	b.n	8002320 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229c:	785b      	ldrb	r3, [r3, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d126      	bne.n	80022f0 <PCD_EP_ISR_Handler+0x6a4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b6:	4413      	add	r3, r2
 80022b8:	637b      	str	r3, [r7, #52]	; 0x34
 80022ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	011a      	lsls	r2, r3, #4
 80022c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c2:	4413      	add	r3, r2
 80022c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	801a      	strh	r2, [r3, #0]
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	801a      	strh	r2, [r3, #0]
 80022ee:	e017      	b.n	8002320 <PCD_EP_ISR_Handler+0x6d4>
 80022f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d113      	bne.n	8002320 <PCD_EP_ISR_Handler+0x6d4>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002300:	b29b      	uxth	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002306:	4413      	add	r3, r2
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	011a      	lsls	r2, r3, #4
 8002310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002312:	4413      	add	r3, r2
 8002314:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	2200      	movs	r2, #0
 800231e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f006 fa71 	bl	800880e <HAL_PCD_DataInStageCallback>
 800232c:	e053      	b.n	80023d6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800232e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d146      	bne.n	80023c8 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	3302      	adds	r3, #2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002362:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800236e:	429a      	cmp	r2, r3
 8002370:	d907      	bls.n	8002382 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800237a:	1ad2      	subs	r2, r2, r3
 800237c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237e:	619a      	str	r2, [r3, #24]
 8002380:	e002      	b.n	8002388 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d106      	bne.n	800239e <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f006 fa39 	bl	800880e <HAL_PCD_DataInStageCallback>
 800239c:	e01b      	b.n	80023d6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800239e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023a6:	441a      	add	r2, r3
 80023a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023aa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80023ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023b4:	441a      	add	r2, r3
 80023b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 feeb 	bl	800519c <USB_EPStartXfer>
 80023c6:	e006      	b.n	80023d6 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80023c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023cc:	461a      	mov	r2, r3
 80023ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f91b 	bl	800260c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023de:	b29b      	uxth	r3, r3
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f6ff ac37 	blt.w	8001c56 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3758      	adds	r7, #88	; 0x58
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b088      	sub	sp, #32
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	4613      	mov	r3, r2
 80023fe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d07e      	beq.n	8002508 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	3302      	adds	r3, #2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002432:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	8b7b      	ldrh	r3, [r7, #26]
 800243a:	429a      	cmp	r2, r3
 800243c:	d306      	bcc.n	800244c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	8b7b      	ldrh	r3, [r7, #26]
 8002444:	1ad2      	subs	r2, r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	619a      	str	r2, [r3, #24]
 800244a:	e002      	b.n	8002452 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d123      	bne.n	80024a2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002474:	833b      	strh	r3, [r7, #24]
 8002476:	8b3b      	ldrh	r3, [r7, #24]
 8002478:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800247c:	833b      	strh	r3, [r7, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	441a      	add	r2, r3
 800248c:	8b3b      	ldrh	r3, [r7, #24]
 800248e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249e:	b29b      	uxth	r3, r3
 80024a0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01f      	beq.n	80024ec <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	82fb      	strh	r3, [r7, #22]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	8afb      	ldrh	r3, [r7, #22]
 80024d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024ec:	8b7b      	ldrh	r3, [r7, #26]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8087 	beq.w	8002602 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	6959      	ldr	r1, [r3, #20]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	891a      	ldrh	r2, [r3, #8]
 8002500:	8b7b      	ldrh	r3, [r7, #26]
 8002502:	f004 fb7f 	bl	8006c04 <USB_ReadPMA>
 8002506:	e07c      	b.n	8002602 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	3306      	adds	r3, #6
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002530:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	8b7b      	ldrh	r3, [r7, #26]
 8002538:	429a      	cmp	r2, r3
 800253a:	d306      	bcc.n	800254a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	8b7b      	ldrh	r3, [r7, #26]
 8002542:	1ad2      	subs	r2, r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	619a      	str	r2, [r3, #24]
 8002548:	e002      	b.n	8002550 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d123      	bne.n	80025a0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800256e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002572:	83fb      	strh	r3, [r7, #30]
 8002574:	8bfb      	ldrh	r3, [r7, #30]
 8002576:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800257a:	83fb      	strh	r3, [r7, #30]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	441a      	add	r2, r3
 800258a:	8bfb      	ldrh	r3, [r7, #30]
 800258c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259c:	b29b      	uxth	r3, r3
 800259e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11f      	bne.n	80025ea <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c4:	83bb      	strh	r3, [r7, #28]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	441a      	add	r2, r3
 80025d4:	8bbb      	ldrh	r3, [r7, #28]
 80025d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025ea:	8b7b      	ldrh	r3, [r7, #26]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6959      	ldr	r1, [r3, #20]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	895a      	ldrh	r2, [r3, #10]
 80025fc:	8b7b      	ldrh	r3, [r7, #26]
 80025fe:	f004 fb01 	bl	8006c04 <USB_ReadPMA>
    }
  }

  return count;
 8002602:	8b7b      	ldrh	r3, [r7, #26]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b0a4      	sub	sp, #144	; 0x90
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 81dd 	beq.w	80029e0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262e:	b29b      	uxth	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	3302      	adds	r3, #2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	4413      	add	r3, r2
 8002644:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800265a:	429a      	cmp	r2, r3
 800265c:	d907      	bls.n	800266e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	619a      	str	r2, [r3, #24]
 800266c:	e002      	b.n	8002674 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f040 80b9 	bne.w	80027f0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	785b      	ldrb	r3, [r3, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d126      	bne.n	80026d4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002694:	b29b      	uxth	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	4413      	add	r3, r2
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	011a      	lsls	r2, r3, #4
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	4413      	add	r3, r2
 80026a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	801a      	strh	r2, [r3, #0]
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e01a      	b.n	800270a <HAL_PCD_EP_DB_Transmit+0xfe>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	785b      	ldrb	r3, [r3, #1]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d116      	bne.n	800270a <HAL_PCD_EP_DB_Transmit+0xfe>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	4413      	add	r3, r2
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	011a      	lsls	r2, r3, #4
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	4413      	add	r3, r2
 80026fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	2200      	movs	r2, #0
 8002708:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d126      	bne.n	8002766 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002726:	b29b      	uxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	4413      	add	r3, r2
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	011a      	lsls	r2, r3, #4
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4413      	add	r3, r2
 800273a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274a:	b29a      	uxth	r2, r3
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	801a      	strh	r2, [r3, #0]
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800275a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800275e:	b29a      	uxth	r2, r3
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	801a      	strh	r2, [r3, #0]
 8002764:	e017      	b.n	8002796 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	785b      	ldrb	r3, [r3, #1]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d113      	bne.n	8002796 <HAL_PCD_EP_DB_Transmit+0x18a>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	4413      	add	r3, r2
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	011a      	lsls	r2, r3, #4
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	4413      	add	r3, r2
 800278a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	2200      	movs	r2, #0
 8002794:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	4619      	mov	r1, r3
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f006 f836 	bl	800880e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 82fc 	beq.w	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c8:	82fb      	strh	r3, [r7, #22]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	441a      	add	r2, r3
 80027d8:	8afb      	ldrh	r3, [r7, #22]
 80027da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	8013      	strh	r3, [r2, #0]
 80027ee:	e2da      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d021      	beq.n	800283e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002814:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	441a      	add	r2, r3
 8002826:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800282a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800282e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283a:	b29b      	uxth	r3, r3
 800283c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002844:	2b01      	cmp	r3, #1
 8002846:	f040 82ae 	bne.w	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002852:	441a      	add	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002860:	441a      	add	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	6a1a      	ldr	r2, [r3, #32]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	429a      	cmp	r2, r3
 8002870:	d30b      	bcc.n	800288a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	6a1a      	ldr	r2, [r3, #32]
 800287e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	621a      	str	r2, [r3, #32]
 8002888:	e017      	b.n	80028ba <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d108      	bne.n	80028a4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002892:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028a2:	e00a      	b.n	80028ba <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2200      	movs	r2, #0
 80028b8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	785b      	ldrb	r3, [r3, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d165      	bne.n	800298e <HAL_PCD_EP_DB_Transmit+0x382>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d6:	4413      	add	r3, r2
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	011a      	lsls	r2, r3, #4
 80028e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e2:	4413      	add	r3, r2
 80028e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028fe:	2b3e      	cmp	r3, #62	; 0x3e
 8002900:	d91d      	bls.n	800293e <HAL_PCD_EP_DB_Transmit+0x332>
 8002902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	64bb      	str	r3, [r7, #72]	; 0x48
 800290a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <HAL_PCD_EP_DB_Transmit+0x310>
 8002916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002918:	3b01      	subs	r3, #1
 800291a:	64bb      	str	r3, [r7, #72]	; 0x48
 800291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29a      	uxth	r2, r3
 8002922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002924:	b29b      	uxth	r3, r3
 8002926:	029b      	lsls	r3, r3, #10
 8002928:	b29b      	uxth	r3, r3
 800292a:	4313      	orrs	r3, r2
 800292c:	b29b      	uxth	r3, r3
 800292e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002936:	b29a      	uxth	r2, r3
 8002938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293a:	801a      	strh	r2, [r3, #0]
 800293c:	e044      	b.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800293e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10a      	bne.n	800295c <HAL_PCD_EP_DB_Transmit+0x350>
 8002946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002954:	b29a      	uxth	r2, r3
 8002956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	e035      	b.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800295c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	64bb      	str	r3, [r7, #72]	; 0x48
 8002964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002972:	3301      	adds	r3, #1
 8002974:	64bb      	str	r3, [r7, #72]	; 0x48
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	b29a      	uxth	r2, r3
 800297c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297e:	b29b      	uxth	r3, r3
 8002980:	029b      	lsls	r3, r3, #10
 8002982:	b29b      	uxth	r3, r3
 8002984:	4313      	orrs	r3, r2
 8002986:	b29a      	uxth	r2, r3
 8002988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	e01c      	b.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	785b      	ldrb	r3, [r3, #1]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d118      	bne.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	647b      	str	r3, [r7, #68]	; 0x44
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029aa:	4413      	add	r3, r2
 80029ac:	647b      	str	r3, [r7, #68]	; 0x44
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	011a      	lsls	r2, r3, #4
 80029b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b6:	4413      	add	r3, r2
 80029b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029bc:	643b      	str	r3, [r7, #64]	; 0x40
 80029be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	6959      	ldr	r1, [r3, #20]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	891a      	ldrh	r2, [r3, #8]
 80029d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f004 f8ce 	bl	8006b7a <USB_WritePMA>
 80029de:	e1e2      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	3306      	adds	r3, #6
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a08:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d307      	bcc.n	8002a28 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a20:	1ad2      	subs	r2, r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	619a      	str	r2, [r3, #24]
 8002a26:	e002      	b.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 80c0 	bne.w	8002bb8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	785b      	ldrb	r3, [r3, #1]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d126      	bne.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x482>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a54:	4413      	add	r3, r2
 8002a56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	011a      	lsls	r2, r3, #4
 8002a5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a60:	4413      	add	r3, r2
 8002a62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a66:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a8a:	801a      	strh	r2, [r3, #0]
 8002a8c:	e01a      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	785b      	ldrb	r3, [r3, #1]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d116      	bne.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aaa:	4413      	add	r3, r2
 8002aac:	667b      	str	r3, [r7, #100]	; 0x64
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	011a      	lsls	r2, r3, #4
 8002ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002abc:	663b      	str	r3, [r7, #96]	; 0x60
 8002abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	677b      	str	r3, [r7, #116]	; 0x74
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d12b      	bne.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x51e>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae6:	4413      	add	r3, r2
 8002ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	011a      	lsls	r2, r3, #4
 8002af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af2:	4413      	add	r3, r2
 8002af4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002af8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	e017      	b.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	785b      	ldrb	r3, [r3, #1]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d113      	bne.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b40:	4413      	add	r3, r2
 8002b42:	677b      	str	r3, [r7, #116]	; 0x74
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	011a      	lsls	r2, r3, #4
 8002b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b52:	673b      	str	r3, [r7, #112]	; 0x70
 8002b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b56:	2200      	movs	r2, #0
 8002b58:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f005 fe54 	bl	800880e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 811a 	bne.w	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	441a      	add	r2, r3
 8002b9e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	8013      	strh	r3, [r2, #0]
 8002bb6:	e0f6      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d121      	bne.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f040 80ca 	bne.w	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c1a:	441a      	add	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c28:	441a      	add	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6a1a      	ldr	r2, [r3, #32]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d30b      	bcc.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c4a:	1ad2      	subs	r2, r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	621a      	str	r2, [r3, #32]
 8002c50:	e017      	b.n	8002c82 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002c5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c6a:	e00a      	b.n	8002c82 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	657b      	str	r3, [r7, #84]	; 0x54
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d165      	bne.n	8002d5c <HAL_PCD_EP_DB_Transmit+0x750>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca4:	4413      	add	r3, r2
 8002ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	011a      	lsls	r2, r3, #4
 8002cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc6:	801a      	strh	r2, [r3, #0]
 8002cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ccc:	2b3e      	cmp	r3, #62	; 0x3e
 8002cce:	d91d      	bls.n	8002d0c <HAL_PCD_EP_DB_Transmit+0x700>
 8002cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <HAL_PCD_EP_DB_Transmit+0x6de>
 8002ce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	029b      	lsls	r3, r3, #10
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d08:	801a      	strh	r2, [r3, #0]
 8002d0a:	e041      	b.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x784>
 8002d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <HAL_PCD_EP_DB_Transmit+0x71e>
 8002d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d26:	801a      	strh	r2, [r3, #0]
 8002d28:	e032      	b.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x784>
 8002d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x738>
 8002d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d40:	3301      	adds	r3, #1
 8002d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	029b      	lsls	r3, r3, #10
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	4313      	orrs	r3, r2
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	e019      	b.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x784>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	785b      	ldrb	r3, [r3, #1]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d115      	bne.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x784>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d72:	4413      	add	r3, r2
 8002d74:	657b      	str	r3, [r7, #84]	; 0x54
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	011a      	lsls	r2, r3, #4
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7e:	4413      	add	r3, r2
 8002d80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d84:	653b      	str	r3, [r7, #80]	; 0x50
 8002d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	6959      	ldr	r1, [r3, #20]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	895a      	ldrh	r2, [r3, #10]
 8002d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f003 feea 	bl	8006b7a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc0:	82bb      	strh	r3, [r7, #20]
 8002dc2:	8abb      	ldrh	r3, [r7, #20]
 8002dc4:	f083 0310 	eor.w	r3, r3, #16
 8002dc8:	82bb      	strh	r3, [r7, #20]
 8002dca:	8abb      	ldrh	r3, [r7, #20]
 8002dcc:	f083 0320 	eor.w	r3, r3, #32
 8002dd0:	82bb      	strh	r3, [r7, #20]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	441a      	add	r2, r3
 8002de0:	8abb      	ldrh	r3, [r7, #20]
 8002de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3790      	adds	r7, #144	; 0x90
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	817b      	strh	r3, [r7, #10]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e1e:	897b      	ldrh	r3, [r7, #10]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	e009      	b.n	8002e4a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e36:	897a      	ldrh	r2, [r7, #10]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e4a:	893b      	ldrh	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2200      	movs	r2, #0
 8002e54:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	80da      	strh	r2, [r3, #6]
 8002e5e:	e00b      	b.n	8002e78 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2201      	movs	r2, #1
 8002e64:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e272      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 8087 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ea4:	4b92      	ldr	r3, [pc, #584]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d00c      	beq.n	8002eca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eb0:	4b8f      	ldr	r3, [pc, #572]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d112      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x5e>
 8002ebc:	4b8c      	ldr	r3, [pc, #560]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eca:	4b89      	ldr	r3, [pc, #548]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d06c      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x12c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d168      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e24c      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x76>
 8002eec:	4b80      	ldr	r3, [pc, #512]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a7f      	ldr	r2, [pc, #508]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	e02e      	b.n	8002f58 <HAL_RCC_OscConfig+0xd4>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x98>
 8002f02:	4b7b      	ldr	r3, [pc, #492]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a7a      	ldr	r2, [pc, #488]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a77      	ldr	r2, [pc, #476]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e01d      	b.n	8002f58 <HAL_RCC_OscConfig+0xd4>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0xbc>
 8002f26:	4b72      	ldr	r3, [pc, #456]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a71      	ldr	r2, [pc, #452]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b6f      	ldr	r3, [pc, #444]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6e      	ldr	r2, [pc, #440]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0xd4>
 8002f40:	4b6b      	ldr	r3, [pc, #428]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a6a      	ldr	r2, [pc, #424]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b68      	ldr	r3, [pc, #416]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a67      	ldr	r2, [pc, #412]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fd fe98 	bl	8000c94 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fd fe94 	bl	8000c94 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e200      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	4b5d      	ldr	r3, [pc, #372]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0xe4>
 8002f86:	e014      	b.n	8002fb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fd fe84 	bl	8000c94 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fd fe80 	bl	8000c94 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e1ec      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x10c>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d063      	beq.n	8003086 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fbe:	4b4c      	ldr	r3, [pc, #304]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fca:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d11c      	bne.n	8003010 <HAL_RCC_OscConfig+0x18c>
 8002fd6:	4b46      	ldr	r3, [pc, #280]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d116      	bne.n	8003010 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_RCC_OscConfig+0x176>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e1c0      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffa:	4b3d      	ldr	r3, [pc, #244]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4939      	ldr	r1, [pc, #228]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300e:	e03a      	b.n	8003086 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003018:	4b36      	ldr	r3, [pc, #216]	; (80030f4 <HAL_RCC_OscConfig+0x270>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7fd fe39 	bl	8000c94 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003026:	f7fd fe35 	bl	8000c94 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e1a1      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003038:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003044:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4927      	ldr	r1, [pc, #156]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 8003054:	4313      	orrs	r3, r2
 8003056:	600b      	str	r3, [r1, #0]
 8003058:	e015      	b.n	8003086 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305a:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <HAL_RCC_OscConfig+0x270>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fd fe18 	bl	8000c94 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003068:	f7fd fe14 	bl	8000c94 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e180      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307a:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d03a      	beq.n	8003108 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d019      	beq.n	80030ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309a:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <HAL_RCC_OscConfig+0x274>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a0:	f7fd fdf8 	bl	8000c94 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fd fdf4 	bl	8000c94 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e160      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030c6:	2001      	movs	r0, #1
 80030c8:	f000 face 	bl	8003668 <RCC_Delay>
 80030cc:	e01c      	b.n	8003108 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <HAL_RCC_OscConfig+0x274>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d4:	f7fd fdde 	bl	8000c94 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030da:	e00f      	b.n	80030fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030dc:	f7fd fdda 	bl	8000c94 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d908      	bls.n	80030fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e146      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000
 80030f4:	42420000 	.word	0x42420000
 80030f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	4b92      	ldr	r3, [pc, #584]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e9      	bne.n	80030dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80a6 	beq.w	8003262 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311a:	4b8b      	ldr	r3, [pc, #556]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10d      	bne.n	8003142 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	4b88      	ldr	r3, [pc, #544]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	4a87      	ldr	r2, [pc, #540]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003130:	61d3      	str	r3, [r2, #28]
 8003132:	4b85      	ldr	r3, [pc, #532]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003142:	4b82      	ldr	r3, [pc, #520]	; (800334c <HAL_RCC_OscConfig+0x4c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d118      	bne.n	8003180 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314e:	4b7f      	ldr	r3, [pc, #508]	; (800334c <HAL_RCC_OscConfig+0x4c8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a7e      	ldr	r2, [pc, #504]	; (800334c <HAL_RCC_OscConfig+0x4c8>)
 8003154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315a:	f7fd fd9b 	bl	8000c94 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003162:	f7fd fd97 	bl	8000c94 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b64      	cmp	r3, #100	; 0x64
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e103      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	4b75      	ldr	r3, [pc, #468]	; (800334c <HAL_RCC_OscConfig+0x4c8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x312>
 8003188:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4a6e      	ldr	r2, [pc, #440]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6213      	str	r3, [r2, #32]
 8003194:	e02d      	b.n	80031f2 <HAL_RCC_OscConfig+0x36e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x334>
 800319e:	4b6a      	ldr	r3, [pc, #424]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4a69      	ldr	r2, [pc, #420]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	6213      	str	r3, [r2, #32]
 80031aa:	4b67      	ldr	r3, [pc, #412]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	4a66      	ldr	r2, [pc, #408]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	6213      	str	r3, [r2, #32]
 80031b6:	e01c      	b.n	80031f2 <HAL_RCC_OscConfig+0x36e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b05      	cmp	r3, #5
 80031be:	d10c      	bne.n	80031da <HAL_RCC_OscConfig+0x356>
 80031c0:	4b61      	ldr	r3, [pc, #388]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4a60      	ldr	r2, [pc, #384]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	f043 0304 	orr.w	r3, r3, #4
 80031ca:	6213      	str	r3, [r2, #32]
 80031cc:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	4a5d      	ldr	r2, [pc, #372]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6213      	str	r3, [r2, #32]
 80031d8:	e00b      	b.n	80031f2 <HAL_RCC_OscConfig+0x36e>
 80031da:	4b5b      	ldr	r3, [pc, #364]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4a5a      	ldr	r2, [pc, #360]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6213      	str	r3, [r2, #32]
 80031e6:	4b58      	ldr	r3, [pc, #352]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4a57      	ldr	r2, [pc, #348]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	f023 0304 	bic.w	r3, r3, #4
 80031f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d015      	beq.n	8003226 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fa:	f7fd fd4b 	bl	8000c94 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f7fd fd47 	bl	8000c94 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e0b1      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	4b4b      	ldr	r3, [pc, #300]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ee      	beq.n	8003202 <HAL_RCC_OscConfig+0x37e>
 8003224:	e014      	b.n	8003250 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003226:	f7fd fd35 	bl	8000c94 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fd fd31 	bl	8000c94 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	; 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e09b      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003244:	4b40      	ldr	r3, [pc, #256]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1ee      	bne.n	800322e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d105      	bne.n	8003262 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003256:	4b3c      	ldr	r3, [pc, #240]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	4a3b      	ldr	r2, [pc, #236]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003260:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8087 	beq.w	800337a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800326c:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 030c 	and.w	r3, r3, #12
 8003274:	2b08      	cmp	r3, #8
 8003276:	d061      	beq.n	800333c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d146      	bne.n	800330e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003280:	4b33      	ldr	r3, [pc, #204]	; (8003350 <HAL_RCC_OscConfig+0x4cc>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003286:	f7fd fd05 	bl	8000c94 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328e:	f7fd fd01 	bl	8000c94 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e06d      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a0:	4b29      	ldr	r3, [pc, #164]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f0      	bne.n	800328e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b4:	d108      	bne.n	80032c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	4921      	ldr	r1, [pc, #132]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c8:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a19      	ldr	r1, [r3, #32]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	430b      	orrs	r3, r1
 80032da:	491b      	ldr	r1, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x4cc>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e6:	f7fd fcd5 	bl	8000c94 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fd fcd1 	bl	8000c94 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e03d      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x46a>
 800330c:	e035      	b.n	800337a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_RCC_OscConfig+0x4cc>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fd fcbe 	bl	8000c94 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fd fcba 	bl	8000c94 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e026      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x498>
 800333a:	e01e      	b.n	800337a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d107      	bne.n	8003354 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e019      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
 8003348:	40021000 	.word	0x40021000
 800334c:	40007000 	.word	0x40007000
 8003350:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	429a      	cmp	r2, r3
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d001      	beq.n	800337a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40021000 	.word	0x40021000

08003388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0d0      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800339c:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d910      	bls.n	80033cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b67      	ldr	r3, [pc, #412]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 0207 	bic.w	r2, r3, #7
 80033b2:	4965      	ldr	r1, [pc, #404]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b63      	ldr	r3, [pc, #396]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0b8      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e4:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4a58      	ldr	r2, [pc, #352]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033fc:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a52      	ldr	r2, [pc, #328]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003406:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003408:	4b50      	ldr	r3, [pc, #320]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	494d      	ldr	r1, [pc, #308]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d040      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d115      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e07f      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e073      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003456:	4b3d      	ldr	r3, [pc, #244]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e06b      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003466:	4b39      	ldr	r3, [pc, #228]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4936      	ldr	r1, [pc, #216]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003478:	f7fd fc0c 	bl	8000c94 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fd fc08 	bl	8000c94 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e053      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	4b2d      	ldr	r3, [pc, #180]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 020c 	and.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1eb      	bne.n	8003480 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d210      	bcs.n	80034d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 0207 	bic.w	r2, r3, #7
 80034be:	4922      	ldr	r1, [pc, #136]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e032      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4916      	ldr	r1, [pc, #88]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	490e      	ldr	r1, [pc, #56]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003516:	f000 f821 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800351a:	4602      	mov	r2, r0
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	490a      	ldr	r1, [pc, #40]	; (8003550 <HAL_RCC_ClockConfig+0x1c8>)
 8003528:	5ccb      	ldrb	r3, [r1, r3]
 800352a:	fa22 f303 	lsr.w	r3, r2, r3
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <HAL_RCC_ClockConfig+0x1cc>)
 8003530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_ClockConfig+0x1d0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd fb6a 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40022000 	.word	0x40022000
 800354c:	40021000 	.word	0x40021000
 8003550:	0800a308 	.word	0x0800a308
 8003554:	20000000 	.word	0x20000000
 8003558:	20000004 	.word	0x20000004

0800355c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	2300      	movs	r3, #0
 8003570:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d002      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x30>
 8003586:	2b08      	cmp	r3, #8
 8003588:	d003      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x36>
 800358a:	e027      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800358e:	613b      	str	r3, [r7, #16]
      break;
 8003590:	e027      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	0c9b      	lsrs	r3, r3, #18
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	4a17      	ldr	r2, [pc, #92]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800359c:	5cd3      	ldrb	r3, [r2, r3]
 800359e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d010      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	0c5b      	lsrs	r3, r3, #17
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	4a11      	ldr	r2, [pc, #68]	; (80035fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80035b6:	5cd3      	ldrb	r3, [r2, r3]
 80035b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a0d      	ldr	r2, [pc, #52]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80035be:	fb03 f202 	mul.w	r2, r3, r2
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	e004      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	613b      	str	r3, [r7, #16]
      break;
 80035da:	e002      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80035de:	613b      	str	r3, [r7, #16]
      break;
 80035e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e2:	693b      	ldr	r3, [r7, #16]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	007a1200 	.word	0x007a1200
 80035f8:	0800a320 	.word	0x0800a320
 80035fc:	0800a330 	.word	0x0800a330
 8003600:	003d0900 	.word	0x003d0900

08003604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003608:	4b02      	ldr	r3, [pc, #8]	; (8003614 <HAL_RCC_GetHCLKFreq+0x10>)
 800360a:	681b      	ldr	r3, [r3, #0]
}
 800360c:	4618      	mov	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	20000000 	.word	0x20000000

08003618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800361c:	f7ff fff2 	bl	8003604 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <HAL_RCC_GetPCLK1Freq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	0800a318 	.word	0x0800a318

08003640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003644:	f7ff ffde 	bl	8003604 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	0adb      	lsrs	r3, r3, #11
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000
 8003664:	0800a318 	.word	0x0800a318

08003668 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <RCC_Delay+0x34>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <RCC_Delay+0x38>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	0a5b      	lsrs	r3, r3, #9
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003684:	bf00      	nop
  }
  while (Delay --);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	60fa      	str	r2, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f9      	bne.n	8003684 <RCC_Delay+0x1c>
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr
 800369c:	20000000 	.word	0x20000000
 80036a0:	10624dd3 	.word	0x10624dd3

080036a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d07d      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036c0:	2300      	movs	r3, #0
 80036c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c4:	4b4f      	ldr	r3, [pc, #316]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10d      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d0:	4b4c      	ldr	r3, [pc, #304]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	4a4b      	ldr	r2, [pc, #300]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036da:	61d3      	str	r3, [r2, #28]
 80036dc:	4b49      	ldr	r3, [pc, #292]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e8:	2301      	movs	r3, #1
 80036ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	4b46      	ldr	r3, [pc, #280]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d118      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f8:	4b43      	ldr	r3, [pc, #268]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a42      	ldr	r2, [pc, #264]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003702:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003704:	f7fd fac6 	bl	8000c94 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370a:	e008      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370c:	f7fd fac2 	bl	8000c94 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e06d      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371e:	4b3a      	ldr	r3, [pc, #232]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800372a:	4b36      	ldr	r3, [pc, #216]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003732:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d02e      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	429a      	cmp	r2, r3
 8003746:	d027      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003748:	4b2e      	ldr	r3, [pc, #184]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003750:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003752:	4b2e      	ldr	r3, [pc, #184]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003758:	4b2c      	ldr	r3, [pc, #176]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800375e:	4a29      	ldr	r2, [pc, #164]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d014      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fd fa91 	bl	8000c94 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003774:	e00a      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003776:	f7fd fa8d 	bl	8000c94 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f241 3288 	movw	r2, #5000	; 0x1388
 8003784:	4293      	cmp	r3, r2
 8003786:	d901      	bls.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e036      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ee      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4917      	ldr	r1, [pc, #92]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b0:	4b14      	ldr	r3, [pc, #80]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	4a13      	ldr	r2, [pc, #76]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c8:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	490b      	ldr	r1, [pc, #44]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037e6:	4b07      	ldr	r3, [pc, #28]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	4904      	ldr	r1, [pc, #16]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	40007000 	.word	0x40007000
 800380c:	42420440 	.word	0x42420440

08003810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e042      	b.n	80038a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fd f84a 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	; 0x24
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fdfb 	bl	8004450 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d16d      	bne.n	80039ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_UART_Transmit+0x2c>
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e066      	b.n	80039ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2221      	movs	r2, #33	; 0x21
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ee:	f7fd f9d1 	bl	8000c94 <HAL_GetTick>
 80038f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	88fa      	ldrh	r2, [r7, #6]
 80038fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003908:	d108      	bne.n	800391c <HAL_UART_Transmit+0x6c>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	e003      	b.n	8003924 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003920:	2300      	movs	r3, #0
 8003922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003924:	e02a      	b.n	800397c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fb4a 	bl	8003fca <UART_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e036      	b.n	80039ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10b      	bne.n	800395e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003954:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	3302      	adds	r3, #2
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	e007      	b.n	800396e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	781a      	ldrb	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	3301      	adds	r3, #1
 800396c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1cf      	bne.n	8003926 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2200      	movs	r2, #0
 800398e:	2140      	movs	r1, #64	; 0x40
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fb1a 	bl	8003fca <UART_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e006      	b.n	80039ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3720      	adds	r7, #32
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b08c      	sub	sp, #48	; 0x30
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	4613      	mov	r3, r2
 80039c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d14a      	bne.n	8003a66 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e043      	b.n	8003a68 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fb57 	bl	80040a6 <UART_Start_Receive_IT>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80039fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d12c      	bne.n	8003a60 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d125      	bne.n	8003a5a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	617b      	str	r3, [r7, #20]
   return(result);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f043 0310 	orr.w	r3, r3, #16
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a44:	627a      	str	r2, [r7, #36]	; 0x24
 8003a46:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6a39      	ldr	r1, [r7, #32]
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e5      	bne.n	8003a24 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8003a58:	e002      	b.n	8003a60 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003a60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a64:	e000      	b.n	8003a68 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
  }
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3730      	adds	r7, #48	; 0x30
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b0ba      	sub	sp, #232	; 0xe8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x66>
 8003ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fbff 	bl	80042d2 <UART_Receive_IT>
      return;
 8003ad4:	e25b      	b.n	8003f8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 80de 	beq.w	8003c9c <HAL_UART_IRQHandler+0x22c>
 8003ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d106      	bne.n	8003afa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80d1 	beq.w	8003c9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_UART_IRQHandler+0xae>
 8003b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f043 0201 	orr.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_UART_IRQHandler+0xd2>
 8003b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f043 0202 	orr.w	r2, r3, #2
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_UART_IRQHandler+0xf6>
 8003b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f043 0204 	orr.w	r2, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d011      	beq.n	8003b96 <HAL_UART_IRQHandler+0x126>
 8003b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d105      	bne.n	8003b8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f043 0208 	orr.w	r2, r3, #8
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 81f2 	beq.w	8003f84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_UART_IRQHandler+0x14e>
 8003bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fb8a 	bl	80042d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <HAL_UART_IRQHandler+0x17a>
 8003be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d04f      	beq.n	8003c8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fa94 	bl	8004118 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d041      	beq.n	8003c82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3314      	adds	r3, #20
 8003c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1d9      	bne.n	8003bfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d013      	beq.n	8003c7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	4a7e      	ldr	r2, [pc, #504]	; (8003e50 <HAL_UART_IRQHandler+0x3e0>)
 8003c58:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fd f98e 	bl	8000f80 <HAL_DMA_Abort_IT>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d016      	beq.n	8003c98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c74:	4610      	mov	r0, r2
 8003c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	e00e      	b.n	8003c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f99c 	bl	8003fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c80:	e00a      	b.n	8003c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f998 	bl	8003fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c88:	e006      	b.n	8003c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f994 	bl	8003fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c96:	e175      	b.n	8003f84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c98:	bf00      	nop
    return;
 8003c9a:	e173      	b.n	8003f84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	f040 814f 	bne.w	8003f44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 8148 	beq.w	8003f44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8141 	beq.w	8003f44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80b6 	beq.w	8003e54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8145 	beq.w	8003f88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d06:	429a      	cmp	r2, r3
 8003d08:	f080 813e 	bcs.w	8003f88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	f000 8088 	beq.w	8003e30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	330c      	adds	r3, #12
 8003d26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	330c      	adds	r3, #12
 8003d48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d4c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1d9      	bne.n	8003d20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3314      	adds	r3, #20
 8003d72:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d94:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e1      	bne.n	8003d6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3314      	adds	r3, #20
 8003dc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dcc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dd2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e3      	bne.n	8003da8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e00:	f023 0310 	bic.w	r3, r3, #16
 8003e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e12:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e14:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e3      	bne.n	8003dee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd f86d 	bl	8000f0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fc fb74 	bl	8000534 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e4c:	e09c      	b.n	8003f88 <HAL_UART_IRQHandler+0x518>
 8003e4e:	bf00      	nop
 8003e50:	080041dd 	.word	0x080041dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 808e 	beq.w	8003f8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8089 	beq.w	8003f8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e9e:	647a      	str	r2, [r7, #68]	; 0x44
 8003ea0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e3      	bne.n	8003e7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3314      	adds	r3, #20
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3314      	adds	r3, #20
 8003ed2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ed6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e3      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	330c      	adds	r3, #12
 8003efe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0310 	bic.w	r3, r3, #16
 8003f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	330c      	adds	r3, #12
 8003f18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f1c:	61fa      	str	r2, [r7, #28]
 8003f1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	69b9      	ldr	r1, [r7, #24]
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	617b      	str	r3, [r7, #20]
   return(result);
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e3      	bne.n	8003ef8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7fc faf9 	bl	8000534 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f42:	e023      	b.n	8003f8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <HAL_UART_IRQHandler+0x4f4>
 8003f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f951 	bl	8004204 <UART_Transmit_IT>
    return;
 8003f62:	e014      	b.n	8003f8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00e      	beq.n	8003f8e <HAL_UART_IRQHandler+0x51e>
 8003f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f990 	bl	80042a2 <UART_EndTransmit_IT>
    return;
 8003f82:	e004      	b.n	8003f8e <HAL_UART_IRQHandler+0x51e>
    return;
 8003f84:	bf00      	nop
 8003f86:	e002      	b.n	8003f8e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f88:	bf00      	nop
 8003f8a:	e000      	b.n	8003f8e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f8c:	bf00      	nop
  }
}
 8003f8e:	37e8      	adds	r7, #232	; 0xe8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b090      	sub	sp, #64	; 0x40
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fda:	e050      	b.n	800407e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d04c      	beq.n	800407e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x30>
 8003fea:	f7fc fe53 	bl	8000c94 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d241      	bcs.n	800407e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800401a:	637a      	str	r2, [r7, #52]	; 0x34
 800401c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e5      	bne.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3314      	adds	r3, #20
 8004034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	613b      	str	r3, [r7, #16]
   return(result);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	63bb      	str	r3, [r7, #56]	; 0x38
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3314      	adds	r3, #20
 800404c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800404e:	623a      	str	r2, [r7, #32]
 8004050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	69f9      	ldr	r1, [r7, #28]
 8004054:	6a3a      	ldr	r2, [r7, #32]
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	61bb      	str	r3, [r7, #24]
   return(result);
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e5      	bne.n	800402e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e00f      	b.n	800409e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	429a      	cmp	r2, r3
 800409a:	d09f      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3740      	adds	r7, #64	; 0x40
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b085      	sub	sp, #20
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	4613      	mov	r3, r2
 80040b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2222      	movs	r2, #34	; 0x22
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0220 	orr.w	r2, r2, #32
 800410a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004118:	b480      	push	{r7}
 800411a:	b095      	sub	sp, #84	; 0x54
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004140:	643a      	str	r2, [r7, #64]	; 0x40
 8004142:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e5      	bne.n	8004120 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3314      	adds	r3, #20
 800415a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	61fb      	str	r3, [r7, #28]
   return(result);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	64bb      	str	r3, [r7, #72]	; 0x48
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3314      	adds	r3, #20
 8004172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004174:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800417a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e5      	bne.n	8004154 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	2b01      	cmp	r3, #1
 800418e:	d119      	bne.n	80041c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	60bb      	str	r3, [r7, #8]
   return(result);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f023 0310 	bic.w	r3, r3, #16
 80041a6:	647b      	str	r3, [r7, #68]	; 0x44
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041b0:	61ba      	str	r2, [r7, #24]
 80041b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6979      	ldr	r1, [r7, #20]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	613b      	str	r3, [r7, #16]
   return(result);
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041d2:	bf00      	nop
 80041d4:	3754      	adds	r7, #84	; 0x54
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff fede 	bl	8003fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b21      	cmp	r3, #33	; 0x21
 8004216:	d13e      	bne.n	8004296 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004220:	d114      	bne.n	800424c <UART_Transmit_IT+0x48>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d110      	bne.n	800424c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800423e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	1c9a      	adds	r2, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	621a      	str	r2, [r3, #32]
 800424a:	e008      	b.n	800425e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	1c59      	adds	r1, r3, #1
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6211      	str	r1, [r2, #32]
 8004256:	781a      	ldrb	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29b      	uxth	r3, r3
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	4619      	mov	r1, r3
 800426c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004280:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004290:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004296:	2302      	movs	r3, #2
  }
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr

080042a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff fe66 	bl	8003f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b08c      	sub	sp, #48	; 0x30
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b22      	cmp	r3, #34	; 0x22
 80042e4:	f040 80ae 	bne.w	8004444 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f0:	d117      	bne.n	8004322 <UART_Receive_IT+0x50>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d113      	bne.n	8004322 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004310:	b29a      	uxth	r2, r3
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	1c9a      	adds	r2, r3, #2
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28
 8004320:	e026      	b.n	8004370 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004334:	d007      	beq.n	8004346 <UART_Receive_IT+0x74>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <UART_Receive_IT+0x82>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e008      	b.n	8004366 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004360:	b2da      	uxtb	r2, r3
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29b      	uxth	r3, r3
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	4619      	mov	r1, r3
 800437e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004380:	2b00      	cmp	r3, #0
 8004382:	d15d      	bne.n	8004440 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0220 	bic.w	r2, r2, #32
 8004392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0201 	bic.w	r2, r2, #1
 80043b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d135      	bne.n	8004436 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	330c      	adds	r3, #12
 80043d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	613b      	str	r3, [r7, #16]
   return(result);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f023 0310 	bic.w	r3, r3, #16
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	330c      	adds	r3, #12
 80043ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f0:	623a      	str	r2, [r7, #32]
 80043f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	69f9      	ldr	r1, [r7, #28]
 80043f6:	6a3a      	ldr	r2, [r7, #32]
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e5      	bne.n	80043d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	2b10      	cmp	r3, #16
 8004410:	d10a      	bne.n	8004428 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fc f880 	bl	8000534 <HAL_UARTEx_RxEventCallback>
 8004434:	e002      	b.n	800443c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fdb5 	bl	8003fa6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e002      	b.n	8004446 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	e000      	b.n	8004446 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004444:	2302      	movs	r3, #2
  }
}
 8004446:	4618      	mov	r0, r3
 8004448:	3730      	adds	r7, #48	; 0x30
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800448a:	f023 030c 	bic.w	r3, r3, #12
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	430b      	orrs	r3, r1
 8004496:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <UART_SetConfig+0x114>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d103      	bne.n	80044c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044b8:	f7ff f8c2 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	e002      	b.n	80044c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044c0:	f7ff f8aa 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 80044c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	009a      	lsls	r2, r3, #2
 80044d0:	441a      	add	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	4a22      	ldr	r2, [pc, #136]	; (8004568 <UART_SetConfig+0x118>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	0119      	lsls	r1, r3, #4
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009a      	lsls	r2, r3, #2
 80044f0:	441a      	add	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044fc:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <UART_SetConfig+0x118>)
 80044fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	2064      	movs	r0, #100	; 0x64
 8004506:	fb00 f303 	mul.w	r3, r0, r3
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	3332      	adds	r3, #50	; 0x32
 8004510:	4a15      	ldr	r2, [pc, #84]	; (8004568 <UART_SetConfig+0x118>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800451c:	4419      	add	r1, r3
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009a      	lsls	r2, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	fbb2 f2f3 	udiv	r2, r2, r3
 8004534:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <UART_SetConfig+0x118>)
 8004536:	fba3 0302 	umull	r0, r3, r3, r2
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	2064      	movs	r0, #100	; 0x64
 800453e:	fb00 f303 	mul.w	r3, r0, r3
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	3332      	adds	r3, #50	; 0x32
 8004548:	4a07      	ldr	r2, [pc, #28]	; (8004568 <UART_SetConfig+0x118>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	f003 020f 	and.w	r2, r3, #15
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	440a      	add	r2, r1
 800455a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40013800 	.word	0x40013800
 8004568:	51eb851f 	.word	0x51eb851f

0800456c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800456c:	b084      	sub	sp, #16
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	f107 0014 	add.w	r0, r7, #20
 800457a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	b004      	add	sp, #16
 800458a:	4770      	bx	lr

0800458c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800459c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80045a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80045c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	43db      	mvns	r3, r3
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4013      	ands	r3, r2
 80045d8:	b29a      	uxth	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004604:	b084      	sub	sp, #16
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	f107 0014 	add.w	r0, r7, #20
 8004612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	b004      	add	sp, #16
 8004642:	4770      	bx	lr

08004644 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004644:	b480      	push	{r7}
 8004646:	b09d      	sub	sp, #116	; 0x74
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	b29b      	uxth	r3, r3
 8004662:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	78db      	ldrb	r3, [r3, #3]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d81f      	bhi.n	80046b6 <USB_ActivateEndpoint+0x72>
 8004676:	a201      	add	r2, pc, #4	; (adr r2, 800467c <USB_ActivateEndpoint+0x38>)
 8004678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467c:	0800468d 	.word	0x0800468d
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046bf 	.word	0x080046bf
 8004688:	0800469b 	.word	0x0800469b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800468c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004690:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004694:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004698:	e012      	b.n	80046c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800469a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800469e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80046a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80046a6:	e00b      	b.n	80046c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80046b4:	e004      	b.n	80046c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80046bc:	e000      	b.n	80046c0 <USB_ActivateEndpoint+0x7c>
      break;
 80046be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	441a      	add	r2, r3
 80046ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046de:	b29b      	uxth	r3, r3
 80046e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	4313      	orrs	r3, r2
 8004702:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	441a      	add	r2, r3
 8004710:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800471c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004724:	b29b      	uxth	r3, r3
 8004726:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	7b1b      	ldrb	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f040 8178 	bne.w	8004a22 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8084 	beq.w	8004844 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	61bb      	str	r3, [r7, #24]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004746:	b29b      	uxth	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	4413      	add	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	011a      	lsls	r2, r3, #4
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	88db      	ldrh	r3, [r3, #6]
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	b29b      	uxth	r3, r3
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	827b      	strh	r3, [r7, #18]
 800477e:	8a7b      	ldrh	r3, [r7, #18]
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01b      	beq.n	80047c0 <USB_ActivateEndpoint+0x17c>
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	823b      	strh	r3, [r7, #16]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	441a      	add	r2, r3
 80047aa:	8a3b      	ldrh	r3, [r7, #16]
 80047ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047bc:	b29b      	uxth	r3, r3
 80047be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	78db      	ldrb	r3, [r3, #3]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d020      	beq.n	800480a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047de:	81bb      	strh	r3, [r7, #12]
 80047e0:	89bb      	ldrh	r3, [r7, #12]
 80047e2:	f083 0320 	eor.w	r3, r3, #32
 80047e6:	81bb      	strh	r3, [r7, #12]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	89bb      	ldrh	r3, [r7, #12]
 80047f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004804:	b29b      	uxth	r3, r3
 8004806:	8013      	strh	r3, [r2, #0]
 8004808:	e2d5      	b.n	8004db6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004820:	81fb      	strh	r3, [r7, #14]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	441a      	add	r2, r3
 800482c:	89fb      	ldrh	r3, [r7, #14]
 800482e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483e:	b29b      	uxth	r3, r3
 8004840:	8013      	strh	r3, [r2, #0]
 8004842:	e2b8      	b.n	8004db6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	633b      	str	r3, [r7, #48]	; 0x30
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484e:	b29b      	uxth	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	4413      	add	r3, r2
 8004856:	633b      	str	r3, [r7, #48]	; 0x30
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	011a      	lsls	r2, r3, #4
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	4413      	add	r3, r2
 8004862:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	88db      	ldrh	r3, [r3, #6]
 800486c:	085b      	lsrs	r3, r3, #1
 800486e:	b29b      	uxth	r3, r3
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	4413      	add	r3, r2
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	011a      	lsls	r2, r3, #4
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	4413      	add	r3, r2
 8004896:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b3e      	cmp	r3, #62	; 0x3e
 80048b2:	d91d      	bls.n	80048f0 <USB_ActivateEndpoint+0x2ac>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <USB_ActivateEndpoint+0x28a>
 80048c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ca:	3b01      	subs	r3, #1
 80048cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	029b      	lsls	r3, r3, #10
 80048da:	b29b      	uxth	r3, r3
 80048dc:	4313      	orrs	r3, r2
 80048de:	b29b      	uxth	r3, r3
 80048e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	801a      	strh	r2, [r3, #0]
 80048ee:	e026      	b.n	800493e <USB_ActivateEndpoint+0x2fa>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <USB_ActivateEndpoint+0x2ca>
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004906:	b29a      	uxth	r2, r3
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	801a      	strh	r2, [r3, #0]
 800490c:	e017      	b.n	800493e <USB_ActivateEndpoint+0x2fa>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	66bb      	str	r3, [r7, #104]	; 0x68
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <USB_ActivateEndpoint+0x2e4>
 8004922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004924:	3301      	adds	r3, #1
 8004926:	66bb      	str	r3, [r7, #104]	; 0x68
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29a      	uxth	r2, r3
 800492e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004930:	b29b      	uxth	r3, r3
 8004932:	029b      	lsls	r3, r3, #10
 8004934:	b29b      	uxth	r3, r3
 8004936:	4313      	orrs	r3, r2
 8004938:	b29a      	uxth	r2, r3
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	847b      	strh	r3, [r7, #34]	; 0x22
 800494c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800494e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01b      	beq.n	800498e <USB_ActivateEndpoint+0x34a>
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496c:	843b      	strh	r3, [r7, #32]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	441a      	add	r2, r3
 8004978:	8c3b      	ldrh	r3, [r7, #32]
 800497a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498a:	b29b      	uxth	r3, r3
 800498c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d124      	bne.n	80049e0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ac:	83bb      	strh	r3, [r7, #28]
 80049ae:	8bbb      	ldrh	r3, [r7, #28]
 80049b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049b4:	83bb      	strh	r3, [r7, #28]
 80049b6:	8bbb      	ldrh	r3, [r7, #28]
 80049b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049bc:	83bb      	strh	r3, [r7, #28]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	441a      	add	r2, r3
 80049c8:	8bbb      	ldrh	r3, [r7, #28]
 80049ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049da:	b29b      	uxth	r3, r3
 80049dc:	8013      	strh	r3, [r2, #0]
 80049de:	e1ea      	b.n	8004db6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	83fb      	strh	r3, [r7, #30]
 80049f8:	8bfb      	ldrh	r3, [r7, #30]
 80049fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049fe:	83fb      	strh	r3, [r7, #30]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	441a      	add	r2, r3
 8004a0a:	8bfb      	ldrh	r3, [r7, #30]
 8004a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	8013      	strh	r3, [r2, #0]
 8004a20:	e1c9      	b.n	8004db6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	78db      	ldrb	r3, [r3, #3]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d11e      	bne.n	8004a68 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a40:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	441a      	add	r2, r3
 8004a4e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	8013      	strh	r3, [r2, #0]
 8004a66:	e01d      	b.n	8004aa4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	441a      	add	r2, r3
 8004a8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab4:	4413      	add	r3, r2
 8004ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	011a      	lsls	r2, r3, #4
 8004abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	891b      	ldrh	r3, [r3, #8]
 8004acc:	085b      	lsrs	r3, r3, #1
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ad6:	801a      	strh	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	657b      	str	r3, [r7, #84]	; 0x54
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae8:	4413      	add	r3, r2
 8004aea:	657b      	str	r3, [r7, #84]	; 0x54
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	011a      	lsls	r2, r3, #4
 8004af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004afa:	653b      	str	r3, [r7, #80]	; 0x50
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	895b      	ldrh	r3, [r3, #10]
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b0a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 8093 	bne.w	8004c3c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01b      	beq.n	8004b6a <USB_ActivateEndpoint+0x526>
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	441a      	add	r2, r3
 8004b54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004b78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01b      	beq.n	8004bba <USB_ActivateEndpoint+0x576>
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b98:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	441a      	add	r2, r3
 8004ba4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004bd2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004bd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bd8:	873b      	strh	r3, [r7, #56]	; 0x38
 8004bda:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004bdc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004be0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	441a      	add	r2, r3
 8004bec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c18:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8013      	strh	r3, [r2, #0]
 8004c3a:	e0bc      	b.n	8004db6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004c4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01d      	beq.n	8004c94 <USB_ActivateEndpoint+0x650>
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	441a      	add	r2, r3
 8004c7c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ca4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01d      	beq.n	8004cec <USB_ActivateEndpoint+0x6a8>
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	441a      	add	r2, r3
 8004cd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	78db      	ldrb	r3, [r3, #3]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d024      	beq.n	8004d3e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d12:	f083 0320 	eor.w	r3, r3, #32
 8004d16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	441a      	add	r2, r3
 8004d24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	8013      	strh	r3, [r2, #0]
 8004d3c:	e01d      	b.n	8004d7a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d54:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004db6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3774      	adds	r7, #116	; 0x74
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr

08004dc4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b08d      	sub	sp, #52	; 0x34
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	7b1b      	ldrb	r3, [r3, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f040 808e 	bne.w	8004ef4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d044      	beq.n	8004e6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	81bb      	strh	r3, [r7, #12]
 8004dee:	89bb      	ldrh	r3, [r7, #12]
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01b      	beq.n	8004e30 <USB_DeactivateEndpoint+0x6c>
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	817b      	strh	r3, [r7, #10]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	441a      	add	r2, r3
 8004e1a:	897b      	ldrh	r3, [r7, #10]
 8004e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e46:	813b      	strh	r3, [r7, #8]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	441a      	add	r2, r3
 8004e52:	893b      	ldrh	r3, [r7, #8]
 8004e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	8013      	strh	r3, [r2, #0]
 8004e68:	e192      	b.n	8005190 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	827b      	strh	r3, [r7, #18]
 8004e78:	8a7b      	ldrh	r3, [r7, #18]
 8004e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01b      	beq.n	8004eba <USB_DeactivateEndpoint+0xf6>
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e98:	823b      	strh	r3, [r7, #16]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	441a      	add	r2, r3
 8004ea4:	8a3b      	ldrh	r3, [r7, #16]
 8004ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	81fb      	strh	r3, [r7, #14]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	89fb      	ldrh	r3, [r7, #14]
 8004ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	8013      	strh	r3, [r2, #0]
 8004ef2:	e14d      	b.n	8005190 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	785b      	ldrb	r3, [r3, #1]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f040 80a5 	bne.w	8005048 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	843b      	strh	r3, [r7, #32]
 8004f0c:	8c3b      	ldrh	r3, [r7, #32]
 8004f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01b      	beq.n	8004f4e <USB_DeactivateEndpoint+0x18a>
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2c:	83fb      	strh	r3, [r7, #30]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	441a      	add	r2, r3
 8004f38:	8bfb      	ldrh	r3, [r7, #30]
 8004f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	83bb      	strh	r3, [r7, #28]
 8004f5c:	8bbb      	ldrh	r3, [r7, #28]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d01b      	beq.n	8004f9e <USB_DeactivateEndpoint+0x1da>
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7c:	837b      	strh	r3, [r7, #26]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	441a      	add	r2, r3
 8004f88:	8b7b      	ldrh	r3, [r7, #26]
 8004f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb4:	833b      	strh	r3, [r7, #24]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	441a      	add	r2, r3
 8004fc0:	8b3b      	ldrh	r3, [r7, #24]
 8004fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fec:	82fb      	strh	r3, [r7, #22]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	441a      	add	r2, r3
 8004ff8:	8afb      	ldrh	r3, [r7, #22]
 8004ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500a:	b29b      	uxth	r3, r3
 800500c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005024:	82bb      	strh	r3, [r7, #20]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	441a      	add	r2, r3
 8005030:	8abb      	ldrh	r3, [r7, #20]
 8005032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005042:	b29b      	uxth	r3, r3
 8005044:	8013      	strh	r3, [r2, #0]
 8005046:	e0a3      	b.n	8005190 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005056:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01b      	beq.n	8005098 <USB_DeactivateEndpoint+0x2d4>
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	441a      	add	r2, r3
 8005082:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005094:	b29b      	uxth	r3, r3
 8005096:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80050a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01b      	beq.n	80050e8 <USB_DeactivateEndpoint+0x324>
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	441a      	add	r2, r3
 80050d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80050d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	441a      	add	r2, r3
 800510a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800510c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511c:	b29b      	uxth	r3, r3
 800511e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005136:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	441a      	add	r2, r3
 8005142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800514c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005154:	b29b      	uxth	r3, r3
 8005156:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800516a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	441a      	add	r2, r3
 800517a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800517c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518c:	b29b      	uxth	r3, r3
 800518e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3734      	adds	r7, #52	; 0x34
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr

0800519c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b0c2      	sub	sp, #264	; 0x108
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051aa:	6018      	str	r0, [r3, #0]
 80051ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	785b      	ldrb	r3, [r3, #1]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	f040 86b7 	bne.w	8005f36 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80051c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699a      	ldr	r2, [r3, #24]
 80051d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d908      	bls.n	80051f6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80051e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80051f4:	e007      	b.n	8005206 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80051f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	7b1b      	ldrb	r3, [r3, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d13a      	bne.n	800528c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6959      	ldr	r1, [r3, #20]
 8005222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	88da      	ldrh	r2, [r3, #6]
 800522e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005232:	b29b      	uxth	r3, r3
 8005234:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005238:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800523c:	6800      	ldr	r0, [r0, #0]
 800523e:	f001 fc9c 	bl	8006b7a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005246:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800525c:	b29b      	uxth	r3, r3
 800525e:	461a      	mov	r2, r3
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	011a      	lsls	r2, r3, #4
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	801a      	strh	r2, [r3, #0]
 8005288:	f000 be1f 	b.w	8005eca <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800528c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	78db      	ldrb	r3, [r3, #3]
 8005298:	2b02      	cmp	r3, #2
 800529a:	f040 8462 	bne.w	8005b62 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800529e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6a1a      	ldr	r2, [r3, #32]
 80052aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	f240 83df 	bls.w	8005a7a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80052e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	441a      	add	r2, r3
 8005300:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005314:	b29b      	uxth	r3, r3
 8005316:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6a1a      	ldr	r2, [r3, #32]
 8005324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005328:	1ad2      	subs	r2, r2, r3
 800532a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800533a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 81c7 	beq.w	80056ec <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800535e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	633b      	str	r3, [r7, #48]	; 0x30
 800536a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d177      	bne.n	800546a <USB_EPStartXfer+0x2ce>
 800537a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800537e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
 8005386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800538a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005394:	b29b      	uxth	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	4413      	add	r3, r2
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
 800539e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	011a      	lsls	r2, r3, #4
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	4413      	add	r3, r2
 80053b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	801a      	strh	r2, [r3, #0]
 80053c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ca:	2b3e      	cmp	r3, #62	; 0x3e
 80053cc:	d921      	bls.n	8005412 <USB_EPStartXfer+0x276>
 80053ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053dc:	f003 031f 	and.w	r3, r3, #31
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <USB_EPStartXfer+0x252>
 80053e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053e8:	3b01      	subs	r3, #1
 80053ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	029b      	lsls	r3, r3, #10
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	4313      	orrs	r3, r2
 8005400:	b29b      	uxth	r3, r3
 8005402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800540a:	b29a      	uxth	r2, r3
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	801a      	strh	r2, [r3, #0]
 8005410:	e050      	b.n	80054b4 <USB_EPStartXfer+0x318>
 8005412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10a      	bne.n	8005430 <USB_EPStartXfer+0x294>
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005428:	b29a      	uxth	r2, r3
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	e041      	b.n	80054b4 <USB_EPStartXfer+0x318>
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800543a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d004      	beq.n	8005450 <USB_EPStartXfer+0x2b4>
 8005446:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800544a:	3301      	adds	r3, #1
 800544c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29a      	uxth	r2, r3
 8005456:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800545a:	b29b      	uxth	r3, r3
 800545c:	029b      	lsls	r3, r3, #10
 800545e:	b29b      	uxth	r3, r3
 8005460:	4313      	orrs	r3, r2
 8005462:	b29a      	uxth	r2, r3
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	e024      	b.n	80054b4 <USB_EPStartXfer+0x318>
 800546a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800546e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d11c      	bne.n	80054b4 <USB_EPStartXfer+0x318>
 800547a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800547e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005488:	b29b      	uxth	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	4413      	add	r3, r2
 8005490:	633b      	str	r3, [r7, #48]	; 0x30
 8005492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	011a      	lsls	r2, r3, #4
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	4413      	add	r3, r2
 80054a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	895b      	ldrh	r3, [r3, #10]
 80054c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6959      	ldr	r1, [r3, #20]
 80054d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80054da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80054de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80054e2:	6800      	ldr	r0, [r0, #0]
 80054e4:	f001 fb49 	bl	8006b7a <USB_WritePMA>
            ep->xfer_buff += len;
 80054e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f8:	441a      	add	r2, r3
 80054fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800550a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6a1a      	ldr	r2, [r3, #32]
 8005512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	429a      	cmp	r2, r3
 8005520:	d90f      	bls.n	8005542 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6a1a      	ldr	r2, [r3, #32]
 800552e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005532:	1ad2      	subs	r2, r2, r3
 8005534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	621a      	str	r2, [r3, #32]
 8005540:	e00e      	b.n	8005560 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2200      	movs	r2, #0
 800555e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	785b      	ldrb	r3, [r3, #1]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d177      	bne.n	8005660 <USB_EPStartXfer+0x4c4>
 8005570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005580:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800558a:	b29b      	uxth	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	4413      	add	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	011a      	lsls	r2, r3, #4
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	4413      	add	r3, r2
 80055a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c0:	2b3e      	cmp	r3, #62	; 0x3e
 80055c2:	d921      	bls.n	8005608 <USB_EPStartXfer+0x46c>
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d104      	bne.n	80055e4 <USB_EPStartXfer+0x448>
 80055da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055de:	3b01      	subs	r3, #1
 80055e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	029b      	lsls	r3, r3, #10
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	4313      	orrs	r3, r2
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005600:	b29a      	uxth	r2, r3
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	e056      	b.n	80056b6 <USB_EPStartXfer+0x51a>
 8005608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10a      	bne.n	8005626 <USB_EPStartXfer+0x48a>
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561e:	b29a      	uxth	r2, r3
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	e047      	b.n	80056b6 <USB_EPStartXfer+0x51a>
 8005626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562a:	085b      	lsrs	r3, r3, #1
 800562c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <USB_EPStartXfer+0x4aa>
 800563c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005640:	3301      	adds	r3, #1
 8005642:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29a      	uxth	r2, r3
 800564c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005650:	b29b      	uxth	r3, r3
 8005652:	029b      	lsls	r3, r3, #10
 8005654:	b29b      	uxth	r3, r3
 8005656:	4313      	orrs	r3, r2
 8005658:	b29a      	uxth	r2, r3
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	801a      	strh	r2, [r3, #0]
 800565e:	e02a      	b.n	80056b6 <USB_EPStartXfer+0x51a>
 8005660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d122      	bne.n	80056b6 <USB_EPStartXfer+0x51a>
 8005670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005674:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	623b      	str	r3, [r7, #32]
 800567c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568a:	b29b      	uxth	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	4413      	add	r3, r2
 8005692:	623b      	str	r3, [r7, #32]
 8005694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	011a      	lsls	r2, r3, #4
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	4413      	add	r3, r2
 80056a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	891b      	ldrh	r3, [r3, #8]
 80056c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6959      	ldr	r1, [r3, #20]
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80056e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056e4:	6800      	ldr	r0, [r0, #0]
 80056e6:	f001 fa48 	bl	8006b7a <USB_WritePMA>
 80056ea:	e3ee      	b.n	8005eca <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d177      	bne.n	80057ec <USB_EPStartXfer+0x650>
 80056fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	64bb      	str	r3, [r7, #72]	; 0x48
 8005708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800570c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005716:	b29b      	uxth	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571c:	4413      	add	r3, r2
 800571e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	011a      	lsls	r2, r3, #4
 800572e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005730:	4413      	add	r3, r2
 8005732:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005736:	647b      	str	r3, [r7, #68]	; 0x44
 8005738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005742:	b29a      	uxth	r2, r3
 8005744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005746:	801a      	strh	r2, [r3, #0]
 8005748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800574c:	2b3e      	cmp	r3, #62	; 0x3e
 800574e:	d921      	bls.n	8005794 <USB_EPStartXfer+0x5f8>
 8005750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800575a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	2b00      	cmp	r3, #0
 8005764:	d104      	bne.n	8005770 <USB_EPStartXfer+0x5d4>
 8005766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800576a:	3b01      	subs	r3, #1
 800576c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29a      	uxth	r2, r3
 8005776:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800577a:	b29b      	uxth	r3, r3
 800577c:	029b      	lsls	r3, r3, #10
 800577e:	b29b      	uxth	r3, r3
 8005780:	4313      	orrs	r3, r2
 8005782:	b29b      	uxth	r3, r3
 8005784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578c:	b29a      	uxth	r2, r3
 800578e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	e056      	b.n	8005842 <USB_EPStartXfer+0x6a6>
 8005794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10a      	bne.n	80057b2 <USB_EPStartXfer+0x616>
 800579c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	e047      	b.n	8005842 <USB_EPStartXfer+0x6a6>
 80057b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d004      	beq.n	80057d2 <USB_EPStartXfer+0x636>
 80057c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057cc:	3301      	adds	r3, #1
 80057ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057dc:	b29b      	uxth	r3, r3
 80057de:	029b      	lsls	r3, r3, #10
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	4313      	orrs	r3, r2
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e8:	801a      	strh	r2, [r3, #0]
 80057ea:	e02a      	b.n	8005842 <USB_EPStartXfer+0x6a6>
 80057ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	785b      	ldrb	r3, [r3, #1]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d122      	bne.n	8005842 <USB_EPStartXfer+0x6a6>
 80057fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005800:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	653b      	str	r3, [r7, #80]	; 0x50
 8005808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005816:	b29b      	uxth	r3, r3
 8005818:	461a      	mov	r2, r3
 800581a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581c:	4413      	add	r3, r2
 800581e:	653b      	str	r3, [r7, #80]	; 0x50
 8005820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	011a      	lsls	r2, r3, #4
 800582e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005830:	4413      	add	r3, r2
 8005832:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800583c:	b29a      	uxth	r2, r3
 800583e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005840:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	891b      	ldrh	r3, [r3, #8]
 800584e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6959      	ldr	r1, [r3, #20]
 800585e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005862:	b29b      	uxth	r3, r3
 8005864:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005868:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800586c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005870:	6800      	ldr	r0, [r0, #0]
 8005872:	f001 f982 	bl	8006b7a <USB_WritePMA>
            ep->xfer_buff += len;
 8005876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005886:	441a      	add	r2, r3
 8005888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800588c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1a      	ldr	r2, [r3, #32]
 80058a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d90f      	bls.n	80058d0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80058b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6a1a      	ldr	r2, [r3, #32]
 80058bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c0:	1ad2      	subs	r2, r2, r3
 80058c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	621a      	str	r2, [r3, #32]
 80058ce:	e00e      	b.n	80058ee <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80058d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80058e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2200      	movs	r2, #0
 80058ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	643b      	str	r3, [r7, #64]	; 0x40
 80058fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d177      	bne.n	80059fa <USB_EPStartXfer+0x85e>
 800590a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	63bb      	str	r3, [r7, #56]	; 0x38
 8005916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005924:	b29b      	uxth	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	4413      	add	r3, r2
 800592c:	63bb      	str	r3, [r7, #56]	; 0x38
 800592e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	011a      	lsls	r2, r3, #4
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	4413      	add	r3, r2
 8005940:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005950:	b29a      	uxth	r2, r3
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	801a      	strh	r2, [r3, #0]
 8005956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595a:	2b3e      	cmp	r3, #62	; 0x3e
 800595c:	d921      	bls.n	80059a2 <USB_EPStartXfer+0x806>
 800595e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800596c:	f003 031f 	and.w	r3, r3, #31
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <USB_EPStartXfer+0x7e2>
 8005974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005978:	3b01      	subs	r3, #1
 800597a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800597e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29a      	uxth	r2, r3
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	b29b      	uxth	r3, r3
 800598a:	029b      	lsls	r3, r3, #10
 800598c:	b29b      	uxth	r3, r3
 800598e:	4313      	orrs	r3, r2
 8005990:	b29b      	uxth	r3, r3
 8005992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599a:	b29a      	uxth	r2, r3
 800599c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599e:	801a      	strh	r2, [r3, #0]
 80059a0:	e050      	b.n	8005a44 <USB_EPStartXfer+0x8a8>
 80059a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <USB_EPStartXfer+0x824>
 80059aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e041      	b.n	8005a44 <USB_EPStartXfer+0x8a8>
 80059c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <USB_EPStartXfer+0x844>
 80059d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059da:	3301      	adds	r3, #1
 80059dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	029b      	lsls	r3, r3, #10
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	4313      	orrs	r3, r2
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f6:	801a      	strh	r2, [r3, #0]
 80059f8:	e024      	b.n	8005a44 <USB_EPStartXfer+0x8a8>
 80059fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	785b      	ldrb	r3, [r3, #1]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d11c      	bne.n	8005a44 <USB_EPStartXfer+0x8a8>
 8005a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a1e:	4413      	add	r3, r2
 8005a20:	643b      	str	r3, [r7, #64]	; 0x40
 8005a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	011a      	lsls	r2, r3, #4
 8005a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a32:	4413      	add	r3, r2
 8005a34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	895b      	ldrh	r3, [r3, #10]
 8005a50:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6959      	ldr	r1, [r3, #20]
 8005a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a6a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a6e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a72:	6800      	ldr	r0, [r0, #0]
 8005a74:	f001 f881 	bl	8006b7a <USB_WritePMA>
 8005a78:	e227      	b.n	8005eca <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	441a      	add	r2, r3
 8005ace:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b06:	4413      	add	r3, r2
 8005b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	011a      	lsls	r2, r3, #4
 8005b18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b20:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	891b      	ldrh	r3, [r3, #8]
 8005b38:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6959      	ldr	r1, [r3, #20]
 8005b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b52:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b56:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b5a:	6800      	ldr	r0, [r0, #0]
 8005b5c:	f001 f80d 	bl	8006b7a <USB_WritePMA>
 8005b60:	e1b3      	b.n	8005eca <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6a1a      	ldr	r2, [r3, #32]
 8005b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b72:	1ad2      	subs	r2, r2, r3
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 80c6 	beq.w	8005d34 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	673b      	str	r3, [r7, #112]	; 0x70
 8005bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d177      	bne.n	8005cb4 <USB_EPStartXfer+0xb18>
 8005bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005be4:	4413      	add	r3, r2
 8005be6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	011a      	lsls	r2, r3, #4
 8005bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bfe:	667b      	str	r3, [r7, #100]	; 0x64
 8005c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c14:	2b3e      	cmp	r3, #62	; 0x3e
 8005c16:	d921      	bls.n	8005c5c <USB_EPStartXfer+0xac0>
 8005c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d104      	bne.n	8005c38 <USB_EPStartXfer+0xa9c>
 8005c2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c32:	3b01      	subs	r3, #1
 8005c34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	029b      	lsls	r3, r3, #10
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c58:	801a      	strh	r2, [r3, #0]
 8005c5a:	e050      	b.n	8005cfe <USB_EPStartXfer+0xb62>
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <USB_EPStartXfer+0xade>
 8005c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c76:	801a      	strh	r2, [r3, #0]
 8005c78:	e041      	b.n	8005cfe <USB_EPStartXfer+0xb62>
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <USB_EPStartXfer+0xafe>
 8005c90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c94:	3301      	adds	r3, #1
 8005c96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	029b      	lsls	r3, r3, #10
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	4313      	orrs	r3, r2
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	e024      	b.n	8005cfe <USB_EPStartXfer+0xb62>
 8005cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d11c      	bne.n	8005cfe <USB_EPStartXfer+0xb62>
 8005cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cd8:	4413      	add	r3, r2
 8005cda:	673b      	str	r3, [r7, #112]	; 0x70
 8005cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	011a      	lsls	r2, r3, #4
 8005cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cec:	4413      	add	r3, r2
 8005cee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	895b      	ldrh	r3, [r3, #10]
 8005d0a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6959      	ldr	r1, [r3, #20]
 8005d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d24:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d28:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d2c:	6800      	ldr	r0, [r0, #0]
 8005d2e:	f000 ff24 	bl	8006b7a <USB_WritePMA>
 8005d32:	e0ca      	b.n	8005eca <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d177      	bne.n	8005e34 <USB_EPStartXfer+0xc98>
 8005d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d64:	4413      	add	r3, r2
 8005d66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	011a      	lsls	r2, r3, #4
 8005d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d78:	4413      	add	r3, r2
 8005d7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d94:	2b3e      	cmp	r3, #62	; 0x3e
 8005d96:	d921      	bls.n	8005ddc <USB_EPStartXfer+0xc40>
 8005d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d104      	bne.n	8005db8 <USB_EPStartXfer+0xc1c>
 8005dae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005db2:	3b01      	subs	r3, #1
 8005db4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	029b      	lsls	r3, r3, #10
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e05c      	b.n	8005e96 <USB_EPStartXfer+0xcfa>
 8005ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <USB_EPStartXfer+0xc5e>
 8005de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005df6:	801a      	strh	r2, [r3, #0]
 8005df8:	e04d      	b.n	8005e96 <USB_EPStartXfer+0xcfa>
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <USB_EPStartXfer+0xc7e>
 8005e10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e14:	3301      	adds	r3, #1
 8005e16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	029b      	lsls	r3, r3, #10
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	e030      	b.n	8005e96 <USB_EPStartXfer+0xcfa>
 8005e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d128      	bne.n	8005e96 <USB_EPStartXfer+0xcfa>
 8005e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e68:	4413      	add	r3, r2
 8005e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	011a      	lsls	r2, r3, #4
 8005e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e80:	4413      	add	r3, r2
 8005e82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	891b      	ldrh	r3, [r3, #8]
 8005ea2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6959      	ldr	r1, [r3, #20]
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ebc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ec0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ec4:	6800      	ldr	r0, [r0, #0]
 8005ec6:	f000 fe58 	bl	8006b7a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef0:	817b      	strh	r3, [r7, #10]
 8005ef2:	897b      	ldrh	r3, [r7, #10]
 8005ef4:	f083 0310 	eor.w	r3, r3, #16
 8005ef8:	817b      	strh	r3, [r7, #10]
 8005efa:	897b      	ldrh	r3, [r7, #10]
 8005efc:	f083 0320 	eor.w	r3, r3, #32
 8005f00:	817b      	strh	r3, [r7, #10]
 8005f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	441a      	add	r2, r3
 8005f1c:	897b      	ldrh	r3, [r7, #10]
 8005f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	8013      	strh	r3, [r2, #0]
 8005f32:	f000 bcde 	b.w	80068f2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	7b1b      	ldrb	r3, [r3, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f040 80bb 	bne.w	80060be <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699a      	ldr	r2, [r3, #24]
 8005f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d917      	bls.n	8005f94 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699a      	ldr	r2, [r3, #24]
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f84:	1ad2      	subs	r2, r2, r3
 8005f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	619a      	str	r2, [r3, #24]
 8005f92:	e00e      	b.n	8005fb2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	011a      	lsls	r2, r3, #4
 8005fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fee:	4413      	add	r3, r2
 8005ff0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ff4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006004:	b29a      	uxth	r2, r3
 8006006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006010:	2b3e      	cmp	r3, #62	; 0x3e
 8006012:	d924      	bls.n	800605e <USB_EPStartXfer+0xec2>
 8006014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	2b00      	cmp	r3, #0
 8006028:	d104      	bne.n	8006034 <USB_EPStartXfer+0xe98>
 800602a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800602e:	3b01      	subs	r3, #1
 8006030:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006034:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29a      	uxth	r2, r3
 800603c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006040:	b29b      	uxth	r3, r3
 8006042:	029b      	lsls	r3, r3, #10
 8006044:	b29b      	uxth	r3, r3
 8006046:	4313      	orrs	r3, r2
 8006048:	b29b      	uxth	r3, r3
 800604a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006052:	b29a      	uxth	r2, r3
 8006054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	f000 bc10 	b.w	800687e <USB_EPStartXfer+0x16e2>
 800605e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10c      	bne.n	8006080 <USB_EPStartXfer+0xee4>
 8006066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006076:	b29a      	uxth	r2, r3
 8006078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	e3fe      	b.n	800687e <USB_EPStartXfer+0x16e2>
 8006080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <USB_EPStartXfer+0xf04>
 8006096:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800609a:	3301      	adds	r3, #1
 800609c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	029b      	lsls	r3, r3, #10
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	4313      	orrs	r3, r2
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060ba:	801a      	strh	r2, [r3, #0]
 80060bc:	e3df      	b.n	800687e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80060be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	78db      	ldrb	r3, [r3, #3]
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	f040 8218 	bne.w	8006500 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 809d 	bne.w	800621c <USB_EPStartXfer+0x1080>
 80060e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060fe:	b29b      	uxth	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006106:	4413      	add	r3, r2
 8006108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800610c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	011a      	lsls	r2, r3, #4
 800611a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800611e:	4413      	add	r3, r2
 8006120:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006124:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006128:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006134:	b29a      	uxth	r2, r3
 8006136:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800613a:	801a      	strh	r2, [r3, #0]
 800613c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b3e      	cmp	r3, #62	; 0x3e
 800614a:	d92b      	bls.n	80061a4 <USB_EPStartXfer+0x1008>
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800615e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <USB_EPStartXfer+0xfe0>
 8006172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006176:	3b01      	subs	r3, #1
 8006178:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800617c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29a      	uxth	r2, r3
 8006184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006188:	b29b      	uxth	r3, r3
 800618a:	029b      	lsls	r3, r3, #10
 800618c:	b29b      	uxth	r3, r3
 800618e:	4313      	orrs	r3, r2
 8006190:	b29b      	uxth	r3, r3
 8006192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619a:	b29a      	uxth	r2, r3
 800619c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	e070      	b.n	8006286 <USB_EPStartXfer+0x10ea>
 80061a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10c      	bne.n	80061ce <USB_EPStartXfer+0x1032>
 80061b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061ca:	801a      	strh	r2, [r3, #0]
 80061cc:	e05b      	b.n	8006286 <USB_EPStartXfer+0x10ea>
 80061ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <USB_EPStartXfer+0x1062>
 80061f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f8:	3301      	adds	r3, #1
 80061fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29a      	uxth	r2, r3
 8006206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620a:	b29b      	uxth	r3, r3
 800620c:	029b      	lsls	r3, r3, #10
 800620e:	b29b      	uxth	r3, r3
 8006210:	4313      	orrs	r3, r2
 8006212:	b29a      	uxth	r2, r3
 8006214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006218:	801a      	strh	r2, [r3, #0]
 800621a:	e034      	b.n	8006286 <USB_EPStartXfer+0x10ea>
 800621c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	785b      	ldrb	r3, [r3, #1]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d12c      	bne.n	8006286 <USB_EPStartXfer+0x10ea>
 800622c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800623a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006248:	b29b      	uxth	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006250:	4413      	add	r3, r2
 8006252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	011a      	lsls	r2, r3, #4
 8006264:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006268:	4413      	add	r3, r2
 800626a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800626e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	b29a      	uxth	r2, r3
 8006280:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f040 809d 	bne.w	80063e0 <USB_EPStartXfer+0x1244>
 80062a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062ca:	4413      	add	r3, r2
 80062cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	011a      	lsls	r2, r3, #4
 80062de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062e2:	4413      	add	r3, r2
 80062e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	2b3e      	cmp	r3, #62	; 0x3e
 800630e:	d92b      	bls.n	8006368 <USB_EPStartXfer+0x11cc>
 8006310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f003 031f 	and.w	r3, r3, #31
 8006332:	2b00      	cmp	r3, #0
 8006334:	d104      	bne.n	8006340 <USB_EPStartXfer+0x11a4>
 8006336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633a:	3b01      	subs	r3, #1
 800633c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29a      	uxth	r2, r3
 8006348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800634c:	b29b      	uxth	r3, r3
 800634e:	029b      	lsls	r3, r3, #10
 8006350:	b29b      	uxth	r3, r3
 8006352:	4313      	orrs	r3, r2
 8006354:	b29b      	uxth	r3, r3
 8006356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800635a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635e:	b29a      	uxth	r2, r3
 8006360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	e069      	b.n	800643c <USB_EPStartXfer+0x12a0>
 8006368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10c      	bne.n	8006392 <USB_EPStartXfer+0x11f6>
 8006378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006388:	b29a      	uxth	r2, r3
 800638a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800638e:	801a      	strh	r2, [r3, #0]
 8006390:	e054      	b.n	800643c <USB_EPStartXfer+0x12a0>
 8006392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <USB_EPStartXfer+0x1226>
 80063b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063bc:	3301      	adds	r3, #1
 80063be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	029b      	lsls	r3, r3, #10
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	4313      	orrs	r3, r2
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	e02d      	b.n	800643c <USB_EPStartXfer+0x12a0>
 80063e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d125      	bne.n	800643c <USB_EPStartXfer+0x12a0>
 80063f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fe:	b29b      	uxth	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006406:	4413      	add	r3, r2
 8006408:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800640c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	011a      	lsls	r2, r3, #4
 800641a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800641e:	4413      	add	r3, r2
 8006420:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	b29a      	uxth	r2, r3
 8006436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800643a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 8218 	beq.w	800687e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800644e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800646e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <USB_EPStartXfer+0x12ea>
 800647a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800647e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10d      	bne.n	80064a2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006486:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800648a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800648e:	2b00      	cmp	r3, #0
 8006490:	f040 81f5 	bne.w	800687e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006494:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 81ee 	bne.w	800687e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80064a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80064cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	441a      	add	r2, r3
 80064e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80064ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	8013      	strh	r3, [r2, #0]
 80064fe:	e1be      	b.n	800687e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	78db      	ldrb	r3, [r3, #3]
 800650c:	2b01      	cmp	r3, #1
 800650e:	f040 81b4 	bne.w	800687a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	429a      	cmp	r2, r3
 800652c:	d917      	bls.n	800655e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800652e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800653e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800654e:	1ad2      	subs	r2, r2, r3
 8006550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	619a      	str	r2, [r3, #24]
 800655c:	e00e      	b.n	800657c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800655e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800656e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2200      	movs	r2, #0
 800657a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800657c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	785b      	ldrb	r3, [r3, #1]
 8006588:	2b00      	cmp	r3, #0
 800658a:	f040 8085 	bne.w	8006698 <USB_EPStartXfer+0x14fc>
 800658e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800659c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065b2:	4413      	add	r3, r2
 80065b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	011a      	lsls	r2, r3, #4
 80065c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065ca:	4413      	add	r3, r2
 80065cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ec:	2b3e      	cmp	r3, #62	; 0x3e
 80065ee:	d923      	bls.n	8006638 <USB_EPStartXfer+0x149c>
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f4:	095b      	lsrs	r3, r3, #5
 80065f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <USB_EPStartXfer+0x1474>
 8006606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800660a:	3b01      	subs	r3, #1
 800660c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29a      	uxth	r2, r3
 8006618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800661c:	b29b      	uxth	r3, r3
 800661e:	029b      	lsls	r3, r3, #10
 8006620:	b29b      	uxth	r3, r3
 8006622:	4313      	orrs	r3, r2
 8006624:	b29b      	uxth	r3, r3
 8006626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662e:	b29a      	uxth	r2, r3
 8006630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006634:	801a      	strh	r2, [r3, #0]
 8006636:	e060      	b.n	80066fa <USB_EPStartXfer+0x155e>
 8006638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10c      	bne.n	800665a <USB_EPStartXfer+0x14be>
 8006640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006650:	b29a      	uxth	r2, r3
 8006652:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006656:	801a      	strh	r2, [r3, #0]
 8006658:	e04f      	b.n	80066fa <USB_EPStartXfer+0x155e>
 800665a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665e:	085b      	lsrs	r3, r3, #1
 8006660:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <USB_EPStartXfer+0x14de>
 8006670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006674:	3301      	adds	r3, #1
 8006676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800667a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	b29a      	uxth	r2, r3
 8006682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006686:	b29b      	uxth	r3, r3
 8006688:	029b      	lsls	r3, r3, #10
 800668a:	b29b      	uxth	r3, r3
 800668c:	4313      	orrs	r3, r2
 800668e:	b29a      	uxth	r2, r3
 8006690:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	e030      	b.n	80066fa <USB_EPStartXfer+0x155e>
 8006698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d128      	bne.n	80066fa <USB_EPStartXfer+0x155e>
 80066a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	461a      	mov	r2, r3
 80066c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066cc:	4413      	add	r3, r2
 80066ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	011a      	lsls	r2, r3, #4
 80066e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066e4:	4413      	add	r3, r2
 80066e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066f8:	801a      	strh	r2, [r3, #0]
 80066fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f040 8085 	bne.w	8006824 <USB_EPStartXfer+0x1688>
 800671a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006736:	b29b      	uxth	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800673e:	4413      	add	r3, r2
 8006740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	011a      	lsls	r2, r3, #4
 8006752:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006756:	4413      	add	r3, r2
 8006758:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800675c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006760:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800676c:	b29a      	uxth	r2, r3
 800676e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006772:	801a      	strh	r2, [r3, #0]
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006778:	2b3e      	cmp	r3, #62	; 0x3e
 800677a:	d923      	bls.n	80067c4 <USB_EPStartXfer+0x1628>
 800677c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <USB_EPStartXfer+0x1600>
 8006792:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006796:	3b01      	subs	r3, #1
 8006798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800679c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	029b      	lsls	r3, r3, #10
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	4313      	orrs	r3, r2
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067c0:	801a      	strh	r2, [r3, #0]
 80067c2:	e05c      	b.n	800687e <USB_EPStartXfer+0x16e2>
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10c      	bne.n	80067e6 <USB_EPStartXfer+0x164a>
 80067cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067dc:	b29a      	uxth	r2, r3
 80067de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067e2:	801a      	strh	r2, [r3, #0]
 80067e4:	e04b      	b.n	800687e <USB_EPStartXfer+0x16e2>
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <USB_EPStartXfer+0x166a>
 80067fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006800:	3301      	adds	r3, #1
 8006802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29a      	uxth	r2, r3
 800680e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006812:	b29b      	uxth	r3, r3
 8006814:	029b      	lsls	r3, r3, #10
 8006816:	b29b      	uxth	r3, r3
 8006818:	4313      	orrs	r3, r2
 800681a:	b29a      	uxth	r2, r3
 800681c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	e02c      	b.n	800687e <USB_EPStartXfer+0x16e2>
 8006824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d124      	bne.n	800687e <USB_EPStartXfer+0x16e2>
 8006834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006842:	b29b      	uxth	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800684a:	4413      	add	r3, r2
 800684c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	011a      	lsls	r2, r3, #4
 800685e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006862:	4413      	add	r3, r2
 8006864:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006868:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006870:	b29a      	uxth	r2, r3
 8006872:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	e001      	b.n	800687e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e03a      	b.n	80068f4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800687e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	b29b      	uxth	r3, r3
 800689c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80068a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80068ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80068b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80068b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80068c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	441a      	add	r2, r3
 80068da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80068de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d020      	beq.n	8006952 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006926:	81bb      	strh	r3, [r7, #12]
 8006928:	89bb      	ldrh	r3, [r7, #12]
 800692a:	f083 0310 	eor.w	r3, r3, #16
 800692e:	81bb      	strh	r3, [r7, #12]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	441a      	add	r2, r3
 800693a:	89bb      	ldrh	r3, [r7, #12]
 800693c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694c:	b29b      	uxth	r3, r3
 800694e:	8013      	strh	r3, [r2, #0]
 8006950:	e01f      	b.n	8006992 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006968:	81fb      	strh	r3, [r7, #14]
 800696a:	89fb      	ldrh	r3, [r7, #14]
 800696c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006970:	81fb      	strh	r3, [r7, #14]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	441a      	add	r2, r3
 800697c:	89fb      	ldrh	r3, [r7, #14]
 800697e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698e:	b29b      	uxth	r3, r3
 8006990:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr

0800699e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800699e:	b480      	push	{r7}
 80069a0:	b087      	sub	sp, #28
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	7b1b      	ldrb	r3, [r3, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 809d 	bne.w	8006aec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d04c      	beq.n	8006a54 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	823b      	strh	r3, [r7, #16]
 80069c8:	8a3b      	ldrh	r3, [r7, #16]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d01b      	beq.n	8006a0a <USB_EPClearStall+0x6c>
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e8:	81fb      	strh	r3, [r7, #14]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	89fb      	ldrh	r3, [r7, #14]
 80069f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	78db      	ldrb	r3, [r3, #3]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d06c      	beq.n	8006aec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a28:	81bb      	strh	r3, [r7, #12]
 8006a2a:	89bb      	ldrh	r3, [r7, #12]
 8006a2c:	f083 0320 	eor.w	r3, r3, #32
 8006a30:	81bb      	strh	r3, [r7, #12]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	441a      	add	r2, r3
 8006a3c:	89bb      	ldrh	r3, [r7, #12]
 8006a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	8013      	strh	r3, [r2, #0]
 8006a52:	e04b      	b.n	8006aec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	82fb      	strh	r3, [r7, #22]
 8006a62:	8afb      	ldrh	r3, [r7, #22]
 8006a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01b      	beq.n	8006aa4 <USB_EPClearStall+0x106>
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a82:	82bb      	strh	r3, [r7, #20]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	8abb      	ldrh	r3, [r7, #20]
 8006a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aba:	827b      	strh	r3, [r7, #18]
 8006abc:	8a7b      	ldrh	r3, [r7, #18]
 8006abe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ac2:	827b      	strh	r3, [r7, #18]
 8006ac4:	8a7b      	ldrh	r3, [r7, #18]
 8006ac6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006aca:	827b      	strh	r3, [r7, #18]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	441a      	add	r2, r3
 8006ad6:	8a7b      	ldrh	r3, [r7, #18]
 8006ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d103      	bne.n	8006b12 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2280      	movs	r2, #128	; 0x80
 8006b0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr

08006b1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr

08006b32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr

08006b46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b58:	68fb      	ldr	r3, [r7, #12]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr

08006b64 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr

08006b7a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b08b      	sub	sp, #44	; 0x2c
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	4611      	mov	r1, r2
 8006b86:	461a      	mov	r2, r3
 8006b88:	460b      	mov	r3, r1
 8006b8a:	80fb      	strh	r3, [r7, #6]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b90:	88bb      	ldrh	r3, [r7, #4]
 8006b92:	3301      	adds	r3, #1
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ba0:	88fb      	ldrh	r3, [r7, #6]
 8006ba2:	005a      	lsls	r2, r3, #1
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb2:	e01e      	b.n	8006bf2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	b21a      	sxth	r2, r3
 8006bc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	b21b      	sxth	r3, r3
 8006bcc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	8a7a      	ldrh	r2, [r7, #18]
 8006bd2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	3302      	adds	r3, #2
 8006bd8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	3302      	adds	r3, #2
 8006bde:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	3301      	adds	r3, #1
 8006be4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	3301      	adds	r3, #1
 8006bea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1dd      	bne.n	8006bb4 <USB_WritePMA+0x3a>
  }
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	372c      	adds	r7, #44	; 0x2c
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b08b      	sub	sp, #44	; 0x2c
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	461a      	mov	r2, r3
 8006c12:	460b      	mov	r3, r1
 8006c14:	80fb      	strh	r3, [r7, #6]
 8006c16:	4613      	mov	r3, r2
 8006c18:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c1a:	88bb      	ldrh	r3, [r7, #4]
 8006c1c:	085b      	lsrs	r3, r3, #1
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c2a:	88fb      	ldrh	r3, [r7, #6]
 8006c2c:	005a      	lsls	r2, r3, #1
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c36:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3c:	e01b      	b.n	8006c76 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	3302      	adds	r3, #2
 8006c4a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	3301      	adds	r3, #1
 8006c58:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	3301      	adds	r3, #1
 8006c68:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	3b01      	subs	r3, #1
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e0      	bne.n	8006c3e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006c7c:	88bb      	ldrh	r3, [r7, #4]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d007      	beq.n	8006c98 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	701a      	strb	r2, [r3, #0]
  }
}
 8006c98:	bf00      	nop
 8006c9a:	372c      	adds	r7, #44	; 0x2c
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr

08006ca2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	7c1b      	ldrb	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d115      	bne.n	8006ce6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	2181      	movs	r1, #129	; 0x81
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 fe87 	bl	80089d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 fe7d 	bl	80089d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006ce4:	e012      	b.n	8006d0c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ce6:	2340      	movs	r3, #64	; 0x40
 8006ce8:	2202      	movs	r2, #2
 8006cea:	2181      	movs	r1, #129	; 0x81
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fe72 	bl	80089d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cf8:	2340      	movs	r3, #64	; 0x40
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 fe69 	bl	80089d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d0c:	2308      	movs	r3, #8
 8006d0e:	2203      	movs	r2, #3
 8006d10:	2182      	movs	r1, #130	; 0x82
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fe5f 	bl	80089d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d1e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d22:	f001 ff7f 	bl	8008c24 <USBD_static_malloc>
 8006d26:	4602      	mov	r2, r0
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d102      	bne.n	8006d3e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
 8006d3c:	e026      	b.n	8006d8c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d44:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	7c1b      	ldrb	r3, [r3, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d72:	2101      	movs	r1, #1
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 ff1f 	bl	8008bb8 <USBD_LL_PrepareReceive>
 8006d7a:	e007      	b.n	8006d8c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d82:	2340      	movs	r3, #64	; 0x40
 8006d84:	2101      	movs	r1, #1
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 ff16 	bl	8008bb8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006da6:	2181      	movs	r1, #129	; 0x81
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 fe3a 	bl	8008a22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006db4:	2101      	movs	r1, #1
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 fe33 	bl	8008a22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006dc4:	2182      	movs	r1, #130	; 0x82
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 fe2b 	bl	8008a22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00e      	beq.n	8006dfa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dec:	4618      	mov	r0, r3
 8006dee:	f001 ff25 	bl	8008c3c <USBD_static_free>
    pdev->pClassData = NULL;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e14:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d039      	beq.n	8006ea2 <USBD_CDC_Setup+0x9e>
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d17f      	bne.n	8006f32 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	88db      	ldrh	r3, [r3, #6]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d029      	beq.n	8006e8e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	b25b      	sxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	da11      	bge.n	8006e68 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006e50:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	88d2      	ldrh	r2, [r2, #6]
 8006e56:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e58:	6939      	ldr	r1, [r7, #16]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	88db      	ldrh	r3, [r3, #6]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 fa0a 	bl	800827a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006e66:	e06b      	b.n	8006f40 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	785a      	ldrb	r2, [r3, #1]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	88db      	ldrh	r3, [r3, #6]
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e7e:	6939      	ldr	r1, [r7, #16]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	88db      	ldrh	r3, [r3, #6]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 fa25 	bl	80082d6 <USBD_CtlPrepareRx>
      break;
 8006e8c:	e058      	b.n	8006f40 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	7850      	ldrb	r0, [r2, #1]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	4798      	blx	r3
      break;
 8006ea0:	e04e      	b.n	8006f40 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	785b      	ldrb	r3, [r3, #1]
 8006ea6:	2b0b      	cmp	r3, #11
 8006ea8:	d02e      	beq.n	8006f08 <USBD_CDC_Setup+0x104>
 8006eaa:	2b0b      	cmp	r3, #11
 8006eac:	dc38      	bgt.n	8006f20 <USBD_CDC_Setup+0x11c>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <USBD_CDC_Setup+0xb4>
 8006eb2:	2b0a      	cmp	r3, #10
 8006eb4:	d014      	beq.n	8006ee0 <USBD_CDC_Setup+0xdc>
 8006eb6:	e033      	b.n	8006f20 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d107      	bne.n	8006ed2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006ec2:	f107 030c 	add.w	r3, r7, #12
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 f9d5 	bl	800827a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ed0:	e02e      	b.n	8006f30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 f966 	bl	80081a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eda:	2302      	movs	r3, #2
 8006edc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ede:	e027      	b.n	8006f30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d107      	bne.n	8006efa <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006eea:	f107 030f 	add.w	r3, r7, #15
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 f9c1 	bl	800827a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ef8:	e01a      	b.n	8006f30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 f952 	bl	80081a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f02:	2302      	movs	r3, #2
 8006f04:	75fb      	strb	r3, [r7, #23]
          break;
 8006f06:	e013      	b.n	8006f30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d00d      	beq.n	8006f2e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 f946 	bl	80081a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f1e:	e006      	b.n	8006f2e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f001 f93f 	bl	80081a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f2c:	e000      	b.n	8006f30 <USBD_CDC_Setup+0x12c>
          break;
 8006f2e:	bf00      	nop
      }
      break;
 8006f30:	e006      	b.n	8006f40 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 f936 	bl	80081a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f3e:	bf00      	nop
  }

  return ret;
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	460b      	mov	r3, r1
 8006f54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f64:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d03a      	beq.n	8006fe6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f70:	78fa      	ldrb	r2, [r7, #3]
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	331c      	adds	r3, #28
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d029      	beq.n	8006fda <USBD_CDC_DataIn+0x90>
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	6879      	ldr	r1, [r7, #4]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	440b      	add	r3, r1
 8006f94:	331c      	adds	r3, #28
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	78f9      	ldrb	r1, [r7, #3]
 8006f9a:	68b8      	ldr	r0, [r7, #8]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	4403      	add	r3, r0
 8006fa6:	3338      	adds	r3, #56	; 0x38
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	fbb2 f1f3 	udiv	r1, r2, r3
 8006fae:	fb01 f303 	mul.w	r3, r1, r3
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d110      	bne.n	8006fda <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006fb8:	78fa      	ldrb	r2, [r7, #3]
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	331c      	adds	r3, #28
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fcc:	78f9      	ldrb	r1, [r7, #3]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 fdcd 	bl	8008b72 <USBD_LL_Transmit>
 8006fd8:	e003      	b.n	8006fe2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e000      	b.n	8006fe8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006fe6:	2302      	movs	r3, #2
  }
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007002:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 fdf8 	bl	8008bfe <USBD_LL_GetRxDataSize>
 800700e:	4602      	mov	r2, r0
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00d      	beq.n	800703c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007034:	4611      	mov	r1, r2
 8007036:	4798      	blx	r3

    return USBD_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	e000      	b.n	800703e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800703c:	2302      	movs	r3, #2
  }
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007054:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800705c:	2b00      	cmp	r3, #0
 800705e:	d015      	beq.n	800708c <USBD_CDC_EP0_RxReady+0x46>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007066:	2bff      	cmp	r3, #255	; 0xff
 8007068:	d010      	beq.n	800708c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007078:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007080:	b292      	uxth	r2, r2
 8007082:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	22ff      	movs	r2, #255	; 0xff
 8007088:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2243      	movs	r2, #67	; 0x43
 80070a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80070a6:	4b03      	ldr	r3, [pc, #12]	; (80070b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bc80      	pop	{r7}
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000094 	.word	0x20000094

080070b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2243      	movs	r2, #67	; 0x43
 80070c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80070c6:	4b03      	ldr	r3, [pc, #12]	; (80070d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20000050 	.word	0x20000050

080070d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2243      	movs	r2, #67	; 0x43
 80070e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80070e6:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc80      	pop	{r7}
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	200000d8 	.word	0x200000d8

080070f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	220a      	movs	r2, #10
 8007104:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007106:	4b03      	ldr	r3, [pc, #12]	; (8007114 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	2000000c 	.word	0x2000000c

08007118 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007122:	2302      	movs	r3, #2
 8007124:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr

08007144 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	4613      	mov	r3, r2
 8007150:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007158:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007162:	88fa      	ldrh	r2, [r7, #6]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr

08007176 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007186:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr

0800719c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d01c      	beq.n	80071f0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d115      	bne.n	80071ec <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80071de:	b29b      	uxth	r3, r3
 80071e0:	2181      	movs	r1, #129	; 0x81
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fcc5 	bl	8008b72 <USBD_LL_Transmit>

      return USBD_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e002      	b.n	80071f2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e000      	b.n	80071f2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80071f0:	2302      	movs	r3, #2
  }
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007208:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007210:	2b00      	cmp	r3, #0
 8007212:	d017      	beq.n	8007244 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	7c1b      	ldrb	r3, [r3, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d109      	bne.n	8007230 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007226:	2101      	movs	r1, #1
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fcc5 	bl	8008bb8 <USBD_LL_PrepareReceive>
 800722e:	e007      	b.n	8007240 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007236:	2340      	movs	r3, #64	; 0x40
 8007238:	2101      	movs	r1, #1
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fcbc 	bl	8008bb8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	e000      	b.n	8007246 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007244:	2302      	movs	r3, #2
  }
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	4613      	mov	r3, r2
 800725a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007262:	2302      	movs	r3, #2
 8007264:	e01a      	b.n	800729c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	79fa      	ldrb	r2, [r7, #7]
 8007292:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f001 fb29 	bl	80088ec <USBD_LL_Init>

  return USBD_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d006      	beq.n	80072c6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]
 80072c4:	e001      	b.n	80072ca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80072c6:	2302      	movs	r3, #2
 80072c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr

080072d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 fb5e 	bl	80089a0 <USBD_LL_Start>

  return USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr

08007302 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	460b      	mov	r3, r1
 800730c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800730e:	2302      	movs	r3, #2
 8007310:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00c      	beq.n	8007336 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	78fa      	ldrb	r2, [r7, #3]
 8007326:	4611      	mov	r1, r2
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	4798      	blx	r3
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	78fa      	ldrb	r2, [r7, #3]
 8007356:	4611      	mov	r1, r2
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	4798      	blx	r3

  return USBD_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fed8 	bl	800812e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800738c:	461a      	mov	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800739a:	f003 031f 	and.w	r3, r3, #31
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d016      	beq.n	80073d0 <USBD_LL_SetupStage+0x6a>
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d81c      	bhi.n	80073e0 <USBD_LL_SetupStage+0x7a>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <USBD_LL_SetupStage+0x4a>
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d008      	beq.n	80073c0 <USBD_LL_SetupStage+0x5a>
 80073ae:	e017      	b.n	80073e0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f9cb 	bl	8007754 <USBD_StdDevReq>
      break;
 80073be:	e01a      	b.n	80073f6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fa2d 	bl	8007828 <USBD_StdItfReq>
      break;
 80073ce:	e012      	b.n	80073f6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fa6d 	bl	80078b8 <USBD_StdEPReq>
      break;
 80073de:	e00a      	b.n	80073f6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80073e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f001 fb36 	bl	8008a60 <USBD_LL_StallEP>
      break;
 80073f4:	bf00      	nop
  }

  return USBD_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	460b      	mov	r3, r1
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800740e:	7afb      	ldrb	r3, [r7, #11]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d14b      	bne.n	80074ac <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800741a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007422:	2b03      	cmp	r3, #3
 8007424:	d134      	bne.n	8007490 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	429a      	cmp	r2, r3
 8007430:	d919      	bls.n	8007466 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	1ad2      	subs	r2, r2, r3
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	68da      	ldr	r2, [r3, #12]
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007448:	429a      	cmp	r2, r3
 800744a:	d203      	bcs.n	8007454 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007450:	b29b      	uxth	r3, r3
 8007452:	e002      	b.n	800745a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007458:	b29b      	uxth	r3, r3
 800745a:	461a      	mov	r2, r3
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 ff57 	bl	8008312 <USBD_CtlContinueRx>
 8007464:	e038      	b.n	80074d8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007478:	2b03      	cmp	r3, #3
 800747a:	d105      	bne.n	8007488 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 ff54 	bl	8008336 <USBD_CtlSendStatus>
 800748e:	e023      	b.n	80074d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007496:	2b05      	cmp	r3, #5
 8007498:	d11e      	bne.n	80074d8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80074a2:	2100      	movs	r1, #0
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f001 fadb 	bl	8008a60 <USBD_LL_StallEP>
 80074aa:	e015      	b.n	80074d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00d      	beq.n	80074d4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d108      	bne.n	80074d4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	7afa      	ldrb	r2, [r7, #11]
 80074cc:	4611      	mov	r1, r2
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	4798      	blx	r3
 80074d2:	e001      	b.n	80074d8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074d4:	2302      	movs	r3, #2
 80074d6:	e000      	b.n	80074da <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b086      	sub	sp, #24
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	460b      	mov	r3, r1
 80074ec:	607a      	str	r2, [r7, #4]
 80074ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80074f0:	7afb      	ldrb	r3, [r7, #11]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d17f      	bne.n	80075f6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3314      	adds	r3, #20
 80074fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007502:	2b02      	cmp	r3, #2
 8007504:	d15c      	bne.n	80075c0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	429a      	cmp	r2, r3
 8007510:	d915      	bls.n	800753e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	1ad2      	subs	r2, r2, r3
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	b29b      	uxth	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	6879      	ldr	r1, [r7, #4]
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f000 fec1 	bl	80082b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007530:	2300      	movs	r3, #0
 8007532:	2200      	movs	r2, #0
 8007534:	2100      	movs	r1, #0
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f001 fb3e 	bl	8008bb8 <USBD_LL_PrepareReceive>
 800753c:	e04e      	b.n	80075dc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	6912      	ldr	r2, [r2, #16]
 8007546:	fbb3 f1f2 	udiv	r1, r3, r2
 800754a:	fb01 f202 	mul.w	r2, r1, r2
 800754e:	1a9b      	subs	r3, r3, r2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d11c      	bne.n	800758e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800755c:	429a      	cmp	r2, r3
 800755e:	d316      	bcc.n	800758e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800756a:	429a      	cmp	r2, r3
 800756c:	d20f      	bcs.n	800758e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800756e:	2200      	movs	r2, #0
 8007570:	2100      	movs	r1, #0
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fe9d 	bl	80082b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007580:	2300      	movs	r3, #0
 8007582:	2200      	movs	r2, #0
 8007584:	2100      	movs	r1, #0
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f001 fb16 	bl	8008bb8 <USBD_LL_PrepareReceive>
 800758c:	e026      	b.n	80075dc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d105      	bne.n	80075b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80075b0:	2180      	movs	r1, #128	; 0x80
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f001 fa54 	bl	8008a60 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fecf 	bl	800835c <USBD_CtlReceiveStatus>
 80075be:	e00d      	b.n	80075dc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d004      	beq.n	80075d4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d103      	bne.n	80075dc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80075d4:	2180      	movs	r1, #128	; 0x80
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f001 fa42 	bl	8008a60 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d11d      	bne.n	8007622 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff fe81 	bl	80072ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075f4:	e015      	b.n	8007622 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00d      	beq.n	800761e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007608:	2b03      	cmp	r3, #3
 800760a:	d108      	bne.n	800761e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	7afa      	ldrb	r2, [r7, #11]
 8007616:	4611      	mov	r1, r2
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	4798      	blx	r3
 800761c:	e001      	b.n	8007622 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800761e:	2302      	movs	r3, #2
 8007620:	e000      	b.n	8007624 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007634:	2340      	movs	r3, #64	; 0x40
 8007636:	2200      	movs	r2, #0
 8007638:	2100      	movs	r1, #0
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 f9cb 	bl	80089d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2240      	movs	r2, #64	; 0x40
 800764c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007650:	2340      	movs	r3, #64	; 0x40
 8007652:	2200      	movs	r2, #0
 8007654:	2180      	movs	r1, #128	; 0x80
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 f9bd 	bl	80089d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2240      	movs	r2, #64	; 0x40
 8007666:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6852      	ldr	r2, [r2, #4]
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	4611      	mov	r1, r2
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4798      	blx	r3
  }

  return USBD_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	78fa      	ldrb	r2, [r7, #3]
 80076be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bc80      	pop	{r7}
 80076ca:	4770      	bx	lr

080076cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2204      	movs	r2, #4
 80076e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr

080076f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007702:	2b04      	cmp	r3, #4
 8007704:	d105      	bne.n	8007712 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr

0800771e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772c:	2b03      	cmp	r3, #3
 800772e:	d10b      	bne.n	8007748 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d005      	beq.n	8007748 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800776a:	2b40      	cmp	r3, #64	; 0x40
 800776c:	d005      	beq.n	800777a <USBD_StdDevReq+0x26>
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d84f      	bhi.n	8007812 <USBD_StdDevReq+0xbe>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <USBD_StdDevReq+0x36>
 8007776:	2b20      	cmp	r3, #32
 8007778:	d14b      	bne.n	8007812 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
      break;
 8007788:	e048      	b.n	800781c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	785b      	ldrb	r3, [r3, #1]
 800778e:	2b09      	cmp	r3, #9
 8007790:	d839      	bhi.n	8007806 <USBD_StdDevReq+0xb2>
 8007792:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <USBD_StdDevReq+0x44>)
 8007794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007798:	080077e9 	.word	0x080077e9
 800779c:	080077fd 	.word	0x080077fd
 80077a0:	08007807 	.word	0x08007807
 80077a4:	080077f3 	.word	0x080077f3
 80077a8:	08007807 	.word	0x08007807
 80077ac:	080077cb 	.word	0x080077cb
 80077b0:	080077c1 	.word	0x080077c1
 80077b4:	08007807 	.word	0x08007807
 80077b8:	080077df 	.word	0x080077df
 80077bc:	080077d5 	.word	0x080077d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9dc 	bl	8007b80 <USBD_GetDescriptor>
          break;
 80077c8:	e022      	b.n	8007810 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fb3f 	bl	8007e50 <USBD_SetAddress>
          break;
 80077d2:	e01d      	b.n	8007810 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fb7e 	bl	8007ed8 <USBD_SetConfig>
          break;
 80077dc:	e018      	b.n	8007810 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fc07 	bl	8007ff4 <USBD_GetConfig>
          break;
 80077e6:	e013      	b.n	8007810 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fc37 	bl	800805e <USBD_GetStatus>
          break;
 80077f0:	e00e      	b.n	8007810 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fc65 	bl	80080c4 <USBD_SetFeature>
          break;
 80077fa:	e009      	b.n	8007810 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fc74 	bl	80080ec <USBD_ClrFeature>
          break;
 8007804:	e004      	b.n	8007810 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fccc 	bl	80081a6 <USBD_CtlError>
          break;
 800780e:	bf00      	nop
      }
      break;
 8007810:	e004      	b.n	800781c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fcc6 	bl	80081a6 <USBD_CtlError>
      break;
 800781a:	bf00      	nop
  }

  return ret;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop

08007828 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800783e:	2b40      	cmp	r3, #64	; 0x40
 8007840:	d005      	beq.n	800784e <USBD_StdItfReq+0x26>
 8007842:	2b40      	cmp	r3, #64	; 0x40
 8007844:	d82e      	bhi.n	80078a4 <USBD_StdItfReq+0x7c>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <USBD_StdItfReq+0x26>
 800784a:	2b20      	cmp	r3, #32
 800784c:	d12a      	bne.n	80078a4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007854:	3b01      	subs	r3, #1
 8007856:	2b02      	cmp	r3, #2
 8007858:	d81d      	bhi.n	8007896 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	889b      	ldrh	r3, [r3, #4]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b01      	cmp	r3, #1
 8007862:	d813      	bhi.n	800788c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	4798      	blx	r3
 8007872:	4603      	mov	r3, r0
 8007874:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	88db      	ldrh	r3, [r3, #6]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d110      	bne.n	80078a0 <USBD_StdItfReq+0x78>
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10d      	bne.n	80078a0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fd56 	bl	8008336 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800788a:	e009      	b.n	80078a0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fc89 	bl	80081a6 <USBD_CtlError>
          break;
 8007894:	e004      	b.n	80078a0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fc84 	bl	80081a6 <USBD_CtlError>
          break;
 800789e:	e000      	b.n	80078a2 <USBD_StdItfReq+0x7a>
          break;
 80078a0:	bf00      	nop
      }
      break;
 80078a2:	e004      	b.n	80078ae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fc7d 	bl	80081a6 <USBD_CtlError>
      break;
 80078ac:	bf00      	nop
  }

  return USBD_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	889b      	ldrh	r3, [r3, #4]
 80078ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078d4:	2b40      	cmp	r3, #64	; 0x40
 80078d6:	d007      	beq.n	80078e8 <USBD_StdEPReq+0x30>
 80078d8:	2b40      	cmp	r3, #64	; 0x40
 80078da:	f200 8146 	bhi.w	8007b6a <USBD_StdEPReq+0x2b2>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <USBD_StdEPReq+0x40>
 80078e2:	2b20      	cmp	r3, #32
 80078e4:	f040 8141 	bne.w	8007b6a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	4798      	blx	r3
      break;
 80078f6:	e13d      	b.n	8007b74 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007900:	2b20      	cmp	r3, #32
 8007902:	d10a      	bne.n	800791a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
 8007912:	4603      	mov	r3, r0
 8007914:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	e12d      	b.n	8007b76 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b03      	cmp	r3, #3
 8007920:	d007      	beq.n	8007932 <USBD_StdEPReq+0x7a>
 8007922:	2b03      	cmp	r3, #3
 8007924:	f300 811b 	bgt.w	8007b5e <USBD_StdEPReq+0x2a6>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d072      	beq.n	8007a12 <USBD_StdEPReq+0x15a>
 800792c:	2b01      	cmp	r3, #1
 800792e:	d03a      	beq.n	80079a6 <USBD_StdEPReq+0xee>
 8007930:	e115      	b.n	8007b5e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007938:	2b02      	cmp	r3, #2
 800793a:	d002      	beq.n	8007942 <USBD_StdEPReq+0x8a>
 800793c:	2b03      	cmp	r3, #3
 800793e:	d015      	beq.n	800796c <USBD_StdEPReq+0xb4>
 8007940:	e02b      	b.n	800799a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00c      	beq.n	8007962 <USBD_StdEPReq+0xaa>
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b80      	cmp	r3, #128	; 0x80
 800794c:	d009      	beq.n	8007962 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 f884 	bl	8008a60 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007958:	2180      	movs	r1, #128	; 0x80
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 f880 	bl	8008a60 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007960:	e020      	b.n	80079a4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fc1e 	bl	80081a6 <USBD_CtlError>
              break;
 800796a:	e01b      	b.n	80079a4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	885b      	ldrh	r3, [r3, #2]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10e      	bne.n	8007992 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00b      	beq.n	8007992 <USBD_StdEPReq+0xda>
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b80      	cmp	r3, #128	; 0x80
 800797e:	d008      	beq.n	8007992 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	88db      	ldrh	r3, [r3, #6]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d104      	bne.n	8007992 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 f867 	bl	8008a60 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fccf 	bl	8008336 <USBD_CtlSendStatus>

              break;
 8007998:	e004      	b.n	80079a4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fc02 	bl	80081a6 <USBD_CtlError>
              break;
 80079a2:	bf00      	nop
          }
          break;
 80079a4:	e0e0      	b.n	8007b68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d002      	beq.n	80079b6 <USBD_StdEPReq+0xfe>
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d015      	beq.n	80079e0 <USBD_StdEPReq+0x128>
 80079b4:	e026      	b.n	8007a04 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00c      	beq.n	80079d6 <USBD_StdEPReq+0x11e>
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b80      	cmp	r3, #128	; 0x80
 80079c0:	d009      	beq.n	80079d6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 f84a 	bl	8008a60 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079cc:	2180      	movs	r1, #128	; 0x80
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 f846 	bl	8008a60 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079d4:	e01c      	b.n	8007a10 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fbe4 	bl	80081a6 <USBD_CtlError>
              break;
 80079de:	e017      	b.n	8007a10 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	885b      	ldrh	r3, [r3, #2]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d112      	bne.n	8007a0e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d004      	beq.n	80079fc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 f851 	bl	8008a9e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc9a 	bl	8008336 <USBD_CtlSendStatus>
              }
              break;
 8007a02:	e004      	b.n	8007a0e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fbcd 	bl	80081a6 <USBD_CtlError>
              break;
 8007a0c:	e000      	b.n	8007a10 <USBD_StdEPReq+0x158>
              break;
 8007a0e:	bf00      	nop
          }
          break;
 8007a10:	e0aa      	b.n	8007b68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d002      	beq.n	8007a22 <USBD_StdEPReq+0x16a>
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d032      	beq.n	8007a86 <USBD_StdEPReq+0x1ce>
 8007a20:	e097      	b.n	8007b52 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d007      	beq.n	8007a38 <USBD_StdEPReq+0x180>
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b80      	cmp	r3, #128	; 0x80
 8007a2c:	d004      	beq.n	8007a38 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fbb8 	bl	80081a6 <USBD_CtlError>
                break;
 8007a36:	e091      	b.n	8007b5c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	da0b      	bge.n	8007a58 <USBD_StdEPReq+0x1a0>
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	3310      	adds	r3, #16
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	4413      	add	r3, r2
 8007a54:	3304      	adds	r3, #4
 8007a56:	e00b      	b.n	8007a70 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	3304      	adds	r3, #4
 8007a70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fbfb 	bl	800827a <USBD_CtlSendData>
              break;
 8007a84:	e06a      	b.n	8007b5c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	da11      	bge.n	8007ab2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	3318      	adds	r3, #24
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d117      	bne.n	8007ad8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fb7b 	bl	80081a6 <USBD_CtlError>
                  break;
 8007ab0:	e054      	b.n	8007b5c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	f003 020f 	and.w	r2, r3, #15
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d104      	bne.n	8007ad8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb68 	bl	80081a6 <USBD_CtlError>
                  break;
 8007ad6:	e041      	b.n	8007b5c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	da0b      	bge.n	8007af8 <USBD_StdEPReq+0x240>
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	3310      	adds	r3, #16
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	4413      	add	r3, r2
 8007af4:	3304      	adds	r3, #4
 8007af6:	e00b      	b.n	8007b10 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	3304      	adds	r3, #4
 8007b10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <USBD_StdEPReq+0x266>
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	2b80      	cmp	r3, #128	; 0x80
 8007b1c:	d103      	bne.n	8007b26 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	e00e      	b.n	8007b44 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 ffd6 	bl	8008adc <USBD_LL_IsStallEP>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	e002      	b.n	8007b44 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2202      	movs	r2, #2
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fb95 	bl	800827a <USBD_CtlSendData>
              break;
 8007b50:	e004      	b.n	8007b5c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fb26 	bl	80081a6 <USBD_CtlError>
              break;
 8007b5a:	bf00      	nop
          }
          break;
 8007b5c:	e004      	b.n	8007b68 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fb20 	bl	80081a6 <USBD_CtlError>
          break;
 8007b66:	bf00      	nop
      }
      break;
 8007b68:	e004      	b.n	8007b74 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fb1a 	bl	80081a6 <USBD_CtlError>
      break;
 8007b72:	bf00      	nop
  }

  return ret;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	885b      	ldrh	r3, [r3, #2]
 8007b9a:	0a1b      	lsrs	r3, r3, #8
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	2b06      	cmp	r3, #6
 8007ba2:	f200 8128 	bhi.w	8007df6 <USBD_GetDescriptor+0x276>
 8007ba6:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <USBD_GetDescriptor+0x2c>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007bc9 	.word	0x08007bc9
 8007bb0:	08007be1 	.word	0x08007be1
 8007bb4:	08007c21 	.word	0x08007c21
 8007bb8:	08007df7 	.word	0x08007df7
 8007bbc:	08007df7 	.word	0x08007df7
 8007bc0:	08007d97 	.word	0x08007d97
 8007bc4:	08007dc3 	.word	0x08007dc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	7c12      	ldrb	r2, [r2, #16]
 8007bd4:	f107 0108 	add.w	r1, r7, #8
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
 8007bdc:	60f8      	str	r0, [r7, #12]
      break;
 8007bde:	e112      	b.n	8007e06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	7c1b      	ldrb	r3, [r3, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10d      	bne.n	8007c04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf0:	f107 0208 	add.w	r2, r7, #8
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
 8007bf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	2202      	movs	r2, #2
 8007c00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c02:	e100      	b.n	8007e06 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	f107 0208 	add.w	r2, r7, #8
 8007c10:	4610      	mov	r0, r2
 8007c12:	4798      	blx	r3
 8007c14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	701a      	strb	r2, [r3, #0]
      break;
 8007c1e:	e0f2      	b.n	8007e06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	885b      	ldrh	r3, [r3, #2]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b05      	cmp	r3, #5
 8007c28:	f200 80ac 	bhi.w	8007d84 <USBD_GetDescriptor+0x204>
 8007c2c:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <USBD_GetDescriptor+0xb4>)
 8007c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c32:	bf00      	nop
 8007c34:	08007c4d 	.word	0x08007c4d
 8007c38:	08007c81 	.word	0x08007c81
 8007c3c:	08007cb5 	.word	0x08007cb5
 8007c40:	08007ce9 	.word	0x08007ce9
 8007c44:	08007d1d 	.word	0x08007d1d
 8007c48:	08007d51 	.word	0x08007d51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00b      	beq.n	8007c70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7c12      	ldrb	r2, [r2, #16]
 8007c64:	f107 0108 	add.w	r1, r7, #8
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
 8007c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c6e:	e091      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa97 	bl	80081a6 <USBD_CtlError>
            err++;
 8007c78:	7afb      	ldrb	r3, [r7, #11]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c7e:	e089      	b.n	8007d94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	7c12      	ldrb	r2, [r2, #16]
 8007c98:	f107 0108 	add.w	r1, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca2:	e077      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fa7d 	bl	80081a6 <USBD_CtlError>
            err++;
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb2:	e06f      	b.n	8007d94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7c12      	ldrb	r2, [r2, #16]
 8007ccc:	f107 0108 	add.w	r1, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd6:	e05d      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa63 	bl	80081a6 <USBD_CtlError>
            err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce6:	e055      	b.n	8007d94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	7c12      	ldrb	r2, [r2, #16]
 8007d00:	f107 0108 	add.w	r1, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d0a:	e043      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa49 	bl	80081a6 <USBD_CtlError>
            err++;
 8007d14:	7afb      	ldrb	r3, [r7, #11]
 8007d16:	3301      	adds	r3, #1
 8007d18:	72fb      	strb	r3, [r7, #11]
          break;
 8007d1a:	e03b      	b.n	8007d94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	7c12      	ldrb	r2, [r2, #16]
 8007d34:	f107 0108 	add.w	r1, r7, #8
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d3e:	e029      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa2f 	bl	80081a6 <USBD_CtlError>
            err++;
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d4e:	e021      	b.n	8007d94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7c12      	ldrb	r2, [r2, #16]
 8007d68:	f107 0108 	add.w	r1, r7, #8
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
 8007d70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d72:	e00f      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa15 	bl	80081a6 <USBD_CtlError>
            err++;
 8007d7c:	7afb      	ldrb	r3, [r7, #11]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	72fb      	strb	r3, [r7, #11]
          break;
 8007d82:	e007      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa0d 	bl	80081a6 <USBD_CtlError>
          err++;
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d92:	e038      	b.n	8007e06 <USBD_GetDescriptor+0x286>
 8007d94:	e037      	b.n	8007e06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	7c1b      	ldrb	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d109      	bne.n	8007db2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da6:	f107 0208 	add.w	r2, r7, #8
 8007daa:	4610      	mov	r0, r2
 8007dac:	4798      	blx	r3
 8007dae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007db0:	e029      	b.n	8007e06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f9f6 	bl	80081a6 <USBD_CtlError>
        err++;
 8007dba:	7afb      	ldrb	r3, [r7, #11]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8007dc0:	e021      	b.n	8007e06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	7c1b      	ldrb	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10d      	bne.n	8007de6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	f107 0208 	add.w	r2, r7, #8
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4798      	blx	r3
 8007dda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3301      	adds	r3, #1
 8007de0:	2207      	movs	r2, #7
 8007de2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007de4:	e00f      	b.n	8007e06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f9dc 	bl	80081a6 <USBD_CtlError>
        err++;
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	3301      	adds	r3, #1
 8007df2:	72fb      	strb	r3, [r7, #11]
      break;
 8007df4:	e007      	b.n	8007e06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f9d4 	bl	80081a6 <USBD_CtlError>
      err++;
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	3301      	adds	r3, #1
 8007e02:	72fb      	strb	r3, [r7, #11]
      break;
 8007e04:	bf00      	nop
  }

  if (err != 0U)
 8007e06:	7afb      	ldrb	r3, [r7, #11]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d11c      	bne.n	8007e46 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007e0c:	893b      	ldrh	r3, [r7, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d011      	beq.n	8007e36 <USBD_GetDescriptor+0x2b6>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	88db      	ldrh	r3, [r3, #6]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00d      	beq.n	8007e36 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88da      	ldrh	r2, [r3, #6]
 8007e1e:	893b      	ldrh	r3, [r7, #8]
 8007e20:	4293      	cmp	r3, r2
 8007e22:	bf28      	it	cs
 8007e24:	4613      	movcs	r3, r2
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e2a:	893b      	ldrh	r3, [r7, #8]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fa22 	bl	800827a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	88db      	ldrh	r3, [r3, #6]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d104      	bne.n	8007e48 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa79 	bl	8008336 <USBD_CtlSendStatus>
 8007e44:	e000      	b.n	8007e48 <USBD_GetDescriptor+0x2c8>
    return;
 8007e46:	bf00      	nop
    }
  }
}
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop

08007e50 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	889b      	ldrh	r3, [r3, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d130      	bne.n	8007ec4 <USBD_SetAddress+0x74>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	88db      	ldrh	r3, [r3, #6]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d12c      	bne.n	8007ec4 <USBD_SetAddress+0x74>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	885b      	ldrh	r3, [r3, #2]
 8007e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e70:	d828      	bhi.n	8007ec4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	885b      	ldrh	r3, [r3, #2]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d104      	bne.n	8007e92 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f98b 	bl	80081a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e90:	e01d      	b.n	8007ece <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	7bfa      	ldrb	r2, [r7, #15]
 8007e96:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fe48 	bl	8008b34 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa46 	bl	8008336 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb8:	e009      	b.n	8007ece <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec2:	e004      	b.n	8007ece <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f96d 	bl	80081a6 <USBD_CtlError>
  }
}
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	885b      	ldrh	r3, [r3, #2]
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	4b41      	ldr	r3, [pc, #260]	; (8007ff0 <USBD_SetConfig+0x118>)
 8007eea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007eec:	4b40      	ldr	r3, [pc, #256]	; (8007ff0 <USBD_SetConfig+0x118>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d904      	bls.n	8007efe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f955 	bl	80081a6 <USBD_CtlError>
 8007efc:	e075      	b.n	8007fea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d002      	beq.n	8007f0e <USBD_SetConfig+0x36>
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d023      	beq.n	8007f54 <USBD_SetConfig+0x7c>
 8007f0c:	e062      	b.n	8007fd4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007f0e:	4b38      	ldr	r3, [pc, #224]	; (8007ff0 <USBD_SetConfig+0x118>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01a      	beq.n	8007f4c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007f16:	4b36      	ldr	r3, [pc, #216]	; (8007ff0 <USBD_SetConfig+0x118>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2203      	movs	r2, #3
 8007f24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f28:	4b31      	ldr	r3, [pc, #196]	; (8007ff0 <USBD_SetConfig+0x118>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff f9e7 	bl	8007302 <USBD_SetClassConfig>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d104      	bne.n	8007f44 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f932 	bl	80081a6 <USBD_CtlError>
            return;
 8007f42:	e052      	b.n	8007fea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f9f6 	bl	8008336 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f4a:	e04e      	b.n	8007fea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f9f2 	bl	8008336 <USBD_CtlSendStatus>
        break;
 8007f52:	e04a      	b.n	8007fea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007f54:	4b26      	ldr	r3, [pc, #152]	; (8007ff0 <USBD_SetConfig+0x118>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d112      	bne.n	8007f82 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007f64:	4b22      	ldr	r3, [pc, #136]	; (8007ff0 <USBD_SetConfig+0x118>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007f6e:	4b20      	ldr	r3, [pc, #128]	; (8007ff0 <USBD_SetConfig+0x118>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff f9e3 	bl	8007340 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f9db 	bl	8008336 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f80:	e033      	b.n	8007fea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f82:	4b1b      	ldr	r3, [pc, #108]	; (8007ff0 <USBD_SetConfig+0x118>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d01d      	beq.n	8007fcc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff f9d1 	bl	8007340 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f9e:	4b14      	ldr	r3, [pc, #80]	; (8007ff0 <USBD_SetConfig+0x118>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007fa8:	4b11      	ldr	r3, [pc, #68]	; (8007ff0 <USBD_SetConfig+0x118>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff f9a7 	bl	8007302 <USBD_SetClassConfig>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d104      	bne.n	8007fc4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f8f2 	bl	80081a6 <USBD_CtlError>
            return;
 8007fc2:	e012      	b.n	8007fea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f9b6 	bl	8008336 <USBD_CtlSendStatus>
        break;
 8007fca:	e00e      	b.n	8007fea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f9b2 	bl	8008336 <USBD_CtlSendStatus>
        break;
 8007fd2:	e00a      	b.n	8007fea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f8e5 	bl	80081a6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007fdc:	4b04      	ldr	r3, [pc, #16]	; (8007ff0 <USBD_SetConfig+0x118>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff f9ac 	bl	8007340 <USBD_ClrClassConfig>
        break;
 8007fe8:	bf00      	nop
    }
  }
}
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	200002cc 	.word	0x200002cc

08007ff4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	88db      	ldrh	r3, [r3, #6]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d004      	beq.n	8008010 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f8cc 	bl	80081a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800800e:	e022      	b.n	8008056 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008016:	2b02      	cmp	r3, #2
 8008018:	dc02      	bgt.n	8008020 <USBD_GetConfig+0x2c>
 800801a:	2b00      	cmp	r3, #0
 800801c:	dc03      	bgt.n	8008026 <USBD_GetConfig+0x32>
 800801e:	e015      	b.n	800804c <USBD_GetConfig+0x58>
 8008020:	2b03      	cmp	r3, #3
 8008022:	d00b      	beq.n	800803c <USBD_GetConfig+0x48>
 8008024:	e012      	b.n	800804c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3308      	adds	r3, #8
 8008030:	2201      	movs	r2, #1
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f920 	bl	800827a <USBD_CtlSendData>
        break;
 800803a:	e00c      	b.n	8008056 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3304      	adds	r3, #4
 8008040:	2201      	movs	r2, #1
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f918 	bl	800827a <USBD_CtlSendData>
        break;
 800804a:	e004      	b.n	8008056 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f8a9 	bl	80081a6 <USBD_CtlError>
        break;
 8008054:	bf00      	nop
}
 8008056:	bf00      	nop
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806e:	3b01      	subs	r3, #1
 8008070:	2b02      	cmp	r3, #2
 8008072:	d81e      	bhi.n	80080b2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	88db      	ldrh	r3, [r3, #6]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d004      	beq.n	8008086 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f891 	bl	80081a6 <USBD_CtlError>
        break;
 8008084:	e01a      	b.n	80080bc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f043 0202 	orr.w	r2, r3, #2
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	330c      	adds	r3, #12
 80080a6:	2202      	movs	r2, #2
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f8e5 	bl	800827a <USBD_CtlSendData>
      break;
 80080b0:	e004      	b.n	80080bc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f876 	bl	80081a6 <USBD_CtlError>
      break;
 80080ba:	bf00      	nop
  }
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	885b      	ldrh	r3, [r3, #2]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d106      	bne.n	80080e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f929 	bl	8008336 <USBD_CtlSendStatus>
  }
}
 80080e4:	bf00      	nop
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fc:	3b01      	subs	r3, #1
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d80b      	bhi.n	800811a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	885b      	ldrh	r3, [r3, #2]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d10c      	bne.n	8008124 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f90f 	bl	8008336 <USBD_CtlSendStatus>
      }
      break;
 8008118:	e004      	b.n	8008124 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f842 	bl	80081a6 <USBD_CtlError>
      break;
 8008122:	e000      	b.n	8008126 <USBD_ClrFeature+0x3a>
      break;
 8008124:	bf00      	nop
  }
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781a      	ldrb	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	785a      	ldrb	r2, [r3, #1]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	3302      	adds	r3, #2
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b29a      	uxth	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	3303      	adds	r3, #3
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	021b      	lsls	r3, r3, #8
 800815a:	b29b      	uxth	r3, r3
 800815c:	4413      	add	r3, r2
 800815e:	b29a      	uxth	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	3304      	adds	r3, #4
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	b29a      	uxth	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	3305      	adds	r3, #5
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	b29b      	uxth	r3, r3
 8008178:	4413      	add	r3, r2
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	3306      	adds	r3, #6
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	b29a      	uxth	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	3307      	adds	r3, #7
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	021b      	lsls	r3, r3, #8
 8008192:	b29b      	uxth	r3, r3
 8008194:	4413      	add	r3, r2
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	80da      	strh	r2, [r3, #6]

}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr

080081a6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80081b0:	2180      	movs	r1, #128	; 0x80
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fc54 	bl	8008a60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80081b8:	2100      	movs	r1, #0
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fc50 	bl	8008a60 <USBD_LL_StallEP>
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081d4:	2300      	movs	r3, #0
 80081d6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d032      	beq.n	8008244 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 f834 	bl	800824c <USBD_GetLen>
 80081e4:	4603      	mov	r3, r0
 80081e6:	3301      	adds	r3, #1
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	75fa      	strb	r2, [r7, #23]
 80081f8:	461a      	mov	r2, r3
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	4413      	add	r3, r2
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	7812      	ldrb	r2, [r2, #0]
 8008202:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	75fa      	strb	r2, [r7, #23]
 800820a:	461a      	mov	r2, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4413      	add	r3, r2
 8008210:	2203      	movs	r2, #3
 8008212:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008214:	e012      	b.n	800823c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	60fa      	str	r2, [r7, #12]
 800821c:	7dfa      	ldrb	r2, [r7, #23]
 800821e:	1c51      	adds	r1, r2, #1
 8008220:	75f9      	strb	r1, [r7, #23]
 8008222:	4611      	mov	r1, r2
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	440a      	add	r2, r1
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	75fa      	strb	r2, [r7, #23]
 8008232:	461a      	mov	r2, r3
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	4413      	add	r3, r2
 8008238:	2200      	movs	r2, #0
 800823a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e8      	bne.n	8008216 <USBD_GetString+0x4e>
    }
  }
}
 8008244:	bf00      	nop
 8008246:	3718      	adds	r7, #24
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008258:	e005      	b.n	8008266 <USBD_GetLen+0x1a>
  {
    len++;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	3301      	adds	r3, #1
 800825e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	3301      	adds	r3, #1
 8008264:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f5      	bne.n	800825a <USBD_GetLen+0xe>
  }

  return len;
 800826e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	bc80      	pop	{r7}
 8008278:	4770      	bx	lr

0800827a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	4613      	mov	r3, r2
 8008286:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2202      	movs	r2, #2
 800828c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008296:	88fa      	ldrh	r2, [r7, #6]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800829c:	88fb      	ldrh	r3, [r7, #6]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	2100      	movs	r1, #0
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fc65 	bl	8008b72 <USBD_LL_Transmit>

  return USBD_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	4613      	mov	r3, r2
 80082be:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082c0:	88fb      	ldrh	r3, [r7, #6]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	2100      	movs	r1, #0
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fc53 	bl	8008b72 <USBD_LL_Transmit>

  return USBD_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	4613      	mov	r3, r2
 80082e2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2203      	movs	r2, #3
 80082e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082ec:	88fa      	ldrh	r2, [r7, #6]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80082f4:	88fa      	ldrh	r2, [r7, #6]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	2100      	movs	r1, #0
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 fc58 	bl	8008bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	60f8      	str	r0, [r7, #12]
 800831a:	60b9      	str	r1, [r7, #8]
 800831c:	4613      	mov	r3, r2
 800831e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008320:	88fb      	ldrh	r3, [r7, #6]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	2100      	movs	r1, #0
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fc46 	bl	8008bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2204      	movs	r2, #4
 8008342:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008346:	2300      	movs	r3, #0
 8008348:	2200      	movs	r2, #0
 800834a:	2100      	movs	r1, #0
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fc10 	bl	8008b72 <USBD_LL_Transmit>

  return USBD_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2205      	movs	r2, #5
 8008368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800836c:	2300      	movs	r3, #0
 800836e:	2200      	movs	r2, #0
 8008370:	2100      	movs	r1, #0
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fc20 	bl	8008bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008388:	2200      	movs	r2, #0
 800838a:	4912      	ldr	r1, [pc, #72]	; (80083d4 <MX_USB_DEVICE_Init+0x50>)
 800838c:	4812      	ldr	r0, [pc, #72]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 800838e:	f7fe ff5e 	bl	800724e <USBD_Init>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008398:	f7f8 fa2c 	bl	80007f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800839c:	490f      	ldr	r1, [pc, #60]	; (80083dc <MX_USB_DEVICE_Init+0x58>)
 800839e:	480e      	ldr	r0, [pc, #56]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 80083a0:	f7fe ff80 	bl	80072a4 <USBD_RegisterClass>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083aa:	f7f8 fa23 	bl	80007f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083ae:	490c      	ldr	r1, [pc, #48]	; (80083e0 <MX_USB_DEVICE_Init+0x5c>)
 80083b0:	4809      	ldr	r0, [pc, #36]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 80083b2:	f7fe feb1 	bl	8007118 <USBD_CDC_RegisterInterface>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083bc:	f7f8 fa1a 	bl	80007f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083c0:	4805      	ldr	r0, [pc, #20]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 80083c2:	f7fe ff88 	bl	80072d6 <USBD_Start>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083cc:	f7f8 fa12 	bl	80007f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083d0:	bf00      	nop
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	2000012c 	.word	0x2000012c
 80083d8:	200002d0 	.word	0x200002d0
 80083dc:	20000018 	.word	0x20000018
 80083e0:	2000011c 	.word	0x2000011c

080083e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083e8:	2200      	movs	r2, #0
 80083ea:	4905      	ldr	r1, [pc, #20]	; (8008400 <CDC_Init_FS+0x1c>)
 80083ec:	4805      	ldr	r0, [pc, #20]	; (8008404 <CDC_Init_FS+0x20>)
 80083ee:	f7fe fea9 	bl	8007144 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083f2:	4905      	ldr	r1, [pc, #20]	; (8008408 <CDC_Init_FS+0x24>)
 80083f4:	4803      	ldr	r0, [pc, #12]	; (8008404 <CDC_Init_FS+0x20>)
 80083f6:	f7fe febe 	bl	8007176 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	2000097c 	.word	0x2000097c
 8008404:	200002d0 	.word	0x200002d0
 8008408:	20000594 	.word	0x20000594

0800840c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008410:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008412:	4618      	mov	r0, r3
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr
	...

0800841c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	4603      	mov	r3, r0
 8008424:	6039      	str	r1, [r7, #0]
 8008426:	71fb      	strb	r3, [r7, #7]
 8008428:	4613      	mov	r3, r2
 800842a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	2b23      	cmp	r3, #35	; 0x23
 8008430:	d84a      	bhi.n	80084c8 <CDC_Control_FS+0xac>
 8008432:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <CDC_Control_FS+0x1c>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	080084c9 	.word	0x080084c9
 800843c:	080084c9 	.word	0x080084c9
 8008440:	080084c9 	.word	0x080084c9
 8008444:	080084c9 	.word	0x080084c9
 8008448:	080084c9 	.word	0x080084c9
 800844c:	080084c9 	.word	0x080084c9
 8008450:	080084c9 	.word	0x080084c9
 8008454:	080084c9 	.word	0x080084c9
 8008458:	080084c9 	.word	0x080084c9
 800845c:	080084c9 	.word	0x080084c9
 8008460:	080084c9 	.word	0x080084c9
 8008464:	080084c9 	.word	0x080084c9
 8008468:	080084c9 	.word	0x080084c9
 800846c:	080084c9 	.word	0x080084c9
 8008470:	080084c9 	.word	0x080084c9
 8008474:	080084c9 	.word	0x080084c9
 8008478:	080084c9 	.word	0x080084c9
 800847c:	080084c9 	.word	0x080084c9
 8008480:	080084c9 	.word	0x080084c9
 8008484:	080084c9 	.word	0x080084c9
 8008488:	080084c9 	.word	0x080084c9
 800848c:	080084c9 	.word	0x080084c9
 8008490:	080084c9 	.word	0x080084c9
 8008494:	080084c9 	.word	0x080084c9
 8008498:	080084c9 	.word	0x080084c9
 800849c:	080084c9 	.word	0x080084c9
 80084a0:	080084c9 	.word	0x080084c9
 80084a4:	080084c9 	.word	0x080084c9
 80084a8:	080084c9 	.word	0x080084c9
 80084ac:	080084c9 	.word	0x080084c9
 80084b0:	080084c9 	.word	0x080084c9
 80084b4:	080084c9 	.word	0x080084c9
 80084b8:	080084c9 	.word	0x080084c9
 80084bc:	080084c9 	.word	0x080084c9
 80084c0:	080084c9 	.word	0x080084c9
 80084c4:	080084c9 	.word	0x080084c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084c8:	bf00      	nop
  }

  return (USBD_OK);
 80084ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop

080084d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	4805      	ldr	r0, [pc, #20]	; (80084fc <CDC_Receive_FS+0x24>)
 80084e6:	f7fe fe46 	bl	8007176 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084ea:	4804      	ldr	r0, [pc, #16]	; (80084fc <CDC_Receive_FS+0x24>)
 80084ec:	f7fe fe85 	bl	80071fa <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	200002d0 	.word	0x200002d0

08008500 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008510:	4b0d      	ldr	r3, [pc, #52]	; (8008548 <CDC_Transmit_FS+0x48>)
 8008512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008516:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008522:	2301      	movs	r3, #1
 8008524:	e00b      	b.n	800853e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008526:	887b      	ldrh	r3, [r7, #2]
 8008528:	461a      	mov	r2, r3
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	4806      	ldr	r0, [pc, #24]	; (8008548 <CDC_Transmit_FS+0x48>)
 800852e:	f7fe fe09 	bl	8007144 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008532:	4805      	ldr	r0, [pc, #20]	; (8008548 <CDC_Transmit_FS+0x48>)
 8008534:	f7fe fe32 	bl	800719c <USBD_CDC_TransmitPacket>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	200002d0 	.word	0x200002d0

0800854c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	6039      	str	r1, [r7, #0]
 8008556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2212      	movs	r2, #18
 800855c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800855e:	4b03      	ldr	r3, [pc, #12]	; (800856c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	bc80      	pop	{r7}
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	20000148 	.word	0x20000148

08008570 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	6039      	str	r1, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2204      	movs	r2, #4
 8008580:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008582:	4b03      	ldr	r3, [pc, #12]	; (8008590 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	2000015c 	.word	0x2000015c

08008594 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	4603      	mov	r3, r0
 800859c:	6039      	str	r1, [r7, #0]
 800859e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085a0:	79fb      	ldrb	r3, [r7, #7]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d105      	bne.n	80085b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4907      	ldr	r1, [pc, #28]	; (80085c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80085aa:	4808      	ldr	r0, [pc, #32]	; (80085cc <USBD_FS_ProductStrDescriptor+0x38>)
 80085ac:	f7ff fe0c 	bl	80081c8 <USBD_GetString>
 80085b0:	e004      	b.n	80085bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	4904      	ldr	r1, [pc, #16]	; (80085c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80085b6:	4805      	ldr	r0, [pc, #20]	; (80085cc <USBD_FS_ProductStrDescriptor+0x38>)
 80085b8:	f7ff fe06 	bl	80081c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085bc:	4b02      	ldr	r3, [pc, #8]	; (80085c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20000d64 	.word	0x20000d64
 80085cc:	0800a0c0 	.word	0x0800a0c0

080085d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	6039      	str	r1, [r7, #0]
 80085da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	4904      	ldr	r1, [pc, #16]	; (80085f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085e0:	4804      	ldr	r0, [pc, #16]	; (80085f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085e2:	f7ff fdf1 	bl	80081c8 <USBD_GetString>
  return USBD_StrDesc;
 80085e6:	4b02      	ldr	r3, [pc, #8]	; (80085f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	20000d64 	.word	0x20000d64
 80085f4:	0800a0d8 	.word	0x0800a0d8

080085f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	221a      	movs	r2, #26
 8008608:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800860a:	f000 f843 	bl	8008694 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800860e:	4b02      	ldr	r3, [pc, #8]	; (8008618 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20000160 	.word	0x20000160

0800861c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	6039      	str	r1, [r7, #0]
 8008626:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008628:	79fb      	ldrb	r3, [r7, #7]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d105      	bne.n	800863a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	4907      	ldr	r1, [pc, #28]	; (8008650 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008632:	4808      	ldr	r0, [pc, #32]	; (8008654 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008634:	f7ff fdc8 	bl	80081c8 <USBD_GetString>
 8008638:	e004      	b.n	8008644 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	4904      	ldr	r1, [pc, #16]	; (8008650 <USBD_FS_ConfigStrDescriptor+0x34>)
 800863e:	4805      	ldr	r0, [pc, #20]	; (8008654 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008640:	f7ff fdc2 	bl	80081c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008644:	4b02      	ldr	r3, [pc, #8]	; (8008650 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008646:	4618      	mov	r0, r3
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20000d64 	.word	0x20000d64
 8008654:	0800a0ec 	.word	0x0800a0ec

08008658 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	6039      	str	r1, [r7, #0]
 8008662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d105      	bne.n	8008676 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	4907      	ldr	r1, [pc, #28]	; (800868c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800866e:	4808      	ldr	r0, [pc, #32]	; (8008690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008670:	f7ff fdaa 	bl	80081c8 <USBD_GetString>
 8008674:	e004      	b.n	8008680 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	4904      	ldr	r1, [pc, #16]	; (800868c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800867a:	4805      	ldr	r0, [pc, #20]	; (8008690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800867c:	f7ff fda4 	bl	80081c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008680:	4b02      	ldr	r3, [pc, #8]	; (800868c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	20000d64 	.word	0x20000d64
 8008690:	0800a0f8 	.word	0x0800a0f8

08008694 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800869a:	4b0f      	ldr	r3, [pc, #60]	; (80086d8 <Get_SerialNum+0x44>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086a0:	4b0e      	ldr	r3, [pc, #56]	; (80086dc <Get_SerialNum+0x48>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086a6:	4b0e      	ldr	r3, [pc, #56]	; (80086e0 <Get_SerialNum+0x4c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086ba:	2208      	movs	r2, #8
 80086bc:	4909      	ldr	r1, [pc, #36]	; (80086e4 <Get_SerialNum+0x50>)
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 f814 	bl	80086ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086c4:	2204      	movs	r2, #4
 80086c6:	4908      	ldr	r1, [pc, #32]	; (80086e8 <Get_SerialNum+0x54>)
 80086c8:	68b8      	ldr	r0, [r7, #8]
 80086ca:	f000 f80f 	bl	80086ec <IntToUnicode>
  }
}
 80086ce:	bf00      	nop
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	1ffff7e8 	.word	0x1ffff7e8
 80086dc:	1ffff7ec 	.word	0x1ffff7ec
 80086e0:	1ffff7f0 	.word	0x1ffff7f0
 80086e4:	20000162 	.word	0x20000162
 80086e8:	20000172 	.word	0x20000172

080086ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	4613      	mov	r3, r2
 80086f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086fe:	2300      	movs	r3, #0
 8008700:	75fb      	strb	r3, [r7, #23]
 8008702:	e027      	b.n	8008754 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	0f1b      	lsrs	r3, r3, #28
 8008708:	2b09      	cmp	r3, #9
 800870a:	d80b      	bhi.n	8008724 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	0f1b      	lsrs	r3, r3, #28
 8008710:	b2da      	uxtb	r2, r3
 8008712:	7dfb      	ldrb	r3, [r7, #23]
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	4619      	mov	r1, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	440b      	add	r3, r1
 800871c:	3230      	adds	r2, #48	; 0x30
 800871e:	b2d2      	uxtb	r2, r2
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	e00a      	b.n	800873a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	0f1b      	lsrs	r3, r3, #28
 8008728:	b2da      	uxtb	r2, r3
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	4619      	mov	r1, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	440b      	add	r3, r1
 8008734:	3237      	adds	r2, #55	; 0x37
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	3301      	adds	r3, #1
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	4413      	add	r3, r2
 800874a:	2200      	movs	r2, #0
 800874c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	3301      	adds	r3, #1
 8008752:	75fb      	strb	r3, [r7, #23]
 8008754:	7dfa      	ldrb	r2, [r7, #23]
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	429a      	cmp	r2, r3
 800875a:	d3d3      	bcc.n	8008704 <IntToUnicode+0x18>
  }
}
 800875c:	bf00      	nop
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr

08008768 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a0d      	ldr	r2, [pc, #52]	; (80087ac <HAL_PCD_MspInit+0x44>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d113      	bne.n	80087a2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800877a:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <HAL_PCD_MspInit+0x48>)
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	4a0c      	ldr	r2, [pc, #48]	; (80087b0 <HAL_PCD_MspInit+0x48>)
 8008780:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008784:	61d3      	str	r3, [r2, #28]
 8008786:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <HAL_PCD_MspInit+0x48>)
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008792:	2200      	movs	r2, #0
 8008794:	2100      	movs	r1, #0
 8008796:	2014      	movs	r0, #20
 8008798:	f7f8 fb81 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800879c:	2014      	movs	r0, #20
 800879e:	f7f8 fb9a 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	40005c00 	.word	0x40005c00
 80087b0:	40021000 	.word	0x40021000

080087b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f7fe fdcb 	bl	8007366 <USBD_LL_SetupStage>
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80087ea:	78fa      	ldrb	r2, [r7, #3]
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	440b      	add	r3, r1
 80087f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	78fb      	ldrb	r3, [r7, #3]
 8008800:	4619      	mov	r1, r3
 8008802:	f7fe fdfd 	bl	8007400 <USBD_LL_DataOutStage>
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	460b      	mov	r3, r1
 8008818:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008820:	78fa      	ldrb	r2, [r7, #3]
 8008822:	6879      	ldr	r1, [r7, #4]
 8008824:	4613      	mov	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	440b      	add	r3, r1
 800882e:	333c      	adds	r3, #60	; 0x3c
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	78fb      	ldrb	r3, [r7, #3]
 8008834:	4619      	mov	r1, r3
 8008836:	f7fe fe54 	bl	80074e2 <USBD_LL_DataInStage>
}
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008850:	4618      	mov	r0, r3
 8008852:	f7fe ff64 	bl	800771e <USBD_LL_SOF>
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008866:	2301      	movs	r3, #1
 8008868:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	2b02      	cmp	r3, #2
 8008870:	d001      	beq.n	8008876 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008872:	f7f7 ffbf 	bl	80007f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800887c:	7bfa      	ldrb	r2, [r7, #15]
 800887e:	4611      	mov	r1, r2
 8008880:	4618      	mov	r0, r3
 8008882:	f7fe ff14 	bl	80076ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fecd 	bl	800762c <USBD_LL_Reset>
}
 8008892:	bf00      	nop
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe ff0e 	bl	80076cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d005      	beq.n	80088c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088b8:	4b04      	ldr	r3, [pc, #16]	; (80088cc <HAL_PCD_SuspendCallback+0x30>)
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	4a03      	ldr	r2, [pc, #12]	; (80088cc <HAL_PCD_SuspendCallback+0x30>)
 80088be:	f043 0306 	orr.w	r3, r3, #6
 80088c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	e000ed00 	.word	0xe000ed00

080088d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe ff08 	bl	80076f4 <USBD_LL_Resume>
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80088f4:	4a28      	ldr	r2, [pc, #160]	; (8008998 <USBD_LL_Init+0xac>)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a26      	ldr	r2, [pc, #152]	; (8008998 <USBD_LL_Init+0xac>)
 8008900:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008904:	4b24      	ldr	r3, [pc, #144]	; (8008998 <USBD_LL_Init+0xac>)
 8008906:	4a25      	ldr	r2, [pc, #148]	; (800899c <USBD_LL_Init+0xb0>)
 8008908:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800890a:	4b23      	ldr	r3, [pc, #140]	; (8008998 <USBD_LL_Init+0xac>)
 800890c:	2208      	movs	r2, #8
 800890e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008910:	4b21      	ldr	r3, [pc, #132]	; (8008998 <USBD_LL_Init+0xac>)
 8008912:	2202      	movs	r2, #2
 8008914:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008916:	4b20      	ldr	r3, [pc, #128]	; (8008998 <USBD_LL_Init+0xac>)
 8008918:	2200      	movs	r2, #0
 800891a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800891c:	4b1e      	ldr	r3, [pc, #120]	; (8008998 <USBD_LL_Init+0xac>)
 800891e:	2200      	movs	r2, #0
 8008920:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008922:	4b1d      	ldr	r3, [pc, #116]	; (8008998 <USBD_LL_Init+0xac>)
 8008924:	2200      	movs	r2, #0
 8008926:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008928:	481b      	ldr	r0, [pc, #108]	; (8008998 <USBD_LL_Init+0xac>)
 800892a:	f7f8 fd3d 	bl	80013a8 <HAL_PCD_Init>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008934:	f7f7 ff5e 	bl	80007f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800893e:	2318      	movs	r3, #24
 8008940:	2200      	movs	r2, #0
 8008942:	2100      	movs	r1, #0
 8008944:	f7fa fa5c 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800894e:	2358      	movs	r3, #88	; 0x58
 8008950:	2200      	movs	r2, #0
 8008952:	2180      	movs	r1, #128	; 0x80
 8008954:	f7fa fa54 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800895e:	23c0      	movs	r3, #192	; 0xc0
 8008960:	2200      	movs	r2, #0
 8008962:	2181      	movs	r1, #129	; 0x81
 8008964:	f7fa fa4c 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800896e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008972:	2200      	movs	r2, #0
 8008974:	2101      	movs	r1, #1
 8008976:	f7fa fa43 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008984:	2200      	movs	r2, #0
 8008986:	2182      	movs	r1, #130	; 0x82
 8008988:	f7fa fa3a 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000f64 	.word	0x20000f64
 800899c:	40005c00 	.word	0x40005c00

080089a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7f8 fdf5 	bl	80015a6 <HAL_PCD_Start>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 f94e 	bl	8008c64 <USBD_Get_USB_Status>
 80089c8:	4603      	mov	r3, r0
 80089ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	4608      	mov	r0, r1
 80089e0:	4611      	mov	r1, r2
 80089e2:	461a      	mov	r2, r3
 80089e4:	4603      	mov	r3, r0
 80089e6:	70fb      	strb	r3, [r7, #3]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70bb      	strb	r3, [r7, #2]
 80089ec:	4613      	mov	r3, r2
 80089ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089fe:	78bb      	ldrb	r3, [r7, #2]
 8008a00:	883a      	ldrh	r2, [r7, #0]
 8008a02:	78f9      	ldrb	r1, [r7, #3]
 8008a04:	f7f8 ff4a 	bl	800189c <HAL_PCD_EP_Open>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f928 	bl	8008c64 <USBD_Get_USB_Status>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a3c:	78fa      	ldrb	r2, [r7, #3]
 8008a3e:	4611      	mov	r1, r2
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7f8 ff88 	bl	8001956 <HAL_PCD_EP_Close>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 f909 	bl	8008c64 <USBD_Get_USB_Status>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a7a:	78fa      	ldrb	r2, [r7, #3]
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7f9 f830 	bl	8001ae4 <HAL_PCD_EP_SetStall>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 f8ea 	bl	8008c64 <USBD_Get_USB_Status>
 8008a90:	4603      	mov	r3, r0
 8008a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ab8:	78fa      	ldrb	r2, [r7, #3]
 8008aba:	4611      	mov	r1, r2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7f9 f871 	bl	8001ba4 <HAL_PCD_EP_ClrStall>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 f8cb 	bl	8008c64 <USBD_Get_USB_Status>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	da0c      	bge.n	8008b12 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afe:	68f9      	ldr	r1, [r7, #12]
 8008b00:	1c5a      	adds	r2, r3, #1
 8008b02:	4613      	mov	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	00db      	lsls	r3, r3, #3
 8008b0a:	440b      	add	r3, r1
 8008b0c:	3302      	adds	r3, #2
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	e00b      	b.n	8008b2a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b18:	68f9      	ldr	r1, [r7, #12]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	00db      	lsls	r3, r3, #3
 8008b22:	440b      	add	r3, r1
 8008b24:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008b28:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr

08008b34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b4e:	78fa      	ldrb	r2, [r7, #3]
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7f8 fe7d 	bl	8001852 <HAL_PCD_SetAddress>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 f880 	bl	8008c64 <USBD_Get_USB_Status>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b086      	sub	sp, #24
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	607a      	str	r2, [r7, #4]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	460b      	mov	r3, r1
 8008b80:	72fb      	strb	r3, [r7, #11]
 8008b82:	4613      	mov	r3, r2
 8008b84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b94:	893b      	ldrh	r3, [r7, #8]
 8008b96:	7af9      	ldrb	r1, [r7, #11]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	f7f8 ff6c 	bl	8001a76 <HAL_PCD_EP_Transmit>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 f85d 	bl	8008c64 <USBD_Get_USB_Status>
 8008baa:	4603      	mov	r3, r0
 8008bac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bae:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	607a      	str	r2, [r7, #4]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	72fb      	strb	r3, [r7, #11]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bda:	893b      	ldrh	r3, [r7, #8]
 8008bdc:	7af9      	ldrb	r1, [r7, #11]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	f7f8 ff01 	bl	80019e6 <HAL_PCD_EP_Receive>
 8008be4:	4603      	mov	r3, r0
 8008be6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 f83a 	bl	8008c64 <USBD_Get_USB_Status>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bf4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c10:	78fa      	ldrb	r2, [r7, #3]
 8008c12:	4611      	mov	r1, r2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7f8 ff17 	bl	8001a48 <HAL_PCD_EP_GetRxCount>
 8008c1a:	4603      	mov	r3, r0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c2c:	4b02      	ldr	r3, [pc, #8]	; (8008c38 <USBD_static_malloc+0x14>)
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bc80      	pop	{r7}
 8008c36:	4770      	bx	lr
 8008c38:	20001254 	.word	0x20001254

08008c3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]

}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bc80      	pop	{r7}
 8008c4c:	4770      	bx	lr

08008c4e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	460b      	mov	r3, r1
 8008c58:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c5a:	bf00      	nop
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bc80      	pop	{r7}
 8008c62:	4770      	bx	lr

08008c64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d817      	bhi.n	8008ca8 <USBD_Get_USB_Status+0x44>
 8008c78:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <USBD_Get_USB_Status+0x1c>)
 8008c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7e:	bf00      	nop
 8008c80:	08008c91 	.word	0x08008c91
 8008c84:	08008c97 	.word	0x08008c97
 8008c88:	08008c9d 	.word	0x08008c9d
 8008c8c:	08008ca3 	.word	0x08008ca3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]
    break;
 8008c94:	e00b      	b.n	8008cae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c96:	2302      	movs	r3, #2
 8008c98:	73fb      	strb	r3, [r7, #15]
    break;
 8008c9a:	e008      	b.n	8008cae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca0:	e005      	b.n	8008cae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca6:	e002      	b.n	8008cae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cac:	bf00      	nop
  }
  return usb_status;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bc80      	pop	{r7}
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop

08008cbc <__errno>:
 8008cbc:	4b01      	ldr	r3, [pc, #4]	; (8008cc4 <__errno+0x8>)
 8008cbe:	6818      	ldr	r0, [r3, #0]
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	2000017c 	.word	0x2000017c

08008cc8 <__libc_init_array>:
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	2600      	movs	r6, #0
 8008ccc:	4d0c      	ldr	r5, [pc, #48]	; (8008d00 <__libc_init_array+0x38>)
 8008cce:	4c0d      	ldr	r4, [pc, #52]	; (8008d04 <__libc_init_array+0x3c>)
 8008cd0:	1b64      	subs	r4, r4, r5
 8008cd2:	10a4      	asrs	r4, r4, #2
 8008cd4:	42a6      	cmp	r6, r4
 8008cd6:	d109      	bne.n	8008cec <__libc_init_array+0x24>
 8008cd8:	f001 f9aa 	bl	800a030 <_init>
 8008cdc:	2600      	movs	r6, #0
 8008cde:	4d0a      	ldr	r5, [pc, #40]	; (8008d08 <__libc_init_array+0x40>)
 8008ce0:	4c0a      	ldr	r4, [pc, #40]	; (8008d0c <__libc_init_array+0x44>)
 8008ce2:	1b64      	subs	r4, r4, r5
 8008ce4:	10a4      	asrs	r4, r4, #2
 8008ce6:	42a6      	cmp	r6, r4
 8008ce8:	d105      	bne.n	8008cf6 <__libc_init_array+0x2e>
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf0:	4798      	blx	r3
 8008cf2:	3601      	adds	r6, #1
 8008cf4:	e7ee      	b.n	8008cd4 <__libc_init_array+0xc>
 8008cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cfa:	4798      	blx	r3
 8008cfc:	3601      	adds	r6, #1
 8008cfe:	e7f2      	b.n	8008ce6 <__libc_init_array+0x1e>
 8008d00:	0800a3cc 	.word	0x0800a3cc
 8008d04:	0800a3cc 	.word	0x0800a3cc
 8008d08:	0800a3cc 	.word	0x0800a3cc
 8008d0c:	0800a3d0 	.word	0x0800a3d0

08008d10 <malloc>:
 8008d10:	4b02      	ldr	r3, [pc, #8]	; (8008d1c <malloc+0xc>)
 8008d12:	4601      	mov	r1, r0
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	f000 b87b 	b.w	8008e10 <_malloc_r>
 8008d1a:	bf00      	nop
 8008d1c:	2000017c 	.word	0x2000017c

08008d20 <free>:
 8008d20:	4b02      	ldr	r3, [pc, #8]	; (8008d2c <free+0xc>)
 8008d22:	4601      	mov	r1, r0
 8008d24:	6818      	ldr	r0, [r3, #0]
 8008d26:	f000 b80b 	b.w	8008d40 <_free_r>
 8008d2a:	bf00      	nop
 8008d2c:	2000017c 	.word	0x2000017c

08008d30 <memset>:
 8008d30:	4603      	mov	r3, r0
 8008d32:	4402      	add	r2, r0
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d100      	bne.n	8008d3a <memset+0xa>
 8008d38:	4770      	bx	lr
 8008d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d3e:	e7f9      	b.n	8008d34 <memset+0x4>

08008d40 <_free_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4605      	mov	r5, r0
 8008d44:	2900      	cmp	r1, #0
 8008d46:	d040      	beq.n	8008dca <_free_r+0x8a>
 8008d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d4c:	1f0c      	subs	r4, r1, #4
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	bfb8      	it	lt
 8008d52:	18e4      	addlt	r4, r4, r3
 8008d54:	f000 fa18 	bl	8009188 <__malloc_lock>
 8008d58:	4a1c      	ldr	r2, [pc, #112]	; (8008dcc <_free_r+0x8c>)
 8008d5a:	6813      	ldr	r3, [r2, #0]
 8008d5c:	b933      	cbnz	r3, 8008d6c <_free_r+0x2c>
 8008d5e:	6063      	str	r3, [r4, #4]
 8008d60:	6014      	str	r4, [r2, #0]
 8008d62:	4628      	mov	r0, r5
 8008d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d68:	f000 ba14 	b.w	8009194 <__malloc_unlock>
 8008d6c:	42a3      	cmp	r3, r4
 8008d6e:	d908      	bls.n	8008d82 <_free_r+0x42>
 8008d70:	6820      	ldr	r0, [r4, #0]
 8008d72:	1821      	adds	r1, r4, r0
 8008d74:	428b      	cmp	r3, r1
 8008d76:	bf01      	itttt	eq
 8008d78:	6819      	ldreq	r1, [r3, #0]
 8008d7a:	685b      	ldreq	r3, [r3, #4]
 8008d7c:	1809      	addeq	r1, r1, r0
 8008d7e:	6021      	streq	r1, [r4, #0]
 8008d80:	e7ed      	b.n	8008d5e <_free_r+0x1e>
 8008d82:	461a      	mov	r2, r3
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	b10b      	cbz	r3, 8008d8c <_free_r+0x4c>
 8008d88:	42a3      	cmp	r3, r4
 8008d8a:	d9fa      	bls.n	8008d82 <_free_r+0x42>
 8008d8c:	6811      	ldr	r1, [r2, #0]
 8008d8e:	1850      	adds	r0, r2, r1
 8008d90:	42a0      	cmp	r0, r4
 8008d92:	d10b      	bne.n	8008dac <_free_r+0x6c>
 8008d94:	6820      	ldr	r0, [r4, #0]
 8008d96:	4401      	add	r1, r0
 8008d98:	1850      	adds	r0, r2, r1
 8008d9a:	4283      	cmp	r3, r0
 8008d9c:	6011      	str	r1, [r2, #0]
 8008d9e:	d1e0      	bne.n	8008d62 <_free_r+0x22>
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	4401      	add	r1, r0
 8008da6:	6011      	str	r1, [r2, #0]
 8008da8:	6053      	str	r3, [r2, #4]
 8008daa:	e7da      	b.n	8008d62 <_free_r+0x22>
 8008dac:	d902      	bls.n	8008db4 <_free_r+0x74>
 8008dae:	230c      	movs	r3, #12
 8008db0:	602b      	str	r3, [r5, #0]
 8008db2:	e7d6      	b.n	8008d62 <_free_r+0x22>
 8008db4:	6820      	ldr	r0, [r4, #0]
 8008db6:	1821      	adds	r1, r4, r0
 8008db8:	428b      	cmp	r3, r1
 8008dba:	bf01      	itttt	eq
 8008dbc:	6819      	ldreq	r1, [r3, #0]
 8008dbe:	685b      	ldreq	r3, [r3, #4]
 8008dc0:	1809      	addeq	r1, r1, r0
 8008dc2:	6021      	streq	r1, [r4, #0]
 8008dc4:	6063      	str	r3, [r4, #4]
 8008dc6:	6054      	str	r4, [r2, #4]
 8008dc8:	e7cb      	b.n	8008d62 <_free_r+0x22>
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
 8008dcc:	20001474 	.word	0x20001474

08008dd0 <sbrk_aligned>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	4e0e      	ldr	r6, [pc, #56]	; (8008e0c <sbrk_aligned+0x3c>)
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	6831      	ldr	r1, [r6, #0]
 8008dd8:	4605      	mov	r5, r0
 8008dda:	b911      	cbnz	r1, 8008de2 <sbrk_aligned+0x12>
 8008ddc:	f000 f8a4 	bl	8008f28 <_sbrk_r>
 8008de0:	6030      	str	r0, [r6, #0]
 8008de2:	4621      	mov	r1, r4
 8008de4:	4628      	mov	r0, r5
 8008de6:	f000 f89f 	bl	8008f28 <_sbrk_r>
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	d00a      	beq.n	8008e04 <sbrk_aligned+0x34>
 8008dee:	1cc4      	adds	r4, r0, #3
 8008df0:	f024 0403 	bic.w	r4, r4, #3
 8008df4:	42a0      	cmp	r0, r4
 8008df6:	d007      	beq.n	8008e08 <sbrk_aligned+0x38>
 8008df8:	1a21      	subs	r1, r4, r0
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f000 f894 	bl	8008f28 <_sbrk_r>
 8008e00:	3001      	adds	r0, #1
 8008e02:	d101      	bne.n	8008e08 <sbrk_aligned+0x38>
 8008e04:	f04f 34ff 	mov.w	r4, #4294967295
 8008e08:	4620      	mov	r0, r4
 8008e0a:	bd70      	pop	{r4, r5, r6, pc}
 8008e0c:	20001478 	.word	0x20001478

08008e10 <_malloc_r>:
 8008e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e14:	1ccd      	adds	r5, r1, #3
 8008e16:	f025 0503 	bic.w	r5, r5, #3
 8008e1a:	3508      	adds	r5, #8
 8008e1c:	2d0c      	cmp	r5, #12
 8008e1e:	bf38      	it	cc
 8008e20:	250c      	movcc	r5, #12
 8008e22:	2d00      	cmp	r5, #0
 8008e24:	4607      	mov	r7, r0
 8008e26:	db01      	blt.n	8008e2c <_malloc_r+0x1c>
 8008e28:	42a9      	cmp	r1, r5
 8008e2a:	d905      	bls.n	8008e38 <_malloc_r+0x28>
 8008e2c:	230c      	movs	r3, #12
 8008e2e:	2600      	movs	r6, #0
 8008e30:	603b      	str	r3, [r7, #0]
 8008e32:	4630      	mov	r0, r6
 8008e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e38:	4e2e      	ldr	r6, [pc, #184]	; (8008ef4 <_malloc_r+0xe4>)
 8008e3a:	f000 f9a5 	bl	8009188 <__malloc_lock>
 8008e3e:	6833      	ldr	r3, [r6, #0]
 8008e40:	461c      	mov	r4, r3
 8008e42:	bb34      	cbnz	r4, 8008e92 <_malloc_r+0x82>
 8008e44:	4629      	mov	r1, r5
 8008e46:	4638      	mov	r0, r7
 8008e48:	f7ff ffc2 	bl	8008dd0 <sbrk_aligned>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	4604      	mov	r4, r0
 8008e50:	d14d      	bne.n	8008eee <_malloc_r+0xde>
 8008e52:	6834      	ldr	r4, [r6, #0]
 8008e54:	4626      	mov	r6, r4
 8008e56:	2e00      	cmp	r6, #0
 8008e58:	d140      	bne.n	8008edc <_malloc_r+0xcc>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	4631      	mov	r1, r6
 8008e5e:	4638      	mov	r0, r7
 8008e60:	eb04 0803 	add.w	r8, r4, r3
 8008e64:	f000 f860 	bl	8008f28 <_sbrk_r>
 8008e68:	4580      	cmp	r8, r0
 8008e6a:	d13a      	bne.n	8008ee2 <_malloc_r+0xd2>
 8008e6c:	6821      	ldr	r1, [r4, #0]
 8008e6e:	3503      	adds	r5, #3
 8008e70:	1a6d      	subs	r5, r5, r1
 8008e72:	f025 0503 	bic.w	r5, r5, #3
 8008e76:	3508      	adds	r5, #8
 8008e78:	2d0c      	cmp	r5, #12
 8008e7a:	bf38      	it	cc
 8008e7c:	250c      	movcc	r5, #12
 8008e7e:	4638      	mov	r0, r7
 8008e80:	4629      	mov	r1, r5
 8008e82:	f7ff ffa5 	bl	8008dd0 <sbrk_aligned>
 8008e86:	3001      	adds	r0, #1
 8008e88:	d02b      	beq.n	8008ee2 <_malloc_r+0xd2>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	442b      	add	r3, r5
 8008e8e:	6023      	str	r3, [r4, #0]
 8008e90:	e00e      	b.n	8008eb0 <_malloc_r+0xa0>
 8008e92:	6822      	ldr	r2, [r4, #0]
 8008e94:	1b52      	subs	r2, r2, r5
 8008e96:	d41e      	bmi.n	8008ed6 <_malloc_r+0xc6>
 8008e98:	2a0b      	cmp	r2, #11
 8008e9a:	d916      	bls.n	8008eca <_malloc_r+0xba>
 8008e9c:	1961      	adds	r1, r4, r5
 8008e9e:	42a3      	cmp	r3, r4
 8008ea0:	6025      	str	r5, [r4, #0]
 8008ea2:	bf18      	it	ne
 8008ea4:	6059      	strne	r1, [r3, #4]
 8008ea6:	6863      	ldr	r3, [r4, #4]
 8008ea8:	bf08      	it	eq
 8008eaa:	6031      	streq	r1, [r6, #0]
 8008eac:	5162      	str	r2, [r4, r5]
 8008eae:	604b      	str	r3, [r1, #4]
 8008eb0:	4638      	mov	r0, r7
 8008eb2:	f104 060b 	add.w	r6, r4, #11
 8008eb6:	f000 f96d 	bl	8009194 <__malloc_unlock>
 8008eba:	f026 0607 	bic.w	r6, r6, #7
 8008ebe:	1d23      	adds	r3, r4, #4
 8008ec0:	1af2      	subs	r2, r6, r3
 8008ec2:	d0b6      	beq.n	8008e32 <_malloc_r+0x22>
 8008ec4:	1b9b      	subs	r3, r3, r6
 8008ec6:	50a3      	str	r3, [r4, r2]
 8008ec8:	e7b3      	b.n	8008e32 <_malloc_r+0x22>
 8008eca:	6862      	ldr	r2, [r4, #4]
 8008ecc:	42a3      	cmp	r3, r4
 8008ece:	bf0c      	ite	eq
 8008ed0:	6032      	streq	r2, [r6, #0]
 8008ed2:	605a      	strne	r2, [r3, #4]
 8008ed4:	e7ec      	b.n	8008eb0 <_malloc_r+0xa0>
 8008ed6:	4623      	mov	r3, r4
 8008ed8:	6864      	ldr	r4, [r4, #4]
 8008eda:	e7b2      	b.n	8008e42 <_malloc_r+0x32>
 8008edc:	4634      	mov	r4, r6
 8008ede:	6876      	ldr	r6, [r6, #4]
 8008ee0:	e7b9      	b.n	8008e56 <_malloc_r+0x46>
 8008ee2:	230c      	movs	r3, #12
 8008ee4:	4638      	mov	r0, r7
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	f000 f954 	bl	8009194 <__malloc_unlock>
 8008eec:	e7a1      	b.n	8008e32 <_malloc_r+0x22>
 8008eee:	6025      	str	r5, [r4, #0]
 8008ef0:	e7de      	b.n	8008eb0 <_malloc_r+0xa0>
 8008ef2:	bf00      	nop
 8008ef4:	20001474 	.word	0x20001474

08008ef8 <iprintf>:
 8008ef8:	b40f      	push	{r0, r1, r2, r3}
 8008efa:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <iprintf+0x2c>)
 8008efc:	b513      	push	{r0, r1, r4, lr}
 8008efe:	681c      	ldr	r4, [r3, #0]
 8008f00:	b124      	cbz	r4, 8008f0c <iprintf+0x14>
 8008f02:	69a3      	ldr	r3, [r4, #24]
 8008f04:	b913      	cbnz	r3, 8008f0c <iprintf+0x14>
 8008f06:	4620      	mov	r0, r4
 8008f08:	f000 f89e 	bl	8009048 <__sinit>
 8008f0c:	ab05      	add	r3, sp, #20
 8008f0e:	4620      	mov	r0, r4
 8008f10:	9a04      	ldr	r2, [sp, #16]
 8008f12:	68a1      	ldr	r1, [r4, #8]
 8008f14:	9301      	str	r3, [sp, #4]
 8008f16:	f000 fac7 	bl	80094a8 <_vfiprintf_r>
 8008f1a:	b002      	add	sp, #8
 8008f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f20:	b004      	add	sp, #16
 8008f22:	4770      	bx	lr
 8008f24:	2000017c 	.word	0x2000017c

08008f28 <_sbrk_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	4d05      	ldr	r5, [pc, #20]	; (8008f44 <_sbrk_r+0x1c>)
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	f7f7 fdf4 	bl	8000b20 <_sbrk>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d102      	bne.n	8008f42 <_sbrk_r+0x1a>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	b103      	cbz	r3, 8008f42 <_sbrk_r+0x1a>
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
 8008f44:	20001480 	.word	0x20001480

08008f48 <siprintf>:
 8008f48:	b40e      	push	{r1, r2, r3}
 8008f4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f4e:	b500      	push	{lr}
 8008f50:	b09c      	sub	sp, #112	; 0x70
 8008f52:	ab1d      	add	r3, sp, #116	; 0x74
 8008f54:	9002      	str	r0, [sp, #8]
 8008f56:	9006      	str	r0, [sp, #24]
 8008f58:	9107      	str	r1, [sp, #28]
 8008f5a:	9104      	str	r1, [sp, #16]
 8008f5c:	4808      	ldr	r0, [pc, #32]	; (8008f80 <siprintf+0x38>)
 8008f5e:	4909      	ldr	r1, [pc, #36]	; (8008f84 <siprintf+0x3c>)
 8008f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f64:	9105      	str	r1, [sp, #20]
 8008f66:	6800      	ldr	r0, [r0, #0]
 8008f68:	a902      	add	r1, sp, #8
 8008f6a:	9301      	str	r3, [sp, #4]
 8008f6c:	f000 f974 	bl	8009258 <_svfiprintf_r>
 8008f70:	2200      	movs	r2, #0
 8008f72:	9b02      	ldr	r3, [sp, #8]
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	b01c      	add	sp, #112	; 0x70
 8008f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f7c:	b003      	add	sp, #12
 8008f7e:	4770      	bx	lr
 8008f80:	2000017c 	.word	0x2000017c
 8008f84:	ffff0208 	.word	0xffff0208

08008f88 <strcpy>:
 8008f88:	4603      	mov	r3, r0
 8008f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f8e:	f803 2b01 	strb.w	r2, [r3], #1
 8008f92:	2a00      	cmp	r2, #0
 8008f94:	d1f9      	bne.n	8008f8a <strcpy+0x2>
 8008f96:	4770      	bx	lr

08008f98 <std>:
 8008f98:	2300      	movs	r3, #0
 8008f9a:	b510      	push	{r4, lr}
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fa6:	6083      	str	r3, [r0, #8]
 8008fa8:	8181      	strh	r1, [r0, #12]
 8008faa:	6643      	str	r3, [r0, #100]	; 0x64
 8008fac:	81c2      	strh	r2, [r0, #14]
 8008fae:	6183      	str	r3, [r0, #24]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	2208      	movs	r2, #8
 8008fb4:	305c      	adds	r0, #92	; 0x5c
 8008fb6:	f7ff febb 	bl	8008d30 <memset>
 8008fba:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <std+0x38>)
 8008fbc:	6224      	str	r4, [r4, #32]
 8008fbe:	6263      	str	r3, [r4, #36]	; 0x24
 8008fc0:	4b04      	ldr	r3, [pc, #16]	; (8008fd4 <std+0x3c>)
 8008fc2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fc4:	4b04      	ldr	r3, [pc, #16]	; (8008fd8 <std+0x40>)
 8008fc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fc8:	4b04      	ldr	r3, [pc, #16]	; (8008fdc <std+0x44>)
 8008fca:	6323      	str	r3, [r4, #48]	; 0x30
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	bf00      	nop
 8008fd0:	08009a35 	.word	0x08009a35
 8008fd4:	08009a57 	.word	0x08009a57
 8008fd8:	08009a8f 	.word	0x08009a8f
 8008fdc:	08009ab3 	.word	0x08009ab3

08008fe0 <_cleanup_r>:
 8008fe0:	4901      	ldr	r1, [pc, #4]	; (8008fe8 <_cleanup_r+0x8>)
 8008fe2:	f000 b8af 	b.w	8009144 <_fwalk_reent>
 8008fe6:	bf00      	nop
 8008fe8:	08009d85 	.word	0x08009d85

08008fec <__sfmoreglue>:
 8008fec:	2268      	movs	r2, #104	; 0x68
 8008fee:	b570      	push	{r4, r5, r6, lr}
 8008ff0:	1e4d      	subs	r5, r1, #1
 8008ff2:	4355      	muls	r5, r2
 8008ff4:	460e      	mov	r6, r1
 8008ff6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ffa:	f7ff ff09 	bl	8008e10 <_malloc_r>
 8008ffe:	4604      	mov	r4, r0
 8009000:	b140      	cbz	r0, 8009014 <__sfmoreglue+0x28>
 8009002:	2100      	movs	r1, #0
 8009004:	e9c0 1600 	strd	r1, r6, [r0]
 8009008:	300c      	adds	r0, #12
 800900a:	60a0      	str	r0, [r4, #8]
 800900c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009010:	f7ff fe8e 	bl	8008d30 <memset>
 8009014:	4620      	mov	r0, r4
 8009016:	bd70      	pop	{r4, r5, r6, pc}

08009018 <__sfp_lock_acquire>:
 8009018:	4801      	ldr	r0, [pc, #4]	; (8009020 <__sfp_lock_acquire+0x8>)
 800901a:	f000 b8b3 	b.w	8009184 <__retarget_lock_acquire_recursive>
 800901e:	bf00      	nop
 8009020:	2000147d 	.word	0x2000147d

08009024 <__sfp_lock_release>:
 8009024:	4801      	ldr	r0, [pc, #4]	; (800902c <__sfp_lock_release+0x8>)
 8009026:	f000 b8ae 	b.w	8009186 <__retarget_lock_release_recursive>
 800902a:	bf00      	nop
 800902c:	2000147d 	.word	0x2000147d

08009030 <__sinit_lock_acquire>:
 8009030:	4801      	ldr	r0, [pc, #4]	; (8009038 <__sinit_lock_acquire+0x8>)
 8009032:	f000 b8a7 	b.w	8009184 <__retarget_lock_acquire_recursive>
 8009036:	bf00      	nop
 8009038:	2000147e 	.word	0x2000147e

0800903c <__sinit_lock_release>:
 800903c:	4801      	ldr	r0, [pc, #4]	; (8009044 <__sinit_lock_release+0x8>)
 800903e:	f000 b8a2 	b.w	8009186 <__retarget_lock_release_recursive>
 8009042:	bf00      	nop
 8009044:	2000147e 	.word	0x2000147e

08009048 <__sinit>:
 8009048:	b510      	push	{r4, lr}
 800904a:	4604      	mov	r4, r0
 800904c:	f7ff fff0 	bl	8009030 <__sinit_lock_acquire>
 8009050:	69a3      	ldr	r3, [r4, #24]
 8009052:	b11b      	cbz	r3, 800905c <__sinit+0x14>
 8009054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009058:	f7ff bff0 	b.w	800903c <__sinit_lock_release>
 800905c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009060:	6523      	str	r3, [r4, #80]	; 0x50
 8009062:	4b13      	ldr	r3, [pc, #76]	; (80090b0 <__sinit+0x68>)
 8009064:	4a13      	ldr	r2, [pc, #76]	; (80090b4 <__sinit+0x6c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	62a2      	str	r2, [r4, #40]	; 0x28
 800906a:	42a3      	cmp	r3, r4
 800906c:	bf08      	it	eq
 800906e:	2301      	moveq	r3, #1
 8009070:	4620      	mov	r0, r4
 8009072:	bf08      	it	eq
 8009074:	61a3      	streq	r3, [r4, #24]
 8009076:	f000 f81f 	bl	80090b8 <__sfp>
 800907a:	6060      	str	r0, [r4, #4]
 800907c:	4620      	mov	r0, r4
 800907e:	f000 f81b 	bl	80090b8 <__sfp>
 8009082:	60a0      	str	r0, [r4, #8]
 8009084:	4620      	mov	r0, r4
 8009086:	f000 f817 	bl	80090b8 <__sfp>
 800908a:	2200      	movs	r2, #0
 800908c:	2104      	movs	r1, #4
 800908e:	60e0      	str	r0, [r4, #12]
 8009090:	6860      	ldr	r0, [r4, #4]
 8009092:	f7ff ff81 	bl	8008f98 <std>
 8009096:	2201      	movs	r2, #1
 8009098:	2109      	movs	r1, #9
 800909a:	68a0      	ldr	r0, [r4, #8]
 800909c:	f7ff ff7c 	bl	8008f98 <std>
 80090a0:	2202      	movs	r2, #2
 80090a2:	2112      	movs	r1, #18
 80090a4:	68e0      	ldr	r0, [r4, #12]
 80090a6:	f7ff ff77 	bl	8008f98 <std>
 80090aa:	2301      	movs	r3, #1
 80090ac:	61a3      	str	r3, [r4, #24]
 80090ae:	e7d1      	b.n	8009054 <__sinit+0xc>
 80090b0:	0800a334 	.word	0x0800a334
 80090b4:	08008fe1 	.word	0x08008fe1

080090b8 <__sfp>:
 80090b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ba:	4607      	mov	r7, r0
 80090bc:	f7ff ffac 	bl	8009018 <__sfp_lock_acquire>
 80090c0:	4b1e      	ldr	r3, [pc, #120]	; (800913c <__sfp+0x84>)
 80090c2:	681e      	ldr	r6, [r3, #0]
 80090c4:	69b3      	ldr	r3, [r6, #24]
 80090c6:	b913      	cbnz	r3, 80090ce <__sfp+0x16>
 80090c8:	4630      	mov	r0, r6
 80090ca:	f7ff ffbd 	bl	8009048 <__sinit>
 80090ce:	3648      	adds	r6, #72	; 0x48
 80090d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	d503      	bpl.n	80090e0 <__sfp+0x28>
 80090d8:	6833      	ldr	r3, [r6, #0]
 80090da:	b30b      	cbz	r3, 8009120 <__sfp+0x68>
 80090dc:	6836      	ldr	r6, [r6, #0]
 80090de:	e7f7      	b.n	80090d0 <__sfp+0x18>
 80090e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80090e4:	b9d5      	cbnz	r5, 800911c <__sfp+0x64>
 80090e6:	4b16      	ldr	r3, [pc, #88]	; (8009140 <__sfp+0x88>)
 80090e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090ec:	60e3      	str	r3, [r4, #12]
 80090ee:	6665      	str	r5, [r4, #100]	; 0x64
 80090f0:	f000 f847 	bl	8009182 <__retarget_lock_init_recursive>
 80090f4:	f7ff ff96 	bl	8009024 <__sfp_lock_release>
 80090f8:	2208      	movs	r2, #8
 80090fa:	4629      	mov	r1, r5
 80090fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009100:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009104:	6025      	str	r5, [r4, #0]
 8009106:	61a5      	str	r5, [r4, #24]
 8009108:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800910c:	f7ff fe10 	bl	8008d30 <memset>
 8009110:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009114:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009118:	4620      	mov	r0, r4
 800911a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800911c:	3468      	adds	r4, #104	; 0x68
 800911e:	e7d9      	b.n	80090d4 <__sfp+0x1c>
 8009120:	2104      	movs	r1, #4
 8009122:	4638      	mov	r0, r7
 8009124:	f7ff ff62 	bl	8008fec <__sfmoreglue>
 8009128:	4604      	mov	r4, r0
 800912a:	6030      	str	r0, [r6, #0]
 800912c:	2800      	cmp	r0, #0
 800912e:	d1d5      	bne.n	80090dc <__sfp+0x24>
 8009130:	f7ff ff78 	bl	8009024 <__sfp_lock_release>
 8009134:	230c      	movs	r3, #12
 8009136:	603b      	str	r3, [r7, #0]
 8009138:	e7ee      	b.n	8009118 <__sfp+0x60>
 800913a:	bf00      	nop
 800913c:	0800a334 	.word	0x0800a334
 8009140:	ffff0001 	.word	0xffff0001

08009144 <_fwalk_reent>:
 8009144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009148:	4606      	mov	r6, r0
 800914a:	4688      	mov	r8, r1
 800914c:	2700      	movs	r7, #0
 800914e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009152:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009156:	f1b9 0901 	subs.w	r9, r9, #1
 800915a:	d505      	bpl.n	8009168 <_fwalk_reent+0x24>
 800915c:	6824      	ldr	r4, [r4, #0]
 800915e:	2c00      	cmp	r4, #0
 8009160:	d1f7      	bne.n	8009152 <_fwalk_reent+0xe>
 8009162:	4638      	mov	r0, r7
 8009164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009168:	89ab      	ldrh	r3, [r5, #12]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d907      	bls.n	800917e <_fwalk_reent+0x3a>
 800916e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009172:	3301      	adds	r3, #1
 8009174:	d003      	beq.n	800917e <_fwalk_reent+0x3a>
 8009176:	4629      	mov	r1, r5
 8009178:	4630      	mov	r0, r6
 800917a:	47c0      	blx	r8
 800917c:	4307      	orrs	r7, r0
 800917e:	3568      	adds	r5, #104	; 0x68
 8009180:	e7e9      	b.n	8009156 <_fwalk_reent+0x12>

08009182 <__retarget_lock_init_recursive>:
 8009182:	4770      	bx	lr

08009184 <__retarget_lock_acquire_recursive>:
 8009184:	4770      	bx	lr

08009186 <__retarget_lock_release_recursive>:
 8009186:	4770      	bx	lr

08009188 <__malloc_lock>:
 8009188:	4801      	ldr	r0, [pc, #4]	; (8009190 <__malloc_lock+0x8>)
 800918a:	f7ff bffb 	b.w	8009184 <__retarget_lock_acquire_recursive>
 800918e:	bf00      	nop
 8009190:	2000147c 	.word	0x2000147c

08009194 <__malloc_unlock>:
 8009194:	4801      	ldr	r0, [pc, #4]	; (800919c <__malloc_unlock+0x8>)
 8009196:	f7ff bff6 	b.w	8009186 <__retarget_lock_release_recursive>
 800919a:	bf00      	nop
 800919c:	2000147c 	.word	0x2000147c

080091a0 <__ssputs_r>:
 80091a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a4:	688e      	ldr	r6, [r1, #8]
 80091a6:	4682      	mov	sl, r0
 80091a8:	429e      	cmp	r6, r3
 80091aa:	460c      	mov	r4, r1
 80091ac:	4690      	mov	r8, r2
 80091ae:	461f      	mov	r7, r3
 80091b0:	d838      	bhi.n	8009224 <__ssputs_r+0x84>
 80091b2:	898a      	ldrh	r2, [r1, #12]
 80091b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091b8:	d032      	beq.n	8009220 <__ssputs_r+0x80>
 80091ba:	6825      	ldr	r5, [r4, #0]
 80091bc:	6909      	ldr	r1, [r1, #16]
 80091be:	3301      	adds	r3, #1
 80091c0:	eba5 0901 	sub.w	r9, r5, r1
 80091c4:	6965      	ldr	r5, [r4, #20]
 80091c6:	444b      	add	r3, r9
 80091c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091d0:	106d      	asrs	r5, r5, #1
 80091d2:	429d      	cmp	r5, r3
 80091d4:	bf38      	it	cc
 80091d6:	461d      	movcc	r5, r3
 80091d8:	0553      	lsls	r3, r2, #21
 80091da:	d531      	bpl.n	8009240 <__ssputs_r+0xa0>
 80091dc:	4629      	mov	r1, r5
 80091de:	f7ff fe17 	bl	8008e10 <_malloc_r>
 80091e2:	4606      	mov	r6, r0
 80091e4:	b950      	cbnz	r0, 80091fc <__ssputs_r+0x5c>
 80091e6:	230c      	movs	r3, #12
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	f8ca 3000 	str.w	r3, [sl]
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f6:	81a3      	strh	r3, [r4, #12]
 80091f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fc:	464a      	mov	r2, r9
 80091fe:	6921      	ldr	r1, [r4, #16]
 8009200:	f000 fe82 	bl	8009f08 <memcpy>
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800920a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800920e:	81a3      	strh	r3, [r4, #12]
 8009210:	6126      	str	r6, [r4, #16]
 8009212:	444e      	add	r6, r9
 8009214:	6026      	str	r6, [r4, #0]
 8009216:	463e      	mov	r6, r7
 8009218:	6165      	str	r5, [r4, #20]
 800921a:	eba5 0509 	sub.w	r5, r5, r9
 800921e:	60a5      	str	r5, [r4, #8]
 8009220:	42be      	cmp	r6, r7
 8009222:	d900      	bls.n	8009226 <__ssputs_r+0x86>
 8009224:	463e      	mov	r6, r7
 8009226:	4632      	mov	r2, r6
 8009228:	4641      	mov	r1, r8
 800922a:	6820      	ldr	r0, [r4, #0]
 800922c:	f000 fe7a 	bl	8009f24 <memmove>
 8009230:	68a3      	ldr	r3, [r4, #8]
 8009232:	2000      	movs	r0, #0
 8009234:	1b9b      	subs	r3, r3, r6
 8009236:	60a3      	str	r3, [r4, #8]
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	4433      	add	r3, r6
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	e7db      	b.n	80091f8 <__ssputs_r+0x58>
 8009240:	462a      	mov	r2, r5
 8009242:	f000 fe89 	bl	8009f58 <_realloc_r>
 8009246:	4606      	mov	r6, r0
 8009248:	2800      	cmp	r0, #0
 800924a:	d1e1      	bne.n	8009210 <__ssputs_r+0x70>
 800924c:	4650      	mov	r0, sl
 800924e:	6921      	ldr	r1, [r4, #16]
 8009250:	f7ff fd76 	bl	8008d40 <_free_r>
 8009254:	e7c7      	b.n	80091e6 <__ssputs_r+0x46>
	...

08009258 <_svfiprintf_r>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	4698      	mov	r8, r3
 800925e:	898b      	ldrh	r3, [r1, #12]
 8009260:	4607      	mov	r7, r0
 8009262:	061b      	lsls	r3, r3, #24
 8009264:	460d      	mov	r5, r1
 8009266:	4614      	mov	r4, r2
 8009268:	b09d      	sub	sp, #116	; 0x74
 800926a:	d50e      	bpl.n	800928a <_svfiprintf_r+0x32>
 800926c:	690b      	ldr	r3, [r1, #16]
 800926e:	b963      	cbnz	r3, 800928a <_svfiprintf_r+0x32>
 8009270:	2140      	movs	r1, #64	; 0x40
 8009272:	f7ff fdcd 	bl	8008e10 <_malloc_r>
 8009276:	6028      	str	r0, [r5, #0]
 8009278:	6128      	str	r0, [r5, #16]
 800927a:	b920      	cbnz	r0, 8009286 <_svfiprintf_r+0x2e>
 800927c:	230c      	movs	r3, #12
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	f04f 30ff 	mov.w	r0, #4294967295
 8009284:	e0d1      	b.n	800942a <_svfiprintf_r+0x1d2>
 8009286:	2340      	movs	r3, #64	; 0x40
 8009288:	616b      	str	r3, [r5, #20]
 800928a:	2300      	movs	r3, #0
 800928c:	9309      	str	r3, [sp, #36]	; 0x24
 800928e:	2320      	movs	r3, #32
 8009290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009294:	2330      	movs	r3, #48	; 0x30
 8009296:	f04f 0901 	mov.w	r9, #1
 800929a:	f8cd 800c 	str.w	r8, [sp, #12]
 800929e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009444 <_svfiprintf_r+0x1ec>
 80092a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092a6:	4623      	mov	r3, r4
 80092a8:	469a      	mov	sl, r3
 80092aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ae:	b10a      	cbz	r2, 80092b4 <_svfiprintf_r+0x5c>
 80092b0:	2a25      	cmp	r2, #37	; 0x25
 80092b2:	d1f9      	bne.n	80092a8 <_svfiprintf_r+0x50>
 80092b4:	ebba 0b04 	subs.w	fp, sl, r4
 80092b8:	d00b      	beq.n	80092d2 <_svfiprintf_r+0x7a>
 80092ba:	465b      	mov	r3, fp
 80092bc:	4622      	mov	r2, r4
 80092be:	4629      	mov	r1, r5
 80092c0:	4638      	mov	r0, r7
 80092c2:	f7ff ff6d 	bl	80091a0 <__ssputs_r>
 80092c6:	3001      	adds	r0, #1
 80092c8:	f000 80aa 	beq.w	8009420 <_svfiprintf_r+0x1c8>
 80092cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ce:	445a      	add	r2, fp
 80092d0:	9209      	str	r2, [sp, #36]	; 0x24
 80092d2:	f89a 3000 	ldrb.w	r3, [sl]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f000 80a2 	beq.w	8009420 <_svfiprintf_r+0x1c8>
 80092dc:	2300      	movs	r3, #0
 80092de:	f04f 32ff 	mov.w	r2, #4294967295
 80092e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e6:	f10a 0a01 	add.w	sl, sl, #1
 80092ea:	9304      	str	r3, [sp, #16]
 80092ec:	9307      	str	r3, [sp, #28]
 80092ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092f2:	931a      	str	r3, [sp, #104]	; 0x68
 80092f4:	4654      	mov	r4, sl
 80092f6:	2205      	movs	r2, #5
 80092f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fc:	4851      	ldr	r0, [pc, #324]	; (8009444 <_svfiprintf_r+0x1ec>)
 80092fe:	f000 fdf5 	bl	8009eec <memchr>
 8009302:	9a04      	ldr	r2, [sp, #16]
 8009304:	b9d8      	cbnz	r0, 800933e <_svfiprintf_r+0xe6>
 8009306:	06d0      	lsls	r0, r2, #27
 8009308:	bf44      	itt	mi
 800930a:	2320      	movmi	r3, #32
 800930c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009310:	0711      	lsls	r1, r2, #28
 8009312:	bf44      	itt	mi
 8009314:	232b      	movmi	r3, #43	; 0x2b
 8009316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800931a:	f89a 3000 	ldrb.w	r3, [sl]
 800931e:	2b2a      	cmp	r3, #42	; 0x2a
 8009320:	d015      	beq.n	800934e <_svfiprintf_r+0xf6>
 8009322:	4654      	mov	r4, sl
 8009324:	2000      	movs	r0, #0
 8009326:	f04f 0c0a 	mov.w	ip, #10
 800932a:	9a07      	ldr	r2, [sp, #28]
 800932c:	4621      	mov	r1, r4
 800932e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009332:	3b30      	subs	r3, #48	; 0x30
 8009334:	2b09      	cmp	r3, #9
 8009336:	d94e      	bls.n	80093d6 <_svfiprintf_r+0x17e>
 8009338:	b1b0      	cbz	r0, 8009368 <_svfiprintf_r+0x110>
 800933a:	9207      	str	r2, [sp, #28]
 800933c:	e014      	b.n	8009368 <_svfiprintf_r+0x110>
 800933e:	eba0 0308 	sub.w	r3, r0, r8
 8009342:	fa09 f303 	lsl.w	r3, r9, r3
 8009346:	4313      	orrs	r3, r2
 8009348:	46a2      	mov	sl, r4
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	e7d2      	b.n	80092f4 <_svfiprintf_r+0x9c>
 800934e:	9b03      	ldr	r3, [sp, #12]
 8009350:	1d19      	adds	r1, r3, #4
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	9103      	str	r1, [sp, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	bfbb      	ittet	lt
 800935a:	425b      	neglt	r3, r3
 800935c:	f042 0202 	orrlt.w	r2, r2, #2
 8009360:	9307      	strge	r3, [sp, #28]
 8009362:	9307      	strlt	r3, [sp, #28]
 8009364:	bfb8      	it	lt
 8009366:	9204      	strlt	r2, [sp, #16]
 8009368:	7823      	ldrb	r3, [r4, #0]
 800936a:	2b2e      	cmp	r3, #46	; 0x2e
 800936c:	d10c      	bne.n	8009388 <_svfiprintf_r+0x130>
 800936e:	7863      	ldrb	r3, [r4, #1]
 8009370:	2b2a      	cmp	r3, #42	; 0x2a
 8009372:	d135      	bne.n	80093e0 <_svfiprintf_r+0x188>
 8009374:	9b03      	ldr	r3, [sp, #12]
 8009376:	3402      	adds	r4, #2
 8009378:	1d1a      	adds	r2, r3, #4
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	9203      	str	r2, [sp, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfb8      	it	lt
 8009382:	f04f 33ff 	movlt.w	r3, #4294967295
 8009386:	9305      	str	r3, [sp, #20]
 8009388:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009448 <_svfiprintf_r+0x1f0>
 800938c:	2203      	movs	r2, #3
 800938e:	4650      	mov	r0, sl
 8009390:	7821      	ldrb	r1, [r4, #0]
 8009392:	f000 fdab 	bl	8009eec <memchr>
 8009396:	b140      	cbz	r0, 80093aa <_svfiprintf_r+0x152>
 8009398:	2340      	movs	r3, #64	; 0x40
 800939a:	eba0 000a 	sub.w	r0, r0, sl
 800939e:	fa03 f000 	lsl.w	r0, r3, r0
 80093a2:	9b04      	ldr	r3, [sp, #16]
 80093a4:	3401      	adds	r4, #1
 80093a6:	4303      	orrs	r3, r0
 80093a8:	9304      	str	r3, [sp, #16]
 80093aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ae:	2206      	movs	r2, #6
 80093b0:	4826      	ldr	r0, [pc, #152]	; (800944c <_svfiprintf_r+0x1f4>)
 80093b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093b6:	f000 fd99 	bl	8009eec <memchr>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d038      	beq.n	8009430 <_svfiprintf_r+0x1d8>
 80093be:	4b24      	ldr	r3, [pc, #144]	; (8009450 <_svfiprintf_r+0x1f8>)
 80093c0:	bb1b      	cbnz	r3, 800940a <_svfiprintf_r+0x1b2>
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	3307      	adds	r3, #7
 80093c6:	f023 0307 	bic.w	r3, r3, #7
 80093ca:	3308      	adds	r3, #8
 80093cc:	9303      	str	r3, [sp, #12]
 80093ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d0:	4433      	add	r3, r6
 80093d2:	9309      	str	r3, [sp, #36]	; 0x24
 80093d4:	e767      	b.n	80092a6 <_svfiprintf_r+0x4e>
 80093d6:	460c      	mov	r4, r1
 80093d8:	2001      	movs	r0, #1
 80093da:	fb0c 3202 	mla	r2, ip, r2, r3
 80093de:	e7a5      	b.n	800932c <_svfiprintf_r+0xd4>
 80093e0:	2300      	movs	r3, #0
 80093e2:	f04f 0c0a 	mov.w	ip, #10
 80093e6:	4619      	mov	r1, r3
 80093e8:	3401      	adds	r4, #1
 80093ea:	9305      	str	r3, [sp, #20]
 80093ec:	4620      	mov	r0, r4
 80093ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093f2:	3a30      	subs	r2, #48	; 0x30
 80093f4:	2a09      	cmp	r2, #9
 80093f6:	d903      	bls.n	8009400 <_svfiprintf_r+0x1a8>
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0c5      	beq.n	8009388 <_svfiprintf_r+0x130>
 80093fc:	9105      	str	r1, [sp, #20]
 80093fe:	e7c3      	b.n	8009388 <_svfiprintf_r+0x130>
 8009400:	4604      	mov	r4, r0
 8009402:	2301      	movs	r3, #1
 8009404:	fb0c 2101 	mla	r1, ip, r1, r2
 8009408:	e7f0      	b.n	80093ec <_svfiprintf_r+0x194>
 800940a:	ab03      	add	r3, sp, #12
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	462a      	mov	r2, r5
 8009410:	4638      	mov	r0, r7
 8009412:	4b10      	ldr	r3, [pc, #64]	; (8009454 <_svfiprintf_r+0x1fc>)
 8009414:	a904      	add	r1, sp, #16
 8009416:	f3af 8000 	nop.w
 800941a:	1c42      	adds	r2, r0, #1
 800941c:	4606      	mov	r6, r0
 800941e:	d1d6      	bne.n	80093ce <_svfiprintf_r+0x176>
 8009420:	89ab      	ldrh	r3, [r5, #12]
 8009422:	065b      	lsls	r3, r3, #25
 8009424:	f53f af2c 	bmi.w	8009280 <_svfiprintf_r+0x28>
 8009428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800942a:	b01d      	add	sp, #116	; 0x74
 800942c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009430:	ab03      	add	r3, sp, #12
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	462a      	mov	r2, r5
 8009436:	4638      	mov	r0, r7
 8009438:	4b06      	ldr	r3, [pc, #24]	; (8009454 <_svfiprintf_r+0x1fc>)
 800943a:	a904      	add	r1, sp, #16
 800943c:	f000 f9d4 	bl	80097e8 <_printf_i>
 8009440:	e7eb      	b.n	800941a <_svfiprintf_r+0x1c2>
 8009442:	bf00      	nop
 8009444:	0800a398 	.word	0x0800a398
 8009448:	0800a39e 	.word	0x0800a39e
 800944c:	0800a3a2 	.word	0x0800a3a2
 8009450:	00000000 	.word	0x00000000
 8009454:	080091a1 	.word	0x080091a1

08009458 <__sfputc_r>:
 8009458:	6893      	ldr	r3, [r2, #8]
 800945a:	b410      	push	{r4}
 800945c:	3b01      	subs	r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	6093      	str	r3, [r2, #8]
 8009462:	da07      	bge.n	8009474 <__sfputc_r+0x1c>
 8009464:	6994      	ldr	r4, [r2, #24]
 8009466:	42a3      	cmp	r3, r4
 8009468:	db01      	blt.n	800946e <__sfputc_r+0x16>
 800946a:	290a      	cmp	r1, #10
 800946c:	d102      	bne.n	8009474 <__sfputc_r+0x1c>
 800946e:	bc10      	pop	{r4}
 8009470:	f000 bb24 	b.w	8009abc <__swbuf_r>
 8009474:	6813      	ldr	r3, [r2, #0]
 8009476:	1c58      	adds	r0, r3, #1
 8009478:	6010      	str	r0, [r2, #0]
 800947a:	7019      	strb	r1, [r3, #0]
 800947c:	4608      	mov	r0, r1
 800947e:	bc10      	pop	{r4}
 8009480:	4770      	bx	lr

08009482 <__sfputs_r>:
 8009482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009484:	4606      	mov	r6, r0
 8009486:	460f      	mov	r7, r1
 8009488:	4614      	mov	r4, r2
 800948a:	18d5      	adds	r5, r2, r3
 800948c:	42ac      	cmp	r4, r5
 800948e:	d101      	bne.n	8009494 <__sfputs_r+0x12>
 8009490:	2000      	movs	r0, #0
 8009492:	e007      	b.n	80094a4 <__sfputs_r+0x22>
 8009494:	463a      	mov	r2, r7
 8009496:	4630      	mov	r0, r6
 8009498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800949c:	f7ff ffdc 	bl	8009458 <__sfputc_r>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d1f3      	bne.n	800948c <__sfputs_r+0xa>
 80094a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094a8 <_vfiprintf_r>:
 80094a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ac:	460d      	mov	r5, r1
 80094ae:	4614      	mov	r4, r2
 80094b0:	4698      	mov	r8, r3
 80094b2:	4606      	mov	r6, r0
 80094b4:	b09d      	sub	sp, #116	; 0x74
 80094b6:	b118      	cbz	r0, 80094c0 <_vfiprintf_r+0x18>
 80094b8:	6983      	ldr	r3, [r0, #24]
 80094ba:	b90b      	cbnz	r3, 80094c0 <_vfiprintf_r+0x18>
 80094bc:	f7ff fdc4 	bl	8009048 <__sinit>
 80094c0:	4b89      	ldr	r3, [pc, #548]	; (80096e8 <_vfiprintf_r+0x240>)
 80094c2:	429d      	cmp	r5, r3
 80094c4:	d11b      	bne.n	80094fe <_vfiprintf_r+0x56>
 80094c6:	6875      	ldr	r5, [r6, #4]
 80094c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094ca:	07d9      	lsls	r1, r3, #31
 80094cc:	d405      	bmi.n	80094da <_vfiprintf_r+0x32>
 80094ce:	89ab      	ldrh	r3, [r5, #12]
 80094d0:	059a      	lsls	r2, r3, #22
 80094d2:	d402      	bmi.n	80094da <_vfiprintf_r+0x32>
 80094d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094d6:	f7ff fe55 	bl	8009184 <__retarget_lock_acquire_recursive>
 80094da:	89ab      	ldrh	r3, [r5, #12]
 80094dc:	071b      	lsls	r3, r3, #28
 80094de:	d501      	bpl.n	80094e4 <_vfiprintf_r+0x3c>
 80094e0:	692b      	ldr	r3, [r5, #16]
 80094e2:	b9eb      	cbnz	r3, 8009520 <_vfiprintf_r+0x78>
 80094e4:	4629      	mov	r1, r5
 80094e6:	4630      	mov	r0, r6
 80094e8:	f000 fb4c 	bl	8009b84 <__swsetup_r>
 80094ec:	b1c0      	cbz	r0, 8009520 <_vfiprintf_r+0x78>
 80094ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094f0:	07dc      	lsls	r4, r3, #31
 80094f2:	d50e      	bpl.n	8009512 <_vfiprintf_r+0x6a>
 80094f4:	f04f 30ff 	mov.w	r0, #4294967295
 80094f8:	b01d      	add	sp, #116	; 0x74
 80094fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fe:	4b7b      	ldr	r3, [pc, #492]	; (80096ec <_vfiprintf_r+0x244>)
 8009500:	429d      	cmp	r5, r3
 8009502:	d101      	bne.n	8009508 <_vfiprintf_r+0x60>
 8009504:	68b5      	ldr	r5, [r6, #8]
 8009506:	e7df      	b.n	80094c8 <_vfiprintf_r+0x20>
 8009508:	4b79      	ldr	r3, [pc, #484]	; (80096f0 <_vfiprintf_r+0x248>)
 800950a:	429d      	cmp	r5, r3
 800950c:	bf08      	it	eq
 800950e:	68f5      	ldreq	r5, [r6, #12]
 8009510:	e7da      	b.n	80094c8 <_vfiprintf_r+0x20>
 8009512:	89ab      	ldrh	r3, [r5, #12]
 8009514:	0598      	lsls	r0, r3, #22
 8009516:	d4ed      	bmi.n	80094f4 <_vfiprintf_r+0x4c>
 8009518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800951a:	f7ff fe34 	bl	8009186 <__retarget_lock_release_recursive>
 800951e:	e7e9      	b.n	80094f4 <_vfiprintf_r+0x4c>
 8009520:	2300      	movs	r3, #0
 8009522:	9309      	str	r3, [sp, #36]	; 0x24
 8009524:	2320      	movs	r3, #32
 8009526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800952a:	2330      	movs	r3, #48	; 0x30
 800952c:	f04f 0901 	mov.w	r9, #1
 8009530:	f8cd 800c 	str.w	r8, [sp, #12]
 8009534:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80096f4 <_vfiprintf_r+0x24c>
 8009538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800953c:	4623      	mov	r3, r4
 800953e:	469a      	mov	sl, r3
 8009540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009544:	b10a      	cbz	r2, 800954a <_vfiprintf_r+0xa2>
 8009546:	2a25      	cmp	r2, #37	; 0x25
 8009548:	d1f9      	bne.n	800953e <_vfiprintf_r+0x96>
 800954a:	ebba 0b04 	subs.w	fp, sl, r4
 800954e:	d00b      	beq.n	8009568 <_vfiprintf_r+0xc0>
 8009550:	465b      	mov	r3, fp
 8009552:	4622      	mov	r2, r4
 8009554:	4629      	mov	r1, r5
 8009556:	4630      	mov	r0, r6
 8009558:	f7ff ff93 	bl	8009482 <__sfputs_r>
 800955c:	3001      	adds	r0, #1
 800955e:	f000 80aa 	beq.w	80096b6 <_vfiprintf_r+0x20e>
 8009562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009564:	445a      	add	r2, fp
 8009566:	9209      	str	r2, [sp, #36]	; 0x24
 8009568:	f89a 3000 	ldrb.w	r3, [sl]
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 80a2 	beq.w	80096b6 <_vfiprintf_r+0x20e>
 8009572:	2300      	movs	r3, #0
 8009574:	f04f 32ff 	mov.w	r2, #4294967295
 8009578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800957c:	f10a 0a01 	add.w	sl, sl, #1
 8009580:	9304      	str	r3, [sp, #16]
 8009582:	9307      	str	r3, [sp, #28]
 8009584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009588:	931a      	str	r3, [sp, #104]	; 0x68
 800958a:	4654      	mov	r4, sl
 800958c:	2205      	movs	r2, #5
 800958e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009592:	4858      	ldr	r0, [pc, #352]	; (80096f4 <_vfiprintf_r+0x24c>)
 8009594:	f000 fcaa 	bl	8009eec <memchr>
 8009598:	9a04      	ldr	r2, [sp, #16]
 800959a:	b9d8      	cbnz	r0, 80095d4 <_vfiprintf_r+0x12c>
 800959c:	06d1      	lsls	r1, r2, #27
 800959e:	bf44      	itt	mi
 80095a0:	2320      	movmi	r3, #32
 80095a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095a6:	0713      	lsls	r3, r2, #28
 80095a8:	bf44      	itt	mi
 80095aa:	232b      	movmi	r3, #43	; 0x2b
 80095ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095b0:	f89a 3000 	ldrb.w	r3, [sl]
 80095b4:	2b2a      	cmp	r3, #42	; 0x2a
 80095b6:	d015      	beq.n	80095e4 <_vfiprintf_r+0x13c>
 80095b8:	4654      	mov	r4, sl
 80095ba:	2000      	movs	r0, #0
 80095bc:	f04f 0c0a 	mov.w	ip, #10
 80095c0:	9a07      	ldr	r2, [sp, #28]
 80095c2:	4621      	mov	r1, r4
 80095c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095c8:	3b30      	subs	r3, #48	; 0x30
 80095ca:	2b09      	cmp	r3, #9
 80095cc:	d94e      	bls.n	800966c <_vfiprintf_r+0x1c4>
 80095ce:	b1b0      	cbz	r0, 80095fe <_vfiprintf_r+0x156>
 80095d0:	9207      	str	r2, [sp, #28]
 80095d2:	e014      	b.n	80095fe <_vfiprintf_r+0x156>
 80095d4:	eba0 0308 	sub.w	r3, r0, r8
 80095d8:	fa09 f303 	lsl.w	r3, r9, r3
 80095dc:	4313      	orrs	r3, r2
 80095de:	46a2      	mov	sl, r4
 80095e0:	9304      	str	r3, [sp, #16]
 80095e2:	e7d2      	b.n	800958a <_vfiprintf_r+0xe2>
 80095e4:	9b03      	ldr	r3, [sp, #12]
 80095e6:	1d19      	adds	r1, r3, #4
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	9103      	str	r1, [sp, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	bfbb      	ittet	lt
 80095f0:	425b      	neglt	r3, r3
 80095f2:	f042 0202 	orrlt.w	r2, r2, #2
 80095f6:	9307      	strge	r3, [sp, #28]
 80095f8:	9307      	strlt	r3, [sp, #28]
 80095fa:	bfb8      	it	lt
 80095fc:	9204      	strlt	r2, [sp, #16]
 80095fe:	7823      	ldrb	r3, [r4, #0]
 8009600:	2b2e      	cmp	r3, #46	; 0x2e
 8009602:	d10c      	bne.n	800961e <_vfiprintf_r+0x176>
 8009604:	7863      	ldrb	r3, [r4, #1]
 8009606:	2b2a      	cmp	r3, #42	; 0x2a
 8009608:	d135      	bne.n	8009676 <_vfiprintf_r+0x1ce>
 800960a:	9b03      	ldr	r3, [sp, #12]
 800960c:	3402      	adds	r4, #2
 800960e:	1d1a      	adds	r2, r3, #4
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	9203      	str	r2, [sp, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	bfb8      	it	lt
 8009618:	f04f 33ff 	movlt.w	r3, #4294967295
 800961c:	9305      	str	r3, [sp, #20]
 800961e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80096f8 <_vfiprintf_r+0x250>
 8009622:	2203      	movs	r2, #3
 8009624:	4650      	mov	r0, sl
 8009626:	7821      	ldrb	r1, [r4, #0]
 8009628:	f000 fc60 	bl	8009eec <memchr>
 800962c:	b140      	cbz	r0, 8009640 <_vfiprintf_r+0x198>
 800962e:	2340      	movs	r3, #64	; 0x40
 8009630:	eba0 000a 	sub.w	r0, r0, sl
 8009634:	fa03 f000 	lsl.w	r0, r3, r0
 8009638:	9b04      	ldr	r3, [sp, #16]
 800963a:	3401      	adds	r4, #1
 800963c:	4303      	orrs	r3, r0
 800963e:	9304      	str	r3, [sp, #16]
 8009640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009644:	2206      	movs	r2, #6
 8009646:	482d      	ldr	r0, [pc, #180]	; (80096fc <_vfiprintf_r+0x254>)
 8009648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800964c:	f000 fc4e 	bl	8009eec <memchr>
 8009650:	2800      	cmp	r0, #0
 8009652:	d03f      	beq.n	80096d4 <_vfiprintf_r+0x22c>
 8009654:	4b2a      	ldr	r3, [pc, #168]	; (8009700 <_vfiprintf_r+0x258>)
 8009656:	bb1b      	cbnz	r3, 80096a0 <_vfiprintf_r+0x1f8>
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	3307      	adds	r3, #7
 800965c:	f023 0307 	bic.w	r3, r3, #7
 8009660:	3308      	adds	r3, #8
 8009662:	9303      	str	r3, [sp, #12]
 8009664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009666:	443b      	add	r3, r7
 8009668:	9309      	str	r3, [sp, #36]	; 0x24
 800966a:	e767      	b.n	800953c <_vfiprintf_r+0x94>
 800966c:	460c      	mov	r4, r1
 800966e:	2001      	movs	r0, #1
 8009670:	fb0c 3202 	mla	r2, ip, r2, r3
 8009674:	e7a5      	b.n	80095c2 <_vfiprintf_r+0x11a>
 8009676:	2300      	movs	r3, #0
 8009678:	f04f 0c0a 	mov.w	ip, #10
 800967c:	4619      	mov	r1, r3
 800967e:	3401      	adds	r4, #1
 8009680:	9305      	str	r3, [sp, #20]
 8009682:	4620      	mov	r0, r4
 8009684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009688:	3a30      	subs	r2, #48	; 0x30
 800968a:	2a09      	cmp	r2, #9
 800968c:	d903      	bls.n	8009696 <_vfiprintf_r+0x1ee>
 800968e:	2b00      	cmp	r3, #0
 8009690:	d0c5      	beq.n	800961e <_vfiprintf_r+0x176>
 8009692:	9105      	str	r1, [sp, #20]
 8009694:	e7c3      	b.n	800961e <_vfiprintf_r+0x176>
 8009696:	4604      	mov	r4, r0
 8009698:	2301      	movs	r3, #1
 800969a:	fb0c 2101 	mla	r1, ip, r1, r2
 800969e:	e7f0      	b.n	8009682 <_vfiprintf_r+0x1da>
 80096a0:	ab03      	add	r3, sp, #12
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	462a      	mov	r2, r5
 80096a6:	4630      	mov	r0, r6
 80096a8:	4b16      	ldr	r3, [pc, #88]	; (8009704 <_vfiprintf_r+0x25c>)
 80096aa:	a904      	add	r1, sp, #16
 80096ac:	f3af 8000 	nop.w
 80096b0:	4607      	mov	r7, r0
 80096b2:	1c78      	adds	r0, r7, #1
 80096b4:	d1d6      	bne.n	8009664 <_vfiprintf_r+0x1bc>
 80096b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096b8:	07d9      	lsls	r1, r3, #31
 80096ba:	d405      	bmi.n	80096c8 <_vfiprintf_r+0x220>
 80096bc:	89ab      	ldrh	r3, [r5, #12]
 80096be:	059a      	lsls	r2, r3, #22
 80096c0:	d402      	bmi.n	80096c8 <_vfiprintf_r+0x220>
 80096c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096c4:	f7ff fd5f 	bl	8009186 <__retarget_lock_release_recursive>
 80096c8:	89ab      	ldrh	r3, [r5, #12]
 80096ca:	065b      	lsls	r3, r3, #25
 80096cc:	f53f af12 	bmi.w	80094f4 <_vfiprintf_r+0x4c>
 80096d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096d2:	e711      	b.n	80094f8 <_vfiprintf_r+0x50>
 80096d4:	ab03      	add	r3, sp, #12
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	462a      	mov	r2, r5
 80096da:	4630      	mov	r0, r6
 80096dc:	4b09      	ldr	r3, [pc, #36]	; (8009704 <_vfiprintf_r+0x25c>)
 80096de:	a904      	add	r1, sp, #16
 80096e0:	f000 f882 	bl	80097e8 <_printf_i>
 80096e4:	e7e4      	b.n	80096b0 <_vfiprintf_r+0x208>
 80096e6:	bf00      	nop
 80096e8:	0800a358 	.word	0x0800a358
 80096ec:	0800a378 	.word	0x0800a378
 80096f0:	0800a338 	.word	0x0800a338
 80096f4:	0800a398 	.word	0x0800a398
 80096f8:	0800a39e 	.word	0x0800a39e
 80096fc:	0800a3a2 	.word	0x0800a3a2
 8009700:	00000000 	.word	0x00000000
 8009704:	08009483 	.word	0x08009483

08009708 <_printf_common>:
 8009708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800970c:	4616      	mov	r6, r2
 800970e:	4699      	mov	r9, r3
 8009710:	688a      	ldr	r2, [r1, #8]
 8009712:	690b      	ldr	r3, [r1, #16]
 8009714:	4607      	mov	r7, r0
 8009716:	4293      	cmp	r3, r2
 8009718:	bfb8      	it	lt
 800971a:	4613      	movlt	r3, r2
 800971c:	6033      	str	r3, [r6, #0]
 800971e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009722:	460c      	mov	r4, r1
 8009724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009728:	b10a      	cbz	r2, 800972e <_printf_common+0x26>
 800972a:	3301      	adds	r3, #1
 800972c:	6033      	str	r3, [r6, #0]
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	0699      	lsls	r1, r3, #26
 8009732:	bf42      	ittt	mi
 8009734:	6833      	ldrmi	r3, [r6, #0]
 8009736:	3302      	addmi	r3, #2
 8009738:	6033      	strmi	r3, [r6, #0]
 800973a:	6825      	ldr	r5, [r4, #0]
 800973c:	f015 0506 	ands.w	r5, r5, #6
 8009740:	d106      	bne.n	8009750 <_printf_common+0x48>
 8009742:	f104 0a19 	add.w	sl, r4, #25
 8009746:	68e3      	ldr	r3, [r4, #12]
 8009748:	6832      	ldr	r2, [r6, #0]
 800974a:	1a9b      	subs	r3, r3, r2
 800974c:	42ab      	cmp	r3, r5
 800974e:	dc28      	bgt.n	80097a2 <_printf_common+0x9a>
 8009750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009754:	1e13      	subs	r3, r2, #0
 8009756:	6822      	ldr	r2, [r4, #0]
 8009758:	bf18      	it	ne
 800975a:	2301      	movne	r3, #1
 800975c:	0692      	lsls	r2, r2, #26
 800975e:	d42d      	bmi.n	80097bc <_printf_common+0xb4>
 8009760:	4649      	mov	r1, r9
 8009762:	4638      	mov	r0, r7
 8009764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009768:	47c0      	blx	r8
 800976a:	3001      	adds	r0, #1
 800976c:	d020      	beq.n	80097b0 <_printf_common+0xa8>
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	68e5      	ldr	r5, [r4, #12]
 8009772:	f003 0306 	and.w	r3, r3, #6
 8009776:	2b04      	cmp	r3, #4
 8009778:	bf18      	it	ne
 800977a:	2500      	movne	r5, #0
 800977c:	6832      	ldr	r2, [r6, #0]
 800977e:	f04f 0600 	mov.w	r6, #0
 8009782:	68a3      	ldr	r3, [r4, #8]
 8009784:	bf08      	it	eq
 8009786:	1aad      	subeq	r5, r5, r2
 8009788:	6922      	ldr	r2, [r4, #16]
 800978a:	bf08      	it	eq
 800978c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009790:	4293      	cmp	r3, r2
 8009792:	bfc4      	itt	gt
 8009794:	1a9b      	subgt	r3, r3, r2
 8009796:	18ed      	addgt	r5, r5, r3
 8009798:	341a      	adds	r4, #26
 800979a:	42b5      	cmp	r5, r6
 800979c:	d11a      	bne.n	80097d4 <_printf_common+0xcc>
 800979e:	2000      	movs	r0, #0
 80097a0:	e008      	b.n	80097b4 <_printf_common+0xac>
 80097a2:	2301      	movs	r3, #1
 80097a4:	4652      	mov	r2, sl
 80097a6:	4649      	mov	r1, r9
 80097a8:	4638      	mov	r0, r7
 80097aa:	47c0      	blx	r8
 80097ac:	3001      	adds	r0, #1
 80097ae:	d103      	bne.n	80097b8 <_printf_common+0xb0>
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295
 80097b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b8:	3501      	adds	r5, #1
 80097ba:	e7c4      	b.n	8009746 <_printf_common+0x3e>
 80097bc:	2030      	movs	r0, #48	; 0x30
 80097be:	18e1      	adds	r1, r4, r3
 80097c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097c4:	1c5a      	adds	r2, r3, #1
 80097c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097ca:	4422      	add	r2, r4
 80097cc:	3302      	adds	r3, #2
 80097ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097d2:	e7c5      	b.n	8009760 <_printf_common+0x58>
 80097d4:	2301      	movs	r3, #1
 80097d6:	4622      	mov	r2, r4
 80097d8:	4649      	mov	r1, r9
 80097da:	4638      	mov	r0, r7
 80097dc:	47c0      	blx	r8
 80097de:	3001      	adds	r0, #1
 80097e0:	d0e6      	beq.n	80097b0 <_printf_common+0xa8>
 80097e2:	3601      	adds	r6, #1
 80097e4:	e7d9      	b.n	800979a <_printf_common+0x92>
	...

080097e8 <_printf_i>:
 80097e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097ec:	7e0f      	ldrb	r7, [r1, #24]
 80097ee:	4691      	mov	r9, r2
 80097f0:	2f78      	cmp	r7, #120	; 0x78
 80097f2:	4680      	mov	r8, r0
 80097f4:	460c      	mov	r4, r1
 80097f6:	469a      	mov	sl, r3
 80097f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097fe:	d807      	bhi.n	8009810 <_printf_i+0x28>
 8009800:	2f62      	cmp	r7, #98	; 0x62
 8009802:	d80a      	bhi.n	800981a <_printf_i+0x32>
 8009804:	2f00      	cmp	r7, #0
 8009806:	f000 80d9 	beq.w	80099bc <_printf_i+0x1d4>
 800980a:	2f58      	cmp	r7, #88	; 0x58
 800980c:	f000 80a4 	beq.w	8009958 <_printf_i+0x170>
 8009810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009818:	e03a      	b.n	8009890 <_printf_i+0xa8>
 800981a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800981e:	2b15      	cmp	r3, #21
 8009820:	d8f6      	bhi.n	8009810 <_printf_i+0x28>
 8009822:	a101      	add	r1, pc, #4	; (adr r1, 8009828 <_printf_i+0x40>)
 8009824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009828:	08009881 	.word	0x08009881
 800982c:	08009895 	.word	0x08009895
 8009830:	08009811 	.word	0x08009811
 8009834:	08009811 	.word	0x08009811
 8009838:	08009811 	.word	0x08009811
 800983c:	08009811 	.word	0x08009811
 8009840:	08009895 	.word	0x08009895
 8009844:	08009811 	.word	0x08009811
 8009848:	08009811 	.word	0x08009811
 800984c:	08009811 	.word	0x08009811
 8009850:	08009811 	.word	0x08009811
 8009854:	080099a3 	.word	0x080099a3
 8009858:	080098c5 	.word	0x080098c5
 800985c:	08009985 	.word	0x08009985
 8009860:	08009811 	.word	0x08009811
 8009864:	08009811 	.word	0x08009811
 8009868:	080099c5 	.word	0x080099c5
 800986c:	08009811 	.word	0x08009811
 8009870:	080098c5 	.word	0x080098c5
 8009874:	08009811 	.word	0x08009811
 8009878:	08009811 	.word	0x08009811
 800987c:	0800998d 	.word	0x0800998d
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	1d1a      	adds	r2, r3, #4
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	602a      	str	r2, [r5, #0]
 8009888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800988c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009890:	2301      	movs	r3, #1
 8009892:	e0a4      	b.n	80099de <_printf_i+0x1f6>
 8009894:	6820      	ldr	r0, [r4, #0]
 8009896:	6829      	ldr	r1, [r5, #0]
 8009898:	0606      	lsls	r6, r0, #24
 800989a:	f101 0304 	add.w	r3, r1, #4
 800989e:	d50a      	bpl.n	80098b6 <_printf_i+0xce>
 80098a0:	680e      	ldr	r6, [r1, #0]
 80098a2:	602b      	str	r3, [r5, #0]
 80098a4:	2e00      	cmp	r6, #0
 80098a6:	da03      	bge.n	80098b0 <_printf_i+0xc8>
 80098a8:	232d      	movs	r3, #45	; 0x2d
 80098aa:	4276      	negs	r6, r6
 80098ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b0:	230a      	movs	r3, #10
 80098b2:	485e      	ldr	r0, [pc, #376]	; (8009a2c <_printf_i+0x244>)
 80098b4:	e019      	b.n	80098ea <_printf_i+0x102>
 80098b6:	680e      	ldr	r6, [r1, #0]
 80098b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098bc:	602b      	str	r3, [r5, #0]
 80098be:	bf18      	it	ne
 80098c0:	b236      	sxthne	r6, r6
 80098c2:	e7ef      	b.n	80098a4 <_printf_i+0xbc>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	6820      	ldr	r0, [r4, #0]
 80098c8:	1d19      	adds	r1, r3, #4
 80098ca:	6029      	str	r1, [r5, #0]
 80098cc:	0601      	lsls	r1, r0, #24
 80098ce:	d501      	bpl.n	80098d4 <_printf_i+0xec>
 80098d0:	681e      	ldr	r6, [r3, #0]
 80098d2:	e002      	b.n	80098da <_printf_i+0xf2>
 80098d4:	0646      	lsls	r6, r0, #25
 80098d6:	d5fb      	bpl.n	80098d0 <_printf_i+0xe8>
 80098d8:	881e      	ldrh	r6, [r3, #0]
 80098da:	2f6f      	cmp	r7, #111	; 0x6f
 80098dc:	bf0c      	ite	eq
 80098de:	2308      	moveq	r3, #8
 80098e0:	230a      	movne	r3, #10
 80098e2:	4852      	ldr	r0, [pc, #328]	; (8009a2c <_printf_i+0x244>)
 80098e4:	2100      	movs	r1, #0
 80098e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098ea:	6865      	ldr	r5, [r4, #4]
 80098ec:	2d00      	cmp	r5, #0
 80098ee:	bfa8      	it	ge
 80098f0:	6821      	ldrge	r1, [r4, #0]
 80098f2:	60a5      	str	r5, [r4, #8]
 80098f4:	bfa4      	itt	ge
 80098f6:	f021 0104 	bicge.w	r1, r1, #4
 80098fa:	6021      	strge	r1, [r4, #0]
 80098fc:	b90e      	cbnz	r6, 8009902 <_printf_i+0x11a>
 80098fe:	2d00      	cmp	r5, #0
 8009900:	d04d      	beq.n	800999e <_printf_i+0x1b6>
 8009902:	4615      	mov	r5, r2
 8009904:	fbb6 f1f3 	udiv	r1, r6, r3
 8009908:	fb03 6711 	mls	r7, r3, r1, r6
 800990c:	5dc7      	ldrb	r7, [r0, r7]
 800990e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009912:	4637      	mov	r7, r6
 8009914:	42bb      	cmp	r3, r7
 8009916:	460e      	mov	r6, r1
 8009918:	d9f4      	bls.n	8009904 <_printf_i+0x11c>
 800991a:	2b08      	cmp	r3, #8
 800991c:	d10b      	bne.n	8009936 <_printf_i+0x14e>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	07de      	lsls	r6, r3, #31
 8009922:	d508      	bpl.n	8009936 <_printf_i+0x14e>
 8009924:	6923      	ldr	r3, [r4, #16]
 8009926:	6861      	ldr	r1, [r4, #4]
 8009928:	4299      	cmp	r1, r3
 800992a:	bfde      	ittt	le
 800992c:	2330      	movle	r3, #48	; 0x30
 800992e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009932:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009936:	1b52      	subs	r2, r2, r5
 8009938:	6122      	str	r2, [r4, #16]
 800993a:	464b      	mov	r3, r9
 800993c:	4621      	mov	r1, r4
 800993e:	4640      	mov	r0, r8
 8009940:	f8cd a000 	str.w	sl, [sp]
 8009944:	aa03      	add	r2, sp, #12
 8009946:	f7ff fedf 	bl	8009708 <_printf_common>
 800994a:	3001      	adds	r0, #1
 800994c:	d14c      	bne.n	80099e8 <_printf_i+0x200>
 800994e:	f04f 30ff 	mov.w	r0, #4294967295
 8009952:	b004      	add	sp, #16
 8009954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009958:	4834      	ldr	r0, [pc, #208]	; (8009a2c <_printf_i+0x244>)
 800995a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800995e:	6829      	ldr	r1, [r5, #0]
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	f851 6b04 	ldr.w	r6, [r1], #4
 8009966:	6029      	str	r1, [r5, #0]
 8009968:	061d      	lsls	r5, r3, #24
 800996a:	d514      	bpl.n	8009996 <_printf_i+0x1ae>
 800996c:	07df      	lsls	r7, r3, #31
 800996e:	bf44      	itt	mi
 8009970:	f043 0320 	orrmi.w	r3, r3, #32
 8009974:	6023      	strmi	r3, [r4, #0]
 8009976:	b91e      	cbnz	r6, 8009980 <_printf_i+0x198>
 8009978:	6823      	ldr	r3, [r4, #0]
 800997a:	f023 0320 	bic.w	r3, r3, #32
 800997e:	6023      	str	r3, [r4, #0]
 8009980:	2310      	movs	r3, #16
 8009982:	e7af      	b.n	80098e4 <_printf_i+0xfc>
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	f043 0320 	orr.w	r3, r3, #32
 800998a:	6023      	str	r3, [r4, #0]
 800998c:	2378      	movs	r3, #120	; 0x78
 800998e:	4828      	ldr	r0, [pc, #160]	; (8009a30 <_printf_i+0x248>)
 8009990:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009994:	e7e3      	b.n	800995e <_printf_i+0x176>
 8009996:	0659      	lsls	r1, r3, #25
 8009998:	bf48      	it	mi
 800999a:	b2b6      	uxthmi	r6, r6
 800999c:	e7e6      	b.n	800996c <_printf_i+0x184>
 800999e:	4615      	mov	r5, r2
 80099a0:	e7bb      	b.n	800991a <_printf_i+0x132>
 80099a2:	682b      	ldr	r3, [r5, #0]
 80099a4:	6826      	ldr	r6, [r4, #0]
 80099a6:	1d18      	adds	r0, r3, #4
 80099a8:	6961      	ldr	r1, [r4, #20]
 80099aa:	6028      	str	r0, [r5, #0]
 80099ac:	0635      	lsls	r5, r6, #24
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	d501      	bpl.n	80099b6 <_printf_i+0x1ce>
 80099b2:	6019      	str	r1, [r3, #0]
 80099b4:	e002      	b.n	80099bc <_printf_i+0x1d4>
 80099b6:	0670      	lsls	r0, r6, #25
 80099b8:	d5fb      	bpl.n	80099b2 <_printf_i+0x1ca>
 80099ba:	8019      	strh	r1, [r3, #0]
 80099bc:	2300      	movs	r3, #0
 80099be:	4615      	mov	r5, r2
 80099c0:	6123      	str	r3, [r4, #16]
 80099c2:	e7ba      	b.n	800993a <_printf_i+0x152>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	2100      	movs	r1, #0
 80099c8:	1d1a      	adds	r2, r3, #4
 80099ca:	602a      	str	r2, [r5, #0]
 80099cc:	681d      	ldr	r5, [r3, #0]
 80099ce:	6862      	ldr	r2, [r4, #4]
 80099d0:	4628      	mov	r0, r5
 80099d2:	f000 fa8b 	bl	8009eec <memchr>
 80099d6:	b108      	cbz	r0, 80099dc <_printf_i+0x1f4>
 80099d8:	1b40      	subs	r0, r0, r5
 80099da:	6060      	str	r0, [r4, #4]
 80099dc:	6863      	ldr	r3, [r4, #4]
 80099de:	6123      	str	r3, [r4, #16]
 80099e0:	2300      	movs	r3, #0
 80099e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099e6:	e7a8      	b.n	800993a <_printf_i+0x152>
 80099e8:	462a      	mov	r2, r5
 80099ea:	4649      	mov	r1, r9
 80099ec:	4640      	mov	r0, r8
 80099ee:	6923      	ldr	r3, [r4, #16]
 80099f0:	47d0      	blx	sl
 80099f2:	3001      	adds	r0, #1
 80099f4:	d0ab      	beq.n	800994e <_printf_i+0x166>
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	079b      	lsls	r3, r3, #30
 80099fa:	d413      	bmi.n	8009a24 <_printf_i+0x23c>
 80099fc:	68e0      	ldr	r0, [r4, #12]
 80099fe:	9b03      	ldr	r3, [sp, #12]
 8009a00:	4298      	cmp	r0, r3
 8009a02:	bfb8      	it	lt
 8009a04:	4618      	movlt	r0, r3
 8009a06:	e7a4      	b.n	8009952 <_printf_i+0x16a>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	4632      	mov	r2, r6
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	4640      	mov	r0, r8
 8009a10:	47d0      	blx	sl
 8009a12:	3001      	adds	r0, #1
 8009a14:	d09b      	beq.n	800994e <_printf_i+0x166>
 8009a16:	3501      	adds	r5, #1
 8009a18:	68e3      	ldr	r3, [r4, #12]
 8009a1a:	9903      	ldr	r1, [sp, #12]
 8009a1c:	1a5b      	subs	r3, r3, r1
 8009a1e:	42ab      	cmp	r3, r5
 8009a20:	dcf2      	bgt.n	8009a08 <_printf_i+0x220>
 8009a22:	e7eb      	b.n	80099fc <_printf_i+0x214>
 8009a24:	2500      	movs	r5, #0
 8009a26:	f104 0619 	add.w	r6, r4, #25
 8009a2a:	e7f5      	b.n	8009a18 <_printf_i+0x230>
 8009a2c:	0800a3a9 	.word	0x0800a3a9
 8009a30:	0800a3ba 	.word	0x0800a3ba

08009a34 <__sread>:
 8009a34:	b510      	push	{r4, lr}
 8009a36:	460c      	mov	r4, r1
 8009a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3c:	f000 fabc 	bl	8009fb8 <_read_r>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	bfab      	itete	ge
 8009a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a46:	89a3      	ldrhlt	r3, [r4, #12]
 8009a48:	181b      	addge	r3, r3, r0
 8009a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a4e:	bfac      	ite	ge
 8009a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a52:	81a3      	strhlt	r3, [r4, #12]
 8009a54:	bd10      	pop	{r4, pc}

08009a56 <__swrite>:
 8009a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5a:	461f      	mov	r7, r3
 8009a5c:	898b      	ldrh	r3, [r1, #12]
 8009a5e:	4605      	mov	r5, r0
 8009a60:	05db      	lsls	r3, r3, #23
 8009a62:	460c      	mov	r4, r1
 8009a64:	4616      	mov	r6, r2
 8009a66:	d505      	bpl.n	8009a74 <__swrite+0x1e>
 8009a68:	2302      	movs	r3, #2
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a70:	f000 f9c4 	bl	8009dfc <_lseek_r>
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	4632      	mov	r2, r6
 8009a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a7c:	81a3      	strh	r3, [r4, #12]
 8009a7e:	4628      	mov	r0, r5
 8009a80:	463b      	mov	r3, r7
 8009a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8a:	f000 b869 	b.w	8009b60 <_write_r>

08009a8e <__sseek>:
 8009a8e:	b510      	push	{r4, lr}
 8009a90:	460c      	mov	r4, r1
 8009a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a96:	f000 f9b1 	bl	8009dfc <_lseek_r>
 8009a9a:	1c43      	adds	r3, r0, #1
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	bf15      	itete	ne
 8009aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009aaa:	81a3      	strheq	r3, [r4, #12]
 8009aac:	bf18      	it	ne
 8009aae:	81a3      	strhne	r3, [r4, #12]
 8009ab0:	bd10      	pop	{r4, pc}

08009ab2 <__sclose>:
 8009ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab6:	f000 b8d3 	b.w	8009c60 <_close_r>
	...

08009abc <__swbuf_r>:
 8009abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009abe:	460e      	mov	r6, r1
 8009ac0:	4614      	mov	r4, r2
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	b118      	cbz	r0, 8009ace <__swbuf_r+0x12>
 8009ac6:	6983      	ldr	r3, [r0, #24]
 8009ac8:	b90b      	cbnz	r3, 8009ace <__swbuf_r+0x12>
 8009aca:	f7ff fabd 	bl	8009048 <__sinit>
 8009ace:	4b21      	ldr	r3, [pc, #132]	; (8009b54 <__swbuf_r+0x98>)
 8009ad0:	429c      	cmp	r4, r3
 8009ad2:	d12b      	bne.n	8009b2c <__swbuf_r+0x70>
 8009ad4:	686c      	ldr	r4, [r5, #4]
 8009ad6:	69a3      	ldr	r3, [r4, #24]
 8009ad8:	60a3      	str	r3, [r4, #8]
 8009ada:	89a3      	ldrh	r3, [r4, #12]
 8009adc:	071a      	lsls	r2, r3, #28
 8009ade:	d52f      	bpl.n	8009b40 <__swbuf_r+0x84>
 8009ae0:	6923      	ldr	r3, [r4, #16]
 8009ae2:	b36b      	cbz	r3, 8009b40 <__swbuf_r+0x84>
 8009ae4:	6923      	ldr	r3, [r4, #16]
 8009ae6:	6820      	ldr	r0, [r4, #0]
 8009ae8:	b2f6      	uxtb	r6, r6
 8009aea:	1ac0      	subs	r0, r0, r3
 8009aec:	6963      	ldr	r3, [r4, #20]
 8009aee:	4637      	mov	r7, r6
 8009af0:	4283      	cmp	r3, r0
 8009af2:	dc04      	bgt.n	8009afe <__swbuf_r+0x42>
 8009af4:	4621      	mov	r1, r4
 8009af6:	4628      	mov	r0, r5
 8009af8:	f000 f944 	bl	8009d84 <_fflush_r>
 8009afc:	bb30      	cbnz	r0, 8009b4c <__swbuf_r+0x90>
 8009afe:	68a3      	ldr	r3, [r4, #8]
 8009b00:	3001      	adds	r0, #1
 8009b02:	3b01      	subs	r3, #1
 8009b04:	60a3      	str	r3, [r4, #8]
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	6022      	str	r2, [r4, #0]
 8009b0c:	701e      	strb	r6, [r3, #0]
 8009b0e:	6963      	ldr	r3, [r4, #20]
 8009b10:	4283      	cmp	r3, r0
 8009b12:	d004      	beq.n	8009b1e <__swbuf_r+0x62>
 8009b14:	89a3      	ldrh	r3, [r4, #12]
 8009b16:	07db      	lsls	r3, r3, #31
 8009b18:	d506      	bpl.n	8009b28 <__swbuf_r+0x6c>
 8009b1a:	2e0a      	cmp	r6, #10
 8009b1c:	d104      	bne.n	8009b28 <__swbuf_r+0x6c>
 8009b1e:	4621      	mov	r1, r4
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 f92f 	bl	8009d84 <_fflush_r>
 8009b26:	b988      	cbnz	r0, 8009b4c <__swbuf_r+0x90>
 8009b28:	4638      	mov	r0, r7
 8009b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b2c:	4b0a      	ldr	r3, [pc, #40]	; (8009b58 <__swbuf_r+0x9c>)
 8009b2e:	429c      	cmp	r4, r3
 8009b30:	d101      	bne.n	8009b36 <__swbuf_r+0x7a>
 8009b32:	68ac      	ldr	r4, [r5, #8]
 8009b34:	e7cf      	b.n	8009ad6 <__swbuf_r+0x1a>
 8009b36:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <__swbuf_r+0xa0>)
 8009b38:	429c      	cmp	r4, r3
 8009b3a:	bf08      	it	eq
 8009b3c:	68ec      	ldreq	r4, [r5, #12]
 8009b3e:	e7ca      	b.n	8009ad6 <__swbuf_r+0x1a>
 8009b40:	4621      	mov	r1, r4
 8009b42:	4628      	mov	r0, r5
 8009b44:	f000 f81e 	bl	8009b84 <__swsetup_r>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d0cb      	beq.n	8009ae4 <__swbuf_r+0x28>
 8009b4c:	f04f 37ff 	mov.w	r7, #4294967295
 8009b50:	e7ea      	b.n	8009b28 <__swbuf_r+0x6c>
 8009b52:	bf00      	nop
 8009b54:	0800a358 	.word	0x0800a358
 8009b58:	0800a378 	.word	0x0800a378
 8009b5c:	0800a338 	.word	0x0800a338

08009b60 <_write_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4604      	mov	r4, r0
 8009b64:	4608      	mov	r0, r1
 8009b66:	4611      	mov	r1, r2
 8009b68:	2200      	movs	r2, #0
 8009b6a:	4d05      	ldr	r5, [pc, #20]	; (8009b80 <_write_r+0x20>)
 8009b6c:	602a      	str	r2, [r5, #0]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	f7f6 fb1a 	bl	80001a8 <_write>
 8009b74:	1c43      	adds	r3, r0, #1
 8009b76:	d102      	bne.n	8009b7e <_write_r+0x1e>
 8009b78:	682b      	ldr	r3, [r5, #0]
 8009b7a:	b103      	cbz	r3, 8009b7e <_write_r+0x1e>
 8009b7c:	6023      	str	r3, [r4, #0]
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}
 8009b80:	20001480 	.word	0x20001480

08009b84 <__swsetup_r>:
 8009b84:	4b32      	ldr	r3, [pc, #200]	; (8009c50 <__swsetup_r+0xcc>)
 8009b86:	b570      	push	{r4, r5, r6, lr}
 8009b88:	681d      	ldr	r5, [r3, #0]
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	b125      	cbz	r5, 8009b9a <__swsetup_r+0x16>
 8009b90:	69ab      	ldr	r3, [r5, #24]
 8009b92:	b913      	cbnz	r3, 8009b9a <__swsetup_r+0x16>
 8009b94:	4628      	mov	r0, r5
 8009b96:	f7ff fa57 	bl	8009048 <__sinit>
 8009b9a:	4b2e      	ldr	r3, [pc, #184]	; (8009c54 <__swsetup_r+0xd0>)
 8009b9c:	429c      	cmp	r4, r3
 8009b9e:	d10f      	bne.n	8009bc0 <__swsetup_r+0x3c>
 8009ba0:	686c      	ldr	r4, [r5, #4]
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ba8:	0719      	lsls	r1, r3, #28
 8009baa:	d42c      	bmi.n	8009c06 <__swsetup_r+0x82>
 8009bac:	06dd      	lsls	r5, r3, #27
 8009bae:	d411      	bmi.n	8009bd4 <__swsetup_r+0x50>
 8009bb0:	2309      	movs	r3, #9
 8009bb2:	6033      	str	r3, [r6, #0]
 8009bb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbc:	81a3      	strh	r3, [r4, #12]
 8009bbe:	e03e      	b.n	8009c3e <__swsetup_r+0xba>
 8009bc0:	4b25      	ldr	r3, [pc, #148]	; (8009c58 <__swsetup_r+0xd4>)
 8009bc2:	429c      	cmp	r4, r3
 8009bc4:	d101      	bne.n	8009bca <__swsetup_r+0x46>
 8009bc6:	68ac      	ldr	r4, [r5, #8]
 8009bc8:	e7eb      	b.n	8009ba2 <__swsetup_r+0x1e>
 8009bca:	4b24      	ldr	r3, [pc, #144]	; (8009c5c <__swsetup_r+0xd8>)
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	bf08      	it	eq
 8009bd0:	68ec      	ldreq	r4, [r5, #12]
 8009bd2:	e7e6      	b.n	8009ba2 <__swsetup_r+0x1e>
 8009bd4:	0758      	lsls	r0, r3, #29
 8009bd6:	d512      	bpl.n	8009bfe <__swsetup_r+0x7a>
 8009bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bda:	b141      	cbz	r1, 8009bee <__swsetup_r+0x6a>
 8009bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009be0:	4299      	cmp	r1, r3
 8009be2:	d002      	beq.n	8009bea <__swsetup_r+0x66>
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7ff f8ab 	bl	8008d40 <_free_r>
 8009bea:	2300      	movs	r3, #0
 8009bec:	6363      	str	r3, [r4, #52]	; 0x34
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bf4:	81a3      	strh	r3, [r4, #12]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	6063      	str	r3, [r4, #4]
 8009bfa:	6923      	ldr	r3, [r4, #16]
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f043 0308 	orr.w	r3, r3, #8
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	6923      	ldr	r3, [r4, #16]
 8009c08:	b94b      	cbnz	r3, 8009c1e <__swsetup_r+0x9a>
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c14:	d003      	beq.n	8009c1e <__swsetup_r+0x9a>
 8009c16:	4621      	mov	r1, r4
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f000 f927 	bl	8009e6c <__smakebuf_r>
 8009c1e:	89a0      	ldrh	r0, [r4, #12]
 8009c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c24:	f010 0301 	ands.w	r3, r0, #1
 8009c28:	d00a      	beq.n	8009c40 <__swsetup_r+0xbc>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60a3      	str	r3, [r4, #8]
 8009c2e:	6963      	ldr	r3, [r4, #20]
 8009c30:	425b      	negs	r3, r3
 8009c32:	61a3      	str	r3, [r4, #24]
 8009c34:	6923      	ldr	r3, [r4, #16]
 8009c36:	b943      	cbnz	r3, 8009c4a <__swsetup_r+0xc6>
 8009c38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c3c:	d1ba      	bne.n	8009bb4 <__swsetup_r+0x30>
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	0781      	lsls	r1, r0, #30
 8009c42:	bf58      	it	pl
 8009c44:	6963      	ldrpl	r3, [r4, #20]
 8009c46:	60a3      	str	r3, [r4, #8]
 8009c48:	e7f4      	b.n	8009c34 <__swsetup_r+0xb0>
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	e7f7      	b.n	8009c3e <__swsetup_r+0xba>
 8009c4e:	bf00      	nop
 8009c50:	2000017c 	.word	0x2000017c
 8009c54:	0800a358 	.word	0x0800a358
 8009c58:	0800a378 	.word	0x0800a378
 8009c5c:	0800a338 	.word	0x0800a338

08009c60 <_close_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	2300      	movs	r3, #0
 8009c64:	4d05      	ldr	r5, [pc, #20]	; (8009c7c <_close_r+0x1c>)
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	f7f6 ff27 	bl	8000abe <_close>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_close_r+0x1a>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_close_r+0x1a>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	20001480 	.word	0x20001480

08009c80 <__sflush_r>:
 8009c80:	898a      	ldrh	r2, [r1, #12]
 8009c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c84:	4605      	mov	r5, r0
 8009c86:	0710      	lsls	r0, r2, #28
 8009c88:	460c      	mov	r4, r1
 8009c8a:	d457      	bmi.n	8009d3c <__sflush_r+0xbc>
 8009c8c:	684b      	ldr	r3, [r1, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	dc04      	bgt.n	8009c9c <__sflush_r+0x1c>
 8009c92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dc01      	bgt.n	8009c9c <__sflush_r+0x1c>
 8009c98:	2000      	movs	r0, #0
 8009c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c9e:	2e00      	cmp	r6, #0
 8009ca0:	d0fa      	beq.n	8009c98 <__sflush_r+0x18>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ca8:	682f      	ldr	r7, [r5, #0]
 8009caa:	602b      	str	r3, [r5, #0]
 8009cac:	d032      	beq.n	8009d14 <__sflush_r+0x94>
 8009cae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cb0:	89a3      	ldrh	r3, [r4, #12]
 8009cb2:	075a      	lsls	r2, r3, #29
 8009cb4:	d505      	bpl.n	8009cc2 <__sflush_r+0x42>
 8009cb6:	6863      	ldr	r3, [r4, #4]
 8009cb8:	1ac0      	subs	r0, r0, r3
 8009cba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cbc:	b10b      	cbz	r3, 8009cc2 <__sflush_r+0x42>
 8009cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cc0:	1ac0      	subs	r0, r0, r3
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cc8:	4628      	mov	r0, r5
 8009cca:	6a21      	ldr	r1, [r4, #32]
 8009ccc:	47b0      	blx	r6
 8009cce:	1c43      	adds	r3, r0, #1
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	d106      	bne.n	8009ce2 <__sflush_r+0x62>
 8009cd4:	6829      	ldr	r1, [r5, #0]
 8009cd6:	291d      	cmp	r1, #29
 8009cd8:	d82c      	bhi.n	8009d34 <__sflush_r+0xb4>
 8009cda:	4a29      	ldr	r2, [pc, #164]	; (8009d80 <__sflush_r+0x100>)
 8009cdc:	40ca      	lsrs	r2, r1
 8009cde:	07d6      	lsls	r6, r2, #31
 8009ce0:	d528      	bpl.n	8009d34 <__sflush_r+0xb4>
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	6062      	str	r2, [r4, #4]
 8009ce6:	6922      	ldr	r2, [r4, #16]
 8009ce8:	04d9      	lsls	r1, r3, #19
 8009cea:	6022      	str	r2, [r4, #0]
 8009cec:	d504      	bpl.n	8009cf8 <__sflush_r+0x78>
 8009cee:	1c42      	adds	r2, r0, #1
 8009cf0:	d101      	bne.n	8009cf6 <__sflush_r+0x76>
 8009cf2:	682b      	ldr	r3, [r5, #0]
 8009cf4:	b903      	cbnz	r3, 8009cf8 <__sflush_r+0x78>
 8009cf6:	6560      	str	r0, [r4, #84]	; 0x54
 8009cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cfa:	602f      	str	r7, [r5, #0]
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	d0cb      	beq.n	8009c98 <__sflush_r+0x18>
 8009d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d04:	4299      	cmp	r1, r3
 8009d06:	d002      	beq.n	8009d0e <__sflush_r+0x8e>
 8009d08:	4628      	mov	r0, r5
 8009d0a:	f7ff f819 	bl	8008d40 <_free_r>
 8009d0e:	2000      	movs	r0, #0
 8009d10:	6360      	str	r0, [r4, #52]	; 0x34
 8009d12:	e7c2      	b.n	8009c9a <__sflush_r+0x1a>
 8009d14:	6a21      	ldr	r1, [r4, #32]
 8009d16:	2301      	movs	r3, #1
 8009d18:	4628      	mov	r0, r5
 8009d1a:	47b0      	blx	r6
 8009d1c:	1c41      	adds	r1, r0, #1
 8009d1e:	d1c7      	bne.n	8009cb0 <__sflush_r+0x30>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0c4      	beq.n	8009cb0 <__sflush_r+0x30>
 8009d26:	2b1d      	cmp	r3, #29
 8009d28:	d001      	beq.n	8009d2e <__sflush_r+0xae>
 8009d2a:	2b16      	cmp	r3, #22
 8009d2c:	d101      	bne.n	8009d32 <__sflush_r+0xb2>
 8009d2e:	602f      	str	r7, [r5, #0]
 8009d30:	e7b2      	b.n	8009c98 <__sflush_r+0x18>
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d38:	81a3      	strh	r3, [r4, #12]
 8009d3a:	e7ae      	b.n	8009c9a <__sflush_r+0x1a>
 8009d3c:	690f      	ldr	r7, [r1, #16]
 8009d3e:	2f00      	cmp	r7, #0
 8009d40:	d0aa      	beq.n	8009c98 <__sflush_r+0x18>
 8009d42:	0793      	lsls	r3, r2, #30
 8009d44:	bf18      	it	ne
 8009d46:	2300      	movne	r3, #0
 8009d48:	680e      	ldr	r6, [r1, #0]
 8009d4a:	bf08      	it	eq
 8009d4c:	694b      	ldreq	r3, [r1, #20]
 8009d4e:	1bf6      	subs	r6, r6, r7
 8009d50:	600f      	str	r7, [r1, #0]
 8009d52:	608b      	str	r3, [r1, #8]
 8009d54:	2e00      	cmp	r6, #0
 8009d56:	dd9f      	ble.n	8009c98 <__sflush_r+0x18>
 8009d58:	4633      	mov	r3, r6
 8009d5a:	463a      	mov	r2, r7
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	6a21      	ldr	r1, [r4, #32]
 8009d60:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009d64:	47e0      	blx	ip
 8009d66:	2800      	cmp	r0, #0
 8009d68:	dc06      	bgt.n	8009d78 <__sflush_r+0xf8>
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	e790      	b.n	8009c9a <__sflush_r+0x1a>
 8009d78:	4407      	add	r7, r0
 8009d7a:	1a36      	subs	r6, r6, r0
 8009d7c:	e7ea      	b.n	8009d54 <__sflush_r+0xd4>
 8009d7e:	bf00      	nop
 8009d80:	20400001 	.word	0x20400001

08009d84 <_fflush_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	690b      	ldr	r3, [r1, #16]
 8009d88:	4605      	mov	r5, r0
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	b913      	cbnz	r3, 8009d94 <_fflush_r+0x10>
 8009d8e:	2500      	movs	r5, #0
 8009d90:	4628      	mov	r0, r5
 8009d92:	bd38      	pop	{r3, r4, r5, pc}
 8009d94:	b118      	cbz	r0, 8009d9e <_fflush_r+0x1a>
 8009d96:	6983      	ldr	r3, [r0, #24]
 8009d98:	b90b      	cbnz	r3, 8009d9e <_fflush_r+0x1a>
 8009d9a:	f7ff f955 	bl	8009048 <__sinit>
 8009d9e:	4b14      	ldr	r3, [pc, #80]	; (8009df0 <_fflush_r+0x6c>)
 8009da0:	429c      	cmp	r4, r3
 8009da2:	d11b      	bne.n	8009ddc <_fflush_r+0x58>
 8009da4:	686c      	ldr	r4, [r5, #4]
 8009da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d0ef      	beq.n	8009d8e <_fflush_r+0xa>
 8009dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009db0:	07d0      	lsls	r0, r2, #31
 8009db2:	d404      	bmi.n	8009dbe <_fflush_r+0x3a>
 8009db4:	0599      	lsls	r1, r3, #22
 8009db6:	d402      	bmi.n	8009dbe <_fflush_r+0x3a>
 8009db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dba:	f7ff f9e3 	bl	8009184 <__retarget_lock_acquire_recursive>
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	f7ff ff5d 	bl	8009c80 <__sflush_r>
 8009dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dc8:	4605      	mov	r5, r0
 8009dca:	07da      	lsls	r2, r3, #31
 8009dcc:	d4e0      	bmi.n	8009d90 <_fflush_r+0xc>
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	059b      	lsls	r3, r3, #22
 8009dd2:	d4dd      	bmi.n	8009d90 <_fflush_r+0xc>
 8009dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dd6:	f7ff f9d6 	bl	8009186 <__retarget_lock_release_recursive>
 8009dda:	e7d9      	b.n	8009d90 <_fflush_r+0xc>
 8009ddc:	4b05      	ldr	r3, [pc, #20]	; (8009df4 <_fflush_r+0x70>)
 8009dde:	429c      	cmp	r4, r3
 8009de0:	d101      	bne.n	8009de6 <_fflush_r+0x62>
 8009de2:	68ac      	ldr	r4, [r5, #8]
 8009de4:	e7df      	b.n	8009da6 <_fflush_r+0x22>
 8009de6:	4b04      	ldr	r3, [pc, #16]	; (8009df8 <_fflush_r+0x74>)
 8009de8:	429c      	cmp	r4, r3
 8009dea:	bf08      	it	eq
 8009dec:	68ec      	ldreq	r4, [r5, #12]
 8009dee:	e7da      	b.n	8009da6 <_fflush_r+0x22>
 8009df0:	0800a358 	.word	0x0800a358
 8009df4:	0800a378 	.word	0x0800a378
 8009df8:	0800a338 	.word	0x0800a338

08009dfc <_lseek_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4604      	mov	r4, r0
 8009e00:	4608      	mov	r0, r1
 8009e02:	4611      	mov	r1, r2
 8009e04:	2200      	movs	r2, #0
 8009e06:	4d05      	ldr	r5, [pc, #20]	; (8009e1c <_lseek_r+0x20>)
 8009e08:	602a      	str	r2, [r5, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f7f6 fe7b 	bl	8000b06 <_lseek>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_lseek_r+0x1e>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_lseek_r+0x1e>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	20001480 	.word	0x20001480

08009e20 <__swhatbuf_r>:
 8009e20:	b570      	push	{r4, r5, r6, lr}
 8009e22:	460e      	mov	r6, r1
 8009e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e28:	4614      	mov	r4, r2
 8009e2a:	2900      	cmp	r1, #0
 8009e2c:	461d      	mov	r5, r3
 8009e2e:	b096      	sub	sp, #88	; 0x58
 8009e30:	da08      	bge.n	8009e44 <__swhatbuf_r+0x24>
 8009e32:	2200      	movs	r2, #0
 8009e34:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e38:	602a      	str	r2, [r5, #0]
 8009e3a:	061a      	lsls	r2, r3, #24
 8009e3c:	d410      	bmi.n	8009e60 <__swhatbuf_r+0x40>
 8009e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e42:	e00e      	b.n	8009e62 <__swhatbuf_r+0x42>
 8009e44:	466a      	mov	r2, sp
 8009e46:	f000 f8c9 	bl	8009fdc <_fstat_r>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	dbf1      	blt.n	8009e32 <__swhatbuf_r+0x12>
 8009e4e:	9a01      	ldr	r2, [sp, #4]
 8009e50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e58:	425a      	negs	r2, r3
 8009e5a:	415a      	adcs	r2, r3
 8009e5c:	602a      	str	r2, [r5, #0]
 8009e5e:	e7ee      	b.n	8009e3e <__swhatbuf_r+0x1e>
 8009e60:	2340      	movs	r3, #64	; 0x40
 8009e62:	2000      	movs	r0, #0
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	b016      	add	sp, #88	; 0x58
 8009e68:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e6c <__smakebuf_r>:
 8009e6c:	898b      	ldrh	r3, [r1, #12]
 8009e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e70:	079d      	lsls	r5, r3, #30
 8009e72:	4606      	mov	r6, r0
 8009e74:	460c      	mov	r4, r1
 8009e76:	d507      	bpl.n	8009e88 <__smakebuf_r+0x1c>
 8009e78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	6123      	str	r3, [r4, #16]
 8009e80:	2301      	movs	r3, #1
 8009e82:	6163      	str	r3, [r4, #20]
 8009e84:	b002      	add	sp, #8
 8009e86:	bd70      	pop	{r4, r5, r6, pc}
 8009e88:	466a      	mov	r2, sp
 8009e8a:	ab01      	add	r3, sp, #4
 8009e8c:	f7ff ffc8 	bl	8009e20 <__swhatbuf_r>
 8009e90:	9900      	ldr	r1, [sp, #0]
 8009e92:	4605      	mov	r5, r0
 8009e94:	4630      	mov	r0, r6
 8009e96:	f7fe ffbb 	bl	8008e10 <_malloc_r>
 8009e9a:	b948      	cbnz	r0, 8009eb0 <__smakebuf_r+0x44>
 8009e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea0:	059a      	lsls	r2, r3, #22
 8009ea2:	d4ef      	bmi.n	8009e84 <__smakebuf_r+0x18>
 8009ea4:	f023 0303 	bic.w	r3, r3, #3
 8009ea8:	f043 0302 	orr.w	r3, r3, #2
 8009eac:	81a3      	strh	r3, [r4, #12]
 8009eae:	e7e3      	b.n	8009e78 <__smakebuf_r+0xc>
 8009eb0:	4b0d      	ldr	r3, [pc, #52]	; (8009ee8 <__smakebuf_r+0x7c>)
 8009eb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	6020      	str	r0, [r4, #0]
 8009eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ebc:	81a3      	strh	r3, [r4, #12]
 8009ebe:	9b00      	ldr	r3, [sp, #0]
 8009ec0:	6120      	str	r0, [r4, #16]
 8009ec2:	6163      	str	r3, [r4, #20]
 8009ec4:	9b01      	ldr	r3, [sp, #4]
 8009ec6:	b15b      	cbz	r3, 8009ee0 <__smakebuf_r+0x74>
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ece:	f000 f897 	bl	800a000 <_isatty_r>
 8009ed2:	b128      	cbz	r0, 8009ee0 <__smakebuf_r+0x74>
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	f023 0303 	bic.w	r3, r3, #3
 8009eda:	f043 0301 	orr.w	r3, r3, #1
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	89a0      	ldrh	r0, [r4, #12]
 8009ee2:	4305      	orrs	r5, r0
 8009ee4:	81a5      	strh	r5, [r4, #12]
 8009ee6:	e7cd      	b.n	8009e84 <__smakebuf_r+0x18>
 8009ee8:	08008fe1 	.word	0x08008fe1

08009eec <memchr>:
 8009eec:	4603      	mov	r3, r0
 8009eee:	b510      	push	{r4, lr}
 8009ef0:	b2c9      	uxtb	r1, r1
 8009ef2:	4402      	add	r2, r0
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	d101      	bne.n	8009efe <memchr+0x12>
 8009efa:	2000      	movs	r0, #0
 8009efc:	e003      	b.n	8009f06 <memchr+0x1a>
 8009efe:	7804      	ldrb	r4, [r0, #0]
 8009f00:	3301      	adds	r3, #1
 8009f02:	428c      	cmp	r4, r1
 8009f04:	d1f6      	bne.n	8009ef4 <memchr+0x8>
 8009f06:	bd10      	pop	{r4, pc}

08009f08 <memcpy>:
 8009f08:	440a      	add	r2, r1
 8009f0a:	4291      	cmp	r1, r2
 8009f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f10:	d100      	bne.n	8009f14 <memcpy+0xc>
 8009f12:	4770      	bx	lr
 8009f14:	b510      	push	{r4, lr}
 8009f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f1a:	4291      	cmp	r1, r2
 8009f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f20:	d1f9      	bne.n	8009f16 <memcpy+0xe>
 8009f22:	bd10      	pop	{r4, pc}

08009f24 <memmove>:
 8009f24:	4288      	cmp	r0, r1
 8009f26:	b510      	push	{r4, lr}
 8009f28:	eb01 0402 	add.w	r4, r1, r2
 8009f2c:	d902      	bls.n	8009f34 <memmove+0x10>
 8009f2e:	4284      	cmp	r4, r0
 8009f30:	4623      	mov	r3, r4
 8009f32:	d807      	bhi.n	8009f44 <memmove+0x20>
 8009f34:	1e43      	subs	r3, r0, #1
 8009f36:	42a1      	cmp	r1, r4
 8009f38:	d008      	beq.n	8009f4c <memmove+0x28>
 8009f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f42:	e7f8      	b.n	8009f36 <memmove+0x12>
 8009f44:	4601      	mov	r1, r0
 8009f46:	4402      	add	r2, r0
 8009f48:	428a      	cmp	r2, r1
 8009f4a:	d100      	bne.n	8009f4e <memmove+0x2a>
 8009f4c:	bd10      	pop	{r4, pc}
 8009f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f56:	e7f7      	b.n	8009f48 <memmove+0x24>

08009f58 <_realloc_r>:
 8009f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5c:	4680      	mov	r8, r0
 8009f5e:	4614      	mov	r4, r2
 8009f60:	460e      	mov	r6, r1
 8009f62:	b921      	cbnz	r1, 8009f6e <_realloc_r+0x16>
 8009f64:	4611      	mov	r1, r2
 8009f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f6a:	f7fe bf51 	b.w	8008e10 <_malloc_r>
 8009f6e:	b92a      	cbnz	r2, 8009f7c <_realloc_r+0x24>
 8009f70:	f7fe fee6 	bl	8008d40 <_free_r>
 8009f74:	4625      	mov	r5, r4
 8009f76:	4628      	mov	r0, r5
 8009f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f7c:	f000 f850 	bl	800a020 <_malloc_usable_size_r>
 8009f80:	4284      	cmp	r4, r0
 8009f82:	4607      	mov	r7, r0
 8009f84:	d802      	bhi.n	8009f8c <_realloc_r+0x34>
 8009f86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f8a:	d812      	bhi.n	8009fb2 <_realloc_r+0x5a>
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4640      	mov	r0, r8
 8009f90:	f7fe ff3e 	bl	8008e10 <_malloc_r>
 8009f94:	4605      	mov	r5, r0
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d0ed      	beq.n	8009f76 <_realloc_r+0x1e>
 8009f9a:	42bc      	cmp	r4, r7
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4631      	mov	r1, r6
 8009fa0:	bf28      	it	cs
 8009fa2:	463a      	movcs	r2, r7
 8009fa4:	f7ff ffb0 	bl	8009f08 <memcpy>
 8009fa8:	4631      	mov	r1, r6
 8009faa:	4640      	mov	r0, r8
 8009fac:	f7fe fec8 	bl	8008d40 <_free_r>
 8009fb0:	e7e1      	b.n	8009f76 <_realloc_r+0x1e>
 8009fb2:	4635      	mov	r5, r6
 8009fb4:	e7df      	b.n	8009f76 <_realloc_r+0x1e>
	...

08009fb8 <_read_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4604      	mov	r4, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	4d05      	ldr	r5, [pc, #20]	; (8009fd8 <_read_r+0x20>)
 8009fc4:	602a      	str	r2, [r5, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f7f6 fd5c 	bl	8000a84 <_read>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d102      	bne.n	8009fd6 <_read_r+0x1e>
 8009fd0:	682b      	ldr	r3, [r5, #0]
 8009fd2:	b103      	cbz	r3, 8009fd6 <_read_r+0x1e>
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
 8009fd8:	20001480 	.word	0x20001480

08009fdc <_fstat_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	2300      	movs	r3, #0
 8009fe0:	4d06      	ldr	r5, [pc, #24]	; (8009ffc <_fstat_r+0x20>)
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	f7f6 fd73 	bl	8000ad4 <_fstat>
 8009fee:	1c43      	adds	r3, r0, #1
 8009ff0:	d102      	bne.n	8009ff8 <_fstat_r+0x1c>
 8009ff2:	682b      	ldr	r3, [r5, #0]
 8009ff4:	b103      	cbz	r3, 8009ff8 <_fstat_r+0x1c>
 8009ff6:	6023      	str	r3, [r4, #0]
 8009ff8:	bd38      	pop	{r3, r4, r5, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20001480 	.word	0x20001480

0800a000 <_isatty_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	2300      	movs	r3, #0
 800a004:	4d05      	ldr	r5, [pc, #20]	; (800a01c <_isatty_r+0x1c>)
 800a006:	4604      	mov	r4, r0
 800a008:	4608      	mov	r0, r1
 800a00a:	602b      	str	r3, [r5, #0]
 800a00c:	f7f6 fd71 	bl	8000af2 <_isatty>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d102      	bne.n	800a01a <_isatty_r+0x1a>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	b103      	cbz	r3, 800a01a <_isatty_r+0x1a>
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	bd38      	pop	{r3, r4, r5, pc}
 800a01c:	20001480 	.word	0x20001480

0800a020 <_malloc_usable_size_r>:
 800a020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a024:	1f18      	subs	r0, r3, #4
 800a026:	2b00      	cmp	r3, #0
 800a028:	bfbc      	itt	lt
 800a02a:	580b      	ldrlt	r3, [r1, r0]
 800a02c:	18c0      	addlt	r0, r0, r3
 800a02e:	4770      	bx	lr

0800a030 <_init>:
 800a030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a032:	bf00      	nop
 800a034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a036:	bc08      	pop	{r3}
 800a038:	469e      	mov	lr, r3
 800a03a:	4770      	bx	lr

0800a03c <_fini>:
 800a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03e:	bf00      	nop
 800a040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a042:	bc08      	pop	{r3}
 800a044:	469e      	mov	lr, r3
 800a046:	4770      	bx	lr
